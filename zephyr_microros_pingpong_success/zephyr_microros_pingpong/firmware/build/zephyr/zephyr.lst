
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	2000bb48 	.word	0x2000bb48
 8000004:	08003f6d 	.word	0x08003f6d
 8000008:	080124ab 	.word	0x080124ab
 800000c:	08003f99 	.word	0x08003f99
 8000010:	08003f99 	.word	0x08003f99
 8000014:	08003f99 	.word	0x08003f99
 8000018:	08003f99 	.word	0x08003f99
	...
 800002c:	08003dc1 	.word	0x08003dc1
 8000030:	08003f99 	.word	0x08003f99
 8000034:	00000000 	.word	0x00000000
 8000038:	08003d6d 	.word	0x08003d6d
 800003c:	08003b8d 	.word	0x08003b8d

08000040 <_irq_vector_table>:
 8000040:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000050:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000060:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000070:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000080:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000090:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000a0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000b0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000c0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000d0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000e0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80000f0:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000100:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000110:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000120:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000130:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000140:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000150:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000160:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000170:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000180:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 8000190:	08003f45 08003f45 08003f45 08003f45     E?..E?..E?..E?..
 80001a0:	08003f45 08003f45 08003f45              E?..E?..E?..

Disassembly of section text:

080001c0 <strlen>:
 80001c0:	f890 f000 	pld	[r0]
 80001c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80001c8:	f020 0107 	bic.w	r1, r0, #7
 80001cc:	f06f 0c00 	mvn.w	ip, #0
 80001d0:	f010 0407 	ands.w	r4, r0, #7
 80001d4:	f891 f020 	pld	[r1, #32]
 80001d8:	f040 8049 	bne.w	800026e <strlen+0xae>
 80001dc:	f04f 0400 	mov.w	r4, #0
 80001e0:	f06f 0007 	mvn.w	r0, #7
 80001e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80001e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80001ec:	f100 0008 	add.w	r0, r0, #8
 80001f0:	fa82 f24c 	uadd8	r2, r2, ip
 80001f4:	faa4 f28c 	sel	r2, r4, ip
 80001f8:	fa83 f34c 	uadd8	r3, r3, ip
 80001fc:	faa2 f38c 	sel	r3, r2, ip
 8000200:	bb4b      	cbnz	r3, 8000256 <strlen+0x96>
 8000202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000206:	fa82 f24c 	uadd8	r2, r2, ip
 800020a:	f100 0008 	add.w	r0, r0, #8
 800020e:	faa4 f28c 	sel	r2, r4, ip
 8000212:	fa83 f34c 	uadd8	r3, r3, ip
 8000216:	faa2 f38c 	sel	r3, r2, ip
 800021a:	b9e3      	cbnz	r3, 8000256 <strlen+0x96>
 800021c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000220:	fa82 f24c 	uadd8	r2, r2, ip
 8000224:	f100 0008 	add.w	r0, r0, #8
 8000228:	faa4 f28c 	sel	r2, r4, ip
 800022c:	fa83 f34c 	uadd8	r3, r3, ip
 8000230:	faa2 f38c 	sel	r3, r2, ip
 8000234:	b97b      	cbnz	r3, 8000256 <strlen+0x96>
 8000236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800023a:	f101 0120 	add.w	r1, r1, #32
 800023e:	fa82 f24c 	uadd8	r2, r2, ip
 8000242:	f100 0008 	add.w	r0, r0, #8
 8000246:	faa4 f28c 	sel	r2, r4, ip
 800024a:	fa83 f34c 	uadd8	r3, r3, ip
 800024e:	faa2 f38c 	sel	r3, r2, ip
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0c6      	beq.n	80001e4 <strlen+0x24>
 8000256:	2a00      	cmp	r2, #0
 8000258:	bf04      	itt	eq
 800025a:	3004      	addeq	r0, #4
 800025c:	461a      	moveq	r2, r3
 800025e:	ba12      	rev	r2, r2
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800026c:	4770      	bx	lr
 800026e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000272:	f004 0503 	and.w	r5, r4, #3
 8000276:	f1c4 0000 	rsb	r0, r4, #0
 800027a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800027e:	f014 0f04 	tst.w	r4, #4
 8000282:	f891 f040 	pld	[r1, #64]	; 0x40
 8000286:	fa0c f505 	lsl.w	r5, ip, r5
 800028a:	ea62 0205 	orn	r2, r2, r5
 800028e:	bf1c      	itt	ne
 8000290:	ea63 0305 	ornne	r3, r3, r5
 8000294:	4662      	movne	r2, ip
 8000296:	f04f 0400 	mov.w	r4, #0
 800029a:	e7a9      	b.n	80001f0 <strlen+0x30>
 800029c:	0000      	movs	r0, r0
 800029e:	0000      	movs	r0, r0
 80002a0:	eba2 0003 	sub.w	r0, r2, r3
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop

080002a8 <strcmp>:
 80002a8:	7802      	ldrb	r2, [r0, #0]
 80002aa:	780b      	ldrb	r3, [r1, #0]
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d1f5      	bne.n	80002a0 <strlen+0xe0>
 80002b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80002b8:	ea40 0401 	orr.w	r4, r0, r1
 80002bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80002c0:	f06f 0c00 	mvn.w	ip, #0
 80002c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80002c8:	b312      	cbz	r2, 8000310 <strcmp+0x68>
 80002ca:	ea80 0401 	eor.w	r4, r0, r1
 80002ce:	f014 0f07 	tst.w	r4, #7
 80002d2:	d16a      	bne.n	80003aa <strcmp+0x102>
 80002d4:	f000 0407 	and.w	r4, r0, #7
 80002d8:	f020 0007 	bic.w	r0, r0, #7
 80002dc:	f004 0503 	and.w	r5, r4, #3
 80002e0:	f021 0107 	bic.w	r1, r1, #7
 80002e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80002ec:	f014 0f04 	tst.w	r4, #4
 80002f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80002f4:	fa0c f405 	lsl.w	r4, ip, r5
 80002f8:	ea62 0204 	orn	r2, r2, r4
 80002fc:	ea66 0604 	orn	r6, r6, r4
 8000300:	d00a      	beq.n	8000318 <strcmp+0x70>
 8000302:	ea63 0304 	orn	r3, r3, r4
 8000306:	4662      	mov	r2, ip
 8000308:	ea67 0704 	orn	r7, r7, r4
 800030c:	4666      	mov	r6, ip
 800030e:	e003      	b.n	8000318 <strcmp+0x70>
 8000310:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000314:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000318:	fa82 f54c 	uadd8	r5, r2, ip
 800031c:	ea82 0406 	eor.w	r4, r2, r6
 8000320:	faa4 f48c 	sel	r4, r4, ip
 8000324:	bb6c      	cbnz	r4, 8000382 <strcmp+0xda>
 8000326:	fa83 f54c 	uadd8	r5, r3, ip
 800032a:	ea83 0507 	eor.w	r5, r3, r7
 800032e:	faa5 f58c 	sel	r5, r5, ip
 8000332:	b995      	cbnz	r5, 800035a <strcmp+0xb2>
 8000334:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000338:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800033c:	fa82 f54c 	uadd8	r5, r2, ip
 8000340:	ea82 0406 	eor.w	r4, r2, r6
 8000344:	faa4 f48c 	sel	r4, r4, ip
 8000348:	fa83 f54c 	uadd8	r5, r3, ip
 800034c:	ea83 0507 	eor.w	r5, r3, r7
 8000350:	faa5 f58c 	sel	r5, r5, ip
 8000354:	4325      	orrs	r5, r4
 8000356:	d0db      	beq.n	8000310 <strcmp+0x68>
 8000358:	b99c      	cbnz	r4, 8000382 <strcmp+0xda>
 800035a:	ba2d      	rev	r5, r5
 800035c:	fab5 f485 	clz	r4, r5
 8000360:	f024 0407 	bic.w	r4, r4, #7
 8000364:	fa27 f104 	lsr.w	r1, r7, r4
 8000368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800036c:	fa23 f304 	lsr.w	r3, r3, r4
 8000370:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000374:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000378:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800037c:	eba0 0001 	sub.w	r0, r0, r1
 8000380:	4770      	bx	lr
 8000382:	ba24      	rev	r4, r4
 8000384:	fab4 f484 	clz	r4, r4
 8000388:	f024 0407 	bic.w	r4, r4, #7
 800038c:	fa26 f104 	lsr.w	r1, r6, r4
 8000390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000394:	fa22 f204 	lsr.w	r2, r2, r4
 8000398:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800039c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80003a4:	eba0 0001 	sub.w	r0, r0, r1
 80003a8:	4770      	bx	lr
 80003aa:	f014 0f03 	tst.w	r4, #3
 80003ae:	d13c      	bne.n	800042a <strcmp+0x182>
 80003b0:	f010 0403 	ands.w	r4, r0, #3
 80003b4:	d128      	bne.n	8000408 <strcmp+0x160>
 80003b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80003ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80003be:	fa82 f54c 	uadd8	r5, r2, ip
 80003c2:	ea82 0503 	eor.w	r5, r2, r3
 80003c6:	faa5 f58c 	sel	r5, r5, ip
 80003ca:	b95d      	cbnz	r5, 80003e4 <strcmp+0x13c>
 80003cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80003d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80003d4:	fa82 f54c 	uadd8	r5, r2, ip
 80003d8:	ea82 0503 	eor.w	r5, r2, r3
 80003dc:	faa5 f58c 	sel	r5, r5, ip
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d0e8      	beq.n	80003b6 <strcmp+0x10e>
 80003e4:	ba2d      	rev	r5, r5
 80003e6:	fab5 f485 	clz	r4, r5
 80003ea:	f024 0407 	bic.w	r4, r4, #7
 80003ee:	fa23 f104 	lsr.w	r1, r3, r4
 80003f2:	fa22 f204 	lsr.w	r2, r2, r4
 80003f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80003fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000402:	eba0 0001 	sub.w	r0, r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800040c:	f020 0003 	bic.w	r0, r0, #3
 8000410:	f850 2b08 	ldr.w	r2, [r0], #8
 8000414:	f021 0103 	bic.w	r1, r1, #3
 8000418:	f851 3b08 	ldr.w	r3, [r1], #8
 800041c:	fa0c f404 	lsl.w	r4, ip, r4
 8000420:	ea62 0204 	orn	r2, r2, r4
 8000424:	ea63 0304 	orn	r3, r3, r4
 8000428:	e7c9      	b.n	80003be <strcmp+0x116>
 800042a:	f010 0403 	ands.w	r4, r0, #3
 800042e:	d01a      	beq.n	8000466 <strcmp+0x1be>
 8000430:	eba1 0104 	sub.w	r1, r1, r4
 8000434:	f020 0003 	bic.w	r0, r0, #3
 8000438:	07e4      	lsls	r4, r4, #31
 800043a:	f850 2b04 	ldr.w	r2, [r0], #4
 800043e:	d006      	beq.n	800044e <strcmp+0x1a6>
 8000440:	d20f      	bcs.n	8000462 <strcmp+0x1ba>
 8000442:	788b      	ldrb	r3, [r1, #2]
 8000444:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	d106      	bne.n	800045a <strcmp+0x1b2>
 800044c:	b12b      	cbz	r3, 800045a <strcmp+0x1b2>
 800044e:	78cb      	ldrb	r3, [r1, #3]
 8000450:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	d100      	bne.n	800045a <strcmp+0x1b2>
 8000458:	b91b      	cbnz	r3, 8000462 <strcmp+0x1ba>
 800045a:	4620      	mov	r0, r4
 800045c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000460:	4770      	bx	lr
 8000462:	f101 0104 	add.w	r1, r1, #4
 8000466:	f850 2b04 	ldr.w	r2, [r0], #4
 800046a:	07cc      	lsls	r4, r1, #31
 800046c:	f021 0103 	bic.w	r1, r1, #3
 8000470:	f851 3b04 	ldr.w	r3, [r1], #4
 8000474:	d848      	bhi.n	8000508 <strcmp+0x260>
 8000476:	d224      	bcs.n	80004c2 <strcmp+0x21a>
 8000478:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800047c:	fa82 f54c 	uadd8	r5, r2, ip
 8000480:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000484:	faa5 f58c 	sel	r5, r5, ip
 8000488:	d10a      	bne.n	80004a0 <strcmp+0x1f8>
 800048a:	b965      	cbnz	r5, 80004a6 <strcmp+0x1fe>
 800048c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000490:	ea84 0402 	eor.w	r4, r4, r2
 8000494:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000498:	d10e      	bne.n	80004b8 <strcmp+0x210>
 800049a:	f850 2b04 	ldr.w	r2, [r0], #4
 800049e:	e7eb      	b.n	8000478 <strcmp+0x1d0>
 80004a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80004a4:	e055      	b.n	8000552 <strcmp+0x2aa>
 80004a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80004aa:	d14d      	bne.n	8000548 <strcmp+0x2a0>
 80004ac:	7808      	ldrb	r0, [r1, #0]
 80004ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004b2:	f1c0 0000 	rsb	r0, r0, #0
 80004b6:	4770      	bx	lr
 80004b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80004c0:	e047      	b.n	8000552 <strcmp+0x2aa>
 80004c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80004c6:	fa82 f54c 	uadd8	r5, r2, ip
 80004ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	d10a      	bne.n	80004ea <strcmp+0x242>
 80004d4:	b965      	cbnz	r5, 80004f0 <strcmp+0x248>
 80004d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80004da:	ea84 0402 	eor.w	r4, r4, r2
 80004de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80004e2:	d10c      	bne.n	80004fe <strcmp+0x256>
 80004e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80004e8:	e7eb      	b.n	80004c2 <strcmp+0x21a>
 80004ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004ee:	e030      	b.n	8000552 <strcmp+0x2aa>
 80004f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80004f4:	d128      	bne.n	8000548 <strcmp+0x2a0>
 80004f6:	880b      	ldrh	r3, [r1, #0]
 80004f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80004fc:	e029      	b.n	8000552 <strcmp+0x2aa>
 80004fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000502:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000506:	e024      	b.n	8000552 <strcmp+0x2aa>
 8000508:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800050c:	fa82 f54c 	uadd8	r5, r2, ip
 8000510:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000514:	faa5 f58c 	sel	r5, r5, ip
 8000518:	d10a      	bne.n	8000530 <strcmp+0x288>
 800051a:	b965      	cbnz	r5, 8000536 <strcmp+0x28e>
 800051c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000520:	ea84 0402 	eor.w	r4, r4, r2
 8000524:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000528:	d109      	bne.n	800053e <strcmp+0x296>
 800052a:	f850 2b04 	ldr.w	r2, [r0], #4
 800052e:	e7eb      	b.n	8000508 <strcmp+0x260>
 8000530:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000534:	e00d      	b.n	8000552 <strcmp+0x2aa>
 8000536:	f015 0fff 	tst.w	r5, #255	; 0xff
 800053a:	d105      	bne.n	8000548 <strcmp+0x2a0>
 800053c:	680b      	ldr	r3, [r1, #0]
 800053e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000546:	e004      	b.n	8000552 <strcmp+0x2aa>
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000550:	4770      	bx	lr
 8000552:	ba12      	rev	r2, r2
 8000554:	ba1b      	rev	r3, r3
 8000556:	fa82 f44c 	uadd8	r4, r2, ip
 800055a:	ea82 0403 	eor.w	r4, r2, r3
 800055e:	faa4 f58c 	sel	r5, r4, ip
 8000562:	fab5 f485 	clz	r4, r5
 8000566:	fa02 f204 	lsl.w	r2, r2, r4
 800056a:	fa03 f304 	lsl.w	r3, r3, r4
 800056e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000572:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000576:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800057a:	4770      	bx	lr
 800057c:	0000      	movs	r0, r0
	...

08000580 <memchr>:
 8000580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000584:	2a10      	cmp	r2, #16
 8000586:	db2b      	blt.n	80005e0 <memchr+0x60>
 8000588:	f010 0f07 	tst.w	r0, #7
 800058c:	d008      	beq.n	80005a0 <memchr+0x20>
 800058e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000592:	3a01      	subs	r2, #1
 8000594:	428b      	cmp	r3, r1
 8000596:	d02d      	beq.n	80005f4 <memchr+0x74>
 8000598:	f010 0f07 	tst.w	r0, #7
 800059c:	b342      	cbz	r2, 80005f0 <memchr+0x70>
 800059e:	d1f6      	bne.n	800058e <memchr+0xe>
 80005a0:	b4f0      	push	{r4, r5, r6, r7}
 80005a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80005a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80005aa:	f022 0407 	bic.w	r4, r2, #7
 80005ae:	f07f 0700 	mvns.w	r7, #0
 80005b2:	2300      	movs	r3, #0
 80005b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80005b8:	3c08      	subs	r4, #8
 80005ba:	ea85 0501 	eor.w	r5, r5, r1
 80005be:	ea86 0601 	eor.w	r6, r6, r1
 80005c2:	fa85 f547 	uadd8	r5, r5, r7
 80005c6:	faa3 f587 	sel	r5, r3, r7
 80005ca:	fa86 f647 	uadd8	r6, r6, r7
 80005ce:	faa5 f687 	sel	r6, r5, r7
 80005d2:	b98e      	cbnz	r6, 80005f8 <memchr+0x78>
 80005d4:	d1ee      	bne.n	80005b4 <memchr+0x34>
 80005d6:	bcf0      	pop	{r4, r5, r6, r7}
 80005d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80005dc:	f002 0207 	and.w	r2, r2, #7
 80005e0:	b132      	cbz	r2, 80005f0 <memchr+0x70>
 80005e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80005e6:	3a01      	subs	r2, #1
 80005e8:	ea83 0301 	eor.w	r3, r3, r1
 80005ec:	b113      	cbz	r3, 80005f4 <memchr+0x74>
 80005ee:	d1f8      	bne.n	80005e2 <memchr+0x62>
 80005f0:	2000      	movs	r0, #0
 80005f2:	4770      	bx	lr
 80005f4:	3801      	subs	r0, #1
 80005f6:	4770      	bx	lr
 80005f8:	2d00      	cmp	r5, #0
 80005fa:	bf06      	itte	eq
 80005fc:	4635      	moveq	r5, r6
 80005fe:	3803      	subeq	r0, #3
 8000600:	3807      	subne	r0, #7
 8000602:	f015 0f01 	tst.w	r5, #1
 8000606:	d107      	bne.n	8000618 <memchr+0x98>
 8000608:	3001      	adds	r0, #1
 800060a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800060e:	bf02      	ittt	eq
 8000610:	3001      	addeq	r0, #1
 8000612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000616:	3001      	addeq	r0, #1
 8000618:	bcf0      	pop	{r4, r5, r6, r7}
 800061a:	3801      	subs	r0, #1
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <__aeabi_drsub>:
 8000620:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000624:	e002      	b.n	800062c <__adddf3>
 8000626:	bf00      	nop

08000628 <__aeabi_dsub>:
 8000628:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800062c <__adddf3>:
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000632:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000636:	ea94 0f05 	teq	r4, r5
 800063a:	bf08      	it	eq
 800063c:	ea90 0f02 	teqeq	r0, r2
 8000640:	bf1f      	itttt	ne
 8000642:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000646:	ea55 0c02 	orrsne.w	ip, r5, r2
 800064a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800064e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000652:	f000 80e2 	beq.w	800081a <__adddf3+0x1ee>
 8000656:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800065a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800065e:	bfb8      	it	lt
 8000660:	426d      	neglt	r5, r5
 8000662:	dd0c      	ble.n	800067e <__adddf3+0x52>
 8000664:	442c      	add	r4, r5
 8000666:	ea80 0202 	eor.w	r2, r0, r2
 800066a:	ea81 0303 	eor.w	r3, r1, r3
 800066e:	ea82 0000 	eor.w	r0, r2, r0
 8000672:	ea83 0101 	eor.w	r1, r3, r1
 8000676:	ea80 0202 	eor.w	r2, r0, r2
 800067a:	ea81 0303 	eor.w	r3, r1, r3
 800067e:	2d36      	cmp	r5, #54	; 0x36
 8000680:	bf88      	it	hi
 8000682:	bd30      	pophi	{r4, r5, pc}
 8000684:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000688:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800068c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000690:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000694:	d002      	beq.n	800069c <__adddf3+0x70>
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80006a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80006a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80006a8:	d002      	beq.n	80006b0 <__adddf3+0x84>
 80006aa:	4252      	negs	r2, r2
 80006ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b0:	ea94 0f05 	teq	r4, r5
 80006b4:	f000 80a7 	beq.w	8000806 <__adddf3+0x1da>
 80006b8:	f1a4 0401 	sub.w	r4, r4, #1
 80006bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80006c0:	db0d      	blt.n	80006de <__adddf3+0xb2>
 80006c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80006c6:	fa22 f205 	lsr.w	r2, r2, r5
 80006ca:	1880      	adds	r0, r0, r2
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80006d4:	1880      	adds	r0, r0, r2
 80006d6:	fa43 f305 	asr.w	r3, r3, r5
 80006da:	4159      	adcs	r1, r3
 80006dc:	e00e      	b.n	80006fc <__adddf3+0xd0>
 80006de:	f1a5 0520 	sub.w	r5, r5, #32
 80006e2:	f10e 0e20 	add.w	lr, lr, #32
 80006e6:	2a01      	cmp	r2, #1
 80006e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80006ec:	bf28      	it	cs
 80006ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80006f2:	fa43 f305 	asr.w	r3, r3, r5
 80006f6:	18c0      	adds	r0, r0, r3
 80006f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000700:	d507      	bpl.n	8000712 <__adddf3+0xe6>
 8000702:	f04f 0e00 	mov.w	lr, #0
 8000706:	f1dc 0c00 	rsbs	ip, ip, #0
 800070a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800070e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000712:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000716:	d31b      	bcc.n	8000750 <__adddf3+0x124>
 8000718:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800071c:	d30c      	bcc.n	8000738 <__adddf3+0x10c>
 800071e:	0849      	lsrs	r1, r1, #1
 8000720:	ea5f 0030 	movs.w	r0, r0, rrx
 8000724:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000728:	f104 0401 	add.w	r4, r4, #1
 800072c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000730:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000734:	f080 809a 	bcs.w	800086c <__adddf3+0x240>
 8000738:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	ea41 0105 	orr.w	r1, r1, r5
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000754:	4140      	adcs	r0, r0
 8000756:	eb41 0101 	adc.w	r1, r1, r1
 800075a:	3c01      	subs	r4, #1
 800075c:	bf28      	it	cs
 800075e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000762:	d2e9      	bcs.n	8000738 <__adddf3+0x10c>
 8000764:	f091 0f00 	teq	r1, #0
 8000768:	bf04      	itt	eq
 800076a:	4601      	moveq	r1, r0
 800076c:	2000      	moveq	r0, #0
 800076e:	fab1 f381 	clz	r3, r1
 8000772:	bf08      	it	eq
 8000774:	3320      	addeq	r3, #32
 8000776:	f1a3 030b 	sub.w	r3, r3, #11
 800077a:	f1b3 0220 	subs.w	r2, r3, #32
 800077e:	da0c      	bge.n	800079a <__adddf3+0x16e>
 8000780:	320c      	adds	r2, #12
 8000782:	dd08      	ble.n	8000796 <__adddf3+0x16a>
 8000784:	f102 0c14 	add.w	ip, r2, #20
 8000788:	f1c2 020c 	rsb	r2, r2, #12
 800078c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000790:	fa21 f102 	lsr.w	r1, r1, r2
 8000794:	e00c      	b.n	80007b0 <__adddf3+0x184>
 8000796:	f102 0214 	add.w	r2, r2, #20
 800079a:	bfd8      	it	le
 800079c:	f1c2 0c20 	rsble	ip, r2, #32
 80007a0:	fa01 f102 	lsl.w	r1, r1, r2
 80007a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007a8:	bfdc      	itt	le
 80007aa:	ea41 010c 	orrle.w	r1, r1, ip
 80007ae:	4090      	lslle	r0, r2
 80007b0:	1ae4      	subs	r4, r4, r3
 80007b2:	bfa2      	ittt	ge
 80007b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80007b8:	4329      	orrge	r1, r5
 80007ba:	bd30      	popge	{r4, r5, pc}
 80007bc:	ea6f 0404 	mvn.w	r4, r4
 80007c0:	3c1f      	subs	r4, #31
 80007c2:	da1c      	bge.n	80007fe <__adddf3+0x1d2>
 80007c4:	340c      	adds	r4, #12
 80007c6:	dc0e      	bgt.n	80007e6 <__adddf3+0x1ba>
 80007c8:	f104 0414 	add.w	r4, r4, #20
 80007cc:	f1c4 0220 	rsb	r2, r4, #32
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f302 	lsl.w	r3, r1, r2
 80007d8:	ea40 0003 	orr.w	r0, r0, r3
 80007dc:	fa21 f304 	lsr.w	r3, r1, r4
 80007e0:	ea45 0103 	orr.w	r1, r5, r3
 80007e4:	bd30      	pop	{r4, r5, pc}
 80007e6:	f1c4 040c 	rsb	r4, r4, #12
 80007ea:	f1c4 0220 	rsb	r2, r4, #32
 80007ee:	fa20 f002 	lsr.w	r0, r0, r2
 80007f2:	fa01 f304 	lsl.w	r3, r1, r4
 80007f6:	ea40 0003 	orr.w	r0, r0, r3
 80007fa:	4629      	mov	r1, r5
 80007fc:	bd30      	pop	{r4, r5, pc}
 80007fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000802:	4629      	mov	r1, r5
 8000804:	bd30      	pop	{r4, r5, pc}
 8000806:	f094 0f00 	teq	r4, #0
 800080a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800080e:	bf06      	itte	eq
 8000810:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000814:	3401      	addeq	r4, #1
 8000816:	3d01      	subne	r5, #1
 8000818:	e74e      	b.n	80006b8 <__adddf3+0x8c>
 800081a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800081e:	bf18      	it	ne
 8000820:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000824:	d029      	beq.n	800087a <__adddf3+0x24e>
 8000826:	ea94 0f05 	teq	r4, r5
 800082a:	bf08      	it	eq
 800082c:	ea90 0f02 	teqeq	r0, r2
 8000830:	d005      	beq.n	800083e <__adddf3+0x212>
 8000832:	ea54 0c00 	orrs.w	ip, r4, r0
 8000836:	bf04      	itt	eq
 8000838:	4619      	moveq	r1, r3
 800083a:	4610      	moveq	r0, r2
 800083c:	bd30      	pop	{r4, r5, pc}
 800083e:	ea91 0f03 	teq	r1, r3
 8000842:	bf1e      	ittt	ne
 8000844:	2100      	movne	r1, #0
 8000846:	2000      	movne	r0, #0
 8000848:	bd30      	popne	{r4, r5, pc}
 800084a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800084e:	d105      	bne.n	800085c <__adddf3+0x230>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	4149      	adcs	r1, r1
 8000854:	bf28      	it	cs
 8000856:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800085a:	bd30      	pop	{r4, r5, pc}
 800085c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000860:	bf3c      	itt	cc
 8000862:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000866:	bd30      	popcc	{r4, r5, pc}
 8000868:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800086c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd30      	pop	{r4, r5, pc}
 800087a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800087e:	bf1a      	itte	ne
 8000880:	4619      	movne	r1, r3
 8000882:	4610      	movne	r0, r2
 8000884:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000888:	bf1c      	itt	ne
 800088a:	460b      	movne	r3, r1
 800088c:	4602      	movne	r2, r0
 800088e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000892:	bf06      	itte	eq
 8000894:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000898:	ea91 0f03 	teqeq	r1, r3
 800089c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80008a0:	bd30      	pop	{r4, r5, pc}
 80008a2:	bf00      	nop

080008a4 <__aeabi_ui2d>:
 80008a4:	f090 0f00 	teq	r0, #0
 80008a8:	bf04      	itt	eq
 80008aa:	2100      	moveq	r1, #0
 80008ac:	4770      	bxeq	lr
 80008ae:	b530      	push	{r4, r5, lr}
 80008b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008b8:	f04f 0500 	mov.w	r5, #0
 80008bc:	f04f 0100 	mov.w	r1, #0
 80008c0:	e750      	b.n	8000764 <__adddf3+0x138>
 80008c2:	bf00      	nop

080008c4 <__aeabi_i2d>:
 80008c4:	f090 0f00 	teq	r0, #0
 80008c8:	bf04      	itt	eq
 80008ca:	2100      	moveq	r1, #0
 80008cc:	4770      	bxeq	lr
 80008ce:	b530      	push	{r4, r5, lr}
 80008d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80008dc:	bf48      	it	mi
 80008de:	4240      	negmi	r0, r0
 80008e0:	f04f 0100 	mov.w	r1, #0
 80008e4:	e73e      	b.n	8000764 <__adddf3+0x138>
 80008e6:	bf00      	nop

080008e8 <__aeabi_f2d>:
 80008e8:	0042      	lsls	r2, r0, #1
 80008ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80008ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80008f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80008f6:	bf1f      	itttt	ne
 80008f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80008fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000900:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000904:	4770      	bxne	lr
 8000906:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800090a:	bf08      	it	eq
 800090c:	4770      	bxeq	lr
 800090e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000912:	bf04      	itt	eq
 8000914:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000918:	4770      	bxeq	lr
 800091a:	b530      	push	{r4, r5, lr}
 800091c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000924:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000928:	e71c      	b.n	8000764 <__adddf3+0x138>
 800092a:	bf00      	nop

0800092c <__aeabi_ul2d>:
 800092c:	ea50 0201 	orrs.w	r2, r0, r1
 8000930:	bf08      	it	eq
 8000932:	4770      	bxeq	lr
 8000934:	b530      	push	{r4, r5, lr}
 8000936:	f04f 0500 	mov.w	r5, #0
 800093a:	e00a      	b.n	8000952 <__aeabi_l2d+0x16>

0800093c <__aeabi_l2d>:
 800093c:	ea50 0201 	orrs.w	r2, r0, r1
 8000940:	bf08      	it	eq
 8000942:	4770      	bxeq	lr
 8000944:	b530      	push	{r4, r5, lr}
 8000946:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800094a:	d502      	bpl.n	8000952 <__aeabi_l2d+0x16>
 800094c:	4240      	negs	r0, r0
 800094e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000952:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000956:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800095a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800095e:	f43f aed8 	beq.w	8000712 <__adddf3+0xe6>
 8000962:	f04f 0203 	mov.w	r2, #3
 8000966:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800096a:	bf18      	it	ne
 800096c:	3203      	addne	r2, #3
 800096e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000972:	bf18      	it	ne
 8000974:	3203      	addne	r2, #3
 8000976:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800097a:	f1c2 0320 	rsb	r3, r2, #32
 800097e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	fa01 fe03 	lsl.w	lr, r1, r3
 800098a:	ea40 000e 	orr.w	r0, r0, lr
 800098e:	fa21 f102 	lsr.w	r1, r1, r2
 8000992:	4414      	add	r4, r2
 8000994:	e6bd      	b.n	8000712 <__adddf3+0xe6>
 8000996:	bf00      	nop

08000998 <__aeabi_dmul>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800099e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009a6:	bf1d      	ittte	ne
 80009a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009ac:	ea94 0f0c 	teqne	r4, ip
 80009b0:	ea95 0f0c 	teqne	r5, ip
 80009b4:	f000 f8de 	bleq	8000b74 <__aeabi_dmul+0x1dc>
 80009b8:	442c      	add	r4, r5
 80009ba:	ea81 0603 	eor.w	r6, r1, r3
 80009be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80009c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80009c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80009ca:	bf18      	it	ne
 80009cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009d8:	d038      	beq.n	8000a4c <__aeabi_dmul+0xb4>
 80009da:	fba0 ce02 	umull	ip, lr, r0, r2
 80009de:	f04f 0500 	mov.w	r5, #0
 80009e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80009e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80009ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80009ee:	f04f 0600 	mov.w	r6, #0
 80009f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80009f6:	f09c 0f00 	teq	ip, #0
 80009fa:	bf18      	it	ne
 80009fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a0c:	d204      	bcs.n	8000a18 <__aeabi_dmul+0x80>
 8000a0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a12:	416d      	adcs	r5, r5
 8000a14:	eb46 0606 	adc.w	r6, r6, r6
 8000a18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000a28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000a2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a30:	bf88      	it	hi
 8000a32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a36:	d81e      	bhi.n	8000a76 <__aeabi_dmul+0xde>
 8000a38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000a42:	f150 0000 	adcs.w	r0, r0, #0
 8000a46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000a50:	ea46 0101 	orr.w	r1, r6, r1
 8000a54:	ea40 0002 	orr.w	r0, r0, r2
 8000a58:	ea81 0103 	eor.w	r1, r1, r3
 8000a5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000a60:	bfc2      	ittt	gt
 8000a62:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a6a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a70:	f04f 0e00 	mov.w	lr, #0
 8000a74:	3c01      	subs	r4, #1
 8000a76:	f300 80ab 	bgt.w	8000bd0 <__aeabi_dmul+0x238>
 8000a7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000a7e:	bfde      	ittt	le
 8000a80:	2000      	movle	r0, #0
 8000a82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a86:	bd70      	pople	{r4, r5, r6, pc}
 8000a88:	f1c4 0400 	rsb	r4, r4, #0
 8000a8c:	3c20      	subs	r4, #32
 8000a8e:	da35      	bge.n	8000afc <__aeabi_dmul+0x164>
 8000a90:	340c      	adds	r4, #12
 8000a92:	dc1b      	bgt.n	8000acc <__aeabi_dmul+0x134>
 8000a94:	f104 0414 	add.w	r4, r4, #20
 8000a98:	f1c4 0520 	rsb	r5, r4, #32
 8000a9c:	fa00 f305 	lsl.w	r3, r0, r5
 8000aa0:	fa20 f004 	lsr.w	r0, r0, r4
 8000aa4:	fa01 f205 	lsl.w	r2, r1, r5
 8000aa8:	ea40 0002 	orr.w	r0, r0, r2
 8000aac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000ab0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ab4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ab8:	fa21 f604 	lsr.w	r6, r1, r4
 8000abc:	eb42 0106 	adc.w	r1, r2, r6
 8000ac0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ac4:	bf08      	it	eq
 8000ac6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f1c4 040c 	rsb	r4, r4, #12
 8000ad0:	f1c4 0520 	rsb	r5, r4, #32
 8000ad4:	fa00 f304 	lsl.w	r3, r0, r4
 8000ad8:	fa20 f005 	lsr.w	r0, r0, r5
 8000adc:	fa01 f204 	lsl.w	r2, r1, r4
 8000ae0:	ea40 0002 	orr.w	r0, r0, r2
 8000ae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ae8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000aec:	f141 0100 	adc.w	r1, r1, #0
 8000af0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000af4:	bf08      	it	eq
 8000af6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f1c4 0520 	rsb	r5, r4, #32
 8000b00:	fa00 f205 	lsl.w	r2, r0, r5
 8000b04:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b08:	fa20 f304 	lsr.w	r3, r0, r4
 8000b0c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b10:	ea43 0302 	orr.w	r3, r3, r2
 8000b14:	fa21 f004 	lsr.w	r0, r1, r4
 8000b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b1c:	fa21 f204 	lsr.w	r2, r1, r4
 8000b20:	ea20 0002 	bic.w	r0, r0, r2
 8000b24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b2c:	bf08      	it	eq
 8000b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b32:	bd70      	pop	{r4, r5, r6, pc}
 8000b34:	f094 0f00 	teq	r4, #0
 8000b38:	d10f      	bne.n	8000b5a <__aeabi_dmul+0x1c2>
 8000b3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000b3e:	0040      	lsls	r0, r0, #1
 8000b40:	eb41 0101 	adc.w	r1, r1, r1
 8000b44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b48:	bf08      	it	eq
 8000b4a:	3c01      	subeq	r4, #1
 8000b4c:	d0f7      	beq.n	8000b3e <__aeabi_dmul+0x1a6>
 8000b4e:	ea41 0106 	orr.w	r1, r1, r6
 8000b52:	f095 0f00 	teq	r5, #0
 8000b56:	bf18      	it	ne
 8000b58:	4770      	bxne	lr
 8000b5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000b5e:	0052      	lsls	r2, r2, #1
 8000b60:	eb43 0303 	adc.w	r3, r3, r3
 8000b64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000b68:	bf08      	it	eq
 8000b6a:	3d01      	subeq	r5, #1
 8000b6c:	d0f7      	beq.n	8000b5e <__aeabi_dmul+0x1c6>
 8000b6e:	ea43 0306 	orr.w	r3, r3, r6
 8000b72:	4770      	bx	lr
 8000b74:	ea94 0f0c 	teq	r4, ip
 8000b78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b7c:	bf18      	it	ne
 8000b7e:	ea95 0f0c 	teqne	r5, ip
 8000b82:	d00c      	beq.n	8000b9e <__aeabi_dmul+0x206>
 8000b84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b88:	bf18      	it	ne
 8000b8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b8e:	d1d1      	bne.n	8000b34 <__aeabi_dmul+0x19c>
 8000b90:	ea81 0103 	eor.w	r1, r1, r3
 8000b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ba2:	bf06      	itte	eq
 8000ba4:	4610      	moveq	r0, r2
 8000ba6:	4619      	moveq	r1, r3
 8000ba8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bac:	d019      	beq.n	8000be2 <__aeabi_dmul+0x24a>
 8000bae:	ea94 0f0c 	teq	r4, ip
 8000bb2:	d102      	bne.n	8000bba <__aeabi_dmul+0x222>
 8000bb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000bb8:	d113      	bne.n	8000be2 <__aeabi_dmul+0x24a>
 8000bba:	ea95 0f0c 	teq	r5, ip
 8000bbe:	d105      	bne.n	8000bcc <__aeabi_dmul+0x234>
 8000bc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000bc4:	bf1c      	itt	ne
 8000bc6:	4610      	movne	r0, r2
 8000bc8:	4619      	movne	r1, r3
 8000bca:	d10a      	bne.n	8000be2 <__aeabi_dmul+0x24a>
 8000bcc:	ea81 0103 	eor.w	r1, r1, r3
 8000bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000bd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000bd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
 8000be2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000be6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000bea:	bd70      	pop	{r4, r5, r6, pc}

08000bec <__aeabi_ddiv>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000bf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000bfa:	bf1d      	ittte	ne
 8000bfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c00:	ea94 0f0c 	teqne	r4, ip
 8000c04:	ea95 0f0c 	teqne	r5, ip
 8000c08:	f000 f8a7 	bleq	8000d5a <__aeabi_ddiv+0x16e>
 8000c0c:	eba4 0405 	sub.w	r4, r4, r5
 8000c10:	ea81 0e03 	eor.w	lr, r1, r3
 8000c14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c1c:	f000 8088 	beq.w	8000d30 <__aeabi_ddiv+0x144>
 8000c20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000c28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000c2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000c30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000c34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000c38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000c3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000c40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000c44:	429d      	cmp	r5, r3
 8000c46:	bf08      	it	eq
 8000c48:	4296      	cmpeq	r6, r2
 8000c4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000c4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000c52:	d202      	bcs.n	8000c5a <__aeabi_ddiv+0x6e>
 8000c54:	085b      	lsrs	r3, r3, #1
 8000c56:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c5a:	1ab6      	subs	r6, r6, r2
 8000c5c:	eb65 0503 	sbc.w	r5, r5, r3
 8000c60:	085b      	lsrs	r3, r3, #1
 8000c62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000c6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000c6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c76:	bf22      	ittt	cs
 8000c78:	1ab6      	subcs	r6, r6, r2
 8000c7a:	4675      	movcs	r5, lr
 8000c7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c86:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c8e:	bf22      	ittt	cs
 8000c90:	1ab6      	subcs	r6, r6, r2
 8000c92:	4675      	movcs	r5, lr
 8000c94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c98:	085b      	lsrs	r3, r3, #1
 8000c9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ca6:	bf22      	ittt	cs
 8000ca8:	1ab6      	subcs	r6, r6, r2
 8000caa:	4675      	movcs	r5, lr
 8000cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cbe:	bf22      	ittt	cs
 8000cc0:	1ab6      	subcs	r6, r6, r2
 8000cc2:	4675      	movcs	r5, lr
 8000cc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cc8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000ccc:	d018      	beq.n	8000d00 <__aeabi_ddiv+0x114>
 8000cce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000cd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000cd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000cda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000cde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ce2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ce6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000cea:	d1c0      	bne.n	8000c6e <__aeabi_ddiv+0x82>
 8000cec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000cf0:	d10b      	bne.n	8000d0a <__aeabi_ddiv+0x11e>
 8000cf2:	ea41 0100 	orr.w	r1, r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000cfe:	e7b6      	b.n	8000c6e <__aeabi_ddiv+0x82>
 8000d00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000d04:	bf04      	itt	eq
 8000d06:	4301      	orreq	r1, r0
 8000d08:	2000      	moveq	r0, #0
 8000d0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000d0e:	bf88      	it	hi
 8000d10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000d14:	f63f aeaf 	bhi.w	8000a76 <__aeabi_dmul+0xde>
 8000d18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d1c:	bf04      	itt	eq
 8000d1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d26:	f150 0000 	adcs.w	r0, r0, #0
 8000d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000d34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000d38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000d3c:	bfc2      	ittt	gt
 8000d3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000d42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000d46:	bd70      	popgt	{r4, r5, r6, pc}
 8000d48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d4c:	f04f 0e00 	mov.w	lr, #0
 8000d50:	3c01      	subs	r4, #1
 8000d52:	e690      	b.n	8000a76 <__aeabi_dmul+0xde>
 8000d54:	ea45 0e06 	orr.w	lr, r5, r6
 8000d58:	e68d      	b.n	8000a76 <__aeabi_dmul+0xde>
 8000d5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d5e:	ea94 0f0c 	teq	r4, ip
 8000d62:	bf08      	it	eq
 8000d64:	ea95 0f0c 	teqeq	r5, ip
 8000d68:	f43f af3b 	beq.w	8000be2 <__aeabi_dmul+0x24a>
 8000d6c:	ea94 0f0c 	teq	r4, ip
 8000d70:	d10a      	bne.n	8000d88 <__aeabi_ddiv+0x19c>
 8000d72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d76:	f47f af34 	bne.w	8000be2 <__aeabi_dmul+0x24a>
 8000d7a:	ea95 0f0c 	teq	r5, ip
 8000d7e:	f47f af25 	bne.w	8000bcc <__aeabi_dmul+0x234>
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	e72c      	b.n	8000be2 <__aeabi_dmul+0x24a>
 8000d88:	ea95 0f0c 	teq	r5, ip
 8000d8c:	d106      	bne.n	8000d9c <__aeabi_ddiv+0x1b0>
 8000d8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d92:	f43f aefd 	beq.w	8000b90 <__aeabi_dmul+0x1f8>
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	e722      	b.n	8000be2 <__aeabi_dmul+0x24a>
 8000d9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000da0:	bf18      	it	ne
 8000da2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000da6:	f47f aec5 	bne.w	8000b34 <__aeabi_dmul+0x19c>
 8000daa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000dae:	f47f af0d 	bne.w	8000bcc <__aeabi_dmul+0x234>
 8000db2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000db6:	f47f aeeb 	bne.w	8000b90 <__aeabi_dmul+0x1f8>
 8000dba:	e712      	b.n	8000be2 <__aeabi_dmul+0x24a>

08000dbc <__aeabi_frsub>:
 8000dbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	e002      	b.n	8000dc8 <__addsf3>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_fsub>:
 8000dc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000dc8 <__addsf3>:
 8000dc8:	0042      	lsls	r2, r0, #1
 8000dca:	bf1f      	itttt	ne
 8000dcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dd0:	ea92 0f03 	teqne	r2, r3
 8000dd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ddc:	d06a      	beq.n	8000eb4 <__addsf3+0xec>
 8000dde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000de2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000de6:	bfc1      	itttt	gt
 8000de8:	18d2      	addgt	r2, r2, r3
 8000dea:	4041      	eorgt	r1, r0
 8000dec:	4048      	eorgt	r0, r1
 8000dee:	4041      	eorgt	r1, r0
 8000df0:	bfb8      	it	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	2b19      	cmp	r3, #25
 8000df6:	bf88      	it	hi
 8000df8:	4770      	bxhi	lr
 8000dfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000e06:	bf18      	it	ne
 8000e08:	4240      	negne	r0, r0
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000e12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000e16:	bf18      	it	ne
 8000e18:	4249      	negne	r1, r1
 8000e1a:	ea92 0f03 	teq	r2, r3
 8000e1e:	d03f      	beq.n	8000ea0 <__addsf3+0xd8>
 8000e20:	f1a2 0201 	sub.w	r2, r2, #1
 8000e24:	fa41 fc03 	asr.w	ip, r1, r3
 8000e28:	eb10 000c 	adds.w	r0, r0, ip
 8000e2c:	f1c3 0320 	rsb	r3, r3, #32
 8000e30:	fa01 f103 	lsl.w	r1, r1, r3
 8000e34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e38:	d502      	bpl.n	8000e40 <__addsf3+0x78>
 8000e3a:	4249      	negs	r1, r1
 8000e3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000e44:	d313      	bcc.n	8000e6e <__addsf3+0xa6>
 8000e46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e4a:	d306      	bcc.n	8000e5a <__addsf3+0x92>
 8000e4c:	0840      	lsrs	r0, r0, #1
 8000e4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e52:	f102 0201 	add.w	r2, r2, #1
 8000e56:	2afe      	cmp	r2, #254	; 0xfe
 8000e58:	d251      	bcs.n	8000efe <__addsf3+0x136>
 8000e5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	ea40 0003 	orr.w	r0, r0, r3
 8000e6c:	4770      	bx	lr
 8000e6e:	0049      	lsls	r1, r1, #1
 8000e70:	eb40 0000 	adc.w	r0, r0, r0
 8000e74:	3a01      	subs	r2, #1
 8000e76:	bf28      	it	cs
 8000e78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000e7c:	d2ed      	bcs.n	8000e5a <__addsf3+0x92>
 8000e7e:	fab0 fc80 	clz	ip, r0
 8000e82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e86:	ebb2 020c 	subs.w	r2, r2, ip
 8000e8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e8e:	bfaa      	itet	ge
 8000e90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e94:	4252      	neglt	r2, r2
 8000e96:	4318      	orrge	r0, r3
 8000e98:	bfbc      	itt	lt
 8000e9a:	40d0      	lsrlt	r0, r2
 8000e9c:	4318      	orrlt	r0, r3
 8000e9e:	4770      	bx	lr
 8000ea0:	f092 0f00 	teq	r2, #0
 8000ea4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ea8:	bf06      	itte	eq
 8000eaa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000eae:	3201      	addeq	r2, #1
 8000eb0:	3b01      	subne	r3, #1
 8000eb2:	e7b5      	b.n	8000e20 <__addsf3+0x58>
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d021      	beq.n	8000f08 <__addsf3+0x140>
 8000ec4:	ea92 0f03 	teq	r2, r3
 8000ec8:	d004      	beq.n	8000ed4 <__addsf3+0x10c>
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	bf08      	it	eq
 8000ed0:	4608      	moveq	r0, r1
 8000ed2:	4770      	bx	lr
 8000ed4:	ea90 0f01 	teq	r0, r1
 8000ed8:	bf1c      	itt	ne
 8000eda:	2000      	movne	r0, #0
 8000edc:	4770      	bxne	lr
 8000ede:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ee2:	d104      	bne.n	8000eee <__addsf3+0x126>
 8000ee4:	0040      	lsls	r0, r0, #1
 8000ee6:	bf28      	it	cs
 8000ee8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ef2:	bf3c      	itt	cc
 8000ef4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ef8:	4770      	bxcc	lr
 8000efa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000efe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000f02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f06:	4770      	bx	lr
 8000f08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000f0c:	bf16      	itet	ne
 8000f0e:	4608      	movne	r0, r1
 8000f10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f14:	4601      	movne	r1, r0
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	bf06      	itte	eq
 8000f1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f1e:	ea90 0f01 	teqeq	r0, r1
 8000f22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000f26:	4770      	bx	lr

08000f28 <__aeabi_ui2f>:
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e004      	b.n	8000f38 <__aeabi_i2f+0x8>
 8000f2e:	bf00      	nop

08000f30 <__aeabi_i2f>:
 8000f30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000f34:	bf48      	it	mi
 8000f36:	4240      	negmi	r0, r0
 8000f38:	ea5f 0c00 	movs.w	ip, r0
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000f44:	4601      	mov	r1, r0
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	e01c      	b.n	8000f86 <__aeabi_l2f+0x2a>

08000f4c <__aeabi_ul2f>:
 8000f4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f50:	bf08      	it	eq
 8000f52:	4770      	bxeq	lr
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e00a      	b.n	8000f70 <__aeabi_l2f+0x14>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_l2f>:
 8000f5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000f60:	bf08      	it	eq
 8000f62:	4770      	bxeq	lr
 8000f64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	d502      	bpl.n	8000f70 <__aeabi_l2f+0x14>
 8000f6a:	4240      	negs	r0, r0
 8000f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f70:	ea5f 0c01 	movs.w	ip, r1
 8000f74:	bf02      	ittt	eq
 8000f76:	4684      	moveq	ip, r0
 8000f78:	4601      	moveq	r1, r0
 8000f7a:	2000      	moveq	r0, #0
 8000f7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000f80:	bf08      	it	eq
 8000f82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000f86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000f8a:	fabc f28c 	clz	r2, ip
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f94:	db10      	blt.n	8000fb8 <__aeabi_l2f+0x5c>
 8000f96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9a:	4463      	add	r3, ip
 8000f9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fa0:	f1c2 0220 	rsb	r2, r2, #32
 8000fa4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fa8:	fa20 f202 	lsr.w	r2, r0, r2
 8000fac:	eb43 0002 	adc.w	r0, r3, r2
 8000fb0:	bf08      	it	eq
 8000fb2:	f020 0001 	biceq.w	r0, r0, #1
 8000fb6:	4770      	bx	lr
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fc0:	f1c2 0220 	rsb	r2, r2, #32
 8000fc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000fcc:	eb43 0002 	adc.w	r0, r3, r2
 8000fd0:	bf08      	it	eq
 8000fd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fd6:	4770      	bx	lr

08000fd8 <__aeabi_fmul>:
 8000fd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe0:	bf1e      	ittt	ne
 8000fe2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fe6:	ea92 0f0c 	teqne	r2, ip
 8000fea:	ea93 0f0c 	teqne	r3, ip
 8000fee:	d06f      	beq.n	80010d0 <__aeabi_fmul+0xf8>
 8000ff0:	441a      	add	r2, r3
 8000ff2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ff6:	0240      	lsls	r0, r0, #9
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ffe:	d01e      	beq.n	800103e <__aeabi_fmul+0x66>
 8001000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001004:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8001008:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800100c:	fba0 3101 	umull	r3, r1, r0, r1
 8001010:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001014:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001018:	bf3e      	ittt	cc
 800101a:	0049      	lslcc	r1, r1, #1
 800101c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8001020:	005b      	lslcc	r3, r3, #1
 8001022:	ea40 0001 	orr.w	r0, r0, r1
 8001026:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800102a:	2afd      	cmp	r2, #253	; 0xfd
 800102c:	d81d      	bhi.n	800106a <__aeabi_fmul+0x92>
 800102e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001032:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001036:	bf08      	it	eq
 8001038:	f020 0001 	biceq.w	r0, r0, #1
 800103c:	4770      	bx	lr
 800103e:	f090 0f00 	teq	r0, #0
 8001042:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001046:	bf08      	it	eq
 8001048:	0249      	lsleq	r1, r1, #9
 800104a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800104e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001052:	3a7f      	subs	r2, #127	; 0x7f
 8001054:	bfc2      	ittt	gt
 8001056:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800105a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800105e:	4770      	bxgt	lr
 8001060:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	3a01      	subs	r2, #1
 800106a:	dc5d      	bgt.n	8001128 <__aeabi_fmul+0x150>
 800106c:	f112 0f19 	cmn.w	r2, #25
 8001070:	bfdc      	itt	le
 8001072:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8001076:	4770      	bxle	lr
 8001078:	f1c2 0200 	rsb	r2, r2, #0
 800107c:	0041      	lsls	r1, r0, #1
 800107e:	fa21 f102 	lsr.w	r1, r1, r2
 8001082:	f1c2 0220 	rsb	r2, r2, #32
 8001086:	fa00 fc02 	lsl.w	ip, r0, r2
 800108a:	ea5f 0031 	movs.w	r0, r1, rrx
 800108e:	f140 0000 	adc.w	r0, r0, #0
 8001092:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8001096:	bf08      	it	eq
 8001098:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800109c:	4770      	bx	lr
 800109e:	f092 0f00 	teq	r2, #0
 80010a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a6:	bf02      	ittt	eq
 80010a8:	0040      	lsleq	r0, r0, #1
 80010aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010ae:	3a01      	subeq	r2, #1
 80010b0:	d0f9      	beq.n	80010a6 <__aeabi_fmul+0xce>
 80010b2:	ea40 000c 	orr.w	r0, r0, ip
 80010b6:	f093 0f00 	teq	r3, #0
 80010ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010be:	bf02      	ittt	eq
 80010c0:	0049      	lsleq	r1, r1, #1
 80010c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c6:	3b01      	subeq	r3, #1
 80010c8:	d0f9      	beq.n	80010be <__aeabi_fmul+0xe6>
 80010ca:	ea41 010c 	orr.w	r1, r1, ip
 80010ce:	e78f      	b.n	8000ff0 <__aeabi_fmul+0x18>
 80010d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d4:	ea92 0f0c 	teq	r2, ip
 80010d8:	bf18      	it	ne
 80010da:	ea93 0f0c 	teqne	r3, ip
 80010de:	d00a      	beq.n	80010f6 <__aeabi_fmul+0x11e>
 80010e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e4:	bf18      	it	ne
 80010e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010ea:	d1d8      	bne.n	800109e <__aeabi_fmul+0xc6>
 80010ec:	ea80 0001 	eor.w	r0, r0, r1
 80010f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80010f4:	4770      	bx	lr
 80010f6:	f090 0f00 	teq	r0, #0
 80010fa:	bf17      	itett	ne
 80010fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001100:	4608      	moveq	r0, r1
 8001102:	f091 0f00 	teqne	r1, #0
 8001106:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800110a:	d014      	beq.n	8001136 <__aeabi_fmul+0x15e>
 800110c:	ea92 0f0c 	teq	r2, ip
 8001110:	d101      	bne.n	8001116 <__aeabi_fmul+0x13e>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d10f      	bne.n	8001136 <__aeabi_fmul+0x15e>
 8001116:	ea93 0f0c 	teq	r3, ip
 800111a:	d103      	bne.n	8001124 <__aeabi_fmul+0x14c>
 800111c:	024b      	lsls	r3, r1, #9
 800111e:	bf18      	it	ne
 8001120:	4608      	movne	r0, r1
 8001122:	d108      	bne.n	8001136 <__aeabi_fmul+0x15e>
 8001124:	ea80 0001 	eor.w	r0, r0, r1
 8001128:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800112c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001130:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001134:	4770      	bx	lr
 8001136:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800113a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800113e:	4770      	bx	lr

08001140 <__aeabi_fdiv>:
 8001140:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001144:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001148:	bf1e      	ittt	ne
 800114a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800114e:	ea92 0f0c 	teqne	r2, ip
 8001152:	ea93 0f0c 	teqne	r3, ip
 8001156:	d069      	beq.n	800122c <__aeabi_fdiv+0xec>
 8001158:	eba2 0203 	sub.w	r2, r2, r3
 800115c:	ea80 0c01 	eor.w	ip, r0, r1
 8001160:	0249      	lsls	r1, r1, #9
 8001162:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001166:	d037      	beq.n	80011d8 <__aeabi_fdiv+0x98>
 8001168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800116c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001170:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001174:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001178:	428b      	cmp	r3, r1
 800117a:	bf38      	it	cc
 800117c:	005b      	lslcc	r3, r3, #1
 800117e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001182:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001186:	428b      	cmp	r3, r1
 8001188:	bf24      	itt	cs
 800118a:	1a5b      	subcs	r3, r3, r1
 800118c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001190:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001194:	bf24      	itt	cs
 8001196:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800119a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800119e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80011a2:	bf24      	itt	cs
 80011a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80011a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80011ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80011b0:	bf24      	itt	cs
 80011b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80011b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	bf18      	it	ne
 80011be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80011c2:	d1e0      	bne.n	8001186 <__aeabi_fdiv+0x46>
 80011c4:	2afd      	cmp	r2, #253	; 0xfd
 80011c6:	f63f af50 	bhi.w	800106a <__aeabi_fmul+0x92>
 80011ca:	428b      	cmp	r3, r1
 80011cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011d0:	bf08      	it	eq
 80011d2:	f020 0001 	biceq.w	r0, r0, #1
 80011d6:	4770      	bx	lr
 80011d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80011e0:	327f      	adds	r2, #127	; 0x7f
 80011e2:	bfc2      	ittt	gt
 80011e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80011e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80011ec:	4770      	bxgt	lr
 80011ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	3a01      	subs	r2, #1
 80011f8:	e737      	b.n	800106a <__aeabi_fmul+0x92>
 80011fa:	f092 0f00 	teq	r2, #0
 80011fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001202:	bf02      	ittt	eq
 8001204:	0040      	lsleq	r0, r0, #1
 8001206:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800120a:	3a01      	subeq	r2, #1
 800120c:	d0f9      	beq.n	8001202 <__aeabi_fdiv+0xc2>
 800120e:	ea40 000c 	orr.w	r0, r0, ip
 8001212:	f093 0f00 	teq	r3, #0
 8001216:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800121a:	bf02      	ittt	eq
 800121c:	0049      	lsleq	r1, r1, #1
 800121e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001222:	3b01      	subeq	r3, #1
 8001224:	d0f9      	beq.n	800121a <__aeabi_fdiv+0xda>
 8001226:	ea41 010c 	orr.w	r1, r1, ip
 800122a:	e795      	b.n	8001158 <__aeabi_fdiv+0x18>
 800122c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001230:	ea92 0f0c 	teq	r2, ip
 8001234:	d108      	bne.n	8001248 <__aeabi_fdiv+0x108>
 8001236:	0242      	lsls	r2, r0, #9
 8001238:	f47f af7d 	bne.w	8001136 <__aeabi_fmul+0x15e>
 800123c:	ea93 0f0c 	teq	r3, ip
 8001240:	f47f af70 	bne.w	8001124 <__aeabi_fmul+0x14c>
 8001244:	4608      	mov	r0, r1
 8001246:	e776      	b.n	8001136 <__aeabi_fmul+0x15e>
 8001248:	ea93 0f0c 	teq	r3, ip
 800124c:	d104      	bne.n	8001258 <__aeabi_fdiv+0x118>
 800124e:	024b      	lsls	r3, r1, #9
 8001250:	f43f af4c 	beq.w	80010ec <__aeabi_fmul+0x114>
 8001254:	4608      	mov	r0, r1
 8001256:	e76e      	b.n	8001136 <__aeabi_fmul+0x15e>
 8001258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800125c:	bf18      	it	ne
 800125e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001262:	d1ca      	bne.n	80011fa <__aeabi_fdiv+0xba>
 8001264:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001268:	f47f af5c 	bne.w	8001124 <__aeabi_fmul+0x14c>
 800126c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001270:	f47f af3c 	bne.w	80010ec <__aeabi_fmul+0x114>
 8001274:	e75f      	b.n	8001136 <__aeabi_fmul+0x15e>
 8001276:	bf00      	nop

08001278 <__aeabi_ldivmod>:
 8001278:	b97b      	cbnz	r3, 800129a <__aeabi_ldivmod+0x22>
 800127a:	b972      	cbnz	r2, 800129a <__aeabi_ldivmod+0x22>
 800127c:	2900      	cmp	r1, #0
 800127e:	bfbe      	ittt	lt
 8001280:	2000      	movlt	r0, #0
 8001282:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001286:	e006      	blt.n	8001296 <__aeabi_ldivmod+0x1e>
 8001288:	bf08      	it	eq
 800128a:	2800      	cmpeq	r0, #0
 800128c:	bf1c      	itt	ne
 800128e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001292:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001296:	f000 b9d9 	b.w	800164c <__aeabi_idiv0>
 800129a:	f1ad 0c08 	sub.w	ip, sp, #8
 800129e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80012a2:	2900      	cmp	r1, #0
 80012a4:	db09      	blt.n	80012ba <__aeabi_ldivmod+0x42>
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db1a      	blt.n	80012e0 <__aeabi_ldivmod+0x68>
 80012aa:	f000 f86d 	bl	8001388 <__udivmoddi4>
 80012ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012b6:	b004      	add	sp, #16
 80012b8:	4770      	bx	lr
 80012ba:	4240      	negs	r0, r0
 80012bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db1b      	blt.n	80012fc <__aeabi_ldivmod+0x84>
 80012c4:	f000 f860 	bl	8001388 <__udivmoddi4>
 80012c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012d0:	b004      	add	sp, #16
 80012d2:	4240      	negs	r0, r0
 80012d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012d8:	4252      	negs	r2, r2
 80012da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012de:	4770      	bx	lr
 80012e0:	4252      	negs	r2, r2
 80012e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012e6:	f000 f84f 	bl	8001388 <__udivmoddi4>
 80012ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012f2:	b004      	add	sp, #16
 80012f4:	4240      	negs	r0, r0
 80012f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012fa:	4770      	bx	lr
 80012fc:	4252      	negs	r2, r2
 80012fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001302:	f000 f841 	bl	8001388 <__udivmoddi4>
 8001306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800130a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800130e:	b004      	add	sp, #16
 8001310:	4252      	negs	r2, r2
 8001312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001316:	4770      	bx	lr

08001318 <__aeabi_uldivmod>:
 8001318:	b953      	cbnz	r3, 8001330 <__aeabi_uldivmod+0x18>
 800131a:	b94a      	cbnz	r2, 8001330 <__aeabi_uldivmod+0x18>
 800131c:	2900      	cmp	r1, #0
 800131e:	bf08      	it	eq
 8001320:	2800      	cmpeq	r0, #0
 8001322:	bf1c      	itt	ne
 8001324:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001328:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800132c:	f000 b98e 	b.w	800164c <__aeabi_idiv0>
 8001330:	f1ad 0c08 	sub.w	ip, sp, #8
 8001334:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001338:	f000 f826 	bl	8001388 <__udivmoddi4>
 800133c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001344:	b004      	add	sp, #16
 8001346:	4770      	bx	lr

08001348 <__aeabi_f2ulz>:
 8001348:	b5d0      	push	{r4, r6, r7, lr}
 800134a:	f7ff facd 	bl	80008e8 <__aeabi_f2d>
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__aeabi_f2ulz+0x38>)
 8001350:	2200      	movs	r2, #0
 8001352:	4606      	mov	r6, r0
 8001354:	460f      	mov	r7, r1
 8001356:	f7ff fb1f 	bl	8000998 <__aeabi_dmul>
 800135a:	f000 fa01 	bl	8001760 <__aeabi_d2uiz>
 800135e:	4604      	mov	r4, r0
 8001360:	f7ff faa0 	bl	80008a4 <__aeabi_ui2d>
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <__aeabi_f2ulz+0x3c>)
 8001366:	2200      	movs	r2, #0
 8001368:	f7ff fb16 	bl	8000998 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4630      	mov	r0, r6
 8001372:	4639      	mov	r1, r7
 8001374:	f7ff f958 	bl	8000628 <__aeabi_dsub>
 8001378:	f000 f9f2 	bl	8001760 <__aeabi_d2uiz>
 800137c:	4621      	mov	r1, r4
 800137e:	bdd0      	pop	{r4, r6, r7, pc}
 8001380:	3df00000 	.word	0x3df00000
 8001384:	41f00000 	.word	0x41f00000

08001388 <__udivmoddi4>:
 8001388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800138c:	9d08      	ldr	r5, [sp, #32]
 800138e:	460e      	mov	r6, r1
 8001390:	4604      	mov	r4, r0
 8001392:	468c      	mov	ip, r1
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 8081 	bne.w	800149c <__udivmoddi4+0x114>
 800139a:	428a      	cmp	r2, r1
 800139c:	4617      	mov	r7, r2
 800139e:	d945      	bls.n	800142c <__udivmoddi4+0xa4>
 80013a0:	fab2 f282 	clz	r2, r2
 80013a4:	b14a      	cbz	r2, 80013ba <__udivmoddi4+0x32>
 80013a6:	f1c2 0120 	rsb	r1, r2, #32
 80013aa:	fa06 f302 	lsl.w	r3, r6, r2
 80013ae:	fa20 f101 	lsr.w	r1, r0, r1
 80013b2:	4097      	lsls	r7, r2
 80013b4:	ea41 0c03 	orr.w	ip, r1, r3
 80013b8:	4094      	lsls	r4, r2
 80013ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013be:	0c23      	lsrs	r3, r4, #16
 80013c0:	fbbc f6fe 	udiv	r6, ip, lr
 80013c4:	b2b9      	uxth	r1, r7
 80013c6:	fb0e cc16 	mls	ip, lr, r6, ip
 80013ca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80013ce:	fb06 f001 	mul.w	r0, r6, r1
 80013d2:	4298      	cmp	r0, r3
 80013d4:	d909      	bls.n	80013ea <__udivmoddi4+0x62>
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80013dc:	f080 8115 	bcs.w	800160a <__udivmoddi4+0x282>
 80013e0:	4298      	cmp	r0, r3
 80013e2:	f240 8112 	bls.w	800160a <__udivmoddi4+0x282>
 80013e6:	3e02      	subs	r6, #2
 80013e8:	443b      	add	r3, r7
 80013ea:	1a1b      	subs	r3, r3, r0
 80013ec:	b2a4      	uxth	r4, r4
 80013ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80013f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80013f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013fa:	fb00 f101 	mul.w	r1, r0, r1
 80013fe:	42a1      	cmp	r1, r4
 8001400:	d909      	bls.n	8001416 <__udivmoddi4+0x8e>
 8001402:	193c      	adds	r4, r7, r4
 8001404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001408:	f080 8101 	bcs.w	800160e <__udivmoddi4+0x286>
 800140c:	42a1      	cmp	r1, r4
 800140e:	f240 80fe 	bls.w	800160e <__udivmoddi4+0x286>
 8001412:	3802      	subs	r0, #2
 8001414:	443c      	add	r4, r7
 8001416:	1a64      	subs	r4, r4, r1
 8001418:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800141c:	2100      	movs	r1, #0
 800141e:	b11d      	cbz	r5, 8001428 <__udivmoddi4+0xa0>
 8001420:	40d4      	lsrs	r4, r2
 8001422:	2300      	movs	r3, #0
 8001424:	e9c5 4300 	strd	r4, r3, [r5]
 8001428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800142c:	b902      	cbnz	r2, 8001430 <__udivmoddi4+0xa8>
 800142e:	deff      	udf	#255	; 0xff
 8001430:	fab2 f282 	clz	r2, r2
 8001434:	2a00      	cmp	r2, #0
 8001436:	d14f      	bne.n	80014d8 <__udivmoddi4+0x150>
 8001438:	1bcb      	subs	r3, r1, r7
 800143a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800143e:	fa1f f887 	uxth.w	r8, r7
 8001442:	2101      	movs	r1, #1
 8001444:	fbb3 fcfe 	udiv	ip, r3, lr
 8001448:	0c26      	lsrs	r6, r4, #16
 800144a:	fb0e 331c 	mls	r3, lr, ip, r3
 800144e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8001452:	fb08 f30c 	mul.w	r3, r8, ip
 8001456:	42b3      	cmp	r3, r6
 8001458:	d907      	bls.n	800146a <__udivmoddi4+0xe2>
 800145a:	19be      	adds	r6, r7, r6
 800145c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001460:	d202      	bcs.n	8001468 <__udivmoddi4+0xe0>
 8001462:	42b3      	cmp	r3, r6
 8001464:	f200 80eb 	bhi.w	800163e <__udivmoddi4+0x2b6>
 8001468:	4684      	mov	ip, r0
 800146a:	1af6      	subs	r6, r6, r3
 800146c:	b2a3      	uxth	r3, r4
 800146e:	fbb6 f0fe 	udiv	r0, r6, lr
 8001472:	fb0e 6610 	mls	r6, lr, r0, r6
 8001476:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 800147a:	fb08 f800 	mul.w	r8, r8, r0
 800147e:	45a0      	cmp	r8, r4
 8001480:	d907      	bls.n	8001492 <__udivmoddi4+0x10a>
 8001482:	193c      	adds	r4, r7, r4
 8001484:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001488:	d202      	bcs.n	8001490 <__udivmoddi4+0x108>
 800148a:	45a0      	cmp	r8, r4
 800148c:	f200 80d2 	bhi.w	8001634 <__udivmoddi4+0x2ac>
 8001490:	4618      	mov	r0, r3
 8001492:	eba4 0408 	sub.w	r4, r4, r8
 8001496:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800149a:	e7c0      	b.n	800141e <__udivmoddi4+0x96>
 800149c:	428b      	cmp	r3, r1
 800149e:	d908      	bls.n	80014b2 <__udivmoddi4+0x12a>
 80014a0:	2d00      	cmp	r5, #0
 80014a2:	f000 80af 	beq.w	8001604 <__udivmoddi4+0x27c>
 80014a6:	2100      	movs	r1, #0
 80014a8:	e9c5 0600 	strd	r0, r6, [r5]
 80014ac:	4608      	mov	r0, r1
 80014ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b2:	fab3 f183 	clz	r1, r3
 80014b6:	2900      	cmp	r1, #0
 80014b8:	d149      	bne.n	800154e <__udivmoddi4+0x1c6>
 80014ba:	42b3      	cmp	r3, r6
 80014bc:	d302      	bcc.n	80014c4 <__udivmoddi4+0x13c>
 80014be:	4282      	cmp	r2, r0
 80014c0:	f200 80bb 	bhi.w	800163a <__udivmoddi4+0x2b2>
 80014c4:	1a84      	subs	r4, r0, r2
 80014c6:	eb66 0303 	sbc.w	r3, r6, r3
 80014ca:	2001      	movs	r0, #1
 80014cc:	469c      	mov	ip, r3
 80014ce:	2d00      	cmp	r5, #0
 80014d0:	d0aa      	beq.n	8001428 <__udivmoddi4+0xa0>
 80014d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80014d6:	e7a7      	b.n	8001428 <__udivmoddi4+0xa0>
 80014d8:	f1c2 0320 	rsb	r3, r2, #32
 80014dc:	4097      	lsls	r7, r2
 80014de:	40d8      	lsrs	r0, r3
 80014e0:	4091      	lsls	r1, r2
 80014e2:	40de      	lsrs	r6, r3
 80014e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80014e8:	4308      	orrs	r0, r1
 80014ea:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 80014ee:	fbb6 f1fe 	udiv	r1, r6, lr
 80014f2:	fa1f f887 	uxth.w	r8, r7
 80014f6:	fb0e 6611 	mls	r6, lr, r1, r6
 80014fa:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 80014fe:	fb01 f308 	mul.w	r3, r1, r8
 8001502:	42b3      	cmp	r3, r6
 8001504:	fa04 f402 	lsl.w	r4, r4, r2
 8001508:	d909      	bls.n	800151e <__udivmoddi4+0x196>
 800150a:	19be      	adds	r6, r7, r6
 800150c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8001510:	f080 808e 	bcs.w	8001630 <__udivmoddi4+0x2a8>
 8001514:	42b3      	cmp	r3, r6
 8001516:	f240 808b 	bls.w	8001630 <__udivmoddi4+0x2a8>
 800151a:	3902      	subs	r1, #2
 800151c:	443e      	add	r6, r7
 800151e:	1af3      	subs	r3, r6, r3
 8001520:	b286      	uxth	r6, r0
 8001522:	fbb3 f0fe 	udiv	r0, r3, lr
 8001526:	fb0e 3310 	mls	r3, lr, r0, r3
 800152a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800152e:	fb00 f308 	mul.w	r3, r0, r8
 8001532:	42b3      	cmp	r3, r6
 8001534:	d907      	bls.n	8001546 <__udivmoddi4+0x1be>
 8001536:	19be      	adds	r6, r7, r6
 8001538:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800153c:	d274      	bcs.n	8001628 <__udivmoddi4+0x2a0>
 800153e:	42b3      	cmp	r3, r6
 8001540:	d972      	bls.n	8001628 <__udivmoddi4+0x2a0>
 8001542:	3802      	subs	r0, #2
 8001544:	443e      	add	r6, r7
 8001546:	1af3      	subs	r3, r6, r3
 8001548:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800154c:	e77a      	b.n	8001444 <__udivmoddi4+0xbc>
 800154e:	f1c1 0720 	rsb	r7, r1, #32
 8001552:	fa03 f401 	lsl.w	r4, r3, r1
 8001556:	fa22 f307 	lsr.w	r3, r2, r7
 800155a:	431c      	orrs	r4, r3
 800155c:	fa20 f907 	lsr.w	r9, r0, r7
 8001560:	fa06 f301 	lsl.w	r3, r6, r1
 8001564:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001568:	40fe      	lsrs	r6, r7
 800156a:	ea49 0903 	orr.w	r9, r9, r3
 800156e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8001572:	fbb6 fefc 	udiv	lr, r6, ip
 8001576:	fa1f f884 	uxth.w	r8, r4
 800157a:	fb0c 661e 	mls	r6, ip, lr, r6
 800157e:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8001582:	fb0e fa08 	mul.w	sl, lr, r8
 8001586:	45b2      	cmp	sl, r6
 8001588:	fa02 f201 	lsl.w	r2, r2, r1
 800158c:	fa00 f301 	lsl.w	r3, r0, r1
 8001590:	d908      	bls.n	80015a4 <__udivmoddi4+0x21c>
 8001592:	19a6      	adds	r6, r4, r6
 8001594:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8001598:	d248      	bcs.n	800162c <__udivmoddi4+0x2a4>
 800159a:	45b2      	cmp	sl, r6
 800159c:	d946      	bls.n	800162c <__udivmoddi4+0x2a4>
 800159e:	f1ae 0e02 	sub.w	lr, lr, #2
 80015a2:	4426      	add	r6, r4
 80015a4:	eba6 060a 	sub.w	r6, r6, sl
 80015a8:	fa1f f989 	uxth.w	r9, r9
 80015ac:	fbb6 f0fc 	udiv	r0, r6, ip
 80015b0:	fb0c 6610 	mls	r6, ip, r0, r6
 80015b4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80015b8:	fb00 f808 	mul.w	r8, r0, r8
 80015bc:	45b0      	cmp	r8, r6
 80015be:	d907      	bls.n	80015d0 <__udivmoddi4+0x248>
 80015c0:	19a6      	adds	r6, r4, r6
 80015c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80015c6:	d22d      	bcs.n	8001624 <__udivmoddi4+0x29c>
 80015c8:	45b0      	cmp	r8, r6
 80015ca:	d92b      	bls.n	8001624 <__udivmoddi4+0x29c>
 80015cc:	3802      	subs	r0, #2
 80015ce:	4426      	add	r6, r4
 80015d0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80015d4:	eba6 0608 	sub.w	r6, r6, r8
 80015d8:	fba0 8902 	umull	r8, r9, r0, r2
 80015dc:	454e      	cmp	r6, r9
 80015de:	46c4      	mov	ip, r8
 80015e0:	46ce      	mov	lr, r9
 80015e2:	d318      	bcc.n	8001616 <__udivmoddi4+0x28e>
 80015e4:	d015      	beq.n	8001612 <__udivmoddi4+0x28a>
 80015e6:	b375      	cbz	r5, 8001646 <__udivmoddi4+0x2be>
 80015e8:	ebb3 020c 	subs.w	r2, r3, ip
 80015ec:	eb66 060e 	sbc.w	r6, r6, lr
 80015f0:	fa06 f707 	lsl.w	r7, r6, r7
 80015f4:	fa22 f301 	lsr.w	r3, r2, r1
 80015f8:	40ce      	lsrs	r6, r1
 80015fa:	431f      	orrs	r7, r3
 80015fc:	e9c5 7600 	strd	r7, r6, [r5]
 8001600:	2100      	movs	r1, #0
 8001602:	e711      	b.n	8001428 <__udivmoddi4+0xa0>
 8001604:	4629      	mov	r1, r5
 8001606:	4628      	mov	r0, r5
 8001608:	e70e      	b.n	8001428 <__udivmoddi4+0xa0>
 800160a:	4666      	mov	r6, ip
 800160c:	e6ed      	b.n	80013ea <__udivmoddi4+0x62>
 800160e:	4618      	mov	r0, r3
 8001610:	e701      	b.n	8001416 <__udivmoddi4+0x8e>
 8001612:	4543      	cmp	r3, r8
 8001614:	d2e7      	bcs.n	80015e6 <__udivmoddi4+0x25e>
 8001616:	ebb8 0c02 	subs.w	ip, r8, r2
 800161a:	eb69 0404 	sbc.w	r4, r9, r4
 800161e:	3801      	subs	r0, #1
 8001620:	46a6      	mov	lr, r4
 8001622:	e7e0      	b.n	80015e6 <__udivmoddi4+0x25e>
 8001624:	4660      	mov	r0, ip
 8001626:	e7d3      	b.n	80015d0 <__udivmoddi4+0x248>
 8001628:	4660      	mov	r0, ip
 800162a:	e78c      	b.n	8001546 <__udivmoddi4+0x1be>
 800162c:	4686      	mov	lr, r0
 800162e:	e7b9      	b.n	80015a4 <__udivmoddi4+0x21c>
 8001630:	4661      	mov	r1, ip
 8001632:	e774      	b.n	800151e <__udivmoddi4+0x196>
 8001634:	3802      	subs	r0, #2
 8001636:	443c      	add	r4, r7
 8001638:	e72b      	b.n	8001492 <__udivmoddi4+0x10a>
 800163a:	4608      	mov	r0, r1
 800163c:	e747      	b.n	80014ce <__udivmoddi4+0x146>
 800163e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001642:	443e      	add	r6, r7
 8001644:	e711      	b.n	800146a <__udivmoddi4+0xe2>
 8001646:	4629      	mov	r1, r5
 8001648:	e6ee      	b.n	8001428 <__udivmoddi4+0xa0>
 800164a:	bf00      	nop

0800164c <__aeabi_idiv0>:
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <__gedf2>:
 8001650:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001654:	e006      	b.n	8001664 <__cmpdf2+0x4>
 8001656:	bf00      	nop

08001658 <__ledf2>:
 8001658:	f04f 0c01 	mov.w	ip, #1
 800165c:	e002      	b.n	8001664 <__cmpdf2+0x4>
 800165e:	bf00      	nop

08001660 <__cmpdf2>:
 8001660:	f04f 0c01 	mov.w	ip, #1
 8001664:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001668:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800166c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001674:	bf18      	it	ne
 8001676:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800167a:	d01b      	beq.n	80016b4 <__cmpdf2+0x54>
 800167c:	b001      	add	sp, #4
 800167e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8001682:	bf0c      	ite	eq
 8001684:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001688:	ea91 0f03 	teqne	r1, r3
 800168c:	bf02      	ittt	eq
 800168e:	ea90 0f02 	teqeq	r0, r2
 8001692:	2000      	moveq	r0, #0
 8001694:	4770      	bxeq	lr
 8001696:	f110 0f00 	cmn.w	r0, #0
 800169a:	ea91 0f03 	teq	r1, r3
 800169e:	bf58      	it	pl
 80016a0:	4299      	cmppl	r1, r3
 80016a2:	bf08      	it	eq
 80016a4:	4290      	cmpeq	r0, r2
 80016a6:	bf2c      	ite	cs
 80016a8:	17d8      	asrcs	r0, r3, #31
 80016aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80016ae:	f040 0001 	orr.w	r0, r0, #1
 80016b2:	4770      	bx	lr
 80016b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80016b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80016bc:	d102      	bne.n	80016c4 <__cmpdf2+0x64>
 80016be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80016c2:	d107      	bne.n	80016d4 <__cmpdf2+0x74>
 80016c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80016c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80016cc:	d1d6      	bne.n	800167c <__cmpdf2+0x1c>
 80016ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80016d2:	d0d3      	beq.n	800167c <__cmpdf2+0x1c>
 80016d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <__aeabi_cdrcmple>:
 80016dc:	4684      	mov	ip, r0
 80016de:	4610      	mov	r0, r2
 80016e0:	4662      	mov	r2, ip
 80016e2:	468c      	mov	ip, r1
 80016e4:	4619      	mov	r1, r3
 80016e6:	4663      	mov	r3, ip
 80016e8:	e000      	b.n	80016ec <__aeabi_cdcmpeq>
 80016ea:	bf00      	nop

080016ec <__aeabi_cdcmpeq>:
 80016ec:	b501      	push	{r0, lr}
 80016ee:	f7ff ffb7 	bl	8001660 <__cmpdf2>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	bf48      	it	mi
 80016f6:	f110 0f00 	cmnmi.w	r0, #0
 80016fa:	bd01      	pop	{r0, pc}

080016fc <__aeabi_dcmpeq>:
 80016fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001700:	f7ff fff4 	bl	80016ec <__aeabi_cdcmpeq>
 8001704:	bf0c      	ite	eq
 8001706:	2001      	moveq	r0, #1
 8001708:	2000      	movne	r0, #0
 800170a:	f85d fb08 	ldr.w	pc, [sp], #8
 800170e:	bf00      	nop

08001710 <__aeabi_dcmplt>:
 8001710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001714:	f7ff ffea 	bl	80016ec <__aeabi_cdcmpeq>
 8001718:	bf34      	ite	cc
 800171a:	2001      	movcc	r0, #1
 800171c:	2000      	movcs	r0, #0
 800171e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001722:	bf00      	nop

08001724 <__aeabi_dcmple>:
 8001724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001728:	f7ff ffe0 	bl	80016ec <__aeabi_cdcmpeq>
 800172c:	bf94      	ite	ls
 800172e:	2001      	movls	r0, #1
 8001730:	2000      	movhi	r0, #0
 8001732:	f85d fb08 	ldr.w	pc, [sp], #8
 8001736:	bf00      	nop

08001738 <__aeabi_dcmpge>:
 8001738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800173c:	f7ff ffce 	bl	80016dc <__aeabi_cdrcmple>
 8001740:	bf94      	ite	ls
 8001742:	2001      	movls	r0, #1
 8001744:	2000      	movhi	r0, #0
 8001746:	f85d fb08 	ldr.w	pc, [sp], #8
 800174a:	bf00      	nop

0800174c <__aeabi_dcmpgt>:
 800174c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001750:	f7ff ffc4 	bl	80016dc <__aeabi_cdrcmple>
 8001754:	bf34      	ite	cc
 8001756:	2001      	movcc	r0, #1
 8001758:	2000      	movcs	r0, #0
 800175a:	f85d fb08 	ldr.w	pc, [sp], #8
 800175e:	bf00      	nop

08001760 <__aeabi_d2uiz>:
 8001760:	004a      	lsls	r2, r1, #1
 8001762:	d211      	bcs.n	8001788 <__aeabi_d2uiz+0x28>
 8001764:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001768:	d211      	bcs.n	800178e <__aeabi_d2uiz+0x2e>
 800176a:	d50d      	bpl.n	8001788 <__aeabi_d2uiz+0x28>
 800176c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001770:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001774:	d40e      	bmi.n	8001794 <__aeabi_d2uiz+0x34>
 8001776:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800177a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800177e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001782:	fa23 f002 	lsr.w	r0, r3, r2
 8001786:	4770      	bx	lr
 8001788:	f04f 0000 	mov.w	r0, #0
 800178c:	4770      	bx	lr
 800178e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001792:	d102      	bne.n	800179a <__aeabi_d2uiz+0x3a>
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001798:	4770      	bx	lr
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	4770      	bx	lr

080017a0 <memcpy>:
 80017a0:	4684      	mov	ip, r0
 80017a2:	ea41 0300 	orr.w	r3, r1, r0
 80017a6:	f013 0303 	ands.w	r3, r3, #3
 80017aa:	d16d      	bne.n	8001888 <memcpy+0xe8>
 80017ac:	3a40      	subs	r2, #64	; 0x40
 80017ae:	d341      	bcc.n	8001834 <memcpy+0x94>
 80017b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017b4:	f840 3b04 	str.w	r3, [r0], #4
 80017b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017bc:	f840 3b04 	str.w	r3, [r0], #4
 80017c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017c4:	f840 3b04 	str.w	r3, [r0], #4
 80017c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017cc:	f840 3b04 	str.w	r3, [r0], #4
 80017d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017d4:	f840 3b04 	str.w	r3, [r0], #4
 80017d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017dc:	f840 3b04 	str.w	r3, [r0], #4
 80017e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017e4:	f840 3b04 	str.w	r3, [r0], #4
 80017e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017ec:	f840 3b04 	str.w	r3, [r0], #4
 80017f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80017f4:	f840 3b04 	str.w	r3, [r0], #4
 80017f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80017fc:	f840 3b04 	str.w	r3, [r0], #4
 8001800:	f851 3b04 	ldr.w	r3, [r1], #4
 8001804:	f840 3b04 	str.w	r3, [r0], #4
 8001808:	f851 3b04 	ldr.w	r3, [r1], #4
 800180c:	f840 3b04 	str.w	r3, [r0], #4
 8001810:	f851 3b04 	ldr.w	r3, [r1], #4
 8001814:	f840 3b04 	str.w	r3, [r0], #4
 8001818:	f851 3b04 	ldr.w	r3, [r1], #4
 800181c:	f840 3b04 	str.w	r3, [r0], #4
 8001820:	f851 3b04 	ldr.w	r3, [r1], #4
 8001824:	f840 3b04 	str.w	r3, [r0], #4
 8001828:	f851 3b04 	ldr.w	r3, [r1], #4
 800182c:	f840 3b04 	str.w	r3, [r0], #4
 8001830:	3a40      	subs	r2, #64	; 0x40
 8001832:	d2bd      	bcs.n	80017b0 <memcpy+0x10>
 8001834:	3230      	adds	r2, #48	; 0x30
 8001836:	d311      	bcc.n	800185c <memcpy+0xbc>
 8001838:	f851 3b04 	ldr.w	r3, [r1], #4
 800183c:	f840 3b04 	str.w	r3, [r0], #4
 8001840:	f851 3b04 	ldr.w	r3, [r1], #4
 8001844:	f840 3b04 	str.w	r3, [r0], #4
 8001848:	f851 3b04 	ldr.w	r3, [r1], #4
 800184c:	f840 3b04 	str.w	r3, [r0], #4
 8001850:	f851 3b04 	ldr.w	r3, [r1], #4
 8001854:	f840 3b04 	str.w	r3, [r0], #4
 8001858:	3a10      	subs	r2, #16
 800185a:	d2ed      	bcs.n	8001838 <memcpy+0x98>
 800185c:	320c      	adds	r2, #12
 800185e:	d305      	bcc.n	800186c <memcpy+0xcc>
 8001860:	f851 3b04 	ldr.w	r3, [r1], #4
 8001864:	f840 3b04 	str.w	r3, [r0], #4
 8001868:	3a04      	subs	r2, #4
 800186a:	d2f9      	bcs.n	8001860 <memcpy+0xc0>
 800186c:	3204      	adds	r2, #4
 800186e:	d008      	beq.n	8001882 <memcpy+0xe2>
 8001870:	07d2      	lsls	r2, r2, #31
 8001872:	bf1c      	itt	ne
 8001874:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001878:	f800 3b01 	strbne.w	r3, [r0], #1
 800187c:	d301      	bcc.n	8001882 <memcpy+0xe2>
 800187e:	880b      	ldrh	r3, [r1, #0]
 8001880:	8003      	strh	r3, [r0, #0]
 8001882:	4660      	mov	r0, ip
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	2a08      	cmp	r2, #8
 800188a:	d313      	bcc.n	80018b4 <memcpy+0x114>
 800188c:	078b      	lsls	r3, r1, #30
 800188e:	d08d      	beq.n	80017ac <memcpy+0xc>
 8001890:	f010 0303 	ands.w	r3, r0, #3
 8001894:	d08a      	beq.n	80017ac <memcpy+0xc>
 8001896:	f1c3 0304 	rsb	r3, r3, #4
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	07db      	lsls	r3, r3, #31
 800189e:	bf1c      	itt	ne
 80018a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80018a4:	f800 3b01 	strbne.w	r3, [r0], #1
 80018a8:	d380      	bcc.n	80017ac <memcpy+0xc>
 80018aa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80018ae:	f820 3b02 	strh.w	r3, [r0], #2
 80018b2:	e77b      	b.n	80017ac <memcpy+0xc>
 80018b4:	3a04      	subs	r2, #4
 80018b6:	d3d9      	bcc.n	800186c <memcpy+0xcc>
 80018b8:	3a01      	subs	r2, #1
 80018ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018be:	f800 3b01 	strb.w	r3, [r0], #1
 80018c2:	d2f9      	bcs.n	80018b8 <memcpy+0x118>
 80018c4:	780b      	ldrb	r3, [r1, #0]
 80018c6:	7003      	strb	r3, [r0, #0]
 80018c8:	784b      	ldrb	r3, [r1, #1]
 80018ca:	7043      	strb	r3, [r0, #1]
 80018cc:	788b      	ldrb	r3, [r1, #2]
 80018ce:	7083      	strb	r3, [r0, #2]
 80018d0:	4660      	mov	r0, ip
 80018d2:	4770      	bx	lr

080018d4 <__aeabi_dcmpun>:
 80018d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80018d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018dc:	d102      	bne.n	80018e4 <__aeabi_dcmpun+0x10>
 80018de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80018e2:	d10a      	bne.n	80018fa <__aeabi_dcmpun+0x26>
 80018e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80018e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80018ec:	d102      	bne.n	80018f4 <__aeabi_dcmpun+0x20>
 80018ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80018f2:	d102      	bne.n	80018fa <__aeabi_dcmpun+0x26>
 80018f4:	f04f 0000 	mov.w	r0, #0
 80018f8:	4770      	bx	lr
 80018fa:	f04f 0001 	mov.w	r0, #1
 80018fe:	4770      	bx	lr

08001900 <__aeabi_d2iz>:
 8001900:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001908:	d215      	bcs.n	8001936 <__aeabi_d2iz+0x36>
 800190a:	d511      	bpl.n	8001930 <__aeabi_d2iz+0x30>
 800190c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001914:	d912      	bls.n	800193c <__aeabi_d2iz+0x3c>
 8001916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800191a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800191e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001926:	fa23 f002 	lsr.w	r0, r3, r2
 800192a:	bf18      	it	ne
 800192c:	4240      	negne	r0, r0
 800192e:	4770      	bx	lr
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	4770      	bx	lr
 8001936:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800193a:	d105      	bne.n	8001948 <__aeabi_d2iz+0x48>
 800193c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001940:	bf08      	it	eq
 8001942:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001946:	4770      	bx	lr
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <main>:
	}
}


void main(void)
{
 8001950:	b5d0      	push	{r4, r6, r7, lr}
 8001952:	b0e4      	sub	sp, #400	; 0x190
	rcl_allocator_t allocator = rcl_get_default_allocator();
 8001954:	a806      	add	r0, sp, #24
 8001956:	f005 fa2f 	bl	8006db8 <rcutils_get_default_allocator>
	rclc_support_t support;

	// create init_options
	RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 800195a:	2200      	movs	r2, #0
 800195c:	4611      	mov	r1, r2
 800195e:	ab06      	add	r3, sp, #24
 8001960:	a832      	add	r0, sp, #200	; 0xc8
 8001962:	f004 ffff 	bl	8006964 <rclc_support_init>
 8001966:	4602      	mov	r2, r0
 8001968:	b128      	cbz	r0, 8001976 <main+0x26>
 800196a:	2154      	movs	r1, #84	; 0x54
	// Create executor
	rclc_executor_t executor;
	RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
	RCCHECK(rclc_executor_add_timer(&executor, &timer));
	RCCHECK(rclc_executor_add_subscription(&executor, &ping_subscriber, &incoming_ping, &ping_subscription_callback, ON_NEW_DATA));
	RCCHECK(rclc_executor_add_subscription(&executor, &pong_subscriber, &incoming_pong, &pong_subscription_callback, ON_NEW_DATA));
 800196c:	484e      	ldr	r0, [pc, #312]	; (8001aa8 <main+0x158>)
 800196e:	f00a fa87 	bl	800be80 <printf>
	RCCHECK(rcl_publisher_fini(&ping_publisher, &node));
	RCCHECK(rcl_publisher_fini(&pong_publisher, &node));
	RCCHECK(rcl_subscription_fini(&ping_subscriber, &node));
	RCCHECK(rcl_subscription_fini(&pong_subscriber, &node));
	RCCHECK(rcl_node_fini(&node));
}
 8001972:	b064      	add	sp, #400	; 0x190
 8001974:	bdd0      	pop	{r4, r6, r7, pc}
	RCCHECK(rclc_node_init_default(&node, "pingpong_node", "", &support));
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <main+0x15c>)
 8001978:	494d      	ldr	r1, [pc, #308]	; (8001ab0 <main+0x160>)
 800197a:	ab32      	add	r3, sp, #200	; 0xc8
 800197c:	a804      	add	r0, sp, #16
 800197e:	f005 f881 	bl	8006a84 <rclc_node_init_default>
 8001982:	4602      	mov	r2, r0
 8001984:	b108      	cbz	r0, 800198a <main+0x3a>
 8001986:	2158      	movs	r1, #88	; 0x58
 8001988:	e7f0      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_publisher_init_default(&ping_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Header), "/microROS/ping"));
 800198a:	f011 fd83 	bl	8013494 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Header>
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <main+0x164>)
 8001990:	4602      	mov	r2, r0
 8001992:	a904      	add	r1, sp, #16
 8001994:	4848      	ldr	r0, [pc, #288]	; (8001ab8 <main+0x168>)
 8001996:	f005 f8c5 	bl	8006b24 <rclc_publisher_init_default>
 800199a:	4602      	mov	r2, r0
 800199c:	b108      	cbz	r0, 80019a2 <main+0x52>
 800199e:	215b      	movs	r1, #91	; 0x5b
 80019a0:	e7e4      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_publisher_init_best_effort(&pong_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Header), "/microROS/pong"));
 80019a2:	f011 fd77 	bl	8013494 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Header>
 80019a6:	4b45      	ldr	r3, [pc, #276]	; (8001abc <main+0x16c>)
 80019a8:	4602      	mov	r2, r0
 80019aa:	a904      	add	r1, sp, #16
 80019ac:	4844      	ldr	r0, [pc, #272]	; (8001ac0 <main+0x170>)
 80019ae:	f005 f901 	bl	8006bb4 <rclc_publisher_init_best_effort>
 80019b2:	4602      	mov	r2, r0
 80019b4:	b108      	cbz	r0, 80019ba <main+0x6a>
 80019b6:	215e      	movs	r1, #94	; 0x5e
 80019b8:	e7d8      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_subscription_init_best_effort(&ping_subscriber, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Header), "/microROS/ping"));
 80019ba:	f011 fd6b 	bl	8013494 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Header>
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <main+0x164>)
 80019c0:	4602      	mov	r2, r0
 80019c2:	a904      	add	r1, sp, #16
 80019c4:	483f      	ldr	r0, [pc, #252]	; (8001ac4 <main+0x174>)
 80019c6:	f005 f93f 	bl	8006c48 <rclc_subscription_init_best_effort>
 80019ca:	4602      	mov	r2, r0
 80019cc:	b108      	cbz	r0, 80019d2 <main+0x82>
 80019ce:	2161      	movs	r1, #97	; 0x61
 80019d0:	e7cc      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_subscription_init_best_effort(&pong_subscriber, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Header), "/microROS/pong"));
 80019d2:	f011 fd5f 	bl	8013494 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Header>
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <main+0x16c>)
 80019d8:	4602      	mov	r2, r0
 80019da:	a904      	add	r1, sp, #16
 80019dc:	483a      	ldr	r0, [pc, #232]	; (8001ac8 <main+0x178>)
 80019de:	f005 f933 	bl	8006c48 <rclc_subscription_init_best_effort>
 80019e2:	4602      	mov	r2, r0
 80019e4:	b108      	cbz	r0, 80019ea <main+0x9a>
 80019e6:	2164      	movs	r1, #100	; 0x64
 80019e8:	e7c0      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(2000), ping_timer_callback));
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <main+0x17c>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	a932      	add	r1, sp, #200	; 0xc8
 80019f0:	a329      	add	r3, pc, #164	; (adr r3, 8001a98 <main+0x148>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	a803      	add	r0, sp, #12
 80019f8:	f005 f970 	bl	8006cdc <rclc_timer_init_default>
 80019fc:	4602      	mov	r2, r0
 80019fe:	b108      	cbz	r0, 8001a04 <main+0xb4>
 8001a00:	2169      	movs	r1, #105	; 0x69
 8001a02:	e7b3      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
 8001a04:	2203      	movs	r2, #3
 8001a06:	ab06      	add	r3, sp, #24
 8001a08:	a934      	add	r1, sp, #208	; 0xd0
 8001a0a:	a844      	add	r0, sp, #272	; 0x110
 8001a0c:	f000 f8bc 	bl	8001b88 <rclc_executor_init>
 8001a10:	4602      	mov	r2, r0
 8001a12:	b108      	cbz	r0, 8001a18 <main+0xc8>
 8001a14:	216e      	movs	r1, #110	; 0x6e
 8001a16:	e7a9      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_executor_add_timer(&executor, &timer));
 8001a18:	a903      	add	r1, sp, #12
 8001a1a:	a844      	add	r0, sp, #272	; 0x110
 8001a1c:	f004 fb9c 	bl	8006158 <rclc_executor_add_timer>
 8001a20:	4602      	mov	r2, r0
 8001a22:	b108      	cbz	r0, 8001a28 <main+0xd8>
 8001a24:	216f      	movs	r1, #111	; 0x6f
 8001a26:	e7a1      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_executor_add_subscription(&executor, &ping_subscriber, &incoming_ping, &ping_subscription_callback, ON_NEW_DATA));
 8001a28:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <main+0x180>)
 8001a2a:	9000      	str	r0, [sp, #0]
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <main+0x184>)
 8001a2e:	4925      	ldr	r1, [pc, #148]	; (8001ac4 <main+0x174>)
 8001a30:	a844      	add	r0, sp, #272	; 0x110
 8001a32:	f004 fb3f 	bl	80060b4 <rclc_executor_add_subscription>
 8001a36:	4602      	mov	r2, r0
 8001a38:	b108      	cbz	r0, 8001a3e <main+0xee>
 8001a3a:	2170      	movs	r1, #112	; 0x70
 8001a3c:	e796      	b.n	800196c <main+0x1c>
	RCCHECK(rclc_executor_add_subscription(&executor, &pong_subscriber, &incoming_pong, &pong_subscription_callback, ON_NEW_DATA));
 8001a3e:	4c26      	ldr	r4, [pc, #152]	; (8001ad8 <main+0x188>)
 8001a40:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <main+0x178>)
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4622      	mov	r2, r4
 8001a48:	4b24      	ldr	r3, [pc, #144]	; (8001adc <main+0x18c>)
 8001a4a:	a844      	add	r0, sp, #272	; 0x110
 8001a4c:	f004 fb32 	bl	80060b4 <rclc_executor_add_subscription>
 8001a50:	4602      	mov	r2, r0
 8001a52:	b108      	cbz	r0, 8001a58 <main+0x108>
 8001a54:	2171      	movs	r1, #113	; 0x71
 8001a56:	e789      	b.n	800196c <main+0x1c>
	outcoming_ping.frame_id.data = outcoming_ping_buffer;
 8001a58:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <main+0x190>)
 8001a5a:	ab0b      	add	r3, sp, #44	; 0x2c
 8001a5c:	6093      	str	r3, [r2, #8]
	outcoming_ping.frame_id.capacity = STRING_BUFFER_LEN;
 8001a5e:	2332      	movs	r3, #50	; 0x32
 8001a60:	6113      	str	r3, [r2, #16]
	incoming_ping.frame_id.data = incoming_ping_buffer;
 8001a62:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <main+0x180>)
	incoming_pong.frame_id.capacity = STRING_BUFFER_LEN;
 8001a64:	6123      	str	r3, [r4, #16]
	incoming_ping.frame_id.data = incoming_ping_buffer;
 8001a66:	a918      	add	r1, sp, #96	; 0x60
	incoming_ping.frame_id.capacity = STRING_BUFFER_LEN;
 8001a68:	6113      	str	r3, [r2, #16]
	incoming_ping.frame_id.data = incoming_ping_buffer;
 8001a6a:	6091      	str	r1, [r2, #8]
	incoming_pong.frame_id.data = incoming_pong_buffer;
 8001a6c:	aa25      	add	r2, sp, #148	; 0x94
 8001a6e:	60a2      	str	r2, [r4, #8]
	device_id = rand();
 8001a70:	f00a fa38 	bl	800bee4 <rand>
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001a74:	a70a      	add	r7, pc, #40	; (adr r7, 8001aa0 <main+0x150>)
 8001a76:	e9d7 6700 	ldrd	r6, r7, [r7]
	device_id = rand();
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <main+0x194>)
		usleep(100000);
 8001a7c:	4c1a      	ldr	r4, [pc, #104]	; (8001ae8 <main+0x198>)
	device_id = rand();
 8001a7e:	6018      	str	r0, [r3, #0]
		rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001a80:	4632      	mov	r2, r6
 8001a82:	463b      	mov	r3, r7
 8001a84:	a844      	add	r0, sp, #272	; 0x110
 8001a86:	f004 fbad 	bl	80061e4 <rclc_executor_spin_some>
		usleep(100000);
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f010 fd27 	bl	80124de <usleep>
	while(1){
 8001a90:	e7f6      	b.n	8001a80 <main+0x130>
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	77359400 	.word	0x77359400
 8001a9c:	00000000 	.word	0x00000000
 8001aa0:	05f5e100 	.word	0x05f5e100
 8001aa4:	00000000 	.word	0x00000000
 8001aa8:	0801bf4b 	.word	0x0801bf4b
 8001aac:	0801d00d 	.word	0x0801d00d
 8001ab0:	0801bf74 	.word	0x0801bf74
 8001ab4:	0801bf82 	.word	0x0801bf82
 8001ab8:	20003e58 	.word	0x20003e58
 8001abc:	0801bf91 	.word	0x0801bf91
 8001ac0:	20003e64 	.word	0x20003e64
 8001ac4:	20003e5c 	.word	0x20003e5c
 8001ac8:	20003e68 	.word	0x20003e68
 8001acc:	0800357d 	.word	0x0800357d
 8001ad0:	20003e1c 	.word	0x20003e1c
 8001ad4:	08003515 	.word	0x08003515
 8001ad8:	20003e30 	.word	0x20003e30
 8001adc:	08003549 	.word	0x08003549
 8001ae0:	20003e44 	.word	0x20003e44
 8001ae4:	20003e18 	.word	0x20003e18
 8001ae8:	000186a0 	.word	0x000186a0
 8001aec:	00000000 	.word	0x00000000

08001af0 <z_impl_clock_gettime>:
int z_impl_clock_gettime(clockid_t clock_id, struct timespec *ts)
{
	uint64_t elapsed_nsecs;
	struct timespec base;

	switch (clock_id) {
 8001af0:	2801      	cmp	r0, #1
{
 8001af2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001af6:	460e      	mov	r6, r1
	switch (clock_id) {
 8001af8:	d009      	beq.n	8001b0e <z_impl_clock_gettime+0x1e>
 8001afa:	2804      	cmp	r0, #4
 8001afc:	d034      	beq.n	8001b68 <z_impl_clock_gettime+0x78>
	case CLOCK_REALTIME:
		base = rt_clock_base;
		break;

	default:
		errno = EINVAL;
 8001afe:	f010 fcec 	bl	80124da <__errno>
 8001b02:	2316      	movs	r3, #22
 8001b04:	6003      	str	r3, [r0, #0]
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
 8001b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		base = rt_clock_base;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <z_impl_clock_gettime+0x88>)
 8001b10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b14:	689f      	ldr	r7, [r3, #8]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
 8001b16:	f011 f860 	bl	8012bda <z_impl_k_uptime_ticks>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * (to_hz / from_hz);
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <z_impl_clock_gettime+0x8c>)
 8001b1c:	fba0 8903 	umull	r8, r9, r0, r3
 8001b20:	fb03 9901 	mla	r9, r3, r1, r9
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
 8001b24:	4640      	mov	r0, r8
 8001b26:	a312      	add	r3, pc, #72	; (adr r3, 8001b70 <z_impl_clock_gettime+0x80>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	4649      	mov	r1, r9
 8001b2e:	f7ff fbf3 	bl	8001318 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
 8001b32:	1824      	adds	r4, r4, r0
 8001b34:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
 8001b38:	e9c6 4500 	strd	r4, r5, [r6]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
 8001b3c:	a30c      	add	r3, pc, #48	; (adr r3, 8001b70 <z_impl_clock_gettime+0x80>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	4640      	mov	r0, r8
 8001b44:	4649      	mov	r1, r9
 8001b46:	f7ff fbe7 	bl	8001318 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <z_impl_clock_gettime+0x90>)
	ts->tv_nsec += base.tv_nsec;
 8001b4c:	443a      	add	r2, r7
	if (ts->tv_nsec >= NSEC_PER_SEC) {
 8001b4e:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
 8001b50:	60b2      	str	r2, [r6, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
 8001b52:	d907      	bls.n	8001b64 <z_impl_clock_gettime+0x74>
		ts->tv_sec++;
 8001b54:	1c61      	adds	r1, r4, #1
 8001b56:	f145 0300 	adc.w	r3, r5, #0
 8001b5a:	e9c6 1300 	strd	r1, r3, [r6]
		ts->tv_nsec -= NSEC_PER_SEC;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <z_impl_clock_gettime+0x94>)
 8001b60:	4413      	add	r3, r2
 8001b62:	60b3      	str	r3, [r6, #8]
	return 0;
 8001b64:	2000      	movs	r0, #0
 8001b66:	e7d0      	b.n	8001b0a <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
 8001b68:	2700      	movs	r7, #0
 8001b6a:	2400      	movs	r4, #0
 8001b6c:	2500      	movs	r5, #0
 8001b6e:	e7d2      	b.n	8001b16 <z_impl_clock_gettime+0x26>
 8001b70:	3b9aca00 	.word	0x3b9aca00
 8001b74:	00000000 	.word	0x00000000
 8001b78:	20000ec0 	.word	0x20000ec0
 8001b7c:	000186a0 	.word	0x000186a0
 8001b80:	3b9ac9ff 	.word	0x3b9ac9ff
 8001b84:	c4653600 	.word	0xc4653600

08001b88 <rclc_executor_init>:
rclc_executor_init(
  rclc_executor_t * executor,
  rcl_context_t * context,
  const size_t number_of_handles,
  const rcl_allocator_t * allocator)
{
 8001b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	b08f      	sub	sp, #60	; 0x3c
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(executor, "executor is NULL", return RCL_RET_INVALID_ARGUMENT);
 8001b94:	4606      	mov	r6, r0
 8001b96:	b918      	cbnz	r0, 8001ba0 <rclc_executor_init+0x18>
 8001b98:	200b      	movs	r0, #11

  // default semantics
  rclc_executor_set_semantics(executor, RCLCPP_EXECUTOR);

  return ret;
}
 8001b9a:	b00f      	add	sp, #60	; 0x3c
 8001b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(context, "context is NULL", return RCL_RET_INVALID_ARGUMENT);
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	d0f9      	beq.n	8001b98 <rclc_executor_init+0x10>
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "allocator is NULL", return RCL_RET_INVALID_ARGUMENT);
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f011 f8de 	bl	8012d66 <rcutils_allocator_is_valid>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d0f4      	beq.n	8001b98 <rclc_executor_init+0x10>
  if (number_of_handles == 0) {
 8001bae:	f1b8 0f00 	cmp.w	r8, #0
 8001bb2:	d0f1      	beq.n	8001b98 <rclc_executor_init+0x10>
  (*executor) = rclc_executor_get_zero_initialized_executor();
 8001bb4:	4630      	mov	r0, r6
  executor->index = 0;
 8001bb6:	2700      	movs	r7, #0
  (*executor) = rclc_executor_get_zero_initialized_executor();
 8001bb8:	f004 fa72 	bl	80060a0 <rclc_executor_get_zero_initialized_executor>
  executor->context = context;
 8001bbc:	6034      	str	r4, [r6, #0]
  executor->wait_set = rcl_get_zero_initialized_wait_set();
 8001bbe:	4668      	mov	r0, sp
  executor->max_handles = number_of_handles;
 8001bc0:	f8c6 8008 	str.w	r8, [r6, #8]
  executor->index = 0;
 8001bc4:	60f7      	str	r7, [r6, #12]
  executor->wait_set = rcl_get_zero_initialized_wait_set();
 8001bc6:	466c      	mov	r4, sp
 8001bc8:	f008 fa06 	bl	8009fd8 <rcl_get_zero_initialized_wait_set>
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	f106 0514 	add.w	r5, r6, #20
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	602b      	str	r3, [r5, #0]
  executor->timeout_ns = DEFAULT_WAIT_TIMEOUT_NS;
 8001be0:	a316      	add	r3, pc, #88	; (adr r3, 8001c3c <rclc_executor_init+0xb4>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
    executor->allocator->allocate(
 8001be6:	2538      	movs	r5, #56	; 0x38
  executor->timeout_ns = DEFAULT_WAIT_TIMEOUT_NS;
 8001be8:	e9c6 2318 	strd	r2, r3, [r6, #96]	; 0x60
    executor->allocator->allocate(
 8001bec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8001bf0:	f8d9 3000 	ldr.w	r3, [r9]
  executor->allocator = allocator;
 8001bf4:	f8c6 9010 	str.w	r9, [r6, #16]
    executor->allocator->allocate(
 8001bf8:	fb05 f008 	mul.w	r0, r5, r8
 8001bfc:	4798      	blx	r3
  executor->handles =
 8001bfe:	6070      	str	r0, [r6, #4]
  if (NULL == executor->handles) {
 8001c00:	b1a8      	cbz	r0, 8001c2e <rclc_executor_init+0xa6>
    rclc_executor_handle_init(&executor->handles[i], number_of_handles);
 8001c02:	6870      	ldr	r0, [r6, #4]
 8001c04:	4641      	mov	r1, r8
 8001c06:	fb05 0007 	mla	r0, r5, r7, r0
  for (size_t i = 0; i < number_of_handles; i++) {
 8001c0a:	3701      	adds	r7, #1
    rclc_executor_handle_init(&executor->handles[i], number_of_handles);
 8001c0c:	f011 f886 	bl	8012d1c <rclc_executor_handle_init>
  for (size_t i = 0; i < number_of_handles; i++) {
 8001c10:	45b8      	cmp	r8, r7
 8001c12:	d1f6      	bne.n	8001c02 <rclc_executor_init+0x7a>
  rclc_executor_handle_counters_zero_init(&executor->info);
 8001c14:	f106 0048 	add.w	r0, r6, #72	; 0x48
 8001c18:	f011 f876 	bl	8012d08 <rclc_executor_handle_counters_zero_init>
  rclc_executor_trigger_t trigger_function,
  void * trigger_object)
{
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
  executor->trigger_function = trigger_function;
  executor->trigger_object = trigger_object;
 8001c1c:	2100      	movs	r1, #0
  executor->trigger_function = trigger_function;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <rclc_executor_init+0xb0>)
 8001c20:	6733      	str	r3, [r6, #112]	; 0x70
  executor->trigger_object = trigger_object;
 8001c22:	6771      	str	r1, [r6, #116]	; 0x74
  rclc_executor_set_semantics(executor, RCLCPP_EXECUTOR);
 8001c24:	4630      	mov	r0, r6
 8001c26:	f011 f861 	bl	8012cec <rclc_executor_set_semantics>
  return ret;
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	e7b5      	b.n	8001b9a <rclc_executor_init+0x12>
    return RCL_RET_BAD_ALLOC;
 8001c2e:	200a      	movs	r0, #10
 8001c30:	e7b3      	b.n	8001b9a <rclc_executor_init+0x12>
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	08012cc9 	.word	0x08012cc9
 8001c3c:	3b9aca00 	.word	0x3b9aca00
	...

08001c48 <rcutils_time_point_value_as_seconds_string>:
rcutils_ret_t
rcutils_time_point_value_as_seconds_string(
  const rcutils_time_point_value_t * time_point,
  char * str,
  size_t str_size)
{
 8001c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	460d      	mov	r5, r1
 8001c4e:	4616      	mov	r6, r2
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(time_point, RCUTILS_RET_INVALID_ARGUMENT);
 8001c50:	4604      	mov	r4, r0
 8001c52:	b378      	cbz	r0, 8001cb4 <rcutils_time_point_value_as_seconds_string+0x6c>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(str, RCUTILS_RET_INVALID_ARGUMENT);
 8001c54:	b371      	cbz	r1, 8001cb4 <rcutils_time_point_value_as_seconds_string+0x6c>
  if (0 == str_size) {
 8001c56:	b91a      	cbnz	r2, 8001c60 <rcutils_time_point_value_as_seconds_string+0x18>
    return RCUTILS_RET_OK;
 8001c58:	2000      	movs	r0, #0
  {
    RCUTILS_SET_ERROR_MSG("failed to format time point into string as float seconds");
    return RCUTILS_RET_ERROR;
  }
  return RCUTILS_RET_OK;
}
 8001c5a:	b004      	add	sp, #16
 8001c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint64_t abs_time_point = (uint64_t)llabs(*time_point);
 8001c60:	e9d0 0100 	ldrd	r0, r1, [r0]
 8001c64:	f015 fcec 	bl	8017640 <llabs>
  uint64_t seconds = abs_time_point / (1000u * 1000u * 1000u);
 8001c68:	a316      	add	r3, pc, #88	; (adr r3, 8001cc4 <rcutils_time_point_value_as_seconds_string+0x7c>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  uint64_t abs_time_point = (uint64_t)llabs(*time_point);
 8001c6e:	4682      	mov	sl, r0
 8001c70:	4689      	mov	r9, r1
  uint64_t seconds = abs_time_point / (1000u * 1000u * 1000u);
 8001c72:	f7ff fb51 	bl	8001318 <__aeabi_uldivmod>
  uint64_t nanoseconds = abs_time_point % (1000u * 1000u * 1000u);
 8001c76:	a313      	add	r3, pc, #76	; (adr r3, 8001cc4 <rcutils_time_point_value_as_seconds_string+0x7c>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
  uint64_t seconds = abs_time_point / (1000u * 1000u * 1000u);
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	460f      	mov	r7, r1
  uint64_t nanoseconds = abs_time_point % (1000u * 1000u * 1000u);
 8001c80:	4650      	mov	r0, sl
 8001c82:	4649      	mov	r1, r9
 8001c84:	f7ff fb48 	bl	8001318 <__aeabi_uldivmod>
    rcutils_snprintf(
 8001c88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c90:	2800      	cmp	r0, #0
 8001c92:	4a09      	ldr	r2, [pc, #36]	; (8001cb8 <rcutils_time_point_value_as_seconds_string+0x70>)
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <rcutils_time_point_value_as_seconds_string+0x74>)
 8001c96:	f171 0100 	sbcs.w	r1, r1, #0
 8001c9a:	bfa8      	it	ge
 8001c9c:	4613      	movge	r3, r2
 8001c9e:	e9cd 8700 	strd	r8, r7, [sp]
 8001ca2:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <rcutils_time_point_value_as_seconds_string+0x78>)
 8001ca4:	4631      	mov	r1, r6
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f011 f8ef 	bl	8012e8a <rcutils_snprintf>
  if (
 8001cac:	2800      	cmp	r0, #0
 8001cae:	dad3      	bge.n	8001c58 <rcutils_time_point_value_as_seconds_string+0x10>
    return RCUTILS_RET_ERROR;
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	e7d2      	b.n	8001c5a <rcutils_time_point_value_as_seconds_string+0x12>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(time_point, RCUTILS_RET_INVALID_ARGUMENT);
 8001cb4:	200b      	movs	r0, #11
 8001cb6:	e7d0      	b.n	8001c5a <rcutils_time_point_value_as_seconds_string+0x12>
 8001cb8:	0801d00d 	.word	0x0801d00d
 8001cbc:	0801d1d4 	.word	0x0801d1d4
 8001cc0:	0801d1d6 	.word	0x0801d1d6
 8001cc4:	3b9aca00 	.word	0x3b9aca00
	...

08001cd0 <rcl_wait>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_wait(rcl_wait_set_t * wait_set, int64_t timeout)
{
 8001cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd4:	4690      	mov	r8, r2
 8001cd6:	b08f      	sub	sp, #60	; 0x3c
 8001cd8:	4699      	mov	r9, r3
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8001cda:	4604      	mov	r4, r0
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	f000 8265 	beq.w	80021ac <rcl_wait+0x4dc>
  if (!rcl_wait_set_is_valid(wait_set)) {
 8001ce2:	f013 fcb6 	bl	8015652 <rcl_wait_set_is_valid>
 8001ce6:	9005      	str	r0, [sp, #20]
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	f000 8261 	beq.w	80021b0 <rcl_wait+0x4e0>
    RCL_SET_ERROR_MSG("wait set is invalid");
    return RCL_RET_WAIT_SET_INVALID;
  }
  if (
 8001cee:	6863      	ldr	r3, [r4, #4]
 8001cf0:	b95b      	cbnz	r3, 8001d0a <rcl_wait+0x3a>
    wait_set->size_of_subscriptions == 0 &&
 8001cf2:	68e3      	ldr	r3, [r4, #12]
 8001cf4:	b94b      	cbnz	r3, 8001d0a <rcl_wait+0x3a>
    wait_set->size_of_guard_conditions == 0 &&
 8001cf6:	6963      	ldr	r3, [r4, #20]
 8001cf8:	b93b      	cbnz	r3, 8001d0a <rcl_wait+0x3a>
    wait_set->size_of_timers == 0 &&
 8001cfa:	69e3      	ldr	r3, [r4, #28]
 8001cfc:	b92b      	cbnz	r3, 8001d0a <rcl_wait+0x3a>
    wait_set->size_of_clients == 0 &&
 8001cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d00:	b91b      	cbnz	r3, 8001d0a <rcl_wait+0x3a>
    wait_set->size_of_services == 0 &&
 8001d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8256 	beq.w	80021b6 <rcl_wait+0x4e6>
  // By default, set the timer to block indefinitely if none of the below conditions are met.
  rmw_time_t * timeout_argument = NULL;
  rmw_time_t temporary_timeout_storage;

  bool is_timer_timeout = false;
  int64_t min_timeout = timeout > 0 ? timeout : INT64_MAX;
 8001d0a:	f1b8 0f01 	cmp.w	r8, #1
 8001d0e:	f179 0300 	sbcs.w	r3, r9, #0
      ret = rcl_timer_get_time_until_next_call(wait_set->timers[i], &timer_timeout);
      if (ret != RCL_RET_OK) {
        return ret;  // The rcl error state should already be set.
      }
      if (timer_timeout < min_timeout) {
        is_timer_timeout = true;
 8001d12:	f04f 0300 	mov.w	r3, #0
  int64_t min_timeout = timeout > 0 ? timeout : INT64_MAX;
 8001d16:	bfb9      	ittee	lt
 8001d18:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 8001d1c:	f06f 4b00 	mvnlt.w	fp, #2147483648	; 0x80000000
 8001d20:	46c2      	movge	sl, r8
 8001d22:	46cb      	movge	fp, r9
        is_timer_timeout = true;
 8001d24:	2600      	movs	r6, #0
 8001d26:	2700      	movs	r7, #0
 8001d28:	9306      	str	r3, [sp, #24]
    for (i = 0; i < wait_set->impl->timer_index; ++i) {
 8001d2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001d30:	429f      	cmp	r7, r3
 8001d32:	bf08      	it	eq
 8001d34:	4296      	cmpeq	r6, r2
 8001d36:	f0c0 80b2 	bcc.w	8001e9e <rcl_wait+0x1ce>
        min_timeout = timer_timeout;
      }
    }
  }

  if (timeout == 0) {
 8001d3a:	ea58 0309 	orrs.w	r3, r8, r9
 8001d3e:	f040 80ed 	bne.w	8001f1c <rcl_wait+0x24c>
    // Then it is non-blocking, so set the temporary storage to 0, 0 and pass it.
    temporary_timeout_storage.sec = 0;
 8001d42:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    temporary_timeout_storage.nsec = 0;
 8001d46:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
    if (min_timeout < 0) {
      min_timeout = 0;
    }
    temporary_timeout_storage.sec = RCL_NS_TO_S(min_timeout);
    temporary_timeout_storage.nsec = min_timeout % 1000000000;
    timeout_argument = &temporary_timeout_storage;
 8001d4a:	ad0a      	add	r5, sp, #40	; 0x28
  }
  RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8001d4c:	4ba2      	ldr	r3, [pc, #648]	; (8001fd8 <rcl_wait+0x308>)
 8001d4e:	9305      	str	r3, [sp, #20]
 8001d50:	781a      	ldrb	r2, [r3, #0]
 8001d52:	b922      	cbnz	r2, 8001d5e <rcl_wait+0x8e>
 8001d54:	f011 f862 	bl	8012e1c <rcutils_logging_initialize>
 8001d58:	b108      	cbz	r0, 8001d5e <rcl_wait+0x8e>
 8001d5a:	f005 f905 	bl	8006f68 <rcutils_reset_error>
 8001d5e:	489f      	ldr	r0, [pc, #636]	; (8001fdc <rcl_wait+0x30c>)
 8001d60:	210a      	movs	r1, #10
 8001d62:	f005 fb47 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8001d66:	b130      	cbz	r0, 8001d76 <rcl_wait+0xa6>
 8001d68:	b92d      	cbnz	r5, 8001d76 <rcl_wait+0xa6>
 8001d6a:	4b9d      	ldr	r3, [pc, #628]	; (8001fe0 <rcl_wait+0x310>)
 8001d6c:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <rcl_wait+0x30c>)
 8001d6e:	489d      	ldr	r0, [pc, #628]	; (8001fe4 <rcl_wait+0x314>)
 8001d70:	210a      	movs	r1, #10
 8001d72:	f005 fb69 	bl	8007448 <rcutils_log>
    !timeout_argument, ROS_PACKAGE_NAME, "Waiting without timeout");
  RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8001d76:	9b05      	ldr	r3, [sp, #20]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b923      	cbnz	r3, 8001d86 <rcl_wait+0xb6>
 8001d7c:	f011 f84e 	bl	8012e1c <rcutils_logging_initialize>
 8001d80:	b108      	cbz	r0, 8001d86 <rcl_wait+0xb6>
 8001d82:	f005 f8f1 	bl	8006f68 <rcutils_reset_error>
 8001d86:	4895      	ldr	r0, [pc, #596]	; (8001fdc <rcl_wait+0x30c>)
 8001d88:	210a      	movs	r1, #10
 8001d8a:	f005 fb33 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8001d8e:	b170      	cbz	r0, 8001dae <rcl_wait+0xde>
 8001d90:	b16d      	cbz	r5, 8001dae <rcl_wait+0xde>
 8001d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001d9e:	4892      	ldr	r0, [pc, #584]	; (8001fe8 <rcl_wait+0x318>)
 8001da0:	e9cd 2300 	strd	r2, r3, [sp]
 8001da4:	210a      	movs	r1, #10
 8001da6:	4b91      	ldr	r3, [pc, #580]	; (8001fec <rcl_wait+0x31c>)
 8001da8:	4a8c      	ldr	r2, [pc, #560]	; (8001fdc <rcl_wait+0x30c>)
 8001daa:	f005 fb4d 	bl	8007448 <rcutils_log>
    timeout_argument, ROS_PACKAGE_NAME,
    "Waiting with timeout: %" PRIu64 "s + %" PRIu64 "ns",
    temporary_timeout_storage.sec, temporary_timeout_storage.nsec);
  RCUTILS_LOG_DEBUG_NAMED(
 8001dae:	9b05      	ldr	r3, [sp, #20]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b923      	cbnz	r3, 8001dbe <rcl_wait+0xee>
 8001db4:	f011 f832 	bl	8012e1c <rcutils_logging_initialize>
 8001db8:	b108      	cbz	r0, 8001dbe <rcl_wait+0xee>
 8001dba:	f005 f8d5 	bl	8006f68 <rcutils_reset_error>
 8001dbe:	4887      	ldr	r0, [pc, #540]	; (8001fdc <rcl_wait+0x30c>)
 8001dc0:	210a      	movs	r1, #10
 8001dc2:	f005 fb17 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8001dc6:	b160      	cbz	r0, 8001de2 <rcl_wait+0x112>
 8001dc8:	4a89      	ldr	r2, [pc, #548]	; (8001ff0 <rcl_wait+0x320>)
 8001dca:	9906      	ldr	r1, [sp, #24]
 8001dcc:	4b89      	ldr	r3, [pc, #548]	; (8001ff4 <rcl_wait+0x324>)
 8001dce:	488a      	ldr	r0, [pc, #552]	; (8001ff8 <rcl_wait+0x328>)
 8001dd0:	2900      	cmp	r1, #0
 8001dd2:	bf08      	it	eq
 8001dd4:	4613      	moveq	r3, r2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4a80      	ldr	r2, [pc, #512]	; (8001fdc <rcl_wait+0x30c>)
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <rcl_wait+0x32c>)
 8001ddc:	210a      	movs	r1, #10
 8001dde:	f005 fb33 	bl	8007448 <rcutils_log>
    ROS_PACKAGE_NAME, "Timeout calculated based on next scheduled timer: %s",
    is_timer_timeout ? "true" : "false");

  // Wait.
  rmw_ret_t ret = rmw_wait(
    &wait_set->impl->rmw_subscriptions,
 8001de2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  rmw_ret_t ret = rmw_wait(
 8001de4:	9502      	str	r5, [sp, #8]
 8001de6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8001df4:	f100 031c 	add.w	r3, r0, #28
 8001df8:	f100 0110 	add.w	r1, r0, #16
 8001dfc:	3004      	adds	r0, #4
 8001dfe:	f000 f9df 	bl	80021c0 <rmw_wait>
    bool is_ready = false;
    rcl_ret_t ret = rcl_timer_is_ready(wait_set->timers[i], &is_ready);
    if (ret != RCL_RET_OK) {
      return ret;  // The rcl error state should already be set.
    }
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Timer in wait set is ready");
 8001e02:	4f76      	ldr	r7, [pc, #472]	; (8001fdc <rcl_wait+0x30c>)
 8001e04:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8002000 <rcl_wait+0x330>
 8001e08:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8002004 <rcl_wait+0x334>
  rmw_ret_t ret = rmw_wait(
 8001e0c:	9007      	str	r0, [sp, #28]
  for (i = 0; i < wait_set->impl->timer_index; ++i) {
 8001e0e:	2600      	movs	r6, #0
 8001e10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	42b3      	cmp	r3, r6
 8001e16:	f200 80a6 	bhi.w	8001f66 <rcl_wait+0x296>
    if (!is_ready) {
      wait_set->timers[i] = NULL;
    }
  }
  // Check for timeout, return RCL_RET_TIMEOUT only if it wasn't a timer.
  if (ret != RMW_RET_OK && ret != RMW_RET_TIMEOUT) {
 8001e1a:	9b07      	ldr	r3, [sp, #28]
 8001e1c:	f033 0502 	bics.w	r5, r3, #2
 8001e20:	f040 81cc 	bne.w	80021bc <rcl_wait+0x4ec>
    return RCL_RET_ERROR;
  }
  // Set corresponding rcl subscription handles NULL.
  for (i = 0; i < wait_set->size_of_subscriptions; ++i) {
    bool is_ready = wait_set->impl->rmw_subscriptions.subscribers[i] != NULL;
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8001e24:	4f6d      	ldr	r7, [pc, #436]	; (8001fdc <rcl_wait+0x30c>)
 8001e26:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8002008 <rcl_wait+0x338>
 8001e2a:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 800200c <rcl_wait+0x33c>
 8001e2e:	462e      	mov	r6, r5
  for (i = 0; i < wait_set->size_of_subscriptions; ++i) {
 8001e30:	6863      	ldr	r3, [r4, #4]
 8001e32:	42b3      	cmp	r3, r6
 8001e34:	f200 80fc 	bhi.w	8002030 <rcl_wait+0x360>
    }
  }
  // Set corresponding rcl guard_condition handles NULL.
  for (i = 0; i < wait_set->size_of_guard_conditions; ++i) {
    bool is_ready = wait_set->impl->rmw_guard_conditions.guard_conditions[i] != NULL;
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8001e38:	4f68      	ldr	r7, [pc, #416]	; (8001fdc <rcl_wait+0x30c>)
 8001e3a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8002010 <rcl_wait+0x340>
 8001e3e:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8002014 <rcl_wait+0x344>
  for (i = 0; i < wait_set->size_of_guard_conditions; ++i) {
 8001e42:	2600      	movs	r6, #0
 8001e44:	68e3      	ldr	r3, [r4, #12]
 8001e46:	42b3      	cmp	r3, r6
 8001e48:	f200 8118 	bhi.w	800207c <rcl_wait+0x3ac>
    }
  }
  // Set corresponding rcl client handles NULL.
  for (i = 0; i < wait_set->size_of_clients; ++i) {
    bool is_ready = wait_set->impl->rmw_clients.clients[i] != NULL;
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Client in wait set is ready");
 8001e4c:	4f63      	ldr	r7, [pc, #396]	; (8001fdc <rcl_wait+0x30c>)
 8001e4e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8002018 <rcl_wait+0x348>
 8001e52:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 800201c <rcl_wait+0x34c>
  for (i = 0; i < wait_set->size_of_clients; ++i) {
 8001e56:	2600      	movs	r6, #0
 8001e58:	69e3      	ldr	r3, [r4, #28]
 8001e5a:	42b3      	cmp	r3, r6
 8001e5c:	f200 8134 	bhi.w	80020c8 <rcl_wait+0x3f8>
    }
  }
  // Set corresponding rcl service handles NULL.
  for (i = 0; i < wait_set->size_of_services; ++i) {
    bool is_ready = wait_set->impl->rmw_services.services[i] != NULL;
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Service in wait set is ready");
 8001e60:	4f5e      	ldr	r7, [pc, #376]	; (8001fdc <rcl_wait+0x30c>)
 8001e62:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8002020 <rcl_wait+0x350>
 8001e66:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8002024 <rcl_wait+0x354>
  for (i = 0; i < wait_set->size_of_services; ++i) {
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e6e:	42b3      	cmp	r3, r6
 8001e70:	f200 8150 	bhi.w	8002114 <rcl_wait+0x444>
    }
  }
  // Set corresponding rcl event handles NULL.
  for (i = 0; i < wait_set->size_of_events; ++i) {
    bool is_ready = wait_set->impl->rmw_events.events[i] != NULL;
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Event in wait set is ready");
 8001e74:	4f59      	ldr	r7, [pc, #356]	; (8001fdc <rcl_wait+0x30c>)
 8001e76:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002028 <rcl_wait+0x358>
 8001e7a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800202c <rcl_wait+0x35c>
  for (i = 0; i < wait_set->size_of_events; ++i) {
 8001e7e:	2600      	movs	r6, #0
 8001e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e82:	42b3      	cmp	r3, r6
 8001e84:	f200 816c 	bhi.w	8002160 <rcl_wait+0x490>
    if (!is_ready) {
      wait_set->events[i] = NULL;
    }
  }

  if (RMW_RET_TIMEOUT == ret && !is_timer_timeout) {
 8001e88:	9b07      	ldr	r3, [sp, #28]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d103      	bne.n	8001e96 <rcl_wait+0x1c6>
    return RCL_RET_TIMEOUT;
 8001e8e:	9b06      	ldr	r3, [sp, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf08      	it	eq
 8001e94:	2502      	moveq	r5, #2
  }
  return RCL_RET_OK;
}
 8001e96:	4628      	mov	r0, r5
 8001e98:	b00f      	add	sp, #60	; 0x3c
 8001e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!wait_set->timers[i]) {
 8001e9e:	6922      	ldr	r2, [r4, #16]
 8001ea0:	00b3      	lsls	r3, r6, #2
 8001ea2:	58d2      	ldr	r2, [r2, r3]
 8001ea4:	b1f2      	cbz	r2, 8001ee4 <rcl_wait+0x214>
      if (NULL != rmw_gcs->guard_conditions[gc_idx]) {
 8001ea6:	68e2      	ldr	r2, [r4, #12]
 8001ea8:	6948      	ldr	r0, [r1, #20]
 8001eaa:	4432      	add	r2, r6
 8001eac:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8001eb0:	b125      	cbz	r5, 8001ebc <rcl_wait+0x1ec>
        rmw_gcs->guard_conditions[rmw_gcs->guard_condition_count] =
 8001eb2:	690a      	ldr	r2, [r1, #16]
 8001eb4:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
        ++(rmw_gcs->guard_condition_count);
 8001eb8:	3201      	adds	r2, #1
 8001eba:	610a      	str	r2, [r1, #16]
      bool is_canceled = false;
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
      rcl_ret_t ret = rcl_timer_is_canceled(wait_set->timers[i], &is_canceled);
 8001ec4:	6922      	ldr	r2, [r4, #16]
 8001ec6:	9307      	str	r3, [sp, #28]
 8001ec8:	58d0      	ldr	r0, [r2, r3]
 8001eca:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8001ece:	f013 fb84 	bl	80155da <rcl_timer_is_canceled>
      if (ret != RCL_RET_OK) {
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	d1de      	bne.n	8001e96 <rcl_wait+0x1c6>
      if (is_canceled) {
 8001ed8:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8001edc:	6922      	ldr	r2, [r4, #16]
 8001ede:	9b07      	ldr	r3, [sp, #28]
 8001ee0:	b121      	cbz	r1, 8001eec <rcl_wait+0x21c>
        wait_set->timers[i] = NULL;
 8001ee2:	50d0      	str	r0, [r2, r3]
    for (i = 0; i < wait_set->impl->timer_index; ++i) {
 8001ee4:	3601      	adds	r6, #1
 8001ee6:	f147 0700 	adc.w	r7, r7, #0
 8001eea:	e71e      	b.n	8001d2a <rcl_wait+0x5a>
      int64_t timer_timeout = INT64_MAX;
 8001eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ef4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
      ret = rcl_timer_get_time_until_next_call(wait_set->timers[i], &timer_timeout);
 8001ef8:	58d0      	ldr	r0, [r2, r3]
 8001efa:	a90a      	add	r1, sp, #40	; 0x28
 8001efc:	f013 fb30 	bl	8015560 <rcl_timer_get_time_until_next_call>
      if (ret != RCL_RET_OK) {
 8001f00:	4605      	mov	r5, r0
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d1c7      	bne.n	8001e96 <rcl_wait+0x1c6>
      if (timer_timeout < min_timeout) {
 8001f06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001f0a:	4552      	cmp	r2, sl
 8001f0c:	eb73 010b 	sbcs.w	r1, r3, fp
 8001f10:	bfbf      	itttt	lt
 8001f12:	469b      	movlt	fp, r3
        is_timer_timeout = true;
 8001f14:	9b05      	ldrlt	r3, [sp, #20]
 8001f16:	9306      	strlt	r3, [sp, #24]
      if (timer_timeout < min_timeout) {
 8001f18:	4692      	movlt	sl, r2
 8001f1a:	e7e3      	b.n	8001ee4 <rcl_wait+0x214>
  } else if (timeout > 0 || is_timer_timeout) {
 8001f1c:	f1b8 0f01 	cmp.w	r8, #1
 8001f20:	f179 0300 	sbcs.w	r3, r9, #0
 8001f24:	da01      	bge.n	8001f2a <rcl_wait+0x25a>
 8001f26:	9b06      	ldr	r3, [sp, #24]
 8001f28:	b1db      	cbz	r3, 8001f62 <rcl_wait+0x292>
    if (min_timeout < 0) {
 8001f2a:	4656      	mov	r6, sl
 8001f2c:	2e00      	cmp	r6, #0
 8001f2e:	f17b 0300 	sbcs.w	r3, fp, #0
 8001f32:	bfb8      	it	lt
 8001f34:	2600      	movlt	r6, #0
 8001f36:	465f      	mov	r7, fp
 8001f38:	bfb8      	it	lt
 8001f3a:	2700      	movlt	r7, #0
    temporary_timeout_storage.sec = RCL_NS_TO_S(min_timeout);
 8001f3c:	a324      	add	r3, pc, #144	; (adr r3, 8001fd0 <rcl_wait+0x300>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	4630      	mov	r0, r6
 8001f44:	4639      	mov	r1, r7
 8001f46:	f7ff f997 	bl	8001278 <__aeabi_ldivmod>
    temporary_timeout_storage.nsec = min_timeout % 1000000000;
 8001f4a:	a321      	add	r3, pc, #132	; (adr r3, 8001fd0 <rcl_wait+0x300>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    temporary_timeout_storage.sec = RCL_NS_TO_S(min_timeout);
 8001f50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    temporary_timeout_storage.nsec = min_timeout % 1000000000;
 8001f54:	4630      	mov	r0, r6
 8001f56:	4639      	mov	r1, r7
 8001f58:	f7ff f98e 	bl	8001278 <__aeabi_ldivmod>
 8001f5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001f60:	e6f3      	b.n	8001d4a <rcl_wait+0x7a>
  rmw_time_t * timeout_argument = NULL;
 8001f62:	9d06      	ldr	r5, [sp, #24]
 8001f64:	e6f2      	b.n	8001d4c <rcl_wait+0x7c>
    if (!wait_set->timers[i]) {
 8001f66:	6923      	ldr	r3, [r4, #16]
 8001f68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001f6c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8001f70:	b908      	cbnz	r0, 8001f76 <rcl_wait+0x2a6>
  for (i = 0; i < wait_set->impl->timer_index; ++i) {
 8001f72:	3601      	adds	r6, #1
 8001f74:	e74c      	b.n	8001e10 <rcl_wait+0x140>
    bool is_ready = false;
 8001f76:	2300      	movs	r3, #0
    rcl_ret_t ret = rcl_timer_is_ready(wait_set->timers[i], &is_ready);
 8001f78:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    bool is_ready = false;
 8001f7c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    rcl_ret_t ret = rcl_timer_is_ready(wait_set->timers[i], &is_ready);
 8001f80:	f013 fb0b 	bl	801559a <rcl_timer_is_ready>
    if (ret != RCL_RET_OK) {
 8001f84:	4605      	mov	r5, r0
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d185      	bne.n	8001e96 <rcl_wait+0x1c6>
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Timer in wait set is ready");
 8001f8a:	9b05      	ldr	r3, [sp, #20]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b923      	cbnz	r3, 8001f9a <rcl_wait+0x2ca>
 8001f90:	f010 ff44 	bl	8012e1c <rcutils_logging_initialize>
 8001f94:	b108      	cbz	r0, 8001f9a <rcl_wait+0x2ca>
 8001f96:	f004 ffe7 	bl	8006f68 <rcutils_reset_error>
 8001f9a:	210a      	movs	r1, #10
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	f005 fa29 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8001fa2:	b168      	cbz	r0, 8001fc0 <rcl_wait+0x2f0>
 8001fa4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001fa8:	b923      	cbnz	r3, 8001fb4 <rcl_wait+0x2e4>
      wait_set->timers[i] = NULL;
 8001faa:	6923      	ldr	r3, [r4, #16]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f843 200a 	str.w	r2, [r3, sl]
 8001fb2:	e7de      	b.n	8001f72 <rcl_wait+0x2a2>
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Timer in wait set is ready");
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	463a      	mov	r2, r7
 8001fb8:	210a      	movs	r1, #10
 8001fba:	4648      	mov	r0, r9
 8001fbc:	f005 fa44 	bl	8007448 <rcutils_log>
    if (!is_ready) {
 8001fc0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1d4      	bne.n	8001f72 <rcl_wait+0x2a2>
 8001fc8:	e7ef      	b.n	8001faa <rcl_wait+0x2da>
 8001fca:	bf00      	nop
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	3b9aca00 	.word	0x3b9aca00
 8001fd4:	00000000 	.word	0x00000000
 8001fd8:	2000461a 	.word	0x2000461a
 8001fdc:	0801c072 	.word	0x0801c072
 8001fe0:	0801e19c 	.word	0x0801e19c
 8001fe4:	200007b0 	.word	0x200007b0
 8001fe8:	200007bc 	.word	0x200007bc
 8001fec:	0801e1b4 	.word	0x0801e1b4
 8001ff0:	0801d6c3 	.word	0x0801d6c3
 8001ff4:	0801d6be 	.word	0x0801d6be
 8001ff8:	200007c8 	.word	0x200007c8
 8001ffc:	0801e1d9 	.word	0x0801e1d9
 8002000:	0801e20e 	.word	0x0801e20e
 8002004:	200007d4 	.word	0x200007d4
 8002008:	0801e229 	.word	0x0801e229
 800200c:	200007e0 	.word	0x200007e0
 8002010:	0801e24b 	.word	0x0801e24b
 8002014:	200007ec 	.word	0x200007ec
 8002018:	0801e270 	.word	0x0801e270
 800201c:	200007f8 	.word	0x200007f8
 8002020:	0801e28c 	.word	0x0801e28c
 8002024:	20000804 	.word	0x20000804
 8002028:	0801e2a9 	.word	0x0801e2a9
 800202c:	20000810 	.word	0x20000810
    bool is_ready = wait_set->impl->rmw_subscriptions.subscribers[i] != NULL;
 8002030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8002038:	9b05      	ldr	r3, [sp, #20]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8002040:	b923      	cbnz	r3, 800204c <rcl_wait+0x37c>
 8002042:	f010 feeb 	bl	8012e1c <rcutils_logging_initialize>
 8002046:	b108      	cbz	r0, 800204c <rcl_wait+0x37c>
 8002048:	f004 ff8e 	bl	8006f68 <rcutils_reset_error>
 800204c:	210a      	movs	r1, #10
 800204e:	4638      	mov	r0, r7
 8002050:	f005 f9d0 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8002054:	b150      	cbz	r0, 800206c <rcl_wait+0x39c>
 8002056:	f1b8 0f00 	cmp.w	r8, #0
 800205a:	d00a      	beq.n	8002072 <rcl_wait+0x3a2>
 800205c:	464b      	mov	r3, r9
 800205e:	463a      	mov	r2, r7
 8002060:	210a      	movs	r1, #10
 8002062:	4650      	mov	r0, sl
 8002064:	f005 f9f0 	bl	8007448 <rcutils_log>
  for (i = 0; i < wait_set->size_of_subscriptions; ++i) {
 8002068:	3601      	adds	r6, #1
 800206a:	e6e1      	b.n	8001e30 <rcl_wait+0x160>
    if (!is_ready) {
 800206c:	f1b8 0f00 	cmp.w	r8, #0
 8002070:	d1fa      	bne.n	8002068 <rcl_wait+0x398>
      wait_set->subscriptions[i] = NULL;
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	f843 200b 	str.w	r2, [r3, fp]
 800207a:	e7f5      	b.n	8002068 <rcl_wait+0x398>
    bool is_ready = wait_set->impl->rmw_guard_conditions.guard_conditions[i] != NULL;
 800207c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(
 8002084:	9b05      	ldr	r3, [sp, #20]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800208c:	b923      	cbnz	r3, 8002098 <rcl_wait+0x3c8>
 800208e:	f010 fec5 	bl	8012e1c <rcutils_logging_initialize>
 8002092:	b108      	cbz	r0, 8002098 <rcl_wait+0x3c8>
 8002094:	f004 ff68 	bl	8006f68 <rcutils_reset_error>
 8002098:	210a      	movs	r1, #10
 800209a:	4638      	mov	r0, r7
 800209c:	f005 f9aa 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80020a0:	b150      	cbz	r0, 80020b8 <rcl_wait+0x3e8>
 80020a2:	f1b8 0f00 	cmp.w	r8, #0
 80020a6:	d00a      	beq.n	80020be <rcl_wait+0x3ee>
 80020a8:	464b      	mov	r3, r9
 80020aa:	463a      	mov	r2, r7
 80020ac:	210a      	movs	r1, #10
 80020ae:	4650      	mov	r0, sl
 80020b0:	f005 f9ca 	bl	8007448 <rcutils_log>
  for (i = 0; i < wait_set->size_of_guard_conditions; ++i) {
 80020b4:	3601      	adds	r6, #1
 80020b6:	e6c5      	b.n	8001e44 <rcl_wait+0x174>
    if (!is_ready) {
 80020b8:	f1b8 0f00 	cmp.w	r8, #0
 80020bc:	d1fa      	bne.n	80020b4 <rcl_wait+0x3e4>
      wait_set->guard_conditions[i] = NULL;
 80020be:	68a3      	ldr	r3, [r4, #8]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f843 200b 	str.w	r2, [r3, fp]
 80020c6:	e7f5      	b.n	80020b4 <rcl_wait+0x3e4>
    bool is_ready = wait_set->impl->rmw_clients.clients[i] != NULL;
 80020c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Client in wait set is ready");
 80020d0:	9b05      	ldr	r3, [sp, #20]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 80020d8:	b923      	cbnz	r3, 80020e4 <rcl_wait+0x414>
 80020da:	f010 fe9f 	bl	8012e1c <rcutils_logging_initialize>
 80020de:	b108      	cbz	r0, 80020e4 <rcl_wait+0x414>
 80020e0:	f004 ff42 	bl	8006f68 <rcutils_reset_error>
 80020e4:	210a      	movs	r1, #10
 80020e6:	4638      	mov	r0, r7
 80020e8:	f005 f984 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80020ec:	b150      	cbz	r0, 8002104 <rcl_wait+0x434>
 80020ee:	f1b8 0f00 	cmp.w	r8, #0
 80020f2:	d00a      	beq.n	800210a <rcl_wait+0x43a>
 80020f4:	464b      	mov	r3, r9
 80020f6:	463a      	mov	r2, r7
 80020f8:	210a      	movs	r1, #10
 80020fa:	4650      	mov	r0, sl
 80020fc:	f005 f9a4 	bl	8007448 <rcutils_log>
  for (i = 0; i < wait_set->size_of_clients; ++i) {
 8002100:	3601      	adds	r6, #1
 8002102:	e6a9      	b.n	8001e58 <rcl_wait+0x188>
    if (!is_ready) {
 8002104:	f1b8 0f00 	cmp.w	r8, #0
 8002108:	d1fa      	bne.n	8002100 <rcl_wait+0x430>
      wait_set->clients[i] = NULL;
 800210a:	69a3      	ldr	r3, [r4, #24]
 800210c:	2200      	movs	r2, #0
 800210e:	f843 200b 	str.w	r2, [r3, fp]
 8002112:	e7f5      	b.n	8002100 <rcl_wait+0x430>
    bool is_ready = wait_set->impl->rmw_services.services[i] != NULL;
 8002114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Service in wait set is ready");
 800211c:	9b05      	ldr	r3, [sp, #20]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8002124:	b923      	cbnz	r3, 8002130 <rcl_wait+0x460>
 8002126:	f010 fe79 	bl	8012e1c <rcutils_logging_initialize>
 800212a:	b108      	cbz	r0, 8002130 <rcl_wait+0x460>
 800212c:	f004 ff1c 	bl	8006f68 <rcutils_reset_error>
 8002130:	210a      	movs	r1, #10
 8002132:	4638      	mov	r0, r7
 8002134:	f005 f95e 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8002138:	b150      	cbz	r0, 8002150 <rcl_wait+0x480>
 800213a:	f1b8 0f00 	cmp.w	r8, #0
 800213e:	d00a      	beq.n	8002156 <rcl_wait+0x486>
 8002140:	464b      	mov	r3, r9
 8002142:	463a      	mov	r2, r7
 8002144:	210a      	movs	r1, #10
 8002146:	4650      	mov	r0, sl
 8002148:	f005 f97e 	bl	8007448 <rcutils_log>
  for (i = 0; i < wait_set->size_of_services; ++i) {
 800214c:	3601      	adds	r6, #1
 800214e:	e68d      	b.n	8001e6c <rcl_wait+0x19c>
    if (!is_ready) {
 8002150:	f1b8 0f00 	cmp.w	r8, #0
 8002154:	d1fa      	bne.n	800214c <rcl_wait+0x47c>
      wait_set->services[i] = NULL;
 8002156:	6a23      	ldr	r3, [r4, #32]
 8002158:	2200      	movs	r2, #0
 800215a:	f843 200b 	str.w	r2, [r3, fp]
 800215e:	e7f5      	b.n	800214c <rcl_wait+0x47c>
    bool is_ready = wait_set->impl->rmw_events.events[i] != NULL;
 8002160:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    RCUTILS_LOG_DEBUG_EXPRESSION_NAMED(is_ready, ROS_PACKAGE_NAME, "Event in wait set is ready");
 8002168:	9b05      	ldr	r3, [sp, #20]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8002170:	b923      	cbnz	r3, 800217c <rcl_wait+0x4ac>
 8002172:	f010 fe53 	bl	8012e1c <rcutils_logging_initialize>
 8002176:	b108      	cbz	r0, 800217c <rcl_wait+0x4ac>
 8002178:	f004 fef6 	bl	8006f68 <rcutils_reset_error>
 800217c:	210a      	movs	r1, #10
 800217e:	4638      	mov	r0, r7
 8002180:	f005 f938 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8002184:	b150      	cbz	r0, 800219c <rcl_wait+0x4cc>
 8002186:	f1b8 0f00 	cmp.w	r8, #0
 800218a:	d00a      	beq.n	80021a2 <rcl_wait+0x4d2>
 800218c:	464b      	mov	r3, r9
 800218e:	463a      	mov	r2, r7
 8002190:	210a      	movs	r1, #10
 8002192:	4650      	mov	r0, sl
 8002194:	f005 f958 	bl	8007448 <rcutils_log>
  for (i = 0; i < wait_set->size_of_events; ++i) {
 8002198:	3601      	adds	r6, #1
 800219a:	e671      	b.n	8001e80 <rcl_wait+0x1b0>
    if (!is_ready) {
 800219c:	f1b8 0f00 	cmp.w	r8, #0
 80021a0:	d1fa      	bne.n	8002198 <rcl_wait+0x4c8>
      wait_set->events[i] = NULL;
 80021a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021a4:	2200      	movs	r2, #0
 80021a6:	f843 200b 	str.w	r2, [r3, fp]
 80021aa:	e7f5      	b.n	8002198 <rcl_wait+0x4c8>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 80021ac:	250b      	movs	r5, #11
 80021ae:	e672      	b.n	8001e96 <rcl_wait+0x1c6>
    return RCL_RET_WAIT_SET_INVALID;
 80021b0:	f44f 7561 	mov.w	r5, #900	; 0x384
 80021b4:	e66f      	b.n	8001e96 <rcl_wait+0x1c6>
    return RCL_RET_WAIT_SET_EMPTY;
 80021b6:	f240 3585 	movw	r5, #901	; 0x385
 80021ba:	e66c      	b.n	8001e96 <rcl_wait+0x1c6>
    return RCL_RET_ERROR;
 80021bc:	2501      	movs	r5, #1
 80021be:	e66a      	b.n	8001e96 <rcl_wait+0x1c6>

080021c0 <rmw_wait>:
  rmw_services_t * services,
  rmw_clients_t * clients,
  rmw_events_t * events,
  rmw_wait_set_t * wait_set,
  const rmw_time_t * wait_timeout)
{
 80021c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80021c8:	4682      	mov	sl, r0
 80021ca:	4689      	mov	r9, r1
 80021cc:	4690      	mov	r8, r2
 80021ce:	469b      	mov	fp, r3
  (void) wait_set;
  EPROS_PRINT_TRACE()

  // Check if timeout
  uint64_t timeout;
  if (wait_timeout != NULL) {
 80021d0:	f1bc 0f00 	cmp.w	ip, #0
 80021d4:	d02b      	beq.n	800222e <rmw_wait+0x6e>
    // Convert to int (checking overflow)
    if (wait_timeout->sec >= (UINT64_MAX / 1000)) {
 80021d6:	e9dc 2300 	ldrd	r2, r3, [ip]
 80021da:	a15d      	add	r1, pc, #372	; (adr r1, 8002350 <rmw_wait+0x190>)
 80021dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021e0:	4299      	cmp	r1, r3
 80021e2:	bf08      	it	eq
 80021e4:	4290      	cmpeq	r0, r2
 80021e6:	d368      	bcc.n	80022ba <rmw_wait+0xfa>
      // Overflow
      timeout = INT_MAX;
      RMW_SET_ERROR_MSG("Wait timeout overflow");
    } else {
      timeout = wait_timeout->sec * 1000;
 80021e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021ec:	fba2 4501 	umull	r4, r5, r2, r1
 80021f0:	fb01 5503 	mla	r5, r1, r3, r5
      uint64_t timeout_ms = wait_timeout->nsec / 1000000;
 80021f4:	4a54      	ldr	r2, [pc, #336]	; (8002348 <rmw_wait+0x188>)
 80021f6:	2300      	movs	r3, #0
 80021f8:	e9dc 0102 	ldrd	r0, r1, [ip, #8]
 80021fc:	f7ff f88c 	bl	8001318 <__aeabi_uldivmod>
 8002200:	460b      	mov	r3, r1
      if ((UINT64_MAX - timeout) <= timeout_ms) {
 8002202:	43e9      	mvns	r1, r5
      uint64_t timeout_ms = wait_timeout->nsec / 1000000;
 8002204:	4602      	mov	r2, r0
      if ((UINT64_MAX - timeout) <= timeout_ms) {
 8002206:	428b      	cmp	r3, r1
 8002208:	ea6f 0004 	mvn.w	r0, r4
 800220c:	bf08      	it	eq
 800220e:	4282      	cmpeq	r2, r0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002218:	d206      	bcs.n	8002228 <rmw_wait+0x68>
        // Overflow
        timeout = INT_MAX;
        RMW_SET_ERROR_MSG("Wait timeout overflow");
      } else {
        timeout += timeout_ms;
 800221a:	18a6      	adds	r6, r4, r2
 800221c:	eb45 0703 	adc.w	r7, r5, r3
 8002220:	42b9      	cmp	r1, r7
 8002222:	bf08      	it	eq
 8002224:	42b0      	cmpeq	r0, r6
 8002226:	d206      	bcs.n	8002236 <rmw_wait+0x76>
      timeout = INT_MAX;
 8002228:	4606      	mov	r6, r0
 800222a:	460f      	mov	r7, r1
 800222c:	e003      	b.n	8002236 <rmw_wait+0x76>
          RMW_SET_ERROR_MSG("Wait timeout overflow");
        }
      }
    }
  } else {
    timeout = (uint64_t)UXR_TIMEOUT_INF;
 800222e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002232:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  // Run every XRCE session

  uint8_t available_contexts = 0;
  rmw_uxrce_mempool_item_t * item = NULL;
  
  item = session_memory.allocateditems;
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <rmw_wait+0x18c>)
 8002238:	681c      	ldr	r4, [r3, #0]
  while (item != NULL) {
 800223a:	2100      	movs	r1, #0
  item = session_memory.allocateditems;
 800223c:	4622      	mov	r2, r4
 800223e:	b2cb      	uxtb	r3, r1
  while (item != NULL) {
 8002240:	3101      	adds	r1, #1
 8002242:	2a00      	cmp	r2, #0
 8002244:	d13d      	bne.n	80022c2 <rmw_wait+0x102>
    item = item->next;
    available_contexts++;
  }

  uint64_t per_session_timeout = (uint64_t)((float)timeout/(float)available_contexts);
 8002246:	4639      	mov	r1, r7
 8002248:	4630      	mov	r0, r6
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f7fe fe7e 	bl	8000f4c <__aeabi_ul2f>
 8002250:	9b01      	ldr	r3, [sp, #4]
 8002252:	4605      	mov	r5, r0
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fe67 	bl	8000f28 <__aeabi_ui2f>
 800225a:	4601      	mov	r1, r0
 800225c:	4628      	mov	r0, r5
 800225e:	f7fe ff6f 	bl	8001140 <__aeabi_fdiv>
 8002262:	f7ff f871 	bl	8001348 <__aeabi_f2ulz>
 8002266:	4605      	mov	r5, r0
  item = session_memory.allocateditems;
  while (item != NULL) {
 8002268:	bb6c      	cbnz	r4, 80022c6 <rmw_wait+0x106>
  }

  bool buffered_status = false;

  // Check services
  if (services) {
 800226a:	f1b8 0f00 	cmp.w	r8, #0
 800226e:	d03f      	beq.n	80022f0 <rmw_wait+0x130>
    for (size_t i = 0; i < services->service_count; ++i) {
 8002270:	f8d8 0000 	ldr.w	r0, [r8]
  bool buffered_status = false;
 8002274:	4623      	mov	r3, r4
    for (size_t i = 0; i < services->service_count; ++i) {
 8002276:	42a0      	cmp	r0, r4
 8002278:	d12d      	bne.n	80022d6 <rmw_wait+0x116>
      }
    }
  }

  // Check clients
  if (clients) {
 800227a:	f1bb 0f00 	cmp.w	fp, #0
 800227e:	d004      	beq.n	800228a <rmw_wait+0xca>
    for (size_t i = 0; i < clients->client_count; ++i) {
 8002280:	f8db 4000 	ldr.w	r4, [fp]
 8002284:	2200      	movs	r2, #0
 8002286:	4294      	cmp	r4, r2
 8002288:	d134      	bne.n	80022f4 <rmw_wait+0x134>
      }
    }
  }

  // Check subscriptions
  if (subscriptions) {
 800228a:	f1ba 0f00 	cmp.w	sl, #0
 800228e:	d004      	beq.n	800229a <rmw_wait+0xda>
    for (size_t i = 0; i < subscriptions->subscriber_count; ++i) {
 8002290:	f8da 4000 	ldr.w	r4, [sl]
 8002294:	2200      	movs	r2, #0
 8002296:	4294      	cmp	r4, r2
 8002298:	d139      	bne.n	800230e <rmw_wait+0x14e>
      }
    }
  }

  // Check guard conditions
  if (guard_conditions) {
 800229a:	f1b9 0f00 	cmp.w	r9, #0
 800229e:	d005      	beq.n	80022ac <rmw_wait+0xec>
    for (size_t i = 0; i < guard_conditions->guard_condition_count; ++i) {
 80022a0:	2200      	movs	r2, #0
 80022a2:	f8d9 5000 	ldr.w	r5, [r9]
      bool * hasTriggered = (bool *)guard_conditions->guard_conditions[i];
      if ((*hasTriggered) == false) {
        guard_conditions->guard_conditions[i] = NULL;
      } else {
        *hasTriggered = false;
 80022a6:	4616      	mov	r6, r2
    for (size_t i = 0; i < guard_conditions->guard_condition_count; ++i) {
 80022a8:	4295      	cmp	r5, r2
 80022aa:	d13d      	bne.n	8002328 <rmw_wait+0x168>
    }
  }

  EPROS_PRINT_TRACE()

  return (buffered_status) ? RMW_RET_OK : RMW_RET_TIMEOUT;
 80022ac:	2b00      	cmp	r3, #0
}
 80022ae:	bf0c      	ite	eq
 80022b0:	2002      	moveq	r0, #2
 80022b2:	2000      	movne	r0, #0
 80022b4:	b003      	add	sp, #12
 80022b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      timeout = INT_MAX;
 80022ba:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 80022be:	2700      	movs	r7, #0
 80022c0:	e7b9      	b.n	8002236 <rmw_wait+0x76>
    item = item->next;
 80022c2:	6892      	ldr	r2, [r2, #8]
    available_contexts++;
 80022c4:	e7bb      	b.n	800223e <rmw_wait+0x7e>
    uxr_run_session_until_data(&custom_context->session, per_session_timeout);
 80022c6:	68e0      	ldr	r0, [r4, #12]
 80022c8:	4629      	mov	r1, r5
 80022ca:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80022ce:	f011 fff4 	bl	80142ba <uxr_run_session_until_data>
    item = item->next;
 80022d2:	68a4      	ldr	r4, [r4, #8]
 80022d4:	e7c8      	b.n	8002268 <rmw_wait+0xa8>
      rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)services->services[i];
 80022d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
      if (!custom_service->micro_buffer_in_use) {
 80022da:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 80022de:	f892 285a 	ldrb.w	r2, [r2, #2138]	; 0x85a
 80022e2:	b912      	cbnz	r2, 80022ea <rmw_wait+0x12a>
        services->services[i] = NULL;
 80022e4:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80022e8:	461a      	mov	r2, r3
    for (size_t i = 0; i < services->service_count; ++i) {
 80022ea:	3401      	adds	r4, #1
 80022ec:	4613      	mov	r3, r2
 80022ee:	e7c2      	b.n	8002276 <rmw_wait+0xb6>
  bool buffered_status = false;
 80022f0:	4643      	mov	r3, r8
 80022f2:	e7c2      	b.n	800227a <rmw_wait+0xba>
      rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)clients->clients[i];
 80022f4:	f8db 0004 	ldr.w	r0, [fp, #4]
      if (!custom_client->micro_buffer_in_use) {
 80022f8:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 80022fc:	f891 184e 	ldrb.w	r1, [r1, #2126]	; 0x84e
 8002300:	b911      	cbnz	r1, 8002308 <rmw_wait+0x148>
        clients->clients[i] = NULL;
 8002302:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8002306:	4619      	mov	r1, r3
    for (size_t i = 0; i < clients->client_count; ++i) {
 8002308:	3201      	adds	r2, #1
 800230a:	460b      	mov	r3, r1
 800230c:	e7bb      	b.n	8002286 <rmw_wait+0xc6>
        (rmw_uxrce_subscription_t *)subscriptions->subscribers[i];
 800230e:	f8da 0004 	ldr.w	r0, [sl, #4]
      if (!custom_subscription->micro_buffer_in_use) {
 8002312:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8002316:	f891 1842 	ldrb.w	r1, [r1, #2114]	; 0x842
 800231a:	b911      	cbnz	r1, 8002322 <rmw_wait+0x162>
        subscriptions->subscribers[i] = NULL;
 800231c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8002320:	4619      	mov	r1, r3
    for (size_t i = 0; i < subscriptions->subscriber_count; ++i) {
 8002322:	3201      	adds	r2, #1
 8002324:	460b      	mov	r3, r1
 8002326:	e7b6      	b.n	8002296 <rmw_wait+0xd6>
      bool * hasTriggered = (bool *)guard_conditions->guard_conditions[i];
 8002328:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800232c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
      if ((*hasTriggered) == false) {
 8002330:	7801      	ldrb	r1, [r0, #0]
 8002332:	b919      	cbnz	r1, 800233c <rmw_wait+0x17c>
        guard_conditions->guard_conditions[i] = NULL;
 8002334:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (size_t i = 0; i < guard_conditions->guard_condition_count; ++i) {
 8002338:	3201      	adds	r2, #1
 800233a:	e7b5      	b.n	80022a8 <rmw_wait+0xe8>
        *hasTriggered = false;
 800233c:	7006      	strb	r6, [r0, #0]
        buffered_status = true;
 800233e:	460b      	mov	r3, r1
 8002340:	e7fa      	b.n	8002338 <rmw_wait+0x178>
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	000f4240 	.word	0x000f4240
 800234c:	2000416c 	.word	0x2000416c
 8002350:	4bc6a7ee 	.word	0x4bc6a7ee
 8002354:	00418937 	.word	0x00418937

08002358 <_dtoa_r>:
 8002358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800235c:	b0b0      	sub	sp, #192	; 0xc0
 800235e:	af02      	add	r7, sp, #8
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	e9c7 2300 	strd	r2, r3, [r7]
 8002366:	2300      	movs	r3, #0
 8002368:	66bb      	str	r3, [r7, #104]	; 0x68
 800236a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800236e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <_dtoa_r+0x4e>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4619      	mov	r1, r3
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f016 ff68 	bl	8019270 <_Bfree>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da08      	bge.n	80023be <_dtoa_r+0x66>
 80023ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
 80023bc:	e003      	b.n	80023c6 <_dtoa_r+0x6e>
 80023be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	4bab      	ldr	r3, [pc, #684]	; (8002678 <_dtoa_r+0x320>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	4aaa      	ldr	r2, [pc, #680]	; (8002678 <_dtoa_r+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d124      	bne.n	800241c <_dtoa_r+0xc4>
 80023d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <_dtoa_r+0x98>
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <_dtoa_r+0x98>
 80023ec:	4ba3      	ldr	r3, [pc, #652]	; (800267c <_dtoa_r+0x324>)
 80023ee:	e000      	b.n	80023f2 <_dtoa_r+0x9a>
 80023f0:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <_dtoa_r+0x328>)
 80023f2:	657b      	str	r3, [r7, #84]	; 0x54
 80023f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <_dtoa_r+0xbe>
 80023fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fe:	3303      	adds	r3, #3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <_dtoa_r+0xb4>
 8002406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002408:	3308      	adds	r3, #8
 800240a:	e001      	b.n	8002410 <_dtoa_r+0xb8>
 800240c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800240e:	3303      	adds	r3, #3
 8002410:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002418:	f001 b876 	b.w	8003508 <_dtoa_r+0x11b0>
 800241c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	f7ff f968 	bl	80016fc <__aeabi_dcmpeq>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <_dtoa_r+0xfe>
 8002432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	4b92      	ldr	r3, [pc, #584]	; (8002684 <_dtoa_r+0x32c>)
 800243c:	657b      	str	r3, [r7, #84]	; 0x54
 800243e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d004      	beq.n	8002450 <_dtoa_r+0xf8>
 8002446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	f001 b859 	b.w	8003508 <_dtoa_r+0x11b0>
 8002456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800245a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800245e:	9101      	str	r1, [sp, #4]
 8002460:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002464:	9100      	str	r1, [sp, #0]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f017 fa8f 	bl	801998a <__d2b>
 800246c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	0d1b      	lsrs	r3, r3, #20
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800247a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <_dtoa_r+0x158>
 8002482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002486:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002498:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80024a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024aa:	2300      	movs	r3, #0
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
 80024ae:	e033      	b.n	8002518 <_dtoa_r+0x1c0>
 80024b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 4332 	addw	r3, r3, #1074	; 0x432
 80024ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	dd0d      	ble.n	80024e2 <_dtoa_r+0x18a>
 80024c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80024d0:	409a      	lsls	r2, r3
 80024d2:	6a39      	ldr	r1, [r7, #32]
 80024d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d8:	3b20      	subs	r3, #32
 80024da:	fa21 f303 	lsr.w	r3, r1, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	e006      	b.n	80024f0 <_dtoa_r+0x198>
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024e8:	f1c3 0320 	rsb	r3, r3, #32
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
 80024f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80024f4:	f7fe f9d6 	bl	80008a4 <__aeabi_ui2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250c:	f2a3 4333 	subw	r3, r3, #1075	; 0x433
 8002510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002514:	2301      	movs	r3, #1
 8002516:	673b      	str	r3, [r7, #112]	; 0x70
 8002518:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <_dtoa_r+0x330>)
 8002522:	f7fe f881 	bl	8000628 <__aeabi_dsub>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	a34c      	add	r3, pc, #304	; (adr r3, 8002660 <_dtoa_r+0x308>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe fa30 	bl	8000998 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a349      	add	r3, pc, #292	; (adr r3, 8002668 <_dtoa_r+0x310>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f871 	bl	800062c <__adddf3>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4690      	mov	r8, r2
 8002550:	4699      	mov	r9, r3
 8002552:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8002556:	f7fe f9b5 	bl	80008c4 <__aeabi_i2d>
 800255a:	a345      	add	r3, pc, #276	; (adr r3, 8002670 <_dtoa_r+0x318>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fe fa1a 	bl	8000998 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4640      	mov	r0, r8
 800256a:	4649      	mov	r1, r9
 800256c:	f7fe f85e 	bl	800062c <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002578:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800257c:	f7ff f9c0 	bl	8001900 <__aeabi_d2iz>
 8002580:	4603      	mov	r3, r0
 8002582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002592:	f7ff f8bd 	bl	8001710 <__aeabi_dcmplt>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d011      	beq.n	80025c0 <_dtoa_r+0x268>
 800259c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80025a0:	f7fe f990 	bl	80008c4 <__aeabi_i2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025ac:	f7ff f8a6 	bl	80016fc <__aeabi_dcmpeq>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <_dtoa_r+0x268>
 80025b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025c0:	2301      	movs	r3, #1
 80025c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db19      	blt.n	8002602 <_dtoa_r+0x2aa>
 80025ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d2:	2b16      	cmp	r3, #22
 80025d4:	dc15      	bgt.n	8002602 <_dtoa_r+0x2aa>
 80025d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025da:	4a2c      	ldr	r2, [pc, #176]	; (800268c <_dtoa_r+0x334>)
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7ff f892 	bl	8001710 <__aeabi_dcmplt>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <_dtoa_r+0x2a4>
 80025f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002614:	2b00      	cmp	r3, #0
 8002616:	db07      	blt.n	8002628 <_dtoa_r+0x2d0>
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800261e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002626:	e007      	b.n	8002638 <_dtoa_r+0x2e0>
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	425b      	negs	r3, r3
 800262e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002638:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800263c:	2b00      	cmp	r3, #0
 800263e:	db27      	blt.n	8002690 <_dtoa_r+0x338>
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002646:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800264a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800264c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002654:	4413      	add	r3, r2
 8002656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800265a:	e027      	b.n	80026ac <_dtoa_r+0x354>
 800265c:	f3af 8000 	nop.w
 8002660:	636f4361 	.word	0x636f4361
 8002664:	3fd287a7 	.word	0x3fd287a7
 8002668:	8b60c8b3 	.word	0x8b60c8b3
 800266c:	3fc68a28 	.word	0x3fc68a28
 8002670:	509f79fb 	.word	0x509f79fb
 8002674:	3fd34413 	.word	0x3fd34413
 8002678:	7ff00000 	.word	0x7ff00000
 800267c:	0801a270 	.word	0x0801a270
 8002680:	0801a27c 	.word	0x0801a27c
 8002684:	0801a280 	.word	0x0801a280
 8002688:	3ff80000 	.word	0x3ff80000
 800268c:	0801b6c8 	.word	0x0801b6c8
 8002690:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002694:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800269e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026a2:	425b      	negs	r3, r3
 80026a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026a8:	2300      	movs	r3, #0
 80026aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db03      	blt.n	80026bc <_dtoa_r+0x364>
 80026b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026b8:	2b09      	cmp	r3, #9
 80026ba:	dd02      	ble.n	80026c2 <_dtoa_r+0x36a>
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c2:	2301      	movs	r3, #1
 80026c4:	677b      	str	r3, [r7, #116]	; 0x74
 80026c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	dd06      	ble.n	80026dc <_dtoa_r+0x384>
 80026ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026d2:	3b04      	subs	r3, #4
 80026d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026d8:	2300      	movs	r3, #0
 80026da:	677b      	str	r3, [r7, #116]	; 0x74
 80026dc:	2301      	movs	r3, #1
 80026de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d847      	bhi.n	800278a <_dtoa_r+0x432>
 80026fa:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <_dtoa_r+0x3a8>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002719 	.word	0x08002719
 8002704:	08002719 	.word	0x08002719
 8002708:	08002727 	.word	0x08002727
 800270c:	08002755 	.word	0x08002755
 8002710:	0800272d 	.word	0x0800272d
 8002714:	0800275b 	.word	0x0800275b
 8002718:	2312      	movs	r3, #18
 800271a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002724:	e031      	b.n	800278a <_dtoa_r+0x432>
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800272c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002730:	2b00      	cmp	r3, #0
 8002732:	dc02      	bgt.n	800273a <_dtoa_r+0x3e2>
 8002734:	2301      	movs	r3, #1
 8002736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800273a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800273e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800274a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002752:	e01a      	b.n	800278a <_dtoa_r+0x432>
 8002754:	2300      	movs	r3, #0
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800275a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800275e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002762:	4413      	add	r3, r2
 8002764:	3301      	adds	r3, #1
 8002766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800276a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800276e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002776:	3b01      	subs	r3, #1
 8002778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800277c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002780:	2b00      	cmp	r3, #0
 8002782:	dc02      	bgt.n	800278a <_dtoa_r+0x432>
 8002784:	2301      	movs	r3, #1
 8002786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800278a:	2304      	movs	r3, #4
 800278c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
 8002796:	e009      	b.n	80027ac <_dtoa_r+0x454>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
 80027a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b0:	f103 0214 	add.w	r2, r3, #20
 80027b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d9ed      	bls.n	8002798 <_dtoa_r+0x440>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	4619      	mov	r1, r3
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f016 fd05 	bl	80191d2 <_Balloc>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	657b      	str	r3, [r7, #84]	; 0x54
 80027d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f2c0 824c 	blt.w	8002c7a <_dtoa_r+0x922>
 80027e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027e6:	2b0e      	cmp	r3, #14
 80027e8:	f300 8247 	bgt.w	8002c7a <_dtoa_r+0x922>
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8243 	beq.w	8002c7a <_dtoa_r+0x922>
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
 8002808:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
 800280e:	2302      	movs	r3, #2
 8002810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002818:	2b00      	cmp	r3, #0
 800281a:	dd5f      	ble.n	80028dc <_dtoa_r+0x584>
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	4a8a      	ldr	r2, [pc, #552]	; (8002a50 <_dtoa_r+0x6f8>)
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002836:	111b      	asrs	r3, r3, #4
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800283c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03a      	beq.n	80028be <_dtoa_r+0x566>
 8002848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002854:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <_dtoa_r+0x6fc>)
 800285a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800285e:	f7fe f9c5 	bl	8000bec <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800286a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800286e:	3301      	adds	r3, #1
 8002870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002874:	e023      	b.n	80028be <_dtoa_r+0x566>
 8002876:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d013      	beq.n	80028aa <_dtoa_r+0x552>
 8002882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002886:	3301      	adds	r3, #1
 8002888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800288c:	4a71      	ldr	r2, [pc, #452]	; (8002a54 <_dtoa_r+0x6fc>)
 800288e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800289e:	f7fe f87b 	bl	8000998 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80028aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ae:	105b      	asrs	r3, r3, #1
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028b8:	3301      	adds	r3, #1
 80028ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1d7      	bne.n	8002876 <_dtoa_r+0x51e>
 80028c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028ce:	f7fe f98d 	bl	8000bec <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80028da:	e043      	b.n	8002964 <_dtoa_r+0x60c>
 80028dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028e0:	425b      	negs	r3, r3
 80028e2:	643b      	str	r3, [r7, #64]	; 0x40
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03c      	beq.n	8002964 <_dtoa_r+0x60c>
 80028ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80028ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <_dtoa_r+0x6f8>)
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f7fe f84b 	bl	8000998 <__aeabi_dmul>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290c:	111b      	asrs	r3, r3, #4
 800290e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002912:	e023      	b.n	800295c <_dtoa_r+0x604>
 8002914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <_dtoa_r+0x5f0>
 8002920:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002924:	3301      	adds	r3, #1
 8002926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800292a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800292e:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <_dtoa_r+0x6fc>)
 8002930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fe f82c 	bl	8000998 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	105b      	asrs	r3, r3, #1
 800294e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002956:	3301      	adds	r3, #1
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800295c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1d7      	bne.n	8002914 <_dtoa_r+0x5bc>
 8002964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02b      	beq.n	80029c4 <_dtoa_r+0x66c>
 800296c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <_dtoa_r+0x700>)
 8002976:	f7fe fecb 	bl	8001710 <__aeabi_dcmplt>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d021      	beq.n	80029c4 <_dtoa_r+0x66c>
 8002980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002984:	2b00      	cmp	r3, #0
 8002986:	dd1d      	ble.n	80029c4 <_dtoa_r+0x66c>
 8002988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800298c:	2b00      	cmp	r3, #0
 800298e:	f340 8165 	ble.w	8002c5c <_dtoa_r+0x904>
 8002992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299e:	3b01      	subs	r3, #1
 80029a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80029a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <_dtoa_r+0x704>)
 80029ae:	f7fd fff3 	bl	8000998 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80029ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029be:	3301      	adds	r3, #1
 80029c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80029c4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80029c8:	f7fd ff7c 	bl	80008c4 <__aeabi_i2d>
 80029cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029d0:	f7fd ffe2 	bl	8000998 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <_dtoa_r+0x708>)
 80029e2:	f7fd fe23 	bl	800062c <__adddf3>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d134      	bne.n	8002a68 <_dtoa_r+0x710>
 80029fe:	2300      	movs	r3, #0
 8002a00:	667b      	str	r3, [r7, #100]	; 0x64
 8002a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
 8002a06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <_dtoa_r+0x70c>)
 8002a10:	f7fd fe0a 	bl	8000628 <__aeabi_dsub>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002a1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a24:	f7fe fe92 	bl	800174c <__aeabi_dcmpgt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 83c0 	bne.w	80031b0 <_dtoa_r+0xe58>
 8002a30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a38:	4614      	mov	r4, r2
 8002a3a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	f7fe fe65 	bl	8001710 <__aeabi_dcmplt>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 83a6 	bne.w	800319a <_dtoa_r+0xe42>
 8002a4e:	e108      	b.n	8002c62 <_dtoa_r+0x90a>
 8002a50:	0801b6c8 	.word	0x0801b6c8
 8002a54:	0801b790 	.word	0x0801b790
 8002a58:	3ff00000 	.word	0x3ff00000
 8002a5c:	40240000 	.word	0x40240000
 8002a60:	401c0000 	.word	0x401c0000
 8002a64:	40140000 	.word	0x40140000
 8002a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d07a      	beq.n	8002b66 <_dtoa_r+0x80e>
 8002a70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a74:	3b01      	subs	r3, #1
 8002a76:	4a9c      	ldr	r2, [pc, #624]	; (8002ce8 <_dtoa_r+0x990>)
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f04f 0000 	mov.w	r0, #0
 8002a84:	4999      	ldr	r1, [pc, #612]	; (8002cec <_dtoa_r+0x994>)
 8002a86:	f7fe f8b1 	bl	8000bec <__aeabi_ddiv>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a96:	f7fd fdc7 	bl	8000628 <__aeabi_dsub>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7fe ff26 	bl	8001900 <__aeabi_d2iz>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002abc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002abe:	f7fd ff01 	bl	80008c4 <__aeabi_i2d>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fdad 	bl	8000628 <__aeabi_dsub>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	1c59      	adds	r1, r3, #1
 8002ade:	6579      	str	r1, [r7, #84]	; 0x54
 8002ae0:	3230      	adds	r2, #48	; 0x30
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aee:	f7fe fe0f 	bl	8001710 <__aeabi_dcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 84ee 	bne.w	80034d6 <_dtoa_r+0x117e>
 8002afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	497b      	ldr	r1, [pc, #492]	; (8002cf0 <_dtoa_r+0x998>)
 8002b04:	f7fd fd90 	bl	8000628 <__aeabi_dsub>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b14:	f7fe fdfc 	bl	8001710 <__aeabi_dcmplt>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 8143 	bne.w	8002da6 <_dtoa_r+0xa4e>
 8002b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b24:	3301      	adds	r3, #1
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b32:	429a      	cmp	r2, r3
 8002b34:	f280 8094 	bge.w	8002c60 <_dtoa_r+0x908>
 8002b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	4b6c      	ldr	r3, [pc, #432]	; (8002cf4 <_dtoa_r+0x99c>)
 8002b42:	f7fd ff29 	bl	8000998 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b4e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	4b67      	ldr	r3, [pc, #412]	; (8002cf4 <_dtoa_r+0x99c>)
 8002b58:	f7fd ff1e 	bl	8000998 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002b64:	e7a0      	b.n	8002aa8 <_dtoa_r+0x750>
 8002b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4a5d      	ldr	r2, [pc, #372]	; (8002ce8 <_dtoa_r+0x990>)
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd ff0d 	bl	8000998 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002b86:	2301      	movs	r3, #1
 8002b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe feb4 	bl	8001900 <__aeabi_d2iz>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ba0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ba2:	f7fd fe8f 	bl	80008c4 <__aeabi_i2d>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd fd3b 	bl	8000628 <__aeabi_dsub>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc0:	1c59      	adds	r1, r3, #1
 8002bc2:	6579      	str	r1, [r7, #84]	; 0x54
 8002bc4:	3230      	adds	r2, #48	; 0x30
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d131      	bne.n	8002c3a <_dtoa_r+0x8e2>
 8002bd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <_dtoa_r+0x994>)
 8002be4:	f7fd fd22 	bl	800062c <__adddf3>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fe fdac 	bl	800174c <__aeabi_dcmpgt>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80d7 	bne.w	8002daa <_dtoa_r+0xa52>
 8002bfc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	4938      	ldr	r1, [pc, #224]	; (8002cec <_dtoa_r+0x994>)
 8002c0a:	f7fd fd0d 	bl	8000628 <__aeabi_dsub>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fe fd7b 	bl	8001710 <__aeabi_dcmplt>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d100      	bne.n	8002c22 <_dtoa_r+0x8ca>
 8002c20:	e01f      	b.n	8002c62 <_dtoa_r+0x90a>
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	3b01      	subs	r3, #1
 8002c26:	657b      	str	r3, [r7, #84]	; 0x54
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d0f8      	beq.n	8002c22 <_dtoa_r+0x8ca>
 8002c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c32:	3301      	adds	r3, #1
 8002c34:	657b      	str	r3, [r7, #84]	; 0x54
 8002c36:	f000 bc51 	b.w	80034dc <_dtoa_r+0x1184>
 8002c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <_dtoa_r+0x99c>)
 8002c4e:	f7fd fea3 	bl	8000998 <__aeabi_dmul>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002c5a:	e797      	b.n	8002b8c <_dtoa_r+0x834>
 8002c5c:	bf00      	nop
 8002c5e:	e000      	b.n	8002c62 <_dtoa_r+0x90a>
 8002c60:	bf00      	nop
 8002c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c64:	657b      	str	r3, [r7, #84]	; 0x54
 8002c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f2c0 80d4 	blt.w	8002e2a <_dtoa_r+0xad2>
 8002c82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c86:	2b0e      	cmp	r3, #14
 8002c88:	f300 80cf 	bgt.w	8002e2a <_dtoa_r+0xad2>
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <_dtoa_r+0x990>)
 8002c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da2a      	bge.n	8002cfc <_dtoa_r+0x9a4>
 8002ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	dc26      	bgt.n	8002cfc <_dtoa_r+0x9a4>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f2c0 826f 	blt.w	800319e <_dtoa_r+0xe46>
 8002cc0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <_dtoa_r+0x9a0>)
 8002cca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cce:	f7fd fe63 	bl	8000998 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fe fd23 	bl	8001724 <__aeabi_dcmple>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 825c 	bne.w	800319e <_dtoa_r+0xe46>
 8002ce6:	e266      	b.n	80031b6 <_dtoa_r+0xe5e>
 8002ce8:	0801b6c8 	.word	0x0801b6c8
 8002cec:	3fe00000 	.word	0x3fe00000
 8002cf0:	3ff00000 	.word	0x3ff00000
 8002cf4:	40240000 	.word	0x40240000
 8002cf8:	40140000 	.word	0x40140000
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d0a:	f7fd ff6f 	bl	8000bec <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fe fdf3 	bl	8001900 <__aeabi_d2iz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d24:	f7fd fdce 	bl	80008c4 <__aeabi_i2d>
 8002d28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d2c:	f7fd fe34 	bl	8000998 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd fc76 	bl	8000628 <__aeabi_dsub>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4a:	1c59      	adds	r1, r3, #1
 8002d4c:	6579      	str	r1, [r7, #84]	; 0x54
 8002d4e:	3230      	adds	r2, #48	; 0x30
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d144      	bne.n	8002dea <_dtoa_r+0xa92>
 8002d60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	f7fd fc60 	bl	800062c <__adddf3>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002d74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d78:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d7c:	f7fe fcc8 	bl	8001710 <__aeabi_dcmplt>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <_dtoa_r+0xa56>
 8002d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d8e:	f7fe fcb5 	bl	80016fc <__aeabi_dcmpeq>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d100      	bne.n	8002d9a <_dtoa_r+0xa42>
 8002d98:	e043      	b.n	8002e22 <_dtoa_r+0xaca>
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03e      	beq.n	8002e22 <_dtoa_r+0xaca>
 8002da4:	e003      	b.n	8002dae <_dtoa_r+0xa56>
 8002da6:	bf00      	nop
 8002da8:	e010      	b.n	8002dcc <_dtoa_r+0xa74>
 8002daa:	bf00      	nop
 8002dac:	e00e      	b.n	8002dcc <_dtoa_r+0xa74>
 8002dae:	bf00      	nop
 8002db0:	e00c      	b.n	8002dcc <_dtoa_r+0xa74>
 8002db2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d108      	bne.n	8002dcc <_dtoa_r+0xa74>
 8002dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	2230      	movs	r2, #48	; 0x30
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e006      	b.n	8002dda <_dtoa_r+0xa82>
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b39      	cmp	r3, #57	; 0x39
 8002dd8:	d0eb      	beq.n	8002db2 <_dtoa_r+0xa5a>
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	657a      	str	r2, [r7, #84]	; 0x54
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	3201      	adds	r2, #1
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e01b      	b.n	8002e22 <_dtoa_r+0xaca>
 8002dea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	4bad      	ldr	r3, [pc, #692]	; (80030a8 <_dtoa_r+0xd50>)
 8002df4:	f7fd fdd0 	bl	8000998 <__aeabi_dmul>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002e00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	f7fe fc76 	bl	80016fc <__aeabi_dcmpeq>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d107      	bne.n	8002e26 <_dtoa_r+0xace>
 8002e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e20:	e76f      	b.n	8002d02 <_dtoa_r+0x9aa>
 8002e22:	bf00      	nop
 8002e24:	e35a      	b.n	80034dc <_dtoa_r+0x1184>
 8002e26:	bf00      	nop
 8002e28:	e358      	b.n	80034dc <_dtoa_r+0x1184>
 8002e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e40:	667b      	str	r3, [r7, #100]	; 0x64
 8002e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d05e      	beq.n	8002f08 <_dtoa_r+0xbb0>
 8002e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	dc0c      	bgt.n	8002e6c <_dtoa_r+0xb14>
 8002e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <_dtoa_r+0xb08>
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002e5e:	e002      	b.n	8002e66 <_dtoa_r+0xb0e>
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e6a:	e03a      	b.n	8002ee2 <_dtoa_r+0xb8a>
 8002e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e70:	3b01      	subs	r3, #1
 8002e72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	db07      	blt.n	8002e92 <_dtoa_r+0xb3a>
 8002e82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e90:	e015      	b.n	8002ebe <_dtoa_r+0xb66>
 8002e92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ea4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ea6:	4413      	add	r3, r2
 8002ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da09      	bge.n	8002ee2 <_dtoa_r+0xb8a>
 8002ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eea:	4413      	add	r3, r2
 8002eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ef8:	4413      	add	r3, r2
 8002efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002efe:	2101      	movs	r1, #1
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f016 faaf 	bl	8019464 <__i2b>
 8002f06:	6678      	str	r0, [r7, #100]	; 0x64
 8002f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd21      	ble.n	8002f54 <_dtoa_r+0xbfc>
 8002f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	dd1d      	ble.n	8002f54 <_dtoa_r+0xbfc>
 8002f18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bfa8      	it	ge
 8002f24:	4613      	movge	r3, r2
 8002f26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dd34      	ble.n	8002fc6 <_dtoa_r+0xc6e>
 8002f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d029      	beq.n	8002fb8 <_dtoa_r+0xc60>
 8002f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	dd12      	ble.n	8002f92 <_dtoa_r+0xc3a>
 8002f6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f70:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f00e fc70 	bl	8011858 <__pow5mult>
 8002f78:	6678      	str	r0, [r7, #100]	; 0x64
 8002f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f016 fa85 	bl	801948e <__multiply>
 8002f84:	63b8      	str	r0, [r7, #56]	; 0x38
 8002f86:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f016 f971 	bl	8019270 <_Bfree>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <_dtoa_r+0xc6e>
 8002fa8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002fac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f00e fc52 	bl	8011858 <__pow5mult>
 8002fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
 8002fb6:	e006      	b.n	8002fc6 <_dtoa_r+0xc6e>
 8002fb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f00e fc4a 	bl	8011858 <__pow5mult>
 8002fc4:	66f8      	str	r0, [r7, #108]	; 0x6c
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f016 fa4b 	bl	8019464 <__i2b>
 8002fce:	6638      	str	r0, [r7, #96]	; 0x60
 8002fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	dd05      	ble.n	8002fe2 <_dtoa_r+0xc8a>
 8002fd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f00e fc3c 	bl	8011858 <__pow5mult>
 8002fe0:	6638      	str	r0, [r7, #96]	; 0x60
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fe6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	dc18      	bgt.n	8003020 <_dtoa_r+0xcc8>
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d115      	bne.n	8003020 <_dtoa_r+0xcc8>
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d110      	bne.n	8003020 <_dtoa_r+0xcc8>
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <_dtoa_r+0xd54>)
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <_dtoa_r+0xcc8>
 8003008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800300c:	3301      	adds	r3, #1
 800300e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003016:	3301      	adds	r3, #1
 8003018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800301c:	2301      	movs	r3, #1
 800301e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <_dtoa_r+0xcec>
 8003026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	3b01      	subs	r3, #1
 800302c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800302e:	3304      	adds	r3, #4
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	f016 f9a2 	bl	8019380 <__hi0bits>
 800303c:	4603      	mov	r3, r0
 800303e:	f1c3 0320 	rsb	r3, r3, #32
 8003042:	e000      	b.n	8003046 <_dtoa_r+0xcee>
 8003044:	2301      	movs	r3, #1
 8003046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800304a:	4413      	add	r3, r2
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <_dtoa_r+0xd10>
 800305c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003060:	f1c3 0320 	rsb	r3, r3, #32
 8003064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800306c:	2b04      	cmp	r3, #4
 800306e:	dd1f      	ble.n	80030b0 <_dtoa_r+0xd58>
 8003070:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003074:	3b04      	subs	r3, #4
 8003076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800307a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800307e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003082:	4413      	add	r3, r2
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003088:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800308c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003090:	4413      	add	r3, r2
 8003092:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800309a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800309e:	4413      	add	r3, r2
 80030a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a4:	e022      	b.n	80030ec <_dtoa_r+0xd94>
 80030a6:	bf00      	nop
 80030a8:	40240000 	.word	0x40240000
 80030ac:	7ff00000 	.word	0x7ff00000
 80030b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	dc19      	bgt.n	80030ec <_dtoa_r+0xd94>
 80030b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030bc:	331c      	adds	r3, #28
 80030be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ca:	4413      	add	r3, r2
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80030d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030d8:	4413      	add	r3, r2
 80030da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e6:	4413      	add	r3, r2
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	dd06      	ble.n	8003102 <_dtoa_r+0xdaa>
 80030f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f016 fac4 	bl	8019688 <__lshift>
 8003100:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003102:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	dd06      	ble.n	8003118 <_dtoa_r+0xdc0>
 800310a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800310e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f016 fab9 	bl	8019688 <__lshift>
 8003116:	6638      	str	r0, [r7, #96]	; 0x60
 8003118:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800311c:	2b00      	cmp	r3, #0
 800311e:	d021      	beq.n	8003164 <_dtoa_r+0xe0c>
 8003120:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003122:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003124:	f016 fb38 	bl	8019798 <__mcmp>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	da1a      	bge.n	8003164 <_dtoa_r+0xe0c>
 800312e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003132:	3b01      	subs	r3, #1
 8003134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003138:	2300      	movs	r3, #0
 800313a:	220a      	movs	r2, #10
 800313c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f016 f8b4 	bl	80192ac <__multadd>
 8003144:	66f8      	str	r0, [r7, #108]	; 0x6c
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <_dtoa_r+0xe04>
 800314e:	2300      	movs	r3, #0
 8003150:	220a      	movs	r2, #10
 8003152:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f016 f8a9 	bl	80192ac <__multadd>
 800315a:	6678      	str	r0, [r7, #100]	; 0x64
 800315c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc2f      	bgt.n	80031cc <_dtoa_r+0xe74>
 800316c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003170:	2b02      	cmp	r3, #2
 8003172:	dd2b      	ble.n	80031cc <_dtoa_r+0xe74>
 8003174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003178:	2b00      	cmp	r3, #0
 800317a:	db12      	blt.n	80031a2 <_dtoa_r+0xe4a>
 800317c:	2300      	movs	r3, #0
 800317e:	2205      	movs	r2, #5
 8003180:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f016 f892 	bl	80192ac <__multadd>
 8003188:	6638      	str	r0, [r7, #96]	; 0x60
 800318a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800318c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800318e:	f016 fb03 	bl	8019798 <__mcmp>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	dc0d      	bgt.n	80031b4 <_dtoa_r+0xe5c>
 8003198:	e003      	b.n	80031a2 <_dtoa_r+0xe4a>
 800319a:	bf00      	nop
 800319c:	e002      	b.n	80031a4 <_dtoa_r+0xe4c>
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <_dtoa_r+0xe4c>
 80031a2:	bf00      	nop
 80031a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031a8:	43db      	mvns	r3, r3
 80031aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031ae:	e17b      	b.n	80034a8 <_dtoa_r+0x1150>
 80031b0:	bf00      	nop
 80031b2:	e000      	b.n	80031b6 <_dtoa_r+0xe5e>
 80031b4:	bf00      	nop
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	657a      	str	r2, [r7, #84]	; 0x54
 80031bc:	2231      	movs	r2, #49	; 0x31
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031c4:	3301      	adds	r3, #1
 80031c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031ca:	e16d      	b.n	80034a8 <_dtoa_r+0x1150>
 80031cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80fd 	beq.w	80033d0 <_dtoa_r+0x1078>
 80031d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031da:	2b00      	cmp	r3, #0
 80031dc:	dd06      	ble.n	80031ec <_dtoa_r+0xe94>
 80031de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80031e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f016 fa4f 	bl	8019688 <__lshift>
 80031ea:	6678      	str	r0, [r7, #100]	; 0x64
 80031ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d019      	beq.n	800322a <_dtoa_r+0xed2>
 80031f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4619      	mov	r1, r3
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f015 ffe8 	bl	80191d2 <_Balloc>
 8003202:	6678      	str	r0, [r7, #100]	; 0x64
 8003204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003206:	f103 000c 	add.w	r0, r3, #12
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	f103 010c 	add.w	r1, r3, #12
 8003210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	3302      	adds	r3, #2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	461a      	mov	r2, r3
 800321a:	f7fe fac1 	bl	80017a0 <memcpy>
 800321e:	2201      	movs	r2, #1
 8003220:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f016 fa30 	bl	8019688 <__lshift>
 8003228:	6678      	str	r0, [r7, #100]	; 0x64
 800322a:	2301      	movs	r3, #1
 800322c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003230:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003232:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003234:	f015 fd10 	bl	8018c58 <quorem>
 8003238:	4603      	mov	r3, r0
 800323a:	3330      	adds	r3, #48	; 0x30
 800323c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003240:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003242:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003244:	f016 faa8 	bl	8019798 <__mcmp>
 8003248:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 800324c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800324e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f016 fae8 	bl	8019826 <__mdiff>
 8003256:	6378      	str	r0, [r7, #52]	; 0x34
 8003258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <_dtoa_r+0xf14>
 8003260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003262:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003264:	f016 fa98 	bl	8019798 <__mcmp>
 8003268:	4603      	mov	r3, r0
 800326a:	e000      	b.n	800326e <_dtoa_r+0xf16>
 800326c:	2301      	movs	r3, #1
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
 8003270:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f015 fffc 	bl	8019270 <_Bfree>
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11d      	bne.n	80032ba <_dtoa_r+0xf62>
 800327e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <_dtoa_r+0xf62>
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d114      	bne.n	80032ba <_dtoa_r+0xf62>
 8003290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003294:	2b39      	cmp	r3, #57	; 0x39
 8003296:	d052      	beq.n	800333e <_dtoa_r+0xfe6>
 8003298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800329c:	2b00      	cmp	r3, #0
 800329e:	dd04      	ble.n	80032aa <_dtoa_r+0xf52>
 80032a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032a4:	3301      	adds	r3, #1
 80032a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	657a      	str	r2, [r7, #84]	; 0x54
 80032b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e0f6      	b.n	80034a8 <_dtoa_r+0x1150>
 80032ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0c      	blt.n	80032dc <_dtoa_r+0xf84>
 80032c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d131      	bne.n	800332e <_dtoa_r+0xfd6>
 80032ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d12d      	bne.n	800332e <_dtoa_r+0xfd6>
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d128      	bne.n	800332e <_dtoa_r+0xfd6>
 80032dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	dd1d      	ble.n	800331e <_dtoa_r+0xfc6>
 80032e2:	2201      	movs	r2, #1
 80032e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f016 f9ce 	bl	8019688 <__lshift>
 80032ec:	66f8      	str	r0, [r7, #108]	; 0x6c
 80032ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80032f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032f2:	f016 fa51 	bl	8019798 <__mcmp>
 80032f6:	6438      	str	r0, [r7, #64]	; 0x40
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dc08      	bgt.n	8003310 <_dtoa_r+0xfb8>
 80032fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10c      	bne.n	800331e <_dtoa_r+0xfc6>
 8003304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <_dtoa_r+0xfc6>
 8003310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800331a:	2b39      	cmp	r3, #57	; 0x39
 800331c:	d011      	beq.n	8003342 <_dtoa_r+0xfea>
 800331e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	657a      	str	r2, [r7, #84]	; 0x54
 8003324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e0bc      	b.n	80034a8 <_dtoa_r+0x1150>
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	dd17      	ble.n	8003364 <_dtoa_r+0x100c>
 8003334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003338:	2b39      	cmp	r3, #57	; 0x39
 800333a:	d109      	bne.n	8003350 <_dtoa_r+0xff8>
 800333c:	e002      	b.n	8003344 <_dtoa_r+0xfec>
 800333e:	bf00      	nop
 8003340:	e000      	b.n	8003344 <_dtoa_r+0xfec>
 8003342:	bf00      	nop
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	657a      	str	r2, [r7, #84]	; 0x54
 800334a:	2239      	movs	r2, #57	; 0x39
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e082      	b.n	8003456 <_dtoa_r+0x10fe>
 8003350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003354:	b2da      	uxtb	r2, r3
 8003356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	6579      	str	r1, [r7, #84]	; 0x54
 800335c:	3201      	adds	r2, #1
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e0a1      	b.n	80034a8 <_dtoa_r+0x1150>
 8003364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	657a      	str	r2, [r7, #84]	; 0x54
 800336a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800337a:	429a      	cmp	r2, r3
 800337c:	d04d      	beq.n	800341a <_dtoa_r+0x10c2>
 800337e:	2300      	movs	r3, #0
 8003380:	220a      	movs	r2, #10
 8003382:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f015 ff91 	bl	80192ac <__multadd>
 800338a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800338c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800338e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003390:	429a      	cmp	r2, r3
 8003392:	d109      	bne.n	80033a8 <_dtoa_r+0x1050>
 8003394:	2300      	movs	r3, #0
 8003396:	220a      	movs	r2, #10
 8003398:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f015 ff86 	bl	80192ac <__multadd>
 80033a0:	6678      	str	r0, [r7, #100]	; 0x64
 80033a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033a6:	e00d      	b.n	80033c4 <_dtoa_r+0x106c>
 80033a8:	2300      	movs	r3, #0
 80033aa:	220a      	movs	r2, #10
 80033ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f015 ff7c 	bl	80192ac <__multadd>
 80033b4:	66b8      	str	r0, [r7, #104]	; 0x68
 80033b6:	2300      	movs	r3, #0
 80033b8:	220a      	movs	r2, #10
 80033ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f015 ff75 	bl	80192ac <__multadd>
 80033c2:	6678      	str	r0, [r7, #100]	; 0x64
 80033c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c8:	3301      	adds	r3, #1
 80033ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033ce:	e72f      	b.n	8003230 <_dtoa_r+0xed8>
 80033d0:	2301      	movs	r3, #1
 80033d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80033d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80033da:	f015 fc3d 	bl	8018c58 <quorem>
 80033de:	4603      	mov	r3, r0
 80033e0:	3330      	adds	r3, #48	; 0x30
 80033e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	657a      	str	r2, [r7, #84]	; 0x54
 80033ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033fc:	429a      	cmp	r2, r3
 80033fe:	da0e      	bge.n	800341e <_dtoa_r+0x10c6>
 8003400:	2300      	movs	r3, #0
 8003402:	220a      	movs	r2, #10
 8003404:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f015 ff50 	bl	80192ac <__multadd>
 800340c:	66f8      	str	r0, [r7, #108]	; 0x6c
 800340e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003412:	3301      	adds	r3, #1
 8003414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003418:	e7dd      	b.n	80033d6 <_dtoa_r+0x107e>
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <_dtoa_r+0x10c8>
 800341e:	bf00      	nop
 8003420:	2201      	movs	r2, #1
 8003422:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f016 f92f 	bl	8019688 <__lshift>
 800342a:	66f8      	str	r0, [r7, #108]	; 0x6c
 800342c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800342e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003430:	f016 f9b2 	bl	8019798 <__mcmp>
 8003434:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8003438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800343c:	2b00      	cmp	r3, #0
 800343e:	dc09      	bgt.n	8003454 <_dtoa_r+0x10fc>
 8003440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003444:	2b00      	cmp	r3, #0
 8003446:	d125      	bne.n	8003494 <_dtoa_r+0x113c>
 8003448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01f      	beq.n	8003494 <_dtoa_r+0x113c>
 8003454:	bf00      	nop
 8003456:	e00e      	b.n	8003476 <_dtoa_r+0x111e>
 8003458:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800345a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345c:	429a      	cmp	r2, r3
 800345e:	d10a      	bne.n	8003476 <_dtoa_r+0x111e>
 8003460:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003464:	3301      	adds	r3, #1
 8003466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800346a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	657a      	str	r2, [r7, #84]	; 0x54
 8003470:	2231      	movs	r2, #49	; 0x31
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e018      	b.n	80034a8 <_dtoa_r+0x1150>
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	3b01      	subs	r3, #1
 800347a:	657b      	str	r3, [r7, #84]	; 0x54
 800347c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b39      	cmp	r3, #57	; 0x39
 8003482:	d0e9      	beq.n	8003458 <_dtoa_r+0x1100>
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	657a      	str	r2, [r7, #84]	; 0x54
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	3201      	adds	r2, #1
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e009      	b.n	80034a8 <_dtoa_r+0x1150>
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	3b01      	subs	r3, #1
 8003498:	657b      	str	r3, [r7, #84]	; 0x54
 800349a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d0f8      	beq.n	8003494 <_dtoa_r+0x113c>
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	3301      	adds	r3, #1
 80034a6:	657b      	str	r3, [r7, #84]	; 0x54
 80034a8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f015 fee0 	bl	8019270 <_Bfree>
 80034b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d011      	beq.n	80034da <_dtoa_r+0x1182>
 80034b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <_dtoa_r+0x1174>
 80034bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d003      	beq.n	80034cc <_dtoa_r+0x1174>
 80034c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f015 fed2 	bl	8019270 <_Bfree>
 80034cc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f015 fece 	bl	8019270 <_Bfree>
 80034d4:	e002      	b.n	80034dc <_dtoa_r+0x1184>
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <_dtoa_r+0x1184>
 80034da:	bf00      	nop
 80034dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f015 fec6 	bl	8019270 <_Bfree>
 80034e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <_dtoa_r+0x11ae>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003508:	4618      	mov	r0, r3
 800350a:	37b8      	adds	r7, #184	; 0xb8
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003512:	bf00      	nop

08003514 <ping_subscription_callback>:
	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) != 0){
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <ping_subscription_callback+0x28>)
 8003516:	6881      	ldr	r1, [r0, #8]
{
 8003518:	b510      	push	{r4, lr}
 800351a:	4604      	mov	r4, r0
	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) != 0){
 800351c:	6898      	ldr	r0, [r3, #8]
 800351e:	f7fc fec3 	bl	80002a8 <strcmp>
 8003522:	b150      	cbz	r0, 800353a <ping_subscription_callback+0x26>
		printf("Ping received with seq %s. Answering.\n", msg->frame_id.data);
 8003524:	68a1      	ldr	r1, [r4, #8]
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <ping_subscription_callback+0x2c>)
 8003528:	f008 fcaa 	bl	800be80 <printf>
		rcl_publish(&pong_publisher, (const void*)msg, NULL);
 800352c:	4621      	mov	r1, r4
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <ping_subscription_callback+0x30>)
}
 8003530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rcl_publish(&pong_publisher, (const void*)msg, NULL);
 8003534:	2200      	movs	r2, #0
 8003536:	f00f bba3 	b.w	8012c80 <rcl_publish>
}
 800353a:	bd10      	pop	{r4, pc}
 800353c:	20003e44 	.word	0x20003e44
 8003540:	0801bef6 	.word	0x0801bef6
 8003544:	20003e64 	.word	0x20003e64

08003548 <pong_subscription_callback>:
	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) == 0) {
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <pong_subscription_callback+0x28>)
 800354a:	6881      	ldr	r1, [r0, #8]
{
 800354c:	b510      	push	{r4, lr}
 800354e:	4604      	mov	r4, r0
	if(strcmp(outcoming_ping.frame_id.data, msg->frame_id.data) == 0) {
 8003550:	6898      	ldr	r0, [r3, #8]
 8003552:	f7fc fea9 	bl	80002a8 <strcmp>
 8003556:	b948      	cbnz	r0, 800356c <pong_subscription_callback+0x24>
			pong_count++;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <pong_subscription_callback+0x2c>)
			printf("Pong for seq %s (%d)\n", msg->frame_id.data, pong_count);
 800355a:	68a1      	ldr	r1, [r4, #8]
			pong_count++;
 800355c:	681a      	ldr	r2, [r3, #0]
			printf("Pong for seq %s (%d)\n", msg->frame_id.data, pong_count);
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <pong_subscription_callback+0x30>)
			pong_count++;
 8003560:	3201      	adds	r2, #1
}
 8003562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			pong_count++;
 8003566:	601a      	str	r2, [r3, #0]
			printf("Pong for seq %s (%d)\n", msg->frame_id.data, pong_count);
 8003568:	f008 bc8a 	b.w	800be80 <printf>
}
 800356c:	bd10      	pop	{r4, pc}
 800356e:	bf00      	nop
 8003570:	20003e44 	.word	0x20003e44
 8003574:	20003e60 	.word	0x20003e60
 8003578:	0801bf1d 	.word	0x0801bf1d

0800357c <ping_timer_callback>:
{
 800357c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (timer != NULL) {
 800357e:	b310      	cbz	r0, 80035c6 <ping_timer_callback+0x4a>
		seq_no = rand();
 8003580:	f008 fcb0 	bl	800bee4 <rand>
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <ping_timer_callback+0x50>)
		sprintf(outcoming_ping.frame_id.data, "%d_%d", seq_no, device_id);
 8003586:	4c12      	ldr	r4, [pc, #72]	; (80035d0 <ping_timer_callback+0x54>)
		seq_no = rand();
 8003588:	6018      	str	r0, [r3, #0]
		sprintf(outcoming_ping.frame_id.data, "%d_%d", seq_no, device_id);
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <ping_timer_callback+0x58>)
 800358c:	4912      	ldr	r1, [pc, #72]	; (80035d8 <ping_timer_callback+0x5c>)
 800358e:	681b      	ldr	r3, [r3, #0]
		seq_no = rand();
 8003590:	4602      	mov	r2, r0
		sprintf(outcoming_ping.frame_id.data, "%d_%d", seq_no, device_id);
 8003592:	68a0      	ldr	r0, [r4, #8]
 8003594:	f009 f956 	bl	800c844 <sprintf>
		outcoming_ping.frame_id.size = strlen(outcoming_ping.frame_id.data);
 8003598:	68a0      	ldr	r0, [r4, #8]
 800359a:	f7fc fe11 	bl	80001c0 <strlen>
 800359e:	60e0      	str	r0, [r4, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
 80035a0:	2001      	movs	r0, #1
 80035a2:	4669      	mov	r1, sp
 80035a4:	f7fe faa4 	bl	8001af0 <z_impl_clock_gettime>
		outcoming_ping.stamp.sec = ts.tv_sec;
 80035a8:	9b00      	ldr	r3, [sp, #0]
 80035aa:	6023      	str	r3, [r4, #0]
		outcoming_ping.stamp.nanosec = ts.tv_nsec;
 80035ac:	9b02      	ldr	r3, [sp, #8]
 80035ae:	6063      	str	r3, [r4, #4]
		pong_count = 0;
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <ping_timer_callback+0x60>)
		rcl_publish(&ping_publisher, (const void*)&outcoming_ping, NULL);
 80035b2:	480b      	ldr	r0, [pc, #44]	; (80035e0 <ping_timer_callback+0x64>)
		pong_count = 0;
 80035b4:	2200      	movs	r2, #0
		rcl_publish(&ping_publisher, (const void*)&outcoming_ping, NULL);
 80035b6:	4621      	mov	r1, r4
		pong_count = 0;
 80035b8:	601a      	str	r2, [r3, #0]
		rcl_publish(&ping_publisher, (const void*)&outcoming_ping, NULL);
 80035ba:	f00f fb61 	bl	8012c80 <rcl_publish>
		printf("Ping send seq %s\n", outcoming_ping.frame_id.data);  
 80035be:	68a1      	ldr	r1, [r4, #8]
 80035c0:	4808      	ldr	r0, [pc, #32]	; (80035e4 <ping_timer_callback+0x68>)
 80035c2:	f008 fc5d 	bl	800be80 <printf>
}
 80035c6:	b004      	add	sp, #16
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	20003e6c 	.word	0x20003e6c
 80035d0:	20003e44 	.word	0x20003e44
 80035d4:	20003e18 	.word	0x20003e18
 80035d8:	0801bf33 	.word	0x0801bf33
 80035dc:	20003e60 	.word	0x20003e60
 80035e0:	20003e58 	.word	0x20003e58
 80035e4:	0801bf39 	.word	0x0801bf39

080035e8 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 80035e8:	280f      	cmp	r0, #15
{
 80035ea:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
 80035ec:	d906      	bls.n	80035fc <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
 80035ee:	f00e ff74 	bl	80124da <__errno>
 80035f2:	2309      	movs	r3, #9
 80035f4:	6003      	str	r3, [r0, #0]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
 80035fa:	bd08      	pop	{r3, pc}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <_check_fd+0x30>)
 80035fe:	f3bf 8f5b 	dmb	ish
 8003602:	220c      	movs	r2, #12
 8003604:	fb02 3000 	mla	r0, r2, r0, r3
 8003608:	6883      	ldr	r3, [r0, #8]
 800360a:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&fdtable[fd].refcount)) {
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ed      	beq.n	80035ee <_check_fd+0x6>
	return 0;
 8003612:	2000      	movs	r0, #0
 8003614:	e7f1      	b.n	80035fa <_check_fd+0x12>
 8003616:	bf00      	nop
 8003618:	20000290 	.word	0x20000290

0800361c <z_fd_unref>:
{
 800361c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <z_fd_unref+0x50>)
 8003620:	230c      	movs	r3, #12
 8003622:	fb03 2300 	mla	r3, r3, r0, r2
{
 8003626:	4601      	mov	r1, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
 8003628:	3308      	adds	r3, #8
 800362a:	f3bf 8f5b 	dmb	ish
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	f3bf 8f5b 	dmb	ish
		if (!old_rc) {
 8003634:	b1c0      	cbz	r0, 8003668 <z_fd_unref+0x4c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 8003636:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
 800363a:	1e44      	subs	r4, r0, #1
 800363c:	e853 5f00 	ldrex	r5, [r3]
 8003640:	4285      	cmp	r5, r0
 8003642:	d104      	bne.n	800364e <z_fd_unref+0x32>
 8003644:	e843 4c00 	strex	ip, r4, [r3]
 8003648:	f1bc 0f00 	cmp.w	ip, #0
 800364c:	d1f6      	bne.n	800363c <z_fd_unref+0x20>
 800364e:	f3bf 8f5b 	dmb	ish
 8003652:	d1ea      	bne.n	800362a <z_fd_unref+0xe>
	if (old_rc != 1) {
 8003654:	2801      	cmp	r0, #1
	fdtable[fd].obj = NULL;
 8003656:	bf01      	itttt	eq
 8003658:	230c      	moveq	r3, #12
 800365a:	434b      	muleq	r3, r1
 800365c:	2000      	moveq	r0, #0
 800365e:	18d1      	addeq	r1, r2, r3
 8003660:	bf06      	itte	eq
 8003662:	50d0      	streq	r0, [r2, r3]
	fdtable[fd].vtable = NULL;
 8003664:	6048      	streq	r0, [r1, #4]
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
 8003666:	4620      	movne	r0, r4
}
 8003668:	bd30      	pop	{r4, r5, pc}
 800366a:	bf00      	nop
 800366c:	20000290 	.word	0x20000290

08003670 <_read>:
}

#ifdef CONFIG_POSIX_API

ssize_t read(int fd, void *buf, size_t sz)
{
 8003670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003674:	4606      	mov	r6, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4615      	mov	r5, r2
	if (_check_fd(fd) < 0) {
 800367a:	f7ff ffb5 	bl	80035e8 <_check_fd>
 800367e:	2800      	cmp	r0, #0
 8003680:	db0c      	blt.n	800369c <_read+0x2c>
		return -1;
	}

	return fdtable[fd].vtable->read(fdtable[fd].obj, buf, sz);
 8003682:	4f08      	ldr	r7, [pc, #32]	; (80036a4 <_read+0x34>)
 8003684:	230c      	movs	r3, #12
 8003686:	fb03 f006 	mul.w	r0, r3, r6
 800368a:	183b      	adds	r3, r7, r0
 800368c:	462a      	mov	r2, r5
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	5838      	ldr	r0, [r7, r0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4621      	mov	r1, r4
}
 8003696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return fdtable[fd].vtable->read(fdtable[fd].obj, buf, sz);
 800369a:	4718      	bx	r3
}
 800369c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a4:	20000290 	.word	0x20000290

080036a8 <_write>:
FUNC_ALIAS(read, _read, ssize_t);

ssize_t write(int fd, const void *buf, size_t sz)
{
 80036a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ac:	4606      	mov	r6, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	4615      	mov	r5, r2
	if (_check_fd(fd) < 0) {
 80036b2:	f7ff ff99 	bl	80035e8 <_check_fd>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	db0c      	blt.n	80036d4 <_write+0x2c>
		return -1;
	}

	return fdtable[fd].vtable->write(fdtable[fd].obj, buf, sz);
 80036ba:	4f08      	ldr	r7, [pc, #32]	; (80036dc <_write+0x34>)
 80036bc:	230c      	movs	r3, #12
 80036be:	fb03 f006 	mul.w	r0, r3, r6
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	462a      	mov	r2, r5
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	5838      	ldr	r0, [r7, r0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4621      	mov	r1, r4
}
 80036ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return fdtable[fd].vtable->write(fdtable[fd].obj, buf, sz);
 80036d2:	4718      	bx	r3
}
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036dc:	20000290 	.word	0x20000290

080036e0 <_close>:
FUNC_ALIAS(write, _write, ssize_t);

int close(int fd)
{
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4605      	mov	r5, r0
	int res;

	if (_check_fd(fd) < 0) {
 80036e4:	f7ff ff80 	bl	80035e8 <_check_fd>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	db0d      	blt.n	8003708 <_close+0x28>
		return -1;
	}

	res = fdtable[fd].vtable->close(fdtable[fd].obj);
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <_close+0x30>)
 80036ee:	230c      	movs	r3, #12
 80036f0:	436b      	muls	r3, r5
 80036f2:	18d1      	adds	r1, r2, r3
 80036f4:	58d0      	ldr	r0, [r2, r3]
 80036f6:	6849      	ldr	r1, [r1, #4]
 80036f8:	6889      	ldr	r1, [r1, #8]
 80036fa:	4788      	blx	r1
 80036fc:	4604      	mov	r4, r0
	(void)z_fd_unref(fd);
 80036fe:	4628      	mov	r0, r5
 8003700:	f7ff ff8c 	bl	800361c <z_fd_unref>

	z_free_fd(fd);

	return res;
}
 8003704:	4620      	mov	r0, r4
 8003706:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 8003708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800370c:	e7fa      	b.n	8003704 <_close+0x24>
 800370e:	bf00      	nop
 8003710:	20000290 	.word	0x20000290

08003714 <_lseek>:

	return z_fdtable_call_ioctl(fdtable[fd].vtable, fdtable[fd].obj, ZFD_IOCTL_FSYNC);
}

off_t lseek(int fd, off_t offset, int whence)
{
 8003714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003716:	4607      	mov	r7, r0
 8003718:	460d      	mov	r5, r1
 800371a:	4616      	mov	r6, r2
	if (_check_fd(fd) < 0) {
 800371c:	f7ff ff64 	bl	80035e8 <_check_fd>
 8003720:	2800      	cmp	r0, #0
 8003722:	db0e      	blt.n	8003742 <_lseek+0x2e>
		return -1;
	}

	return z_fdtable_call_ioctl(fdtable[fd].vtable, fdtable[fd].obj, ZFD_IOCTL_LSEEK,
 8003724:	4908      	ldr	r1, [pc, #32]	; (8003748 <_lseek+0x34>)
 8003726:	9600      	str	r6, [sp, #0]
 8003728:	240c      	movs	r4, #12
 800372a:	fb04 f007 	mul.w	r0, r4, r7
 800372e:	180c      	adds	r4, r1, r0
 8003730:	462b      	mov	r3, r5
 8003732:	5809      	ldr	r1, [r1, r0]
 8003734:	6860      	ldr	r0, [r4, #4]
 8003736:	f240 1201 	movw	r2, #257	; 0x101
 800373a:	f00e fc73 	bl	8012024 <z_fdtable_call_ioctl>
			  offset, whence);
}
 800373e:	b003      	add	sp, #12
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 8003742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003746:	e7fa      	b.n	800373e <_lseek+0x2a>
 8003748:	20000290 	.word	0x20000290

0800374c <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 800374c:	f04f 0210 	mov.w	r2, #16
 8003750:	f3ef 8311 	mrs	r3, BASEPRI
 8003754:	f382 8811 	msr	BASEPRI, r2
 8003758:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8003764:	4b02      	ldr	r3, [pc, #8]	; (8003770 <st_stm32f4_init+0x24>)
 8003766:	4a03      	ldr	r2, [pc, #12]	; (8003774 <st_stm32f4_init+0x28>)
 8003768:	601a      	str	r2, [r3, #0]

	return 0;
}
 800376a:	2000      	movs	r0, #0
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000388 	.word	0x20000388
 8003774:	00f42400 	.word	0x00f42400

08003778 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
 8003778:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
 800377a:	4c04      	ldr	r4, [pc, #16]	; (800378c <__do_init_array_aux+0x14>)
 800377c:	4d04      	ldr	r5, [pc, #16]	; (8003790 <__do_init_array_aux+0x18>)
 800377e:	42ac      	cmp	r4, r5
 8003780:	d300      	bcc.n	8003784 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
 8003782:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
 8003784:	f854 3b04 	ldr.w	r3, [r4], #4
 8003788:	4798      	blx	r3
		func++) {
 800378a:	e7f8      	b.n	800377e <__do_init_array_aux+0x6>
 800378c:	0801a0e4 	.word	0x0801a0e4
 8003790:	0801a0e4 	.word	0x0801a0e4

08003794 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
 8003794:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8003796:	4c05      	ldr	r4, [pc, #20]	; (80037ac <__do_global_ctors_aux+0x18>)
 8003798:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
 800379a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800379e:	b905      	cbnz	r5, 80037a2 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
 80037a0:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
 80037a2:	f854 3904 	ldr.w	r3, [r4], #-4
 80037a6:	3d01      	subs	r5, #1
 80037a8:	4798      	blx	r3
 80037aa:	e7f8      	b.n	800379e <__do_global_ctors_aux+0xa>
 80037ac:	0801a0dc 	.word	0x0801a0dc

080037b0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 80037b0:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80037b2:	4802      	ldr	r0, [pc, #8]	; (80037bc <uart_console_init+0xc>)
 80037b4:	f001 f98c 	bl	8004ad0 <z_impl_device_get_binding>
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);

	uart_console_hook_install();

	return 0;
}
 80037b8:	2000      	movs	r0, #0
 80037ba:	bd08      	pop	{r3, pc}
 80037bc:	0801bfa0 	.word	0x0801bfa0

080037c0 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80037c4:	4f0d      	ldr	r7, [pc, #52]	; (80037fc <__stm32_exti_isr.isra.0+0x3c>)
 80037c6:	4604      	mov	r4, r0
 80037c8:	460e      	mov	r6, r1
 80037ca:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80037cc:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 80037d0:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 80037d4:	42b4      	cmp	r4, r6
 80037d6:	db01      	blt.n	80037dc <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 80037d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037dc:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 80037de:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 80037e2:	ea33 0202 	bics.w	r2, r3, r2
 80037e6:	d107      	bne.n	80037f8 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80037e8:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80037ea:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80037ee:	b11b      	cbz	r3, 80037f8 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80037f0:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80037f4:	4620      	mov	r0, r4
 80037f6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80037f8:	3401      	adds	r4, #1
 80037fa:	e7eb      	b.n	80037d4 <__stm32_exti_isr.isra.0+0x14>
 80037fc:	40013c00 	.word	0x40013c00

08003800 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8003802:	2301      	movs	r3, #1
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	4083      	lsls	r3, r0
 8003808:	430b      	orrs	r3, r1
 800380a:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <stm32_exti_enable+0x18>)
 800380e:	5618      	ldrsb	r0, [r3, r0]
 8003810:	f000 bae6 	b.w	8003de0 <arch_irq_enable>
 8003814:	40013c00 	.word	0x40013c00
 8003818:	0801bfb2 	.word	0x0801bfb2

0800381c <stm32_exti_disable>:
	if (line < 32) {
 800381c:	281f      	cmp	r0, #31
 800381e:	dc07      	bgt.n	8003830 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8003822:	2201      	movs	r2, #1
 8003824:	680b      	ldr	r3, [r1, #0]
 8003826:	fa02 f000 	lsl.w	r0, r2, r0
 800382a:	ea23 0000 	bic.w	r0, r3, r0
 800382e:	6008      	str	r0, [r1, #0]
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40013c00 	.word	0x40013c00

08003838 <stm32_exti_trigger>:
	switch (trigger) {
 8003838:	2903      	cmp	r1, #3
 800383a:	d80f      	bhi.n	800385c <stm32_exti_trigger+0x24>
 800383c:	e8df f001 	tbb	[pc, r1]
 8003840:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003844:	4b15      	ldr	r3, [pc, #84]	; (800389c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8003846:	2201      	movs	r2, #1
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	fa02 f000 	lsl.w	r0, r2, r0
 800384e:	ea21 0100 	bic.w	r1, r1, r0
 8003852:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 800385a:	60d8      	str	r0, [r3, #12]
}
 800385c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800385e:	2301      	movs	r3, #1
 8003860:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <stm32_exti_trigger+0x64>)
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4302      	orrs	r2, r0
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	e7f2      	b.n	8003854 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800386e:	2301      	movs	r3, #1
 8003870:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <stm32_exti_trigger+0x64>)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4302      	orrs	r2, r0
 800387a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	ea22 0000 	bic.w	r0, r2, r0
 8003882:	6098      	str	r0, [r3, #8]
}
 8003884:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8003886:	2301      	movs	r3, #1
 8003888:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <stm32_exti_trigger+0x64>)
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4302      	orrs	r2, r0
 8003892:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	4310      	orrs	r0, r2
 8003898:	e7df      	b.n	800385a <stm32_exti_trigger+0x22>
 800389a:	bf00      	nop
 800389c:	40013c00 	.word	0x40013c00

080038a0 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <stm32_exti_set_callback+0x20>)
{
 80038a2:	b510      	push	{r4, lr}
 80038a4:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 80038a6:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80038aa:	b928      	cbnz	r0, 80038b8 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 80038ac:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 80038b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80038b4:	605a      	str	r2, [r3, #4]

	return 0;
}
 80038b6:	bd10      	pop	{r4, pc}
		return -EBUSY;
 80038b8:	f06f 000f 	mvn.w	r0, #15
 80038bc:	e7fb      	b.n	80038b6 <stm32_exti_set_callback+0x16>
 80038be:	bf00      	nop
 80038c0:	20003e70 	.word	0x20003e70

080038c4 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <stm32_exti_unset_callback+0x10>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 80038cc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80038d0:	605a      	str	r2, [r3, #4]
}
 80038d2:	4770      	bx	lr
 80038d4:	20003e70 	.word	0x20003e70

080038d8 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80038d8:	680b      	ldr	r3, [r1, #0]
{
 80038da:	b086      	sub	sp, #24
 80038dc:	2b06      	cmp	r3, #6
 80038de:	d839      	bhi.n	8003954 <stm32_clock_control_on+0x7c>
 80038e0:	e8df f003 	tbb	[pc, r3]
 80038e4:	2e241004 	.word	0x2e241004
 80038e8:	3838      	.short	0x3838
 80038ea:	1a          	.byte	0x1a
 80038eb:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <stm32_clock_control_on+0x84>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80038ee:	684b      	ldr	r3, [r1, #4]
 80038f0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80038f2:	4319      	orrs	r1, r3
 80038f4:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80038f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038f8:	4013      	ands	r3, r2
 80038fa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80038fc:	9b01      	ldr	r3, [sp, #4]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 80038fe:	2000      	movs	r0, #0
}
 8003900:	b006      	add	sp, #24
 8003902:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <stm32_clock_control_on+0x84>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8003906:	684b      	ldr	r3, [r1, #4]
 8003908:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800390a:	4319      	orrs	r1, r3
 800390c:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800390e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003910:	4013      	ands	r3, r2
 8003912:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8003914:	9b02      	ldr	r3, [sp, #8]
 8003916:	e7f2      	b.n	80038fe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003918:	4a10      	ldr	r2, [pc, #64]	; (800395c <stm32_clock_control_on+0x84>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 800391a:	684b      	ldr	r3, [r1, #4]
 800391c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800391e:	4319      	orrs	r1, r3
 8003920:	6391      	str	r1, [r2, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003924:	4013      	ands	r3, r2
 8003926:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8003928:	9b03      	ldr	r3, [sp, #12]
 800392a:	e7e8      	b.n	80038fe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <stm32_clock_control_on+0x84>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800392e:	684b      	ldr	r3, [r1, #4]
 8003930:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003932:	4319      	orrs	r1, r3
 8003934:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003936:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003938:	4013      	ands	r3, r2
 800393a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800393c:	9b04      	ldr	r3, [sp, #16]
 800393e:	e7de      	b.n	80038fe <stm32_clock_control_on+0x26>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003940:	4a06      	ldr	r2, [pc, #24]	; (800395c <stm32_clock_control_on+0x84>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8003942:	684b      	ldr	r3, [r1, #4]
 8003944:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003946:	4319      	orrs	r1, r3
 8003948:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800394a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800394c:	4013      	ands	r3, r2
 800394e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003950:	9b05      	ldr	r3, [sp, #20]
 8003952:	e7d4      	b.n	80038fe <stm32_clock_control_on+0x26>
	switch (pclken->bus) {
 8003954:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003958:	e7d2      	b.n	8003900 <stm32_clock_control_on+0x28>
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800

08003960 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	uint32_t ahb_clock = SystemCoreClock;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <stm32_clock_control_get_subsys_rate+0x28>)
 8003962:	6809      	ldr	r1, [r1, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8003966:	2906      	cmp	r1, #6
 8003968:	d80b      	bhi.n	8003982 <stm32_clock_control_get_subsys_rate+0x22>
 800396a:	e8df f001 	tbb	[pc, r1]
 800396e:	0505      	.short	0x0505
 8003970:	0a0a0804 	.word	0x0a0a0804
 8003974:	05          	.byte	0x05
 8003975:	00          	.byte	0x00
	return clock / prescaler;
 8003976:	089b      	lsrs	r3, r3, #2
		/*
		 * STM32G0x only has one APB, but two reset/clock enable
		 * registers for peripherals, so return the APB1 clock rate here
		 */
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
 8003978:	6013      	str	r3, [r2, #0]
#endif
	default:
		return -ENOTSUP;
	}

	return 0;
 800397a:	2000      	movs	r0, #0
		break;
 800397c:	4770      	bx	lr
	return clock / prescaler;
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	e7fa      	b.n	8003978 <stm32_clock_control_get_subsys_rate+0x18>
	switch (pclken->bus) {
 8003982:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003986:	4770      	bx	lr
 8003988:	20000388 	.word	0x20000388

0800398c <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 800398c:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 800398e:	2100      	movs	r1, #0
{
 8003990:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8003992:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003996:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 800399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399e:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 80039a0:	f000 f870 	bl	8003a84 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 80039a4:	a803      	add	r0, sp, #12
 80039a6:	f00e fd6d 	bl	8012484 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <stm32_clock_control_init+0x80>)
 80039ac:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 80039ae:	0790      	lsls	r0, r2, #30
 80039b0:	d406      	bmi.n	80039c0 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80039ba:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 80039bc:	0792      	lsls	r2, r2, #30
 80039be:	d5fc      	bpl.n	80039ba <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80039c0:	4c12      	ldr	r4, [pc, #72]	; (8003a0c <stm32_clock_control_init+0x80>)
 80039c2:	68a3      	ldr	r3, [r4, #8]
 80039c4:	f023 0303 	bic.w	r3, r3, #3
 80039c8:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d0:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039d2:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 80039d4:	f015 050c 	ands.w	r5, r5, #12
 80039d8:	d1fb      	bne.n	80039d2 <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80039da:	6823      	ldr	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 80039dc:	480c      	ldr	r0, [pc, #48]	; (8003a10 <stm32_clock_control_init+0x84>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e2:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80039ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80039ee:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 80039f0:	aa03      	add	r2, sp, #12
 80039f2:	466b      	mov	r3, sp
 80039f4:	4629      	mov	r1, r5
 80039f6:	f000 ffe1 	bl	80049bc <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8003a02:	f00e fd47 	bl	8012494 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8003a06:	4628      	mov	r0, r5
 8003a08:	b007      	add	sp, #28
 8003a0a:	bd30      	pop	{r4, r5, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	007a1200 	.word	0x007a1200

08003a14 <stm32_clock_control_off>:
	switch (pclken->bus) {
 8003a14:	680b      	ldr	r3, [r1, #0]
{
 8003a16:	b082      	sub	sp, #8
 8003a18:	2b06      	cmp	r3, #6
 8003a1a:	d82d      	bhi.n	8003a78 <stm32_clock_control_off+0x64>
 8003a1c:	e8df f003 	tbb	[pc, r3]
 8003a20:	251e0d04 	.word	0x251e0d04
 8003a24:	2c2c      	.short	0x2c2c
 8003a26:	14          	.byte	0x14
 8003a27:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8003a28:	4a15      	ldr	r2, [pc, #84]	; (8003a80 <stm32_clock_control_off+0x6c>)
 8003a2a:	6849      	ldr	r1, [r1, #4]
 8003a2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a2e:	ea23 0301 	bic.w	r3, r3, r1
 8003a32:	6313      	str	r3, [r2, #48]	; 0x30
	return 0;
 8003a34:	2000      	movs	r0, #0
}
 8003a36:	b002      	add	sp, #8
 8003a38:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8003a3a:	4a11      	ldr	r2, [pc, #68]	; (8003a80 <stm32_clock_control_off+0x6c>)
 8003a3c:	6849      	ldr	r1, [r1, #4]
 8003a3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003a40:	ea23 0301 	bic.w	r3, r3, r1
 8003a44:	6353      	str	r3, [r2, #52]	; 0x34
 8003a46:	e7f5      	b.n	8003a34 <stm32_clock_control_off+0x20>
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <stm32_clock_control_off+0x6c>)
		LL_AHB3_GRP1_EnableClock(pclken->enr);
 8003a4a:	684b      	ldr	r3, [r1, #4]
 8003a4c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003a4e:	4319      	orrs	r1, r3
 8003a50:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a54:	4013      	ands	r3, r2
 8003a56:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003a58:	9b01      	ldr	r3, [sp, #4]
 8003a5a:	e7eb      	b.n	8003a34 <stm32_clock_control_off+0x20>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <stm32_clock_control_off+0x6c>)
 8003a5e:	6849      	ldr	r1, [r1, #4]
 8003a60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a62:	ea23 0301 	bic.w	r3, r3, r1
 8003a66:	6413      	str	r3, [r2, #64]	; 0x40
 8003a68:	e7e4      	b.n	8003a34 <stm32_clock_control_off+0x20>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003a6a:	4a05      	ldr	r2, [pc, #20]	; (8003a80 <stm32_clock_control_off+0x6c>)
 8003a6c:	6849      	ldr	r1, [r1, #4]
 8003a6e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003a70:	ea23 0301 	bic.w	r3, r3, r1
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	e7dd      	b.n	8003a34 <stm32_clock_control_off+0x20>
	switch (pclken->bus) {
 8003a78:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003a7c:	e7db      	b.n	8003a36 <stm32_clock_control_off+0x22>
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <config_enable_default_clocks+0x1c>)
 8003a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8003a90:	b082      	sub	sp, #8
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003a98:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8003a9a:	b002      	add	sp, #8
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 8003aa4:	b513      	push	{r0, r1, r4, lr}
 8003aa6:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	b911      	cbnz	r1, 8003ab2 <enable_port+0xe>
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <enable_port+0x30>)
 8003aae:	f001 f80f 	bl	8004ad0 <z_impl_device_get_binding>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <enable_port+0x34>)
 8003ab8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003abc:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8003abe:	3301      	adds	r3, #1
 8003ac0:	d005      	beq.n	8003ace <enable_port+0x2a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8003ac2:	6883      	ldr	r3, [r0, #8]
 8003ac4:	4669      	mov	r1, sp
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 8003aca:	b002      	add	sp, #8
 8003acc:	bd10      	pop	{r4, pc}
		return -EIO;
 8003ace:	f06f 0004 	mvn.w	r0, #4
 8003ad2:	e7fa      	b.n	8003aca <enable_port+0x26>
 8003ad4:	0801bfc9 	.word	0x0801bfc9
 8003ad8:	0801b7c8 	.word	0x0801b7c8

08003adc <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8003adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	4607      	mov	r7, r0
	const struct device *clk;
	uint32_t pin, mux;
	uint32_t func = 0;

	if (!list_size) {
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	b341      	cbz	r1, 8003b38 <stm32_dt_pinctrl_configure+0x5c>
 8003ae6:	4819      	ldr	r0, [pc, #100]	; (8003b4c <stm32_dt_pinctrl_configure+0x70>)
 8003ae8:	f000 fff2 	bl	8004ad0 <z_impl_device_get_binding>
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	/* make sure to enable port clock first */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (int i = 0; i < list_size; i++) {
 8003aec:	2500      	movs	r5, #0
 8003aee:	4680      	mov	r8, r0
	uint32_t func = 0;
 8003af0:	46ab      	mov	fp, r5
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8003af2:	f107 0a04 	add.w	sl, r7, #4
		mux = pinctrl[i].pinmux;
 8003af6:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8003afa:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8003afe:	b2e3      	uxtb	r3, r4
 8003b00:	d11e      	bne.n	8003b40 <stm32_dt_pinctrl_configure+0x64>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8003b02:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8003b06:	f042 0b20 	orr.w	fp, r2, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8003b0a:	f3c4 2907 	ubfx	r9, r4, #8, #8
			       STM32_DT_PINMUX_LINE(mux));

		enable_port(STM32_PORT(pin), clk);
 8003b0e:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8003b12:	4641      	mov	r1, r8
 8003b14:	4620      	mov	r0, r4
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003b16:	02a4      	lsls	r4, r4, #10
 8003b18:	9301      	str	r3, [sp, #4]
		enable_port(STM32_PORT(pin), clk);
 8003b1a:	f7ff ffc3 	bl	8003aa4 <enable_port>
	return gpio_stm32_configure((uint32_t *)port_base,
 8003b1e:	f104 4080 	add.w	r0, r4, #1073741824	; 0x40000000
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	465a      	mov	r2, fp
 8003b26:	f009 010f 	and.w	r1, r9, #15
 8003b2a:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	for (int i = 0; i < list_size; i++) {
 8003b2e:	3501      	adds	r5, #1
	return gpio_stm32_configure((uint32_t *)port_base,
 8003b30:	f00e fd4f 	bl	80125d2 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8003b34:	42ae      	cmp	r6, r5
 8003b36:	d1de      	bne.n	8003af6 <stm32_dt_pinctrl_configure+0x1a>

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 8003b38:	2000      	movs	r0, #0
 8003b3a:	b003      	add	sp, #12
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			func = STM32_MODER_ANALOG_MODE;
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	bf08      	it	eq
 8003b44:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8003b48:	e7df      	b.n	8003b0a <stm32_dt_pinctrl_configure+0x2e>
 8003b4a:	bf00      	nop
 8003b4c:	0801bfc9 	.word	0x0801bfc9

08003b50 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <elapsed+0x30>)
 8003b52:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8003b54:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8003b56:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <elapsed+0x34>)
 8003b5a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	4909      	ldr	r1, [pc, #36]	; (8003b88 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8003b62:	d101      	bne.n	8003b68 <elapsed+0x18>
	    || (val1 < val2)) {
 8003b64:	4282      	cmp	r2, r0
 8003b66:	d205      	bcs.n	8003b74 <elapsed+0x24>
		overflow_cyc += last_load;
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	680c      	ldr	r4, [r1, #0]
 8003b6c:	4422      	add	r2, r4
 8003b6e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8003b70:	4a03      	ldr	r2, [pc, #12]	; (8003b80 <elapsed+0x30>)
 8003b72:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	680a      	ldr	r2, [r1, #0]
 8003b78:	4413      	add	r3, r2
}
 8003b7a:	1a18      	subs	r0, r3, r0
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000e010 	.word	0xe000e010
 8003b84:	20003f34 	.word	0x20003f34
 8003b88:	20003f30 	.word	0x20003f30

08003b8c <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8003b8c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8003b8e:	f7ff ffdf 	bl	8003b50 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <z_clock_isr+0x38>)
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <z_clock_isr+0x3c>)
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	6811      	ldr	r1, [r2, #0]
 8003b9a:	4408      	add	r0, r1
 8003b9c:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <z_clock_isr+0x40>)
 8003ba4:	6811      	ldr	r1, [r2, #0]
 8003ba6:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8003baa:	1a40      	subs	r0, r0, r1
 8003bac:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8003bb0:	fb03 1300 	mla	r3, r3, r0, r1
 8003bb4:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8003bb6:	f001 fdd7 	bl	8005768 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8003bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003bbe:	f000 bae1 	b.w	8004184 <z_arm_exc_exit>
 8003bc2:	bf00      	nop
 8003bc4:	20003f34 	.word	0x20003f34
 8003bc8:	20003f2c 	.word	0x20003f2c
 8003bcc:	20003f28 	.word	0x20003f28

08003bd0 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <z_clock_driver_init+0x28>)
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <z_clock_driver_init+0x2c>)
 8003bda:	f244 129f 	movw	r2, #16799	; 0x419f
 8003bde:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <z_clock_driver_init+0x30>)
 8003be2:	2000      	movs	r0, #0
 8003be4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <z_clock_driver_init+0x34>)
 8003be8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003bea:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f042 0207 	orr.w	r2, r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000ed00 	.word	0xe000ed00
 8003bfc:	20003f30 	.word	0x20003f30
 8003c00:	20003f34 	.word	0x20003f34
 8003c04:	e000e010 	.word	0xe000e010

08003c08 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4d2b      	ldr	r5, [pc, #172]	; (8003cb8 <z_clock_set_timeout+0xb0>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8003c0c:	b151      	cbz	r1, 8003c24 <z_clock_set_timeout+0x1c>
	    && ticks == K_TICKS_FOREVER) {
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d10e      	bne.n	8003c30 <z_clock_set_timeout+0x28>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003c12:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <z_clock_set_timeout+0xb4>)
 8003c14:	6813      	ldr	r3, [r2, #0]
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8003c1c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003c20:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8003c24:	f240 33e5 	movw	r3, #997	; 0x3e5
 8003c28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c2c:	bf08      	it	eq
 8003c2e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003c30:	1e44      	subs	r4, r0, #1
 8003c32:	2c00      	cmp	r4, #0
 8003c34:	dd27      	ble.n	8003c86 <z_clock_set_timeout+0x7e>
 8003c36:	f240 33e5 	movw	r3, #997	; 0x3e5
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	bfa8      	it	ge
 8003c3e:	461c      	movge	r4, r3
	__asm__ volatile(
 8003c40:	f04f 0310 	mov.w	r3, #16
 8003c44:	f3ef 8611 	mrs	r6, BASEPRI
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8003c50:	f7ff ff7e 	bl	8003b50 <elapsed>
	cycle_count += pending;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <z_clock_set_timeout+0xb8>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4410      	add	r0, r2
 8003c5a:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <z_clock_set_timeout+0xbc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8003c62:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <z_clock_set_timeout+0xc0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8003c66:	1ac1      	subs	r1, r0, r3
 8003c68:	d50f      	bpl.n	8003c8a <z_clock_set_timeout+0x82>
		last_load = MIN_DELAY;
 8003c6a:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8003c6e:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <z_clock_set_timeout+0xb4>)
 8003c74:	3b01      	subs	r3, #1
 8003c76:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8003c7c:	f386 8811 	msr	BASEPRI, r6
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	e7cd      	b.n	8003c22 <z_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8003c86:	2400      	movs	r4, #0
 8003c88:	e7da      	b.n	8003c40 <z_clock_set_timeout+0x38>
		delay = ticks * CYC_PER_TICK;
 8003c8a:	f244 12a0 	movw	r2, #16800	; 0x41a0
		delay += unannounced;
 8003c8e:	fb02 1404 	mla	r4, r2, r4, r1
		delay -= unannounced;
 8003c92:	1a18      	subs	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003c94:	f504 4483 	add.w	r4, r4, #16768	; 0x4180
 8003c98:	341f      	adds	r4, #31
		delay = MAX(delay, MIN_DELAY);
 8003c9a:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8003c9e:	fbb4 f4f2 	udiv	r4, r4, r2
		delay -= unannounced;
 8003ca2:	fb02 0004 	mla	r0, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	d904      	bls.n	8003cb4 <z_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <z_clock_set_timeout+0xc4>)
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d8de      	bhi.n	8003c6e <z_clock_set_timeout+0x66>
			last_load = delay;
 8003cb0:	6028      	str	r0, [r5, #0]
 8003cb2:	e7dd      	b.n	8003c70 <z_clock_set_timeout+0x68>
		delay = MAX(delay, MIN_DELAY);
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	e7fb      	b.n	8003cb0 <z_clock_set_timeout+0xa8>
 8003cb8:	20003f30 	.word	0x20003f30
 8003cbc:	e000e010 	.word	0xe000e010
 8003cc0:	20003f2c 	.word	0x20003f2c
 8003cc4:	20003f34 	.word	0x20003f34
 8003cc8:	20003f28 	.word	0x20003f28
 8003ccc:	00ff9420 	.word	0x00ff9420

08003cd0 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 8003cd0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003cd2:	f04f 0310 	mov.w	r3, #16
 8003cd6:	f3ef 8411 	mrs	r4, BASEPRI
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8003ce2:	f7ff ff35 	bl	8003b50 <elapsed>
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <z_clock_elapsed+0x34>)
 8003ce8:	4a07      	ldr	r2, [pc, #28]	; (8003d08 <z_clock_elapsed+0x38>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	4403      	add	r3, r0
	__asm__ volatile(
 8003cf2:	f384 8811 	msr	BASEPRI, r4
 8003cf6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8003cfa:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8003cfe:	fbb3 f0f0 	udiv	r0, r3, r0
 8003d02:	bd10      	pop	{r4, pc}
 8003d04:	20003f2c 	.word	0x20003f2c
 8003d08:	20003f28 	.word	0x20003f28

08003d0c <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
 8003d0c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003d0e:	f04f 0310 	mov.w	r3, #16
 8003d12:	f3ef 8411 	mrs	r4, BASEPRI
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 8003d1e:	f7ff ff17 	bl	8003b50 <elapsed>
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <z_timer_cycle_get_32+0x28>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4418      	add	r0, r3
	__asm__ volatile(
 8003d28:	f384 8811 	msr	BASEPRI, r4
 8003d2c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	bf00      	nop
 8003d34:	20003f2c 	.word	0x20003f2c

08003d38 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8003d38:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003d3a:	490a      	ldr	r1, [pc, #40]	; (8003d64 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003d3c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003d3e:	6809      	ldr	r1, [r1, #0]
 8003d40:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003d42:	4909      	ldr	r1, [pc, #36]	; (8003d68 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003d44:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003d46:	684b      	ldr	r3, [r1, #4]
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003d58:	6893      	ldr	r3, [r2, #8]
}
 8003d5a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20003ff8 	.word	0x20003ff8
 8003d64:	0801b9e8 	.word	0x0801b9e8
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003d6c:	4912      	ldr	r1, [pc, #72]	; (8003db8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003d6e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003d70:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8003d74:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003d76:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003d7a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003d7e:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003d80:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003d84:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003d88:	4f0c      	ldr	r7, [pc, #48]	; (8003dbc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003d8a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003d8e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
 8003d90:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003d92:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003d94:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8003d96:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003d98:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003d9a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003d9e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003da0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003da2:	f000 fa37 	bl	8004214 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003da6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003daa:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 8003dae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003db2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 8003db6:	4770      	bx	lr
    ldr r1, =_kernel
 8003db8:	20003ff8 	.word	0x20003ff8
    ldr v4, =_SCS_ICSR
 8003dbc:	e000ed04 	.word	0xe000ed04

08003dc0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8003dc0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003dc4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003dc6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003dca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003dce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003dd0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003dd4:	2902      	cmp	r1, #2
    beq _oops
 8003dd6:	d0ff      	beq.n	8003dd8 <_oops>

08003dd8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003dd8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003dda:	f00e fb62 	bl	80124a2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003dde:	bd01      	pop	{r0, pc}

08003de0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003de0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	db08      	blt.n	8003df8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de6:	2201      	movs	r2, #1
 8003de8:	f000 001f 	and.w	r0, r0, #31
 8003dec:	fa02 f000 	lsl.w	r0, r2, r0
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	4a02      	ldr	r2, [pc, #8]	; (8003dfc <arch_irq_enable+0x1c>)
 8003df4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000e100 	.word	0xe000e100

08003e00 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003e00:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003e02:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e04:	bfa8      	it	ge
 8003e06:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8003e0a:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	bfb8      	it	lt
 8003e10:	4b06      	ldrlt	r3, [pc, #24]	; (8003e2c <z_arm_irq_priority_set+0x2c>)
 8003e12:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e16:	bfac      	ite	ge
 8003e18:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	f000 000f 	andlt.w	r0, r0, #15
 8003e20:	b2c9      	uxtb	r1, r1
 8003e22:	bfb4      	ite	lt
 8003e24:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed14 	.word	0xe000ed14

08003e30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8003e30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8003e34:	9b00      	ldr	r3, [sp, #0]
 8003e36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8003e3a:	490a      	ldr	r1, [pc, #40]	; (8003e64 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8003e3c:	9b01      	ldr	r3, [sp, #4]
 8003e3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8003e42:	9b02      	ldr	r3, [sp, #8]
 8003e44:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8003e48:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8003e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8003e54:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8003e58:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8003e5a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8003e5c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8003e5e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	0801206b 	.word	0x0801206b

08003e68 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <z_check_thread_stack_fail+0x30>)
{
 8003e6a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8003e6c:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
 8003e6e:	b190      	cbz	r0, 8003e96 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8003e70:	f113 0f16 	cmn.w	r3, #22
 8003e74:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003e76:	d005      	beq.n	8003e84 <z_check_thread_stack_fail+0x1c>
 8003e78:	f1a0 0220 	sub.w	r2, r0, #32
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d806      	bhi.n	8003e8e <z_check_thread_stack_fail+0x26>
 8003e80:	4283      	cmp	r3, r0
 8003e82:	d204      	bcs.n	8003e8e <z_check_thread_stack_fail+0x26>
 8003e84:	4281      	cmp	r1, r0
 8003e86:	bf2c      	ite	cs
 8003e88:	2100      	movcs	r1, #0
 8003e8a:	2101      	movcc	r1, #1
 8003e8c:	e000      	b.n	8003e90 <z_check_thread_stack_fail+0x28>
 8003e8e:	2100      	movs	r1, #0
 8003e90:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8003e92:	bf08      	it	eq
 8003e94:	2000      	moveq	r0, #0
}
 8003e96:	4770      	bx	lr
 8003e98:	20003ff8 	.word	0x20003ff8

08003e9c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8003e9c:	b508      	push	{r3, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	460e      	mov	r6, r1
 8003ea2:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
 8003ea4:	f000 f9aa 	bl	80041fc <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003eaa:	4620      	mov	r0, r4
	_current = main_thread;
 8003eac:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003eae:	f000 f9b1 	bl	8004214 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f386 8809 	msr	PSP, r6
 8003eb8:	2100      	movs	r1, #0
 8003eba:	b663      	cpsie	if
 8003ebc:	f381 8811 	msr	BASEPRI, r1
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f00e f8cf 	bl	801206a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003ecc:	20003ff8 	.word	0x20003ff8

08003ed0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8003ed0:	4901      	ldr	r1, [pc, #4]	; (8003ed8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8003ed2:	2210      	movs	r2, #16
	str	r2, [r1]
 8003ed4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8003ed6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8003ed8:	e000ed10 	.word	0xe000ed10

08003edc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8003edc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8003ede:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8003ee0:	f380 8811 	msr	BASEPRI, r0
	isb
 8003ee4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8003ee8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8003eec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8003eee:	b662      	cpsie	i
	isb
 8003ef0:	f3bf 8f6f 	isb	sy

	bx	lr
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop

08003ef8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003ef8:	bf30      	wfi
    b z_SysNmiOnReset
 8003efa:	f7ff bffd 	b.w	8003ef8 <z_SysNmiOnReset>
 8003efe:	bf00      	nop

08003f00 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003f02:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003f04:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <z_arm_prep_c+0x40>)
 8003f06:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003f0a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f10:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8003f14:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f18:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003f20:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003f24:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003f28:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8003f2c:	f000 fdfe 	bl	8004b2c <z_bss_zero>
	z_data_copy();
 8003f30:	f001 fb16 	bl	8005560 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8003f34:	f000 f934 	bl	80041a0 <z_arm_interrupt_init>
	z_cstart();
 8003f38:	f000 fe2e 	bl	8004b98 <z_cstart>
 8003f3c:	08000000 	.word	0x08000000
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003f44:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003f46:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003f4a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003f4e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8003f52:	4904      	ldr	r1, [pc, #16]	; (8003f64 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003f54:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003f56:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8003f58:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003f5a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003f5e:	4902      	ldr	r1, [pc, #8]	; (8003f68 <_isr_wrapper+0x24>)
	bx r1
 8003f60:	4708      	bx	r1
 8003f62:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003f64:	08019e04 	.word	0x08019e04
	ldr r1, =z_arm_int_exit
 8003f68:	08004185 	.word	0x08004185

08003f6c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003f6c:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003f6e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8003f72:	4808      	ldr	r0, [pc, #32]	; (8003f94 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8003f74:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8003f78:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003f7a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003f7e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003f82:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003f84:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003f86:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003f8a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003f8e:	f7ff ffb7 	bl	8003f00 <z_arm_prep_c>
 8003f92:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8003f94:	2000bce0 	.word	0x2000bce0

08003f98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8003f98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003f9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8003fa0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 8003fa2:	4672      	mov	r2, lr
	bl z_arm_fault
 8003fa4:	f000 f868 	bl	8004078 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8003fa8:	bd01      	pop	{r0, pc}
 8003faa:	bf00      	nop

08003fac <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8003fac:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <mem_manage_fault+0x68>)
{
 8003fb0:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 8003fb8:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003fba:	0790      	lsls	r0, r2, #30
 8003fbc:	d519      	bpl.n	8003ff2 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
 8003fbe:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	0612      	lsls	r2, r2, #24
 8003fc4:	d515      	bpl.n	8003ff2 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8003fc6:	b119      	cbz	r1, 8003fd0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fd6:	06d1      	lsls	r1, r2, #27
 8003fd8:	d40e      	bmi.n	8003ff8 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8003fdc:	079a      	lsls	r2, r3, #30
 8003fde:	d40b      	bmi.n	8003ff8 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8003fe0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <mem_manage_fault+0x68>)
 8003fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003fe6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8003fea:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8003fec:	2300      	movs	r3, #0
 8003fee:	7023      	strb	r3, [r4, #0]

	return reason;
}
 8003ff0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 8003ff2:	f06f 0015 	mvn.w	r0, #21
 8003ff6:	e7eb      	b.n	8003fd0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <mem_manage_fault+0x68>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	d5ef      	bpl.n	8003fe0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 8004000:	4629      	mov	r1, r5
 8004002:	f7ff ff31 	bl	8003e68 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8004006:	2800      	cmp	r0, #0
 8004008:	d0ea      	beq.n	8003fe0 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800400a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800400e:	2002      	movs	r0, #2
 8004010:	e7e7      	b.n	8003fe2 <mem_manage_fault+0x36>
 8004012:	bf00      	nop
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <bus_fault.isra.0+0x38>)
 800401a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800401c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800401e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004020:	0592      	lsls	r2, r2, #22
 8004022:	d507      	bpl.n	8004034 <bus_fault.isra.0+0x1c>
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8004024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004026:	0412      	lsls	r2, r2, #16
 8004028:	d504      	bpl.n	8004034 <bus_fault.isra.0+0x1c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 800402a:	b118      	cbz	r0, 8004034 <bus_fault.isra.0+0x1c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800402c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8004034:	4b06      	ldr	r3, [pc, #24]	; (8004050 <bus_fault.isra.0+0x38>)
 8004036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800403c:	bf58      	it	pl
 800403e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004040:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8004042:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8004044:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800404a:	7008      	strb	r0, [r1, #0]

	return reason;
}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <usage_fault.isra.0+0x20>)
 8004056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8004058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800405a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800405c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800405e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8004062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004064:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8004068:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800406c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 800406e:	2000      	movs	r0, #0
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8004078:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800407a:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <z_arm_fault+0xec>)
 800407c:	685b      	ldr	r3, [r3, #4]
{
 800407e:	b08b      	sub	sp, #44	; 0x2c
 8004080:	460c      	mov	r4, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	2500      	movs	r5, #0
 8004088:	f385 8811 	msr	BASEPRI, r5
 800408c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8004090:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8004094:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8004098:	d111      	bne.n	80040be <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800409a:	f002 010c 	and.w	r1, r2, #12
 800409e:	2908      	cmp	r1, #8
 80040a0:	d00d      	beq.n	80040be <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80040a2:	0711      	lsls	r1, r2, #28
 80040a4:	d401      	bmi.n	80040aa <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 80040a6:	4604      	mov	r4, r0
			*nested_exc = true;
 80040a8:	2501      	movs	r5, #1
	*recoverable = false;
 80040aa:	2200      	movs	r2, #0
 80040ac:	3b03      	subs	r3, #3
 80040ae:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d84e      	bhi.n	8004154 <z_arm_fault+0xdc>
 80040b6:	e8df f003 	tbb	[pc, r3]
 80040ba:	4504      	.short	0x4504
 80040bc:	4249      	.short	0x4249
		return NULL;
 80040be:	462c      	mov	r4, r5
 80040c0:	e7f3      	b.n	80040aa <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <z_arm_fault+0xec>)
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	0792      	lsls	r2, r2, #30
 80040c8:	d444      	bmi.n	8004154 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80040d0:	d009      	beq.n	80040e6 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
 80040d2:	4b25      	ldr	r3, [pc, #148]	; (8004168 <z_arm_fault+0xf0>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b323      	cbz	r3, 8004122 <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
 80040d8:	f10d 0207 	add.w	r2, sp, #7
 80040dc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff ff64 	bl	8003fac <mem_manage_fault>
		reason = usage_fault(esf);
 80040e4:	4603      	mov	r3, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80040e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80040ea:	b9c2      	cbnz	r2, 800411e <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80040ec:	ae02      	add	r6, sp, #8
 80040ee:	f104 0720 	add.w	r7, r4, #32
 80040f2:	6820      	ldr	r0, [r4, #0]
 80040f4:	6861      	ldr	r1, [r4, #4]
 80040f6:	4632      	mov	r2, r6
 80040f8:	c203      	stmia	r2!, {r0, r1}
 80040fa:	3408      	adds	r4, #8
 80040fc:	42bc      	cmp	r4, r7
 80040fe:	4616      	mov	r6, r2
 8004100:	d1f7      	bne.n	80040f2 <z_arm_fault+0x7a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8004102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004104:	b345      	cbz	r5, 8004158 <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8004106:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800410a:	b921      	cbnz	r1, 8004116 <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800410c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
 8004110:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004114:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8004116:	a902      	add	r1, sp, #8
 8004118:	4618      	mov	r0, r3
 800411a:	f00e f9c0 	bl	801249e <z_arm_fatal_error>
}
 800411e:	b00b      	add	sp, #44	; 0x2c
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <z_arm_fault+0xf4>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b12b      	cbz	r3, 8004134 <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
 8004128:	f10d 0107 	add.w	r1, sp, #7
 800412c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 800412e:	f7ff ff73 	bl	8004018 <bus_fault.isra.0>
 8004132:	e7d7      	b.n	80040e4 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
 8004134:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <z_arm_fault+0xf8>)
 8004136:	8818      	ldrh	r0, [r3, #0]
 8004138:	b283      	uxth	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0d3      	beq.n	80040e6 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
 800413e:	f7ff ff89 	bl	8004054 <usage_fault.isra.0>
 8004142:	e7cf      	b.n	80040e4 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
 8004144:	f10d 0207 	add.w	r2, sp, #7
 8004148:	2100      	movs	r1, #0
 800414a:	e7c8      	b.n	80040de <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 800414c:	f10d 0107 	add.w	r1, sp, #7
 8004150:	2000      	movs	r0, #0
 8004152:	e7ec      	b.n	800412e <z_arm_fault+0xb6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8004154:	2300      	movs	r3, #0
 8004156:	e7c6      	b.n	80040e6 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8004158:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	e7d8      	b.n	8004114 <z_arm_fault+0x9c>
 8004162:	bf00      	nop
 8004164:	e000ed00 	.word	0xe000ed00
 8004168:	e000ed28 	.word	0xe000ed28
 800416c:	e000ed29 	.word	0xe000ed29
 8004170:	e000ed2a 	.word	0xe000ed2a

08004174 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8004174:	4a02      	ldr	r2, [pc, #8]	; (8004180 <z_arm_fault_init+0xc>)
 8004176:	6953      	ldr	r3, [r2, #20]
 8004178:	f043 0310 	orr.w	r3, r3, #16
 800417c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8004186:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8004188:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
 800418a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800418c:	d003      	beq.n	8004196 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800418e:	4903      	ldr	r1, [pc, #12]	; (800419c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8004190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8004194:	600a      	str	r2, [r1, #0]

08004196 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8004196:	4770      	bx	lr
	ldr r3, =_kernel
 8004198:	20003ff8 	.word	0x20003ff8
	ldr r1, =_SCS_ICSR
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <z_arm_interrupt_init>:
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	2110      	movs	r1, #16
 80041a6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80041a8:	3301      	adds	r3, #1
 80041aa:	2b5b      	cmp	r3, #91	; 0x5b
 80041ac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80041b0:	d1f9      	bne.n	80041a6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100

080041b8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 80041b8:	b508      	push	{r3, lr}
	if (_current == thread) {
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <z_impl_k_thread_abort+0x3c>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	4283      	cmp	r3, r0
 80041c0:	d107      	bne.n	80041d2 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c2:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80041c6:	b193      	cbz	r3, 80041ee <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <z_impl_k_thread_abort+0x40>)
 80041ca:	6853      	ldr	r3, [r2, #4]
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
 80041d2:	f000 ff41 	bl	8005058 <z_thread_single_abort>
	__asm__ volatile(
 80041d6:	f04f 0310 	mov.w	r3, #16
 80041da:	f3ef 8011 	mrs	r0, BASEPRI
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 80041e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 80041ea:	f00e bc05 	b.w	80129f8 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
 80041ee:	f001 f9a3 	bl	8005538 <z_self_abort>
 80041f2:	bf00      	nop
 80041f4:	20003ff8 	.word	0x20003ff8
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80041fc:	4b02      	ldr	r3, [pc, #8]	; (8004208 <z_arm_configure_static_mpu_regions+0xc>)
 80041fe:	4a03      	ldr	r2, [pc, #12]	; (800420c <z_arm_configure_static_mpu_regions+0x10>)
 8004200:	4803      	ldr	r0, [pc, #12]	; (8004210 <z_arm_configure_static_mpu_regions+0x14>)
 8004202:	2101      	movs	r1, #1
 8004204:	f000 b896 	b.w	8004334 <arm_core_mpu_configure_static_mpu_regions>
 8004208:	20030000 	.word	0x20030000
 800420c:	20000000 	.word	0x20000000
 8004210:	0801b7f4 	.word	0x0801b7f4

08004214 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8004214:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8004218:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 800421a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 800421e:	2120      	movs	r1, #32
 8004220:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8004224:	4618      	mov	r0, r3
 8004226:	2101      	movs	r1, #1
 8004228:	f000 b88e 	b.w	8004348 <arm_core_mpu_configure_dynamic_mpu_regions>
 800422c:	20003f38 	.word	0x20003f38
 8004230:	150b0000 	.word	0x150b0000

08004234 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8004236:	4f1e      	ldr	r7, [pc, #120]	; (80042b0 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8004238:	2600      	movs	r6, #0
 800423a:	428e      	cmp	r6, r1
 800423c:	db01      	blt.n	8004242 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800423e:	4610      	mov	r0, r2
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8004242:	6844      	ldr	r4, [r0, #4]
 8004244:	b384      	cbz	r4, 80042a8 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
 8004246:	b153      	cbz	r3, 800425e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8004248:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800424c:	ea14 0f0c 	tst.w	r4, ip
 8004250:	d118      	bne.n	8004284 <mpu_configure_regions+0x50>
		&&
 8004252:	2c1f      	cmp	r4, #31
 8004254:	d916      	bls.n	8004284 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8004256:	6805      	ldr	r5, [r0, #0]
		&&
 8004258:	ea1c 0f05 	tst.w	ip, r5
 800425c:	d112      	bne.n	8004284 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800425e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8004260:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8004262:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	d90f      	bls.n	800428a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800426a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800426e:	d80e      	bhi.n	800428e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8004270:	3c01      	subs	r4, #1
 8004272:	fab4 f484 	clz	r4, r4
 8004276:	f1c4 041f 	rsb	r4, r4, #31
 800427a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800427c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800427e:	ea4c 0404 	orr.w	r4, ip, r4
 8004282:	d906      	bls.n	8004292 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8004284:	f06f 0215 	mvn.w	r2, #21
 8004288:	e7d9      	b.n	800423e <mpu_configure_regions+0xa>
		return REGION_32B;
 800428a:	2408      	movs	r4, #8
 800428c:	e7f6      	b.n	800427c <mpu_configure_regions+0x48>
		return REGION_4G;
 800428e:	243e      	movs	r4, #62	; 0x3e
 8004290:	e7f4      	b.n	800427c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004292:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8004296:	4315      	orrs	r5, r2
 8004298:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800429c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 80042a0:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80042a2:	60fd      	str	r5, [r7, #12]
		reg_index++;
 80042a4:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80042a6:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 80042a8:	3601      	adds	r6, #1
 80042aa:	300c      	adds	r0, #12
 80042ac:	e7c5      	b.n	800423a <mpu_configure_regions+0x6>
 80042ae:	bf00      	nop
 80042b0:	e000ed90 	.word	0xe000ed90

080042b4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <arm_core_mpu_enable+0x10>)
 80042b6:	2205      	movs	r2, #5
 80042b8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80042ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042be:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80042c2:	4770      	bx	lr
 80042c4:	e000ed90 	.word	0xe000ed90

080042c8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80042c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80042cc:	4b01      	ldr	r3, [pc, #4]	; (80042d4 <arm_core_mpu_disable+0xc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	605a      	str	r2, [r3, #4]
}
 80042d2:	4770      	bx	lr
 80042d4:	e000ed90 	.word	0xe000ed90

080042d8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80042d8:	4913      	ldr	r1, [pc, #76]	; (8004328 <arm_mpu_init+0x50>)
 80042da:	6808      	ldr	r0, [r1, #0]
 80042dc:	2808      	cmp	r0, #8
{
 80042de:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80042e0:	d81e      	bhi.n	8004320 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80042e2:	f7ff fff1 	bl	80042c8 <arm_core_mpu_disable>
	MPU->RNR = index;
 80042e6:	4c11      	ldr	r4, [pc, #68]	; (800432c <arm_mpu_init+0x54>)
 80042e8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80042ea:	2200      	movs	r2, #0
 80042ec:	4290      	cmp	r0, r2
 80042ee:	f101 010c 	add.w	r1, r1, #12
 80042f2:	d105      	bne.n	8004300 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <arm_mpu_init+0x58>)
 80042f6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80042f8:	f7ff ffdc 	bl	80042b4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 80042fc:	2000      	movs	r0, #0
}
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004302:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8004306:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800430a:	4313      	orrs	r3, r2
 800430c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8004310:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8004312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800431c:	3201      	adds	r2, #1
 800431e:	e7e5      	b.n	80042ec <arm_mpu_init+0x14>
		return -1;
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004324:	e7eb      	b.n	80042fe <arm_mpu_init+0x26>
 8004326:	bf00      	nop
 8004328:	0801b800 	.word	0x0801b800
 800432c:	e000ed90 	.word	0xe000ed90
 8004330:	20004214 	.word	0x20004214

08004334 <arm_core_mpu_configure_static_mpu_regions>:
{
 8004334:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8004336:	4c03      	ldr	r4, [pc, #12]	; (8004344 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004338:	2301      	movs	r3, #1
 800433a:	7822      	ldrb	r2, [r4, #0]
 800433c:	f7ff ff7a 	bl	8004234 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8004340:	7020      	strb	r0, [r4, #0]
}
 8004342:	bd10      	pop	{r4, pc}
 8004344:	20004214 	.word	0x20004214

08004348 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8004348:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 800434c:	2300      	movs	r3, #0
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	f7ff ff70 	bl	8004234 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004354:	f110 0f16 	cmn.w	r0, #22
 8004358:	d003      	beq.n	8004362 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 800435c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800435e:	2807      	cmp	r0, #7
 8004360:	dd00      	ble.n	8004364 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 8004362:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8004364:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 8004366:	611a      	str	r2, [r3, #16]
 8004368:	3001      	adds	r0, #1
 800436a:	e7f8      	b.n	800435e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800436c:	20004214 	.word	0x20004214
 8004370:	e000ed90 	.word	0xe000ed90

08004374 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	4f0a      	ldr	r7, [pc, #40]	; (80043a0 <z_impl_zephyr_write_stdout+0x2c>)
 8004378:	460d      	mov	r5, r1
 800437a:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800437c:	f1c0 0401 	rsb	r4, r0, #1
 8004380:	19a3      	adds	r3, r4, r6
 8004382:	429d      	cmp	r5, r3
 8004384:	dc01      	bgt.n	800438a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 8004386:	4628      	mov	r0, r5
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 800438a:	7873      	ldrb	r3, [r6, #1]
 800438c:	2b0a      	cmp	r3, #10
 800438e:	d102      	bne.n	8004396 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	200d      	movs	r0, #13
 8004394:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800439c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800439e:	e7ef      	b.n	8004380 <z_impl_zephyr_write_stdout+0xc>
 80043a0:	20000364 	.word	0x20000364

080043a4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
 80043a4:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
 80043a6:	4903      	ldr	r1, [pc, #12]	; (80043b4 <_exit+0x10>)
 80043a8:	2205      	movs	r2, #5
 80043aa:	2001      	movs	r0, #1
 80043ac:	f7ff f97c 	bl	80036a8 <_write>
	while (1) {
 80043b0:	e7fe      	b.n	80043b0 <_exit+0xc>
 80043b2:	bf00      	nop
 80043b4:	0801bfe1 	.word	0x0801bfe1

080043b8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
 80043b8:	b510      	push	{r4, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
 80043ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 80043be:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c4:	480a      	ldr	r0, [pc, #40]	; (80043f0 <_sbrk+0x38>)
 80043c6:	f00d fe41 	bl	801204c <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80043ca:	490a      	ldr	r1, [pc, #40]	; (80043f4 <_sbrk+0x3c>)
 80043cc:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80043ce:	18e0      	adds	r0, r4, r3
 80043d0:	4c09      	ldr	r4, [pc, #36]	; (80043f8 <_sbrk+0x40>)
 80043d2:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
 80043d6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
 80043da:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80043dc:	bf3a      	itte	cc
 80043de:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
 80043e0:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
 80043e2:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
 80043e6:	4802      	ldr	r0, [pc, #8]	; (80043f0 <_sbrk+0x38>)
 80043e8:	f00d fe2b 	bl	8012042 <sys_sem_give>

	return ret;
}
 80043ec:	4620      	mov	r0, r4
 80043ee:	bd10      	pop	{r4, pc}
 80043f0:	20000eac 	.word	0x20000eac
 80043f4:	20003f44 	.word	0x20003f44
 80043f8:	2000c500 	.word	0x2000c500

080043fc <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 80043fc:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
 80043fe:	4905      	ldr	r1, [pc, #20]	; (8004414 <__chk_fail+0x18>)
 8004400:	221d      	movs	r2, #29
 8004402:	2002      	movs	r0, #2
 8004404:	f7ff f950 	bl	80036a8 <_write>
	k_oops();
 8004408:	4040      	eors	r0, r0
 800440a:	f380 8811 	msr	BASEPRI, r0
 800440e:	f04f 0003 	mov.w	r0, #3
 8004412:	df02      	svc	2
	CODE_UNREACHABLE;
 8004414:	0801bfe7 	.word	0x0801bfe7

08004418 <gpio_stm32_pin_interrupt_configure>:

static int gpio_stm32_pin_interrupt_configure(const struct device *dev,
					      gpio_pin_t pin,
					      enum gpio_int_mode mode,
					      enum gpio_int_trig trig)
{
 8004418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800441c:	460c      	mov	r4, r1
 800441e:	4611      	mov	r1, r2
	const struct gpio_stm32_config *cfg = dev->config;
	struct gpio_stm32_data *data = dev->data;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 8004420:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 8004424:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 8004426:	68c2      	ldr	r2, [r0, #12]
{
 8004428:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800442a:	d123      	bne.n	8004474 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800442c:	f004 0303 	and.w	r3, r4, #3
 8004430:	3304      	adds	r3, #4
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	230f      	movs	r3, #15
 8004436:	4093      	lsls	r3, r2
 8004438:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4936      	ldr	r1, [pc, #216]	; (8004518 <gpio_stm32_pin_interrupt_configure+0x100>)
 8004440:	3202      	adds	r2, #2
 8004442:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004446:	0c19      	lsrs	r1, r3, #16
 8004448:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8004450:	fab2 f282 	clz	r2, r2
 8004454:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	429a      	cmp	r2, r3
 800445a:	d109      	bne.n	8004470 <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff f9dd 	bl	800381c <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff fa2e 	bl	80038c4 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8004468:	2100      	movs	r1, #0
 800446a:	4620      	mov	r0, r4
 800446c:	f7ff f9e4 	bl	8003838 <stm32_exti_trigger>
	int err = 0;
 8004470:	2500      	movs	r5, #0
 8004472:	e043      	b.n	80044fc <gpio_stm32_pin_interrupt_configure+0xe4>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8004474:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004478:	d048      	beq.n	800450c <gpio_stm32_pin_interrupt_configure+0xf4>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 800447a:	4928      	ldr	r1, [pc, #160]	; (800451c <gpio_stm32_pin_interrupt_configure+0x104>)
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fa0f 	bl	80038a0 <stm32_exti_set_callback>
 8004482:	4605      	mov	r5, r0
 8004484:	2800      	cmp	r0, #0
 8004486:	d144      	bne.n	8004512 <gpio_stm32_pin_interrupt_configure+0xfa>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 8004488:	68bf      	ldr	r7, [r7, #8]
 800448a:	4825      	ldr	r0, [pc, #148]	; (8004520 <gpio_stm32_pin_interrupt_configure+0x108>)
 800448c:	f000 fb20 	bl	8004ad0 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 8004490:	4924      	ldr	r1, [pc, #144]	; (8004524 <gpio_stm32_pin_interrupt_configure+0x10c>)
 8004492:	4603      	mov	r3, r0
 8004494:	c903      	ldmia	r1, {r0, r1}
 8004496:	466a      	mov	r2, sp
 8004498:	e882 0003 	stmia.w	r2, {r0, r1}
 800449c:	6899      	ldr	r1, [r3, #8]
 800449e:	4618      	mov	r0, r3
 80044a0:	f8d1 8000 	ldr.w	r8, [r1]
 80044a4:	4611      	mov	r1, r2
 80044a6:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80044a8:	f004 0103 	and.w	r1, r4, #3
 80044ac:	3104      	adds	r1, #4
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	210f      	movs	r1, #15
 80044b2:	4099      	lsls	r1, r3
 80044b4:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80044b8:	b2ca      	uxtb	r2, r1
 80044ba:	0092      	lsls	r2, r2, #2
 80044bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80044c0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80044c4:	0c0b      	lsrs	r3, r1, #16
 80044c6:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80044d4:	409f      	lsls	r7, r3
 80044d6:	430f      	orrs	r7, r1

	switch (trig) {
 80044d8:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80044dc:	6097      	str	r7, [r2, #8]
 80044de:	d011      	beq.n	8004504 <gpio_stm32_pin_interrupt_configure+0xec>
 80044e0:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80044e4:	d010      	beq.n	8004508 <gpio_stm32_pin_interrupt_configure+0xf0>
 80044e6:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80044ea:	bf14      	ite	ne
 80044ec:	2100      	movne	r1, #0
 80044ee:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff f9a1 	bl	8003838 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff f982 	bl	8003800 <stm32_exti_enable>

exit:
	return err;
}
 80044fc:	4628      	mov	r0, r5
 80044fe:	b002      	add	sp, #8
 8004500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8004504:	2101      	movs	r1, #1
 8004506:	e7f3      	b.n	80044f0 <gpio_stm32_pin_interrupt_configure+0xd8>
		edge = STM32_EXTI_TRIG_BOTH;
 8004508:	2103      	movs	r1, #3
 800450a:	e7f1      	b.n	80044f0 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -ENOTSUP;
 800450c:	f06f 0585 	mvn.w	r5, #133	; 0x85
 8004510:	e7f4      	b.n	80044fc <gpio_stm32_pin_interrupt_configure+0xe4>
		err = -EBUSY;
 8004512:	f06f 050f 	mvn.w	r5, #15
	return err;
 8004516:	e7f1      	b.n	80044fc <gpio_stm32_pin_interrupt_configure+0xe4>
 8004518:	40013800 	.word	0x40013800
 800451c:	08012505 	.word	0x08012505
 8004520:	0801bfc9 	.word	0x0801bfc9
 8004524:	0801a118 	.word	0x0801a118

08004528 <gpio_stm32_init>:
static int gpio_stm32_init(const struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config;
	struct gpio_stm32_data *data = device->data;

	data->dev = device;
 8004528:	68c3      	ldr	r3, [r0, #12]
{
 800452a:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 800452c:	6844      	ldr	r4, [r0, #4]
	data->dev = device;
 800452e:	6058      	str	r0, [r3, #4]
 8004530:	4806      	ldr	r0, [pc, #24]	; (800454c <gpio_stm32_init+0x24>)
 8004532:	f000 facd 	bl	8004ad0 <z_impl_device_get_binding>
 8004536:	6883      	ldr	r3, [r0, #8]
 8004538:	f104 010c 	add.w	r1, r4, #12
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8004540:	2800      	cmp	r0, #0
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8004542:	bf18      	it	ne
 8004544:	f06f 0004 	mvnne.w	r0, #4
 8004548:	bd10      	pop	{r4, pc}
 800454a:	bf00      	nop
 800454c:	0801bfc9 	.word	0x0801bfc9

08004550 <uart_stm32_irq_err_enable>:
	return LL_USART_IsActiveFlag_RXNE(UartInstance);
}

static void uart_stm32_irq_err_enable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004550:	6843      	ldr	r3, [r0, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	615a      	str	r2, [r3, #20]

	/* Enable FE, ORE interruptions */
	LL_USART_EnableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Enable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <uart_stm32_irq_err_enable+0x5c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01b      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 8004562:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004566:	4293      	cmp	r3, r2
 8004568:	d017      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 800456a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 8004572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 800457a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 8004582:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 800458a:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <uart_stm32_irq_err_enable+0x4a>
 8004592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004596:	4293      	cmp	r3, r2
 8004598:	d103      	bne.n	80045a2 <uart_stm32_irq_err_enable+0x52>
  SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a0:	611a      	str	r2, [r3, #16]
  SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	60da      	str	r2, [r3, #12]
		LL_USART_EnableIT_LBD(UartInstance);
	}
#endif
	/* Enable parity error interruption */
	LL_USART_EnableIT_PE(UartInstance);
}
 80045aa:	4770      	bx	lr
 80045ac:	40011000 	.word	0x40011000

080045b0 <uart_stm32_irq_err_disable>:

static void uart_stm32_irq_err_disable(const struct device *dev)
{
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80045b0:	6843      	ldr	r3, [r0, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	615a      	str	r2, [r3, #20]

	/* Disable FE, ORE interruptions */
	LL_USART_DisableIT_ERROR(UartInstance);
#if !defined(CONFIG_SOC_SERIES_STM32F0X) || defined(USART_LIN_SUPPORT)
	/* Disable Line break detection */
	if (IS_UART_LIN_INSTANCE(UartInstance)) {
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <uart_stm32_irq_err_disable+0x5c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01b      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045c2:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d017      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045e2:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045ea:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <uart_stm32_irq_err_disable+0x4a>
 80045f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d103      	bne.n	8004602 <uart_stm32_irq_err_disable+0x52>
  CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004608:	60da      	str	r2, [r3, #12]
		LL_USART_DisableIT_LBD(UartInstance);
	}
#endif
	/* Disable parity error interruption */
	LL_USART_DisableIT_PE(UartInstance);
}
 800460a:	4770      	bx	lr
 800460c:	40011000 	.word	0x40011000

08004610 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8004614:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8004618:	68c7      	ldr	r7, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800461a:	4644      	mov	r4, r8
{
 800461c:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800461e:	f854 5b0c 	ldr.w	r5, [r4], #12
 8004622:	4829      	ldr	r0, [pc, #164]	; (80046c8 <uart_stm32_init+0xb8>)
 8004624:	f000 fa54 	bl	8004ad0 <z_impl_device_get_binding>
 8004628:	6883      	ldr	r3, [r0, #8]
	data->clock = clk;
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	4621      	mov	r1, r4
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8004632:	4604      	mov	r4, r0
 8004634:	2800      	cmp	r0, #0
 8004636:	d143      	bne.n	80046c0 <uart_stm32_init+0xb0>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8004638:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 800463a:	e9d8 0107 	ldrd	r0, r1, [r8, #28]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	f7ff fa4c 	bl	8003adc <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8004644:	2800      	cmp	r0, #0
 8004646:	db2f      	blt.n	80046a8 <uart_stm32_init+0x98>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004648:	68eb      	ldr	r3, [r5, #12]
 800464a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800464e:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8004650:	68eb      	ldr	r3, [r5, #12]
 8004652:	f043 030c 	orr.w	r3, r3, #12
 8004656:	60eb      	str	r3, [r5, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8004658:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d025      	beq.n	80046ac <uart_stm32_init+0x9c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8004660:	2b01      	cmp	r3, #1
 8004662:	d028      	beq.n	80046b6 <uart_stm32_init+0xa6>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8004664:	4623      	mov	r3, r4
		ll_parity = LL_USART_PARITY_NONE;
 8004666:	4620      	mov	r0, r4
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8004668:	68ea      	ldr	r2, [r5, #12]
 800466a:	4303      	orrs	r3, r0
 800466c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8004670:	4313      	orrs	r3, r2
 8004672:	60eb      	str	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004674:	692b      	ldr	r3, [r5, #16]
 8004676:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800467a:	612b      	str	r3, [r5, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 800467c:	f898 3014 	ldrb.w	r3, [r8, #20]
 8004680:	b12b      	cbz	r3, 800468e <uart_stm32_init+0x7e>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8004682:	6873      	ldr	r3, [r6, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004686:	6953      	ldr	r3, [r2, #20]
 8004688:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800468c:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	4630      	mov	r0, r6
 8004692:	f00e f962 	bl	801295a <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004696:	68eb      	ldr	r3, [r5, #12]
 8004698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800469c:	60eb      	str	r3, [r5, #12]
	while (!(LL_USART_IsActiveFlag_REACK(UartInstance))) {
	}
#endif /* !USART_ISR_REACK */

#if defined(CONFIG_UART_INTERRUPT_DRIVEN) || defined(CONFIG_UART_ASYNC_API)
	config->uconf.irq_config_func(dev);
 800469e:	4630      	mov	r0, r6
 80046a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80046a4:	4798      	blx	r3
#endif

#ifdef CONFIG_UART_ASYNC_API
	return uart_stm32_async_init(dev);
#else
	return 0;
 80046a6:	2000      	movs	r0, #0
#endif
}
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80046ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80046b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046b4:	e7d8      	b.n	8004668 <uart_stm32_init+0x58>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80046b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 80046ba:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80046be:	e7d3      	b.n	8004668 <uart_stm32_init+0x58>
		return -EIO;
 80046c0:	f06f 0004 	mvn.w	r0, #4
 80046c4:	e7f0      	b.n	80046a8 <uart_stm32_init+0x98>
 80046c6:	bf00      	nop
 80046c8:	0801bfc9 	.word	0x0801bfc9

080046cc <uart_stm32_configure>:
{
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80046d0:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80046d2:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80046d4:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80046d6:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80046d8:	2a01      	cmp	r2, #1
{
 80046da:	460d      	mov	r5, r1
	switch (parity) {
 80046dc:	d075      	beq.n	80047ca <uart_stm32_configure+0xfe>
		return LL_USART_PARITY_NONE;
 80046de:	2a02      	cmp	r2, #2
 80046e0:	bf0c      	ite	eq
 80046e2:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80046e6:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80046e8:	f895 8005 	ldrb.w	r8, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 80046ec:	f895 9006 	ldrb.w	r9, [r5, #6]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80046f0:	79ef      	ldrb	r7, [r5, #7]
 80046f2:	f1b8 0f02 	cmp.w	r8, #2
 80046f6:	bf96      	itet	ls
 80046f8:	4b37      	ldrls	r3, [pc, #220]	; (80047d8 <uart_stm32_configure+0x10c>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80046fa:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80046fe:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 8004702:	f1b9 0f04 	cmp.w	r9, #4
 8004706:	bf0c      	ite	eq
 8004708:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800470c:	2300      	movne	r3, #0
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800470e:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8004710:	2f01      	cmp	r7, #1
 8004712:	bf14      	ite	ne
 8004714:	f04f 0c00 	movne.w	ip, #0
 8004718:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800471c:	2a01      	cmp	r2, #1
 800471e:	d957      	bls.n	80047d0 <uart_stm32_configure+0x104>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8004720:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8004724:	d054      	beq.n	80047d0 <uart_stm32_configure+0x104>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8004726:	f1b9 0f02 	cmp.w	r9, #2
 800472a:	d951      	bls.n	80047d0 <uart_stm32_configure+0x104>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 800472c:	b187      	cbz	r7, 8004750 <uart_stm32_configure+0x84>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800472e:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <uart_stm32_configure+0x110>)
 8004730:	4294      	cmp	r4, r2
 8004732:	d00b      	beq.n	800474c <uart_stm32_configure+0x80>
 8004734:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004738:	4294      	cmp	r4, r2
 800473a:	d007      	beq.n	800474c <uart_stm32_configure+0x80>
 800473c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004740:	4294      	cmp	r4, r2
 8004742:	d003      	beq.n	800474c <uart_stm32_configure+0x80>
 8004744:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8004748:	4294      	cmp	r4, r2
 800474a:	d141      	bne.n	80047d0 <uart_stm32_configure+0x104>
 800474c:	2f01      	cmp	r7, #1
 800474e:	d13f      	bne.n	80047d0 <uart_stm32_configure+0x104>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004750:	68e2      	ldr	r2, [r4, #12]
 8004752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004756:	60e2      	str	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004758:	68e2      	ldr	r2, [r4, #12]
 800475a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 800475e:	428a      	cmp	r2, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8004760:	bf1f      	itttt	ne
 8004762:	68e7      	ldrne	r7, [r4, #12]
 8004764:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8004768:	430f      	orrne	r7, r1
 800476a:	60e7      	strne	r7, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8004772:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004774:	bf1f      	itttt	ne
 8004776:	6921      	ldrne	r1, [r4, #16]
 8004778:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 800477c:	ea41 010e 	orrne.w	r1, r1, lr
 8004780:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004782:	68e2      	ldr	r2, [r4, #12]
	if (cfg->baudrate != data->baud_rate) {
 8004784:	6829      	ldr	r1, [r5, #0]
 8004786:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 800478a:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800478c:	bf1f      	itttt	ne
 800478e:	68e2      	ldrne	r2, [r4, #12]
 8004790:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8004794:	431a      	orrne	r2, r3
 8004796:	60e2      	strne	r2, [r4, #12]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004798:	6963      	ldr	r3, [r4, #20]
 800479a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800479e:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80047a0:	bf1f      	itttt	ne
 80047a2:	6963      	ldrne	r3, [r4, #20]
 80047a4:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80047a8:	ea43 030c 	orrne.w	r3, r3, ip
 80047ac:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	4299      	cmp	r1, r3
 80047b2:	d003      	beq.n	80047bc <uart_stm32_configure+0xf0>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80047b4:	f00e f8d1 	bl	801295a <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047c2:	60e3      	str	r3, [r4, #12]
	return 0;
 80047c4:	2000      	movs	r0, #0
};
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 80047ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ce:	e78b      	b.n	80046e8 <uart_stm32_configure+0x1c>
		return -ENOTSUP;
 80047d0:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80047d4:	e7f7      	b.n	80047c6 <uart_stm32_configure+0xfa>
 80047d6:	bf00      	nop
 80047d8:	0801bcf0 	.word	0x0801bcf0
 80047dc:	40011000 	.word	0x40011000

080047e0 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80047e0:	4b08      	ldr	r3, [pc, #32]	; (8004804 <UTILS_PLL_IsBusy+0x24>)
 80047e2:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80047e4:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80047e6:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80047e8:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80047ec:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 80047f0:	430a      	orrs	r2, r1
 80047f2:	bf14      	ite	ne
 80047f4:	2001      	movne	r0, #1
 80047f6:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 80047f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 80047fc:	bf18      	it	ne
 80047fe:	2001      	movne	r0, #1
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8004808:	2800      	cmp	r0, #0
 800480a:	d048      	beq.n	800489e <LL_SetFlashLatency+0x96>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 800480c:	4b3f      	ldr	r3, [pc, #252]	; (800490c <LL_SetFlashLatency+0x104>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004814:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004818:	d10f      	bne.n	800483a <LL_SetFlashLatency+0x32>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800481a:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 800481e:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8004822:	4298      	cmp	r0, r3
 8004824:	4a3a      	ldr	r2, [pc, #232]	; (8004910 <LL_SetFlashLatency+0x108>)
 8004826:	d83c      	bhi.n	80048a2 <LL_SetFlashLatency+0x9a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <LL_SetFlashLatency+0x10c>)
 800482a:	4298      	cmp	r0, r3
 800482c:	d901      	bls.n	8004832 <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 800482e:	2304      	movs	r3, #4
 8004830:	e038      	b.n	80048a4 <LL_SetFlashLatency+0x9c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004832:	4290      	cmp	r0, r2
 8004834:	d965      	bls.n	8004902 <LL_SetFlashLatency+0xfa>
        latency = LL_FLASH_LATENCY_3;
 8004836:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004838:	e039      	b.n	80048ae <LL_SetFlashLatency+0xa6>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800483a:	2300      	movs	r3, #0
 800483c:	e03d      	b.n	80048ba <LL_SetFlashLatency+0xb2>
        latency = LL_FLASH_LATENCY_2;
 800483e:	2302      	movs	r3, #2
 8004840:	e03b      	b.n	80048ba <LL_SetFlashLatency+0xb2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004842:	4a35      	ldr	r2, [pc, #212]	; (8004918 <LL_SetFlashLatency+0x110>)
 8004844:	4290      	cmp	r0, r2
 8004846:	d909      	bls.n	800485c <LL_SetFlashLatency+0x54>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004848:	4a31      	ldr	r2, [pc, #196]	; (8004910 <LL_SetFlashLatency+0x108>)
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800484a:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_4;
 800484c:	bf08      	it	eq
 800484e:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004850:	4290      	cmp	r0, r2
 8004852:	d842      	bhi.n	80048da <LL_SetFlashLatency+0xd2>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004854:	4a31      	ldr	r2, [pc, #196]	; (800491c <LL_SetFlashLatency+0x114>)
 8004856:	4290      	cmp	r0, r2
 8004858:	d93f      	bls.n	80048da <LL_SetFlashLatency+0xd2>
 800485a:	e003      	b.n	8004864 <LL_SetFlashLatency+0x5c>
 800485c:	4a2f      	ldr	r2, [pc, #188]	; (800491c <LL_SetFlashLatency+0x114>)
 800485e:	4290      	cmp	r0, r2
 8004860:	d93b      	bls.n	80048da <LL_SetFlashLatency+0xd2>
 8004862:	b11b      	cbz	r3, 800486c <LL_SetFlashLatency+0x64>
 8004864:	2b01      	cmp	r3, #1
 8004866:	bf38      	it	cc
 8004868:	2301      	movcc	r3, #1
 800486a:	e039      	b.n	80048e0 <LL_SetFlashLatency+0xd8>
        latency = LL_FLASH_LATENCY_2;
 800486c:	2302      	movs	r3, #2
 800486e:	e037      	b.n	80048e0 <LL_SetFlashLatency+0xd8>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004870:	4a2a      	ldr	r2, [pc, #168]	; (800491c <LL_SetFlashLatency+0x114>)
 8004872:	4290      	cmp	r0, r2
 8004874:	d903      	bls.n	800487e <LL_SetFlashLatency+0x76>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d13f      	bne.n	80048fa <LL_SetFlashLatency+0xf2>
        latency = LL_FLASH_LATENCY_2;
 800487a:	2302      	movs	r3, #2
 800487c:	e002      	b.n	8004884 <LL_SetFlashLatency+0x7c>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <LL_SetFlashLatency+0x118>)
 8004880:	4290      	cmp	r0, r2
 8004882:	d83a      	bhi.n	80048fa <LL_SetFlashLatency+0xf2>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004884:	4927      	ldr	r1, [pc, #156]	; (8004924 <LL_SetFlashLatency+0x11c>)
 8004886:	680a      	ldr	r2, [r1, #0]
 8004888:	f022 020f 	bic.w	r2, r2, #15
 800488c:	431a      	orrs	r2, r3
 800488e:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	f000 000f 	and.w	r0, r0, #15
    status = ERROR;
 8004896:	1ac0      	subs	r0, r0, r3
 8004898:	bf18      	it	ne
 800489a:	2001      	movne	r0, #1
 800489c:	4770      	bx	lr
 800489e:	2001      	movs	r0, #1
}
 80048a0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_5;
 80048a2:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048a4:	4290      	cmp	r0, r2
 80048a6:	d802      	bhi.n	80048ae <LL_SetFlashLatency+0xa6>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <LL_SetFlashLatency+0x114>)
 80048aa:	4290      	cmp	r0, r2
 80048ac:	d802      	bhi.n	80048b4 <LL_SetFlashLatency+0xac>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <LL_SetFlashLatency+0x118>)
 80048b0:	4290      	cmp	r0, r2
 80048b2:	d902      	bls.n	80048ba <LL_SetFlashLatency+0xb2>
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf38      	it	cc
 80048b8:	2301      	movcc	r3, #1
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <LL_SetFlashLatency+0x104>)
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 80048c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80048c6:	d10b      	bne.n	80048e0 <LL_SetFlashLatency+0xd8>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048c8:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 80048cc:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 80048d0:	4290      	cmp	r0, r2
 80048d2:	d9b6      	bls.n	8004842 <LL_SetFlashLatency+0x3a>
 80048d4:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_5;
 80048d6:	bf08      	it	eq
 80048d8:	2305      	moveq	r3, #5
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048da:	4a11      	ldr	r2, [pc, #68]	; (8004920 <LL_SetFlashLatency+0x118>)
 80048dc:	4290      	cmp	r0, r2
 80048de:	d8c1      	bhi.n	8004864 <LL_SetFlashLatency+0x5c>
 80048e0:	4a0a      	ldr	r2, [pc, #40]	; (800490c <LL_SetFlashLatency+0x104>)
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 80048e8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80048ec:	d1ca      	bne.n	8004884 <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048ee:	4a08      	ldr	r2, [pc, #32]	; (8004910 <LL_SetFlashLatency+0x108>)
 80048f0:	4290      	cmp	r0, r2
 80048f2:	d9bd      	bls.n	8004870 <LL_SetFlashLatency+0x68>
 80048f4:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_3;
 80048f6:	bf08      	it	eq
 80048f8:	2303      	moveq	r3, #3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	bf38      	it	cc
 80048fe:	2301      	movcc	r3, #1
 8004900:	e7c0      	b.n	8004884 <LL_SetFlashLatency+0x7c>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <LL_SetFlashLatency+0x114>)
 8004904:	4298      	cmp	r0, r3
 8004906:	d89a      	bhi.n	800483e <LL_SetFlashLatency+0x36>
 8004908:	2300      	movs	r3, #0
 800490a:	e7d0      	b.n	80048ae <LL_SetFlashLatency+0xa6>
 800490c:	40007000 	.word	0x40007000
 8004910:	055d4a80 	.word	0x055d4a80
 8004914:	07270e00 	.word	0x07270e00
 8004918:	00b71b00 	.word	0x00b71b00
 800491c:	03938700 	.word	0x03938700
 8004920:	01c9c380 	.word	0x01c9c380
 8004924:	40023c00 	.word	0x40023c00

08004928 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004928:	680b      	ldr	r3, [r1, #0]
 800492a:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 800492c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8004930:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004932:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8004934:	4e1f      	ldr	r6, [pc, #124]	; (80049b4 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004936:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 800493a:	6833      	ldr	r3, [r6, #0]
 800493c:	42a3      	cmp	r3, r4
{
 800493e:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8004940:	d327      	bcc.n	8004992 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004942:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800494a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800494c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 800494e:	0192      	lsls	r2, r2, #6
 8004950:	d5fc      	bpl.n	800494c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	6829      	ldr	r1, [r5, #0]
 8004956:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800495a:	430a      	orrs	r2, r1
 800495c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	f022 0203 	bic.w	r2, r2, #3
 8004964:	f042 0202 	orr.w	r2, r2, #2
 8004968:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004972:	2a08      	cmp	r2, #8
 8004974:	d1fa      	bne.n	800496c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	6869      	ldr	r1, [r5, #4]
 800497a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68a9      	ldr	r1, [r5, #8]
 8004986:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
}
 800498e:	2000      	movs	r0, #0
 8004990:	e004      	b.n	800499c <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8004992:	4620      	mov	r0, r4
 8004994:	f7ff ff38 	bl	8004808 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8004998:	2800      	cmp	r0, #0
 800499a:	d0d2      	beq.n	8004942 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	42a3      	cmp	r3, r4
 80049a0:	d902      	bls.n	80049a8 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 80049a2:	4620      	mov	r0, r4
 80049a4:	f7ff ff30 	bl	8004808 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80049a8:	b900      	cbnz	r0, 80049ac <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 80049aa:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80049ac:	bd70      	pop	{r4, r5, r6, pc}
 80049ae:	bf00      	nop
 80049b0:	0801c05d 	.word	0x0801c05d
 80049b4:	20000388 	.word	0x20000388
 80049b8:	40023800 	.word	0x40023800

080049bc <LL_PLL_ConfigSystemClock_HSE>:
{
 80049bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c0:	4604      	mov	r4, r0
 80049c2:	460e      	mov	r6, r1
 80049c4:	4690      	mov	r8, r2
 80049c6:	461d      	mov	r5, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80049c8:	f7ff ff0a 	bl	80047e0 <UTILS_PLL_IsBusy>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d139      	bne.n	8004a44 <LL_PLL_ConfigSystemClock_HSE+0x88>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80049d0:	f8d8 1000 	ldr.w	r1, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80049d4:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80049dc:	f001 003f 	and.w	r0, r1, #63	; 0x3f
 80049e0:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80049e4:	f3c7 0008 	ubfx	r0, r7, #0, #9
 80049e8:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049ea:	0c18      	lsrs	r0, r3, #16
 80049ec:	3001      	adds	r0, #1
 80049ee:	0040      	lsls	r0, r0, #1
 80049f0:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80049f4:	4c15      	ldr	r4, [pc, #84]	; (8004a4c <LL_PLL_ConfigSystemClock_HSE+0x90>)
 80049f6:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 80049f8:	0392      	lsls	r2, r2, #14
 80049fa:	d40f      	bmi.n	8004a1c <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80049fc:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 80049fe:	2e01      	cmp	r6, #1
 8004a00:	bf0c      	ite	eq
 8004a02:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004a06:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8004a0a:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a12:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004a14:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8004a16:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8004a18:	0392      	lsls	r2, r2, #14
 8004a1a:	d5fc      	bpl.n	8004a16 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004a1c:	4c0b      	ldr	r4, [pc, #44]	; (8004a4c <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8004a1e:	4a0c      	ldr	r2, [pc, #48]	; (8004a50 <LL_PLL_ConfigSystemClock_HSE+0x94>)
 8004a20:	6866      	ldr	r6, [r4, #4]
 8004a22:	4032      	ands	r2, r6
 8004a24:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004a2e:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004a30:	6862      	ldr	r2, [r4, #4]
 8004a32:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004a36:	431a      	orrs	r2, r3
 8004a38:	6062      	str	r2, [r4, #4]
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004a3a:	4629      	mov	r1, r5
}
 8004a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004a40:	f7ff bf72 	b.w	8004928 <UTILS_EnablePLLAndSwitchSystem>
}
 8004a44:	2001      	movs	r0, #1
 8004a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	ffbf8000 	.word	0xffbf8000

08004a54 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004a56:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 8004a58:	4f10      	ldr	r7, [pc, #64]	; (8004a9c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004a5a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8004a64:	42ae      	cmp	r6, r5
 8004a66:	d800      	bhi.n	8004a6a <z_sys_init_run_level+0x16>
		}
	}
}
 8004a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
 8004a6a:	e9d5 3400 	ldrd	r3, r4, [r5]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4798      	blx	r3
 8004a72:	b170      	cbz	r0, 8004a92 <z_sys_init_run_level+0x3e>
 8004a74:	b16c      	cbz	r4, 8004a92 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
 8004a76:	1be4      	subs	r4, r4, r7
 8004a78:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8004a7a:	0961      	lsrs	r1, r4, #5
 8004a7c:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <z_sys_init_run_level+0x4c>)
 8004a7e:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004a82:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8004a86:	2301      	movs	r3, #1
 8004a88:	fa03 f404 	lsl.w	r4, r3, r4
 8004a8c:	4304      	orrs	r4, r0
 8004a8e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8004a92:	3508      	adds	r5, #8
 8004a94:	e7e6      	b.n	8004a64 <z_sys_init_run_level+0x10>
 8004a96:	bf00      	nop
 8004a98:	0801b9d4 	.word	0x0801b9d4
 8004a9c:	20000da8 	.word	0x20000da8
 8004aa0:	20000ea8 	.word	0x20000ea8

08004aa4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <z_device_ready+0x24>)
 8004aa6:	1ac0      	subs	r0, r0, r3
 8004aa8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <z_device_ready+0x28>)
 8004aac:	0942      	lsrs	r2, r0, #5
 8004aae:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8004ab2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8004abc:	4210      	tst	r0, r2
}
 8004abe:	bf0c      	ite	eq
 8004ac0:	4618      	moveq	r0, r3
 8004ac2:	2000      	movne	r0, #0
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000da8 	.word	0x20000da8
 8004acc:	20000ea8 	.word	0x20000ea8

08004ad0 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
 8004ad0:	4911      	ldr	r1, [pc, #68]	; (8004b18 <z_impl_device_get_binding+0x48>)
{
 8004ad2:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
 8004ad4:	4c11      	ldr	r4, [pc, #68]	; (8004b1c <z_impl_device_get_binding+0x4c>)
{
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
 8004ada:	428c      	cmp	r4, r1
 8004adc:	d104      	bne.n	8004ae8 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
 8004ade:	4c0f      	ldr	r4, [pc, #60]	; (8004b1c <z_impl_device_get_binding+0x4c>)
 8004ae0:	42b4      	cmp	r4, r6
 8004ae2:	d10a      	bne.n	8004afa <z_impl_device_get_binding+0x2a>
	return NULL;
 8004ae4:	2400      	movs	r4, #0
 8004ae6:	e014      	b.n	8004b12 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff ffdb 	bl	8004aa4 <z_device_ready>
 8004aee:	b110      	cbz	r0, 8004af6 <z_impl_device_get_binding+0x26>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	42ab      	cmp	r3, r5
 8004af4:	d00d      	beq.n	8004b12 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
 8004af6:	3410      	adds	r4, #16
 8004af8:	e7ef      	b.n	8004ada <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ffd2 	bl	8004aa4 <z_device_ready>
 8004b00:	b908      	cbnz	r0, 8004b06 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
 8004b02:	3410      	adds	r4, #16
 8004b04:	e7ec      	b.n	8004ae0 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8004b06:	6821      	ldr	r1, [r4, #0]
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f7fb fbcd 	bl	80002a8 <strcmp>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d1f7      	bne.n	8004b02 <z_impl_device_get_binding+0x32>
}
 8004b12:	4620      	mov	r0, r4
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	bf00      	nop
 8004b18:	20000ea8 	.word	0x20000ea8
 8004b1c:	20000da8 	.word	0x20000da8

08004b20 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8004b20:	4b01      	ldr	r3, [pc, #4]	; (8004b28 <z_impl_z_errno+0x8>)
 8004b22:	6898      	ldr	r0, [r3, #8]
}
 8004b24:	3064      	adds	r0, #100	; 0x64
 8004b26:	4770      	bx	lr
 8004b28:	20003ff8 	.word	0x20003ff8

08004b2c <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8004b2c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8004b2e:	4807      	ldr	r0, [pc, #28]	; (8004b4c <z_bss_zero+0x20>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8004b30:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <z_bss_zero+0x24>)
 8004b32:	2100      	movs	r1, #0
 8004b34:	1a12      	subs	r2, r2, r0
 8004b36:	f012 fe9d 	bl	8017874 <memset>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	(void)memset(&__ccm_bss_start, 0,
 8004b3a:	4806      	ldr	r0, [pc, #24]	; (8004b54 <z_bss_zero+0x28>)
 8004b3c:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <z_bss_zero+0x2c>)
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
 8004b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b42:	1a12      	subs	r2, r2, r0
 8004b44:	2100      	movs	r1, #0
 8004b46:	f012 be95 	b.w	8017874 <memset>
 8004b4a:	bf00      	nop
 8004b4c:	20000ec0 	.word	0x20000ec0
 8004b50:	20005990 	.word	0x20005990
 8004b54:	10000000 	.word	0x10000000
 8004b58:	10000000 	.word	0x10000000

08004b5c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004b5c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <bg_thread_main+0x34>)
 8004b60:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004b62:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8004b64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004b66:	f7ff ff75 	bl	8004a54 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
 8004b6a:	f00d fff1 	bl	8012b50 <boot_banner>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
 8004b6e:	f7fe fe11 	bl	8003794 <__do_global_ctors_aux>
	__do_init_array_aux();
 8004b72:	f7fe fe01 	bl	8003778 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8004b76:	2003      	movs	r0, #3
 8004b78:	f7ff ff6c 	bl	8004a54 <z_sys_init_run_level>

	z_init_static_threads();
 8004b7c:	f000 fc90 	bl	80054a0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004b80:	f7fc fee6 	bl	8001950 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8004b84:	4a03      	ldr	r2, [pc, #12]	; (8004b94 <bg_thread_main+0x38>)
 8004b86:	7b13      	ldrb	r3, [r2, #12]
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004b8e:	bd08      	pop	{r3, pc}
 8004b90:	20004215 	.word	0x20004215
 8004b94:	20000f50 	.word	0x20000f50

08004b98 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8004b98:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8004b9c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8004c94 <z_cstart+0xfc>
 8004ba0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004ba2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004ba6:	4d33      	ldr	r5, [pc, #204]	; (8004c74 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
 8004ba8:	4e33      	ldr	r6, [pc, #204]	; (8004c78 <z_cstart+0xe0>)
 8004baa:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004bac:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8004c98 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
 8004bb0:	4f32      	ldr	r7, [pc, #200]	; (8004c7c <z_cstart+0xe4>)
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	2400      	movs	r4, #0
 8004bb8:	616b      	str	r3, [r5, #20]
 8004bba:	23f0      	movs	r3, #240	; 0xf0
 8004bbc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8004bc0:	77ec      	strb	r4, [r5, #31]
 8004bc2:	762c      	strb	r4, [r5, #24]
 8004bc4:	766c      	strb	r4, [r5, #25]
 8004bc6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004bc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004bce:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004bd0:	f7ff fad0 	bl	8004174 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004bd4:	f7ff f97c 	bl	8003ed0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bdc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004bde:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8004be0:	4d27      	ldr	r5, [pc, #156]	; (8004c80 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 8004be2:	f240 1301 	movw	r3, #257	; 0x101
 8004be6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8004bea:	ab06      	add	r3, sp, #24
 8004bec:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004bee:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
 8004bf0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8004bf4:	f7ff ff2e 	bl	8004a54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7ff ff2b 	bl	8004a54 <z_sys_init_run_level>
	z_sched_init();
 8004bfe:	f000 fb3b 	bl	8005278 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8004c04:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8004c06:	f04f 0b01 	mov.w	fp, #1
 8004c0a:	9305      	str	r3, [sp, #20]
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	491e      	ldr	r1, [pc, #120]	; (8004c88 <z_cstart+0xf0>)
 8004c10:	9400      	str	r4, [sp, #0]
 8004c12:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004c16:	e9cd 3b03 	strd	r3, fp, [sp, #12]
 8004c1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004c1e:	4653      	mov	r3, sl
 8004c20:	4630      	mov	r0, r6
 8004c22:	f000 fc0b 	bl	800543c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004c26:	7b73      	ldrb	r3, [r6, #13]
 8004c28:	4680      	mov	r8, r0
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8004c2e:	4630      	mov	r0, r6
 8004c30:	7373      	strb	r3, [r6, #13]
 8004c32:	f00d ff0d 	bl	8012a50 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8004c36:	230f      	movs	r3, #15
 8004c38:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004c3c:	4913      	ldr	r1, [pc, #76]	; (8004c8c <z_cstart+0xf4>)
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <z_cstart+0xf8>)
 8004c40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c44:	e9cd b404 	strd	fp, r4, [sp, #16]
 8004c48:	e9cd 5400 	strd	r5, r4, [sp]
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f000 fbf5 	bl	800543c <z_setup_new_thread>
 8004c52:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8004c54:	60ef      	str	r7, [r5, #12]
 8004c56:	f023 0304 	bic.w	r3, r3, #4
 8004c5a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004c5c:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
 8004c60:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
 8004c64:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
 8004c66:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8004c6a:	4652      	mov	r2, sl
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff f914 	bl	8003e9c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004c74:	e000ed00 	.word	0xe000ed00
 8004c78:	20000f50 	.word	0x20000f50
 8004c7c:	20000ed0 	.word	0x20000ed0
 8004c80:	20003ff8 	.word	0x20003ff8
 8004c84:	0801c06d 	.word	0x0801c06d
 8004c88:	200059a0 	.word	0x200059a0
 8004c8c:	2000bb80 	.word	0x2000bb80
 8004c90:	08012bdf 	.word	0x08012bdf
 8004c94:	2000c500 	.word	0x2000c500
 8004c98:	08004b5d 	.word	0x08004b5d

08004c9c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8004c9c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <init_mem_slab_module+0x3c>)
 8004ca0:	4c0e      	ldr	r4, [pc, #56]	; (8004cdc <init_mem_slab_module+0x40>)
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d301      	bcc.n	8004caa <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
 8004ca6:	2000      	movs	r0, #0
	return rc;
}
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 8004caa:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 8004cae:	ea41 0200 	orr.w	r2, r1, r0
 8004cb2:	f012 0203 	ands.w	r2, r2, #3
 8004cb6:	d10b      	bne.n	8004cd0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 8004cb8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 8004cba:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004cbc:	42aa      	cmp	r2, r5
 8004cbe:	d101      	bne.n	8004cc4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8004cc0:	331c      	adds	r3, #28
 8004cc2:	e7ee      	b.n	8004ca2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 8004cc4:	695e      	ldr	r6, [r3, #20]
 8004cc6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 8004cc8:	3201      	adds	r2, #1
		slab->free_list = p;
 8004cca:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 8004ccc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 8004cce:	e7f5      	b.n	8004cbc <init_mem_slab_module+0x20>
		return -EINVAL;
 8004cd0:	f06f 0015 	mvn.w	r0, #21
	return rc;
 8004cd4:	e7e8      	b.n	8004ca8 <init_mem_slab_module+0xc>
 8004cd6:	bf00      	nop
 8004cd8:	20000eac 	.word	0x20000eac
 8004cdc:	20000eac 	.word	0x20000eac

08004ce0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8004ce0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8004ce2:	4c08      	ldr	r4, [pc, #32]	; (8004d04 <z_reset_time_slice+0x24>)
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b15b      	cbz	r3, 8004d00 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004ce8:	f7fe fff2 	bl	8003cd0 <z_clock_elapsed>
 8004cec:	4603      	mov	r3, r0
 8004cee:	6820      	ldr	r0, [r4, #0]
 8004cf0:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <z_reset_time_slice+0x28>)
 8004cf2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004cf8:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	f00d bf4f 	b.w	8012b9e <z_set_timeout_expiry>
}
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	20004030 	.word	0x20004030
 8004d08:	20003ff8 	.word	0x20003ff8

08004d0c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	f04f 0310 	mov.w	r3, #16
 8004d12:	f3ef 8411 	mrs	r4, BASEPRI
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <k_sched_time_slice_set+0x34>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
			return ((uint32_t)t) * (to_hz / from_hz);
 8004d24:	230a      	movs	r3, #10
 8004d26:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <k_sched_time_slice_set+0x38>)
 8004d2a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <k_sched_time_slice_set+0x3c>)
 8004d2e:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8004d30:	f7ff ffd6 	bl	8004ce0 <z_reset_time_slice>
	__asm__ volatile(
 8004d34:	f384 8811 	msr	BASEPRI, r4
 8004d38:	f3bf 8f6f 	isb	sy
	}
}
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	20003ff8 	.word	0x20003ff8
 8004d44:	20004030 	.word	0x20004030
 8004d48:	2000402c 	.word	0x2000402c

08004d4c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8004d4c:	b949      	cbnz	r1, 8004d62 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4e:	f3ef 8005 	mrs	r0, IPSR
 8004d52:	b930      	cbnz	r0, 8004d62 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8004d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d001      	beq.n	8004d62 <z_reschedule+0x16>
	ret = arch_swap(key);
 8004d5e:	f7fe bfeb 	b.w	8003d38 <arch_swap>
 8004d62:	f381 8811 	msr	BASEPRI, r1
 8004d66:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8004d6a:	4770      	bx	lr
 8004d6c:	20003ff8 	.word	0x20003ff8

08004d70 <k_sched_lock>:
	__asm__ volatile(
 8004d70:	f04f 0310 	mov.w	r3, #16
 8004d74:	f3ef 8111 	mrs	r1, BASEPRI
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <k_sched_lock+0x24>)
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	7bd3      	ldrb	r3, [r2, #15]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8004d8a:	f381 8811 	msr	BASEPRI, r1
 8004d8e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8004d92:	4770      	bx	lr
 8004d94:	20003ff8 	.word	0x20003ff8

08004d98 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <z_priq_dumb_remove+0x28>)
 8004d9a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004d9e:	4282      	cmp	r2, r0
 8004da0:	d105      	bne.n	8004dae <z_priq_dumb_remove+0x16>
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	428b      	cmp	r3, r1
 8004da6:	d102      	bne.n	8004dae <z_priq_dumb_remove+0x16>
 8004da8:	7b4b      	ldrb	r3, [r1, #13]
 8004daa:	06db      	lsls	r3, r3, #27
 8004dac:	d106      	bne.n	8004dbc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8004dae:	e9d1 3200 	ldrd	r3, r2, [r1]
 8004db2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8004db4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004db6:	2300      	movs	r3, #0
	node->prev = NULL;
 8004db8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20003ff8 	.word	0x20003ff8

08004dc4 <update_cache>:
{
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4c12      	ldr	r4, [pc, #72]	; (8004e10 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	68a2      	ldr	r2, [r4, #8]
{
 8004dcc:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
 8004dce:	b10b      	cbz	r3, 8004dd4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
 8004dd0:	68e5      	ldr	r5, [r4, #12]
 8004dd2:	e00c      	b.n	8004dee <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8004dd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004dd8:	f00d fe30 	bl	8012a3c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8004ddc:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8004dde:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8004de0:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
 8004de2:	bf44      	itt	mi
 8004de4:	f043 0308 	orrmi.w	r3, r3, #8
 8004de8:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	d0f0      	beq.n	8004dd0 <update_cache+0xc>
	if (preempt_ok != 0) {
 8004dee:	b949      	cbnz	r1, 8004e04 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
 8004df0:	7b53      	ldrb	r3, [r2, #13]
 8004df2:	06db      	lsls	r3, r3, #27
 8004df4:	d106      	bne.n	8004e04 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8004df6:	69ab      	ldr	r3, [r5, #24]
 8004df8:	b923      	cbnz	r3, 8004e04 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 8004dfa:	89d3      	ldrh	r3, [r2, #14]
 8004dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfe:	d901      	bls.n	8004e04 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 8004e00:	6262      	str	r2, [r4, #36]	; 0x24
}
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8004e04:	4295      	cmp	r5, r2
 8004e06:	d001      	beq.n	8004e0c <update_cache+0x48>
			z_reset_time_slice();
 8004e08:	f7ff ff6a 	bl	8004ce0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8004e0c:	6265      	str	r5, [r4, #36]	; 0x24
}
 8004e0e:	e7f8      	b.n	8004e02 <update_cache+0x3e>
 8004e10:	20003ff8 	.word	0x20003ff8

08004e14 <k_sched_unlock>:
{
 8004e14:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004e16:	f04f 0310 	mov.w	r3, #16
 8004e1a:	f3ef 8411 	mrs	r4, BASEPRI
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <k_sched_unlock+0x34>)
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	7bd3      	ldrb	r3, [r2, #15]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8004e30:	2000      	movs	r0, #0
 8004e32:	f7ff ffc7 	bl	8004dc4 <update_cache>
	__asm__ volatile(
 8004e36:	f384 8811 	msr	BASEPRI, r4
 8004e3a:	f3bf 8f6f 	isb	sy
}
 8004e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8004e42:	f00d bde5 	b.w	8012a10 <z_reschedule_unlocked>
 8004e46:	bf00      	nop
 8004e48:	20003ff8 	.word	0x20003ff8

08004e4c <ready_thread>:
{
 8004e4c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8004e4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 8004e52:	7b43      	ldrb	r3, [r0, #13]
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	db2c      	blt.n	8004eb2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8004e58:	06db      	lsls	r3, r3, #27
 8004e5a:	d12a      	bne.n	8004eb2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8004e5c:	6983      	ldr	r3, [r0, #24]
 8004e5e:	bb43      	cbnz	r3, 8004eb2 <ready_thread+0x66>
	return list->head == list;
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <ready_thread+0x6c>)
 8004e62:	4611      	mov	r1, r2
 8004e64:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004e68:	428c      	cmp	r4, r1
 8004e6a:	bf18      	it	ne
 8004e6c:	4623      	movne	r3, r4
 8004e6e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8004e70:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8004e72:	bf38      	it	cc
 8004e74:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004e76:	b1b3      	cbz	r3, 8004ea6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
 8004e78:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8004e7c:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8004e80:	42ae      	cmp	r6, r5
 8004e82:	db03      	blt.n	8004e8c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	d00e      	beq.n	8004ea6 <ready_thread+0x5a>
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	e7f4      	b.n	8004e76 <ready_thread+0x2a>
	node->prev = successor->prev;
 8004e8c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004e8e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8004e92:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8004e94:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8004e96:	7b43      	ldrb	r3, [r0, #13]
 8004e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e9c:	7343      	strb	r3, [r0, #13]
}
 8004e9e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7ff bf8f 	b.w	8004dc4 <update_cache>
	node->prev = list->tail;
 8004ea6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 8004eaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004eac:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8004eae:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8004eb0:	e7f1      	b.n	8004e96 <ready_thread+0x4a>
}
 8004eb2:	bc70      	pop	{r4, r5, r6}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20003ff8 	.word	0x20003ff8

08004ebc <z_sched_start>:
{
 8004ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004ebe:	f04f 0210 	mov.w	r2, #16
 8004ec2:	f3ef 8411 	mrs	r4, BASEPRI
 8004ec6:	f382 8811 	msr	BASEPRI, r2
 8004eca:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8004ece:	7b42      	ldrb	r2, [r0, #13]
 8004ed0:	0751      	lsls	r1, r2, #29
 8004ed2:	d404      	bmi.n	8004ede <z_sched_start+0x22>
	__asm__ volatile(
 8004ed4:	f384 8811 	msr	BASEPRI, r4
 8004ed8:	f3bf 8f6f 	isb	sy
}
 8004edc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8004ee4:	f7ff ffb2 	bl	8004e4c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <z_sched_start+0x38>)
}
 8004eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8004ef0:	f7ff bf2c 	b.w	8004d4c <z_reschedule>
 8004ef4:	20004216 	.word	0x20004216

08004ef8 <move_thread_to_end_of_prio_q>:
{
 8004ef8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 8004efa:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8004efe:	2b00      	cmp	r3, #0
{
 8004f00:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8004f02:	da02      	bge.n	8004f0a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8004f04:	4817      	ldr	r0, [pc, #92]	; (8004f64 <move_thread_to_end_of_prio_q+0x6c>)
 8004f06:	f7ff ff47 	bl	8004d98 <z_priq_dumb_remove>
	return list->head == list;
 8004f0a:	4a17      	ldr	r2, [pc, #92]	; (8004f68 <move_thread_to_end_of_prio_q+0x70>)
 8004f0c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8004f0e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return list->head == list;
 8004f10:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004f14:	4283      	cmp	r3, r0
 8004f16:	bf08      	it	eq
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bf38      	it	cc
 8004f1e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004f20:	b1d3      	cbz	r3, 8004f58 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
 8004f22:	f991 600e 	ldrsb.w	r6, [r1, #14]
 8004f26:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8004f2a:	42ae      	cmp	r6, r5
 8004f2c:	db03      	blt.n	8004f36 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	d012      	beq.n	8004f58 <move_thread_to_end_of_prio_q+0x60>
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	e7f4      	b.n	8004f20 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
 8004f36:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 8004f38:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 8004f3c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 8004f3e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 8004f40:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
 8004f42:	6890      	ldr	r0, [r2, #8]
 8004f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f48:	734b      	strb	r3, [r1, #13]
 8004f4a:	1a43      	subs	r3, r0, r1
 8004f4c:	4258      	negs	r0, r3
}
 8004f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8004f52:	4158      	adcs	r0, r3
 8004f54:	f7ff bf36 	b.w	8004dc4 <update_cache>
	node->prev = list->tail;
 8004f58:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
 8004f5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f5e:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8004f60:	62d1      	str	r1, [r2, #44]	; 0x2c
}
 8004f62:	e7ed      	b.n	8004f40 <move_thread_to_end_of_prio_q+0x48>
 8004f64:	20004020 	.word	0x20004020
 8004f68:	20003ff8 	.word	0x20003ff8

08004f6c <z_time_slice>:
{
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4601      	mov	r1, r0
	__asm__ volatile(
 8004f70:	f04f 0310 	mov.w	r3, #16
 8004f74:	f3ef 8411 	mrs	r4, BASEPRI
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8004f80:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <z_time_slice+0x70>)
 8004f82:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <z_time_slice+0x74>)
 8004f84:	6898      	ldr	r0, [r3, #8]
 8004f86:	6815      	ldr	r5, [r2, #0]
 8004f88:	42a8      	cmp	r0, r5
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	d106      	bne.n	8004f9c <z_time_slice+0x30>
			z_reset_time_slice();
 8004f8e:	f7ff fea7 	bl	8004ce0 <z_reset_time_slice>
	__asm__ volatile(
 8004f92:	f384 8811 	msr	BASEPRI, r4
 8004f96:	f3bf 8f6f 	isb	sy
}
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8004fa0:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <z_time_slice+0x78>)
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	b1ba      	cbz	r2, 8004fd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8004fa6:	89c2      	ldrh	r2, [r0, #14]
 8004fa8:	2a7f      	cmp	r2, #127	; 0x7f
 8004faa:	d814      	bhi.n	8004fd6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8004fac:	7b42      	ldrb	r2, [r0, #13]
 8004fae:	06d2      	lsls	r2, r2, #27
 8004fb0:	d111      	bne.n	8004fd6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8004fb2:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <z_time_slice+0x7c>)
 8004fb4:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	4296      	cmp	r6, r2
 8004fbc:	db0b      	blt.n	8004fd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8004fbe:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <z_time_slice+0x80>)
 8004fc0:	4290      	cmp	r0, r2
 8004fc2:	d008      	beq.n	8004fd6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	428a      	cmp	r2, r1
 8004fc8:	dc02      	bgt.n	8004fd0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
 8004fca:	f7ff ff95 	bl	8004ef8 <move_thread_to_end_of_prio_q>
 8004fce:	e7de      	b.n	8004f8e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
 8004fd0:	1a52      	subs	r2, r2, r1
 8004fd2:	615a      	str	r2, [r3, #20]
 8004fd4:	e7dd      	b.n	8004f92 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	616b      	str	r3, [r5, #20]
 8004fda:	e7da      	b.n	8004f92 <z_time_slice+0x26>
 8004fdc:	20003ff8 	.word	0x20003ff8
 8004fe0:	20004028 	.word	0x20004028
 8004fe4:	20004030 	.word	0x20004030
 8004fe8:	2000402c 	.word	0x2000402c
 8004fec:	20000ed0 	.word	0x20000ed0

08004ff0 <z_impl_k_thread_suspend>:
{
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8004ff4:	3018      	adds	r0, #24
 8004ff6:	f00d fdac 	bl	8012b52 <z_abort_timeout>
	__asm__ volatile(
 8004ffa:	f04f 0310 	mov.w	r3, #16
 8004ffe:	f3ef 8611 	mrs	r6, BASEPRI
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 800500a:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800500e:	2b00      	cmp	r3, #0
 8005010:	da07      	bge.n	8005022 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005012:	480f      	ldr	r0, [pc, #60]	; (8005050 <z_impl_k_thread_suspend+0x60>)
 8005014:	4621      	mov	r1, r4
 8005016:	f7ff febf 	bl	8004d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 800501a:	7b63      	ldrb	r3, [r4, #13]
 800501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005020:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8005022:	4d0c      	ldr	r5, [pc, #48]	; (8005054 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005024:	7b63      	ldrb	r3, [r4, #13]
 8005026:	68a8      	ldr	r0, [r5, #8]
 8005028:	f043 0310 	orr.w	r3, r3, #16
 800502c:	7363      	strb	r3, [r4, #13]
 800502e:	1b03      	subs	r3, r0, r4
 8005030:	4258      	negs	r0, r3
 8005032:	4158      	adcs	r0, r3
 8005034:	f7ff fec6 	bl	8004dc4 <update_cache>
	__asm__ volatile(
 8005038:	f386 8811 	msr	BASEPRI, r6
 800503c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8005040:	68ab      	ldr	r3, [r5, #8]
 8005042:	42a3      	cmp	r3, r4
 8005044:	d103      	bne.n	800504e <z_impl_k_thread_suspend+0x5e>
}
 8005046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 800504a:	f00d bce1 	b.w	8012a10 <z_reschedule_unlocked>
}
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	20004020 	.word	0x20004020
 8005054:	20003ff8 	.word	0x20003ff8

08005058 <z_thread_single_abort>:
{
 8005058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505c:	4604      	mov	r4, r0
	__asm__ volatile(
 800505e:	f04f 0310 	mov.w	r3, #16
 8005062:	f3ef 8211 	mrs	r2, BASEPRI
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
 800506e:	7b43      	ldrb	r3, [r0, #13]
 8005070:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005074:	d005      	beq.n	8005082 <z_thread_single_abort+0x2a>
	__asm__ volatile(
 8005076:	f382 8811 	msr	BASEPRI, r2
 800507a:	f3bf 8f6f 	isb	sy
}
 800507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
 8005082:	f043 0320 	orr.w	r3, r3, #32
 8005086:	7343      	strb	r3, [r0, #13]
 8005088:	f382 8811 	msr	BASEPRI, r2
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	3018      	adds	r0, #24
 8005092:	f00d fd5e 	bl	8012b52 <z_abort_timeout>
	__asm__ volatile(
 8005096:	f04f 0310 	mov.w	r3, #16
 800509a:	f3ef 8611 	mrs	r6, BASEPRI
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80050a6:	7b63      	ldrb	r3, [r4, #13]
 80050a8:	06d8      	lsls	r0, r3, #27
 80050aa:	d116      	bne.n	80050da <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
 80050ac:	69a2      	ldr	r2, [r4, #24]
 80050ae:	b9a2      	cbnz	r2, 80050da <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
 80050b0:	0619      	lsls	r1, r3, #24
 80050b2:	d507      	bpl.n	80050c4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
 80050b4:	4826      	ldr	r0, [pc, #152]	; (8005150 <z_thread_single_abort+0xf8>)
 80050b6:	4621      	mov	r1, r4
 80050b8:	f7ff fe6e 	bl	8004d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80050bc:	7b63      	ldrb	r3, [r4, #13]
 80050be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <z_thread_single_abort+0xfc>)
 80050c6:	6898      	ldr	r0, [r3, #8]
 80050c8:	1b02      	subs	r2, r0, r4
 80050ca:	4250      	negs	r0, r2
 80050cc:	4150      	adcs	r0, r2
 80050ce:	f7ff fe79 	bl	8004dc4 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 80050d2:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 80050d6:	2700      	movs	r7, #0
 80050d8:	e01d      	b.n	8005116 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
 80050da:	079b      	lsls	r3, r3, #30
 80050dc:	d5f9      	bpl.n	80050d2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
 80050de:	68a0      	ldr	r0, [r4, #8]
 80050e0:	4621      	mov	r1, r4
 80050e2:	f7ff fe59 	bl	8004d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80050e6:	7b63      	ldrb	r3, [r4, #13]
 80050e8:	f023 0302 	bic.w	r3, r3, #2
 80050ec:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	e7ee      	b.n	80050d2 <z_thread_single_abort+0x7a>
 80050f4:	f105 0018 	add.w	r0, r5, #24
 80050f8:	f00d fd2b 	bl	8012b52 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 80050fc:	68a8      	ldr	r0, [r5, #8]
 80050fe:	4629      	mov	r1, r5
 8005100:	f7ff fe4a 	bl	8004d98 <z_priq_dumb_remove>
 8005104:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
 8005106:	60af      	str	r7, [r5, #8]
 8005108:	f023 0302 	bic.w	r3, r3, #2
 800510c:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800510e:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
 8005110:	4628      	mov	r0, r5
 8005112:	f7ff fe9b 	bl	8004e4c <ready_thread>
	return list->head == list;
 8005116:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005118:	4545      	cmp	r5, r8
 800511a:	d001      	beq.n	8005120 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 800511c:	2d00      	cmp	r5, #0
 800511e:	d1e9      	bne.n	80050f4 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <z_thread_single_abort+0xfc>)
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <z_thread_single_abort+0x100>)
 8005126:	429a      	cmp	r2, r3
 8005128:	d102      	bne.n	8005130 <z_thread_single_abort+0xd8>
			update_cache(1);
 800512a:	2001      	movs	r0, #1
 800512c:	f7ff fe4a 	bl	8004dc4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 8005130:	7b63      	ldrb	r3, [r4, #13]
 8005132:	f043 0308 	orr.w	r3, r3, #8
 8005136:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
 8005138:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
 800513a:	f386 8811 	msr	BASEPRI, r6
 800513e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d09b      	beq.n	800507e <z_thread_single_abort+0x26>
		fn_abort(thread);
 8005146:	4620      	mov	r0, r4
}
 8005148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
 800514c:	4718      	bx	r3
 800514e:	bf00      	nop
 8005150:	20004020 	.word	0x20004020
 8005154:	20003ff8 	.word	0x20003ff8
 8005158:	20000ed0 	.word	0x20000ed0

0800515c <unready_thread>:
{
 800515c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 800515e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8005162:	2b00      	cmp	r3, #0
{
 8005164:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8005166:	da06      	bge.n	8005176 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005168:	4807      	ldr	r0, [pc, #28]	; (8005188 <unready_thread+0x2c>)
 800516a:	f7ff fe15 	bl	8004d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 800516e:	7b4b      	ldrb	r3, [r1, #13]
 8005170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005174:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <unready_thread+0x30>)
 8005178:	6898      	ldr	r0, [r3, #8]
 800517a:	1a43      	subs	r3, r0, r1
 800517c:	4258      	negs	r0, r3
 800517e:	4158      	adcs	r0, r3
}
 8005180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8005184:	f7ff be1e 	b.w	8004dc4 <update_cache>
 8005188:	20004020 	.word	0x20004020
 800518c:	20003ff8 	.word	0x20003ff8

08005190 <pend>:
{
 8005190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005194:	4606      	mov	r6, r0
 8005196:	4614      	mov	r4, r2
 8005198:	461d      	mov	r5, r3
	__asm__ volatile(
 800519a:	f04f 0310 	mov.w	r3, #16
 800519e:	f3ef 8711 	mrs	r7, BASEPRI
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 80051aa:	f00d fc81 	bl	8012ab0 <add_to_waitq_locked>
	__asm__ volatile(
 80051ae:	f387 8811 	msr	BASEPRI, r7
 80051b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80051b6:	1c6b      	adds	r3, r5, #1
 80051b8:	bf08      	it	eq
 80051ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 80051be:	d008      	beq.n	80051d2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 80051c0:	4622      	mov	r2, r4
 80051c2:	462b      	mov	r3, r5
 80051c4:	f106 0018 	add.w	r0, r6, #24
 80051c8:	4903      	ldr	r1, [pc, #12]	; (80051d8 <pend+0x48>)
}
 80051ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ce:	f000 ba3d 	b.w	800564c <z_add_timeout>
 80051d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d6:	bf00      	nop
 80051d8:	08012a71 	.word	0x08012a71

080051dc <z_pend_curr>:
{
 80051dc:	b510      	push	{r4, lr}
	pending_current = _current;
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <z_pend_curr+0x20>)
 80051e0:	6898      	ldr	r0, [r3, #8]
 80051e2:	4b07      	ldr	r3, [pc, #28]	; (8005200 <z_pend_curr+0x24>)
{
 80051e4:	460c      	mov	r4, r1
	pending_current = _current;
 80051e6:	6018      	str	r0, [r3, #0]
{
 80051e8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 80051ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051ee:	f7ff ffcf 	bl	8005190 <pend>
 80051f2:	4620      	mov	r0, r4
}
 80051f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f8:	f7fe bd9e 	b.w	8003d38 <arch_swap>
 80051fc:	20003ff8 	.word	0x20003ff8
 8005200:	20004028 	.word	0x20004028

08005204 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
 8005204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005208:	4605      	mov	r5, r0
 800520a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
 800520c:	f00d fce1 	bl	8012bd2 <z_tick_get_32>
 8005210:	4604      	mov	r4, r0
	__asm__ volatile(
 8005212:	f04f 0310 	mov.w	r3, #16
 8005216:	f3ef 8811 	mrs	r8, BASEPRI
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8005222:	4e12      	ldr	r6, [pc, #72]	; (800526c <z_tick_sleep.part.0+0x68>)
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <z_tick_sleep.part.0+0x6c>)
 8005226:	68b0      	ldr	r0, [r6, #8]
 8005228:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 800522a:	f7ff ff97 	bl	800515c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 800522e:	68b0      	ldr	r0, [r6, #8]
 8005230:	4910      	ldr	r1, [pc, #64]	; (8005274 <z_tick_sleep.part.0+0x70>)
 8005232:	462a      	mov	r2, r5
 8005234:	463b      	mov	r3, r7
 8005236:	3018      	adds	r0, #24
 8005238:	f000 fa08 	bl	800564c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 800523c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 800523e:	7b53      	ldrb	r3, [r2, #13]
 8005240:	f043 0310 	orr.w	r3, r3, #16
 8005244:	7353      	strb	r3, [r2, #13]
 8005246:	4640      	mov	r0, r8
 8005248:	f7fe fd76 	bl	8003d38 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
 800524c:	f00d fcc1 	bl	8012bd2 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
 8005250:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
 8005252:	1a24      	subs	r4, r4, r0
 8005254:	f04f 0500 	mov.w	r5, #0
 8005258:	f165 0500 	sbc.w	r5, r5, #0
 800525c:	2c00      	cmp	r4, #0
 800525e:	f175 0300 	sbcs.w	r3, r5, #0
 8005262:	bfb8      	it	lt
 8005264:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	20003ff8 	.word	0x20003ff8
 8005270:	20004028 	.word	0x20004028
 8005274:	08012a71 	.word	0x08012a71

08005278 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800527a:	2100      	movs	r1, #0
 800527c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
 8005280:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8005284:	4608      	mov	r0, r1
 8005286:	f7ff bd41 	b.w	8004d0c <k_sched_time_slice_set>
 800528a:	bf00      	nop
 800528c:	20003ff8 	.word	0x20003ff8

08005290 <z_impl_k_yield>:
{
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8005292:	4c24      	ldr	r4, [pc, #144]	; (8005324 <z_impl_k_yield+0x94>)
 8005294:	4b24      	ldr	r3, [pc, #144]	; (8005328 <z_impl_k_yield+0x98>)
 8005296:	68a2      	ldr	r2, [r4, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d030      	beq.n	80052fe <z_impl_k_yield+0x6e>
 800529c:	f04f 0310 	mov.w	r3, #16
 80052a0:	f3ef 8511 	mrs	r5, BASEPRI
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 80052ac:	68a1      	ldr	r1, [r4, #8]
 80052ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80052b2:	f7ff fd71 	bl	8004d98 <z_priq_dumb_remove>
	return list->head == list;
 80052b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
 80052b8:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80052ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80052bc:	4283      	cmp	r3, r0
 80052be:	bf08      	it	eq
 80052c0:	2300      	moveq	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf38      	it	cc
 80052c6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80052c8:	b32b      	cbz	r3, 8005316 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 80052ca:	f992 700e 	ldrsb.w	r7, [r2, #14]
 80052ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80052d2:	42b7      	cmp	r7, r6
 80052d4:	db03      	blt.n	80052de <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80052d6:	428b      	cmp	r3, r1
 80052d8:	d01d      	beq.n	8005316 <z_impl_k_yield+0x86>
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	e7f4      	b.n	80052c8 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 80052de:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 80052e0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 80052e4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 80052e6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 80052e8:	7b53      	ldrb	r3, [r2, #13]
 80052ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ee:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 80052f0:	2001      	movs	r0, #1
 80052f2:	f7ff fd67 	bl	8004dc4 <update_cache>
	__asm__ volatile(
 80052f6:	f385 8811 	msr	BASEPRI, r5
 80052fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80052fe:	f04f 0310 	mov.w	r3, #16
 8005302:	f3ef 8011 	mrs	r0, BASEPRI
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
}
 800530e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005312:	f7fe bd11 	b.w	8003d38 <arch_swap>
	node->prev = list->tail;
 8005316:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 800531a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800531c:	601a      	str	r2, [r3, #0]
	list->tail = node;
 800531e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8005320:	e7e2      	b.n	80052e8 <z_impl_k_yield+0x58>
 8005322:	bf00      	nop
 8005324:	20003ff8 	.word	0x20003ff8
 8005328:	20000ed0 	.word	0x20000ed0

0800532c <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800532c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8005330:	bf08      	it	eq
 8005332:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8005336:	b508      	push	{r3, lr}
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800533c:	d106      	bne.n	800534c <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <z_impl_k_sleep+0x3c>)
 8005340:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8005342:	f7ff fe55 	bl	8004ff0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8005346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 800534a:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
 800534c:	4313      	orrs	r3, r2
 800534e:	d108      	bne.n	8005362 <z_impl_k_sleep+0x36>
	z_impl_k_yield();
 8005350:	f7ff ff9e 	bl	8005290 <z_impl_k_yield>
		return 0;
 8005354:	2000      	movs	r0, #0
			return t / (from_hz / to_hz);
 8005356:	220a      	movs	r2, #10
 8005358:	2300      	movs	r3, #0
 800535a:	17c1      	asrs	r1, r0, #31
 800535c:	f7fb ffdc 	bl	8001318 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8005360:	e7f3      	b.n	800534a <z_impl_k_sleep+0x1e>
 8005362:	f7ff ff4f 	bl	8005204 <z_tick_sleep.part.0>
 8005366:	e7f6      	b.n	8005356 <z_impl_k_sleep+0x2a>
 8005368:	20003ff8 	.word	0x20003ff8

0800536c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <z_impl_k_current_get+0x8>)
 800536e:	6898      	ldr	r0, [r3, #8]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20003ff8 	.word	0x20003ff8

08005378 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4604      	mov	r4, r0
 800537c:	f04f 0310 	mov.w	r3, #16
 8005380:	f3ef 8511 	mrs	r5, BASEPRI
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 800538c:	f00d fbbb 	bl	8012b06 <z_unpend_first_thread>

	if (thread != NULL) {
 8005390:	b148      	cbz	r0, 80053a6 <z_impl_k_sem_give+0x2e>
 8005392:	2200      	movs	r2, #0
 8005394:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8005396:	f00d fb5b 	bl	8012a50 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 800539a:	4629      	mov	r1, r5
 800539c:	4805      	ldr	r0, [pc, #20]	; (80053b4 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 800539e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 80053a2:	f7ff bcd3 	b.w	8004d4c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 80053a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	bf18      	it	ne
 80053ae:	3301      	addne	r3, #1
 80053b0:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
 80053b2:	e7f2      	b.n	800539a <z_impl_k_sem_give+0x22>
 80053b4:	20004217 	.word	0x20004217

080053b8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 80053b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ba:	4614      	mov	r4, r2
 80053bc:	461d      	mov	r5, r3
 80053be:	f04f 0310 	mov.w	r3, #16
 80053c2:	f3ef 8111 	mrs	r1, BASEPRI
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 80053ce:	6883      	ldr	r3, [r0, #8]
 80053d0:	b143      	cbz	r3, 80053e4 <z_impl_k_sem_take+0x2c>
		sem->count--;
 80053d2:	3b01      	subs	r3, #1
 80053d4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 80053d6:	f381 8811 	msr	BASEPRI, r1
 80053da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 80053de:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 80053e0:	b003      	add	sp, #12
 80053e2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 80053e4:	ea54 0305 	orrs.w	r3, r4, r5
 80053e8:	d106      	bne.n	80053f8 <z_impl_k_sem_take+0x40>
 80053ea:	f381 8811 	msr	BASEPRI, r1
 80053ee:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 80053f2:	f06f 000f 	mvn.w	r0, #15
 80053f6:	e7f3      	b.n	80053e0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80053f8:	4602      	mov	r2, r0
 80053fa:	e9cd 4500 	strd	r4, r5, [sp]
 80053fe:	4802      	ldr	r0, [pc, #8]	; (8005408 <z_impl_k_sem_take+0x50>)
 8005400:	f7ff feec 	bl	80051dc <z_pend_curr>
	return ret;
 8005404:	e7ec      	b.n	80053e0 <z_impl_k_sem_take+0x28>
 8005406:	bf00      	nop
 8005408:	20004217 	.word	0x20004217

0800540c <z_impl_k_busy_wait>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 800540c:	b538      	push	{r3, r4, r5, lr}
	if (usec_to_wait == 0) {
 800540e:	4604      	mov	r4, r0
 8005410:	b178      	cbz	r0, 8005432 <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 8005412:	f7fe fc7b 	bl	8003d0c <z_timer_cycle_get_32>
 8005416:	4605      	mov	r5, r0
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8005418:	4806      	ldr	r0, [pc, #24]	; (8005434 <z_impl_k_busy_wait+0x28>)
 800541a:	4a07      	ldr	r2, [pc, #28]	; (8005438 <z_impl_k_busy_wait+0x2c>)
 800541c:	fba4 0100 	umull	r0, r1, r4, r0
 8005420:	2300      	movs	r3, #0
 8005422:	f7fb ff79 	bl	8001318 <__aeabi_uldivmod>
 8005426:	4604      	mov	r4, r0
 8005428:	f7fe fc70 	bl	8003d0c <z_timer_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 800542c:	1b43      	subs	r3, r0, r5
 800542e:	42a3      	cmp	r3, r4
 8005430:	d3fa      	bcc.n	8005428 <z_impl_k_busy_wait+0x1c>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 8005432:	bd38      	pop	{r3, r4, r5, pc}
 8005434:	0a037a00 	.word	0x0a037a00
 8005438:	000f4240 	.word	0x000f4240

0800543c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 800543c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 8005440:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
 8005444:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8005448:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800544a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 800544c:	2504      	movs	r5, #4
 800544e:	7345      	strb	r5, [r0, #13]
{
 8005450:	460f      	mov	r7, r1

	thread_base->prio = priority;
 8005452:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005454:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8005456:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
 8005458:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800545a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
 800545c:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800545e:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8005462:	3720      	adds	r7, #32
	node->prev = NULL;
 8005464:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8005468:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 800546c:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800546e:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005472:	9202      	str	r2, [sp, #8]
 8005474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005476:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8005478:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 800547a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800547c:	9200      	str	r2, [sp, #0]
 800547e:	4642      	mov	r2, r8
{
 8005480:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005482:	f7fe fcd5 	bl	8003e30 <arch_new_thread>
	if (!_current) {
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <z_setup_new_thread+0x60>)
 8005488:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 800548a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 800548e:	b103      	cbz	r3, 8005492 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 8005492:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005494:	4640      	mov	r0, r8
 8005496:	b004      	add	sp, #16
 8005498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800549c:	20003ff8 	.word	0x20003ff8

080054a0 <z_init_static_threads>:
{
 80054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 80054a2:	4f22      	ldr	r7, [pc, #136]	; (800552c <z_init_static_threads+0x8c>)
 80054a4:	4d22      	ldr	r5, [pc, #136]	; (8005530 <z_init_static_threads+0x90>)
{
 80054a6:	b087      	sub	sp, #28
 80054a8:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80054aa:	42bd      	cmp	r5, r7
 80054ac:	f105 0430 	add.w	r4, r5, #48	; 0x30
 80054b0:	d30b      	bcc.n	80054ca <z_init_static_threads+0x2a>
	k_sched_lock();
 80054b2:	f7ff fc5d 	bl	8004d70 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80054b6:	4c1e      	ldr	r4, [pc, #120]	; (8005530 <z_init_static_threads+0x90>)
 80054b8:	4f1e      	ldr	r7, [pc, #120]	; (8005534 <z_init_static_threads+0x94>)
			return t * (to_hz / from_hz);
 80054ba:	250a      	movs	r5, #10
 80054bc:	42b4      	cmp	r4, r6
 80054be:	d321      	bcc.n	8005504 <z_init_static_threads+0x64>
}
 80054c0:	b007      	add	sp, #28
 80054c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80054c6:	f7ff bca5 	b.w	8004e14 <k_sched_unlock>
		z_setup_new_thread(
 80054ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80054ce:	9305      	str	r3, [sp, #20]
 80054d0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80054e0:	9302      	str	r3, [sp, #8]
 80054e2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80054f2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80054f6:	f7ff ffa1 	bl	800543c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80054fa:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80054fe:	65dd      	str	r5, [r3, #92]	; 0x5c
 8005500:	4625      	mov	r5, r4
 8005502:	e7d2      	b.n	80054aa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8005504:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005506:	1c53      	adds	r3, r2, #1
 8005508:	d009      	beq.n	800551e <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 800550a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800550e:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005512:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8005516:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8005518:	d103      	bne.n	8005522 <z_init_static_threads+0x82>
	z_sched_start(thread);
 800551a:	f7ff fccf 	bl	8004ebc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 800551e:	3430      	adds	r4, #48	; 0x30
 8005520:	e7cc      	b.n	80054bc <z_init_static_threads+0x1c>
 8005522:	4639      	mov	r1, r7
 8005524:	3018      	adds	r0, #24
 8005526:	f000 f891 	bl	800564c <z_add_timeout>
 800552a:	e7f8      	b.n	800551e <z_init_static_threads+0x7e>
 800552c:	20000eac 	.word	0x20000eac
 8005530:	20000eac 	.word	0x20000eac
 8005534:	08012a71 	.word	0x08012a71

08005538 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
 8005538:	b508      	push	{r3, lr}
	__asm__ volatile(
 800553a:	f04f 0310 	mov.w	r3, #16
 800553e:	f3ef 8411 	mrs	r4, BASEPRI
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <z_self_abort+0x24>)
 800554c:	6898      	ldr	r0, [r3, #8]
 800554e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
 8005550:	f7ff fd4e 	bl	8004ff0 <z_impl_k_thread_suspend>
 8005554:	4620      	mov	r0, r4
 8005556:	f7fe fbef 	bl	8003d38 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 800555a:	bf00      	nop
 800555c:	20003ff8 	.word	0x20003ff8

08005560 <z_data_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <z_data_copy+0x28>)
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <z_data_copy+0x2c>)
 8005564:	490a      	ldr	r1, [pc, #40]	; (8005590 <z_data_copy+0x30>)
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8005566:	b508      	push	{r3, lr}
 8005568:	1a12      	subs	r2, r2, r0
 800556a:	f7fc f919 	bl	80017a0 <memcpy>
 800556e:	4a09      	ldr	r2, [pc, #36]	; (8005594 <z_data_copy+0x34>)
 8005570:	4909      	ldr	r1, [pc, #36]	; (8005598 <z_data_copy+0x38>)
 8005572:	480a      	ldr	r0, [pc, #40]	; (800559c <z_data_copy+0x3c>)
 8005574:	f7fc f914 	bl	80017a0 <memcpy>
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <z_data_copy+0x40>)
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <z_data_copy+0x44>)
 800557c:	490a      	ldr	r1, [pc, #40]	; (80055a8 <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800557e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005582:	1a12      	subs	r2, r2, r0
 8005584:	f7fc b90c 	b.w	80017a0 <memcpy>
 8005588:	20000000 	.word	0x20000000
 800558c:	20000ebc 	.word	0x20000ebc
 8005590:	0801e624 	.word	0x0801e624
 8005594:	00000000 	.word	0x00000000
 8005598:	0801e624 	.word	0x0801e624
 800559c:	20000000 	.word	0x20000000
 80055a0:	10000000 	.word	0x10000000
 80055a4:	10000000 	.word	0x10000000
 80055a8:	0801f4e0 	.word	0x0801f4e0

080055ac <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <elapsed+0x10>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b90b      	cbnz	r3, 80055b6 <elapsed+0xa>
 80055b2:	f7fe bb8d 	b.w	8003cd0 <z_clock_elapsed>
}
 80055b6:	2000      	movs	r0, #0
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20004034 	.word	0x20004034

080055c0 <remove_timeout>:
{
 80055c0:	b530      	push	{r4, r5, lr}
 80055c2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80055c4:	b168      	cbz	r0, 80055e2 <remove_timeout+0x22>
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 80055c8:	6852      	ldr	r2, [r2, #4]
 80055ca:	4290      	cmp	r0, r2
 80055cc:	d009      	beq.n	80055e2 <remove_timeout+0x22>
	if (next(t) != NULL) {
 80055ce:	b143      	cbz	r3, 80055e2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80055d0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80055d4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80055d8:	1912      	adds	r2, r2, r4
 80055da:	eb45 0101 	adc.w	r1, r5, r1
 80055de:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 80055e2:	6842      	ldr	r2, [r0, #4]
 80055e4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80055e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80055e8:	2300      	movs	r3, #0
	node->prev = NULL;
 80055ea:	e9c0 3300 	strd	r3, r3, [r0]
}
 80055ee:	bd30      	pop	{r4, r5, pc}
 80055f0:	2000038c 	.word	0x2000038c

080055f4 <next_timeout>:

static int32_t next_timeout(void)
{
 80055f4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 80055f6:	4b13      	ldr	r3, [pc, #76]	; (8005644 <next_timeout+0x50>)
 80055f8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80055fa:	429c      	cmp	r4, r3
 80055fc:	bf08      	it	eq
 80055fe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8005600:	f7ff ffd4 	bl	80055ac <elapsed>
 8005604:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8005606:	b1bc      	cbz	r4, 8005638 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8005608:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800560c:	1b40      	subs	r0, r0, r5
 800560e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8005612:	2801      	cmp	r0, #1
 8005614:	f171 0300 	sbcs.w	r3, r1, #0
 8005618:	db11      	blt.n	800563e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 800561a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800561e:	2300      	movs	r3, #0
 8005620:	4282      	cmp	r2, r0
 8005622:	eb73 0401 	sbcs.w	r4, r3, r1
 8005626:	da00      	bge.n	800562a <next_timeout+0x36>
 8005628:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <next_timeout+0x54>)
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	b113      	cbz	r3, 8005636 <next_timeout+0x42>
 8005630:	4298      	cmp	r0, r3
 8005632:	bfa8      	it	ge
 8005634:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8005636:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8005638:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800563c:	e7f5      	b.n	800562a <next_timeout+0x36>
 800563e:	2000      	movs	r0, #0
 8005640:	e7f3      	b.n	800562a <next_timeout+0x36>
 8005642:	bf00      	nop
 8005644:	2000038c 	.word	0x2000038c
 8005648:	20003ff8 	.word	0x20003ff8

0800564c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 800564c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	9101      	str	r1, [sp, #4]
 8005652:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005654:	1c4b      	adds	r3, r1, #1
 8005656:	bf08      	it	eq
 8005658:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 800565c:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800565e:	d070      	beq.n	8005742 <z_add_timeout+0xf6>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
 8005660:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8005662:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 8005666:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 800566a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800566e:	ebb3 0804 	subs.w	r8, r3, r4
 8005672:	eb6b 0905 	sbc.w	r9, fp, r5
 8005676:	f1b8 0f00 	cmp.w	r8, #0
 800567a:	f179 0300 	sbcs.w	r3, r9, #0
 800567e:	db0f      	blt.n	80056a0 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8005680:	f7ff ff94 	bl	80055ac <elapsed>
 8005684:	4a35      	ldr	r2, [pc, #212]	; (800575c <z_add_timeout+0x110>)
 8005686:	e9d2 1c00 	ldrd	r1, ip, [r2]
 800568a:	f06f 0301 	mvn.w	r3, #1
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	eb6b 020c 	sbc.w	r2, fp, ip
 8005694:	1b1e      	subs	r6, r3, r4
 8005696:	eb62 0705 	sbc.w	r7, r2, r5
 800569a:	1a34      	subs	r4, r6, r0
 800569c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	f8ca 3008 	str.w	r3, [sl, #8]
 80056a6:	f04f 0310 	mov.w	r3, #16
 80056aa:	f3ef 8611 	mrs	r6, BASEPRI
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 80056b6:	f7ff ff79 	bl	80055ac <elapsed>
	ticks = MAX(1, ticks);
 80056ba:	2c01      	cmp	r4, #1
 80056bc:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <z_add_timeout+0x114>)
 80056c2:	bfb8      	it	lt
 80056c4:	2401      	movlt	r4, #1
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	bfb8      	it	lt
 80056ca:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
 80056cc:	1824      	adds	r4, r4, r0
 80056ce:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80056d2:	429a      	cmp	r2, r3
 80056d4:	e9ca 4504 	strd	r4, r5, [sl, #16]
 80056d8:	d001      	beq.n	80056de <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80056da:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80056dc:	b952      	cbnz	r2, 80056f4 <z_add_timeout+0xa8>
	node->prev = list->tail;
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 80056e4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80056e6:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 80056ea:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 80056ee:	f8c3 a004 	str.w	sl, [r3, #4]
}
 80056f2:	e014      	b.n	800571e <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
 80056f4:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 80056f8:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 80056fc:	4544      	cmp	r4, r8
 80056fe:	eb75 0109 	sbcs.w	r1, r5, r9
 8005702:	da21      	bge.n	8005748 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
 8005704:	ebb8 0004 	subs.w	r0, r8, r4
 8005708:	eb69 0105 	sbc.w	r1, r9, r5
 800570c:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 8005710:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005712:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8005716:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 800571a:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 800571e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005720:	429a      	cmp	r2, r3
 8005722:	d00a      	beq.n	800573a <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8005724:	4592      	cmp	sl, r2
 8005726:	d108      	bne.n	800573a <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 8005728:	f7ff ff64 	bl	80055f4 <next_timeout>

			if (_current_cpu->slice_ticks != next_time) {
 800572c:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <z_add_timeout+0x118>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	4283      	cmp	r3, r0
 8005732:	d002      	beq.n	800573a <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
 8005734:	2100      	movs	r1, #0
 8005736:	f7fe fa67 	bl	8003c08 <z_clock_set_timeout>
	__asm__ volatile(
 800573a:	f386 8811 	msr	BASEPRI, r6
 800573e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 8005742:	b003      	add	sp, #12
 8005744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 8005748:	ebb4 0008 	subs.w	r0, r4, r8
 800574c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 8005750:	42ba      	cmp	r2, r7
 8005752:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8005756:	d0c2      	beq.n	80056de <z_add_timeout+0x92>
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	e7bf      	b.n	80056dc <z_add_timeout+0x90>
 800575c:	20000fd0 	.word	0x20000fd0
 8005760:	2000038c 	.word	0x2000038c
 8005764:	20003ff8 	.word	0x20003ff8

08005768 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 8005768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800576c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800576e:	f7ff fbfd 	bl	8004f6c <z_time_slice>
	__asm__ volatile(
 8005772:	f04f 0310 	mov.w	r3, #16
 8005776:	f3ef 8411 	mrs	r4, BASEPRI
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8005782:	4d2c      	ldr	r5, [pc, #176]	; (8005834 <z_clock_announce+0xcc>)
 8005784:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8005838 <z_clock_announce+0xd0>
	return list->head == list;
 8005788:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800583c <z_clock_announce+0xd4>
 800578c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800578e:	4651      	mov	r1, sl
 8005790:	f8d5 c000 	ldr.w	ip, [r5]
 8005794:	f8db 0000 	ldr.w	r0, [fp]
 8005798:	4662      	mov	r2, ip
 800579a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800579c:	4558      	cmp	r0, fp
 800579e:	e9da 8900 	ldrd	r8, r9, [sl]
 80057a2:	e9cd 2300 	strd	r2, r3, [sp]
 80057a6:	d00d      	beq.n	80057c4 <z_clock_announce+0x5c>
 80057a8:	b160      	cbz	r0, 80057c4 <z_clock_announce+0x5c>
 80057aa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 80057ae:	45b4      	cmp	ip, r6
 80057b0:	41bb      	sbcs	r3, r7
 80057b2:	da1e      	bge.n	80057f2 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 80057b4:	9b00      	ldr	r3, [sp, #0]
 80057b6:	ebb6 0c03 	subs.w	ip, r6, r3
 80057ba:	9b01      	ldr	r3, [sp, #4]
 80057bc:	eb67 0603 	sbc.w	r6, r7, r3
 80057c0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 80057c4:	9b00      	ldr	r3, [sp, #0]
 80057c6:	eb13 0208 	adds.w	r2, r3, r8
 80057ca:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 80057cc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
 80057d0:	eb43 0309 	adc.w	r3, r3, r9
 80057d4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
 80057d8:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 80057da:	f7ff ff0b 	bl	80055f4 <next_timeout>
 80057de:	4631      	mov	r1, r6
 80057e0:	f7fe fa12 	bl	8003c08 <z_clock_set_timeout>
	__asm__ volatile(
 80057e4:	f384 8811 	msr	BASEPRI, r4
 80057e8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80057ec:	b003      	add	sp, #12
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 80057f2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 80057fe:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
 8005802:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
 8005806:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
 800580a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 800580e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 8005810:	f7ff fed6 	bl	80055c0 <remove_timeout>
 8005814:	f384 8811 	msr	BASEPRI, r4
 8005818:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800581c:	6883      	ldr	r3, [r0, #8]
 800581e:	4798      	blx	r3
	__asm__ volatile(
 8005820:	f04f 0310 	mov.w	r3, #16
 8005824:	f3ef 8411 	mrs	r4, BASEPRI
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 8005830:	4901      	ldr	r1, [pc, #4]	; (8005838 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8005832:	e7ad      	b.n	8005790 <z_clock_announce+0x28>
 8005834:	20004034 	.word	0x20004034
 8005838:	20000fd0 	.word	0x20000fd0
 800583c:	2000038c 	.word	0x2000038c

08005840 <z_tick_get>:

int64_t z_tick_get(void)
{
 8005840:	b510      	push	{r4, lr}
 8005842:	f04f 0310 	mov.w	r3, #16
 8005846:	f3ef 8411 	mrs	r4, BASEPRI
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8005852:	f7fe fa3d 	bl	8003cd0 <z_clock_elapsed>
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <z_tick_get+0x30>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	1812      	adds	r2, r2, r0
 800585e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 8005862:	f384 8811 	msr	BASEPRI, r4
 8005866:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	bd10      	pop	{r4, pc}
 8005870:	20000fd0 	.word	0x20000fd0

08005874 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 8005874:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8005876:	4c06      	ldr	r4, [pc, #24]	; (8005890 <statics_init+0x1c>)
 8005878:	4d06      	ldr	r5, [pc, #24]	; (8005894 <statics_init+0x20>)
 800587a:	42ac      	cmp	r4, r5
 800587c:	d301      	bcc.n	8005882 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800587e:	2000      	movs	r0, #0
 8005880:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8005882:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8005886:	4620      	mov	r0, r4
 8005888:	f00d f9d3 	bl	8012c32 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800588c:	3418      	adds	r4, #24
 800588e:	e7f4      	b.n	800587a <statics_init+0x6>
 8005890:	20000eac 	.word	0x20000eac
 8005894:	20000eac 	.word	0x20000eac

08005898 <rcl_get_zero_initialized_publisher>:
rcl_publisher_t
rcl_get_zero_initialized_publisher()
{
  static rcl_publisher_t null_publisher = {0};
  return null_publisher;
}
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <rcl_get_zero_initialized_publisher+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	0801b9ec 	.word	0x0801b9ec

080058a4 <rcl_publisher_init>:
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rcl_publisher_options_t * options
)
{
 80058a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a8:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 80058ac:	4605      	mov	r5, r0
 80058ae:	f8dd 4468 	ldr.w	r4, [sp, #1128]	; 0x468
 80058b2:	9207      	str	r2, [sp, #28]
 80058b4:	4688      	mov	r8, r1
 80058b6:	469a      	mov	sl, r3
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_TOPIC_NAME_INVALID);

  rcl_ret_t fail_ret = RCL_RET_ERROR;

  // Check options and allocator first, so allocator can be used with errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 80058b8:	b92c      	cbnz	r4, 80058c6 <rcl_publisher_init+0x22>
 80058ba:	260b      	movs	r6, #11
  }
  if (NULL != remapped_topic_name) {
    allocator->deallocate(remapped_topic_name, allocator->state);
  }
  return ret;
}
 80058bc:	4630      	mov	r0, r6
 80058be:	f20d 4d44 	addw	sp, sp, #1092	; 0x444
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rcl_allocator_t * allocator = (rcl_allocator_t *)&options->allocator;
 80058c6:	f104 0650 	add.w	r6, r4, #80	; 0x50
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 80058ca:	4630      	mov	r0, r6
 80058cc:	f00d fa4b 	bl	8012d66 <rcutils_allocator_is_valid>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0f2      	beq.n	80058ba <rcl_publisher_init+0x16>
  RCL_CHECK_ARGUMENT_FOR_NULL(publisher, RCL_RET_INVALID_ARGUMENT);
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	d0f0      	beq.n	80058ba <rcl_publisher_init+0x16>
  if (publisher->impl) {
 80058d8:	682f      	ldr	r7, [r5, #0]
 80058da:	2f00      	cmp	r7, #0
 80058dc:	f040 812f 	bne.w	8005b3e <rcl_publisher_init+0x29a>
  if (!rcl_node_is_valid(node)) {
 80058e0:	4640      	mov	r0, r8
 80058e2:	f00f fcbf 	bl	8015264 <rcl_node_is_valid>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f000 812b 	beq.w	8005b42 <rcl_publisher_init+0x29e>
  RCL_CHECK_ARGUMENT_FOR_NULL(type_support, RCL_RET_INVALID_ARGUMENT);
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e3      	beq.n	80058ba <rcl_publisher_init+0x16>
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 80058f2:	f1ba 0f00 	cmp.w	sl, #0
 80058f6:	d0e0      	beq.n	80058ba <rcl_publisher_init+0x16>
  RCUTILS_LOG_DEBUG_NAMED(
 80058f8:	4b93      	ldr	r3, [pc, #588]	; (8005b48 <rcl_publisher_init+0x2a4>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	b923      	cbnz	r3, 8005908 <rcl_publisher_init+0x64>
 80058fe:	f00d fa8d 	bl	8012e1c <rcutils_logging_initialize>
 8005902:	b108      	cbz	r0, 8005908 <rcl_publisher_init+0x64>
 8005904:	f001 fb30 	bl	8006f68 <rcutils_reset_error>
 8005908:	4890      	ldr	r0, [pc, #576]	; (8005b4c <rcl_publisher_init+0x2a8>)
 800590a:	210a      	movs	r1, #10
 800590c:	f001 fd72 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005910:	b138      	cbz	r0, 8005922 <rcl_publisher_init+0x7e>
 8005912:	4b8f      	ldr	r3, [pc, #572]	; (8005b50 <rcl_publisher_init+0x2ac>)
 8005914:	4a8d      	ldr	r2, [pc, #564]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005916:	488f      	ldr	r0, [pc, #572]	; (8005b54 <rcl_publisher_init+0x2b0>)
 8005918:	f8cd a000 	str.w	sl, [sp]
 800591c:	210a      	movs	r1, #10
 800591e:	f001 fd93 	bl	8007448 <rcutils_log>
  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
 8005922:	46b6      	mov	lr, r6
 8005924:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005928:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 800592c:	46cc      	mov	ip, r9
 800592e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005932:	f8de 3000 	ldr.w	r3, [lr]
 8005936:	f8cc 3000 	str.w	r3, [ip]
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 800593a:	f001 ff67 	bl	800780c <rcutils_get_zero_initialized_string_map>
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 800593e:	ab0d      	add	r3, sp, #52	; 0x34
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 8005940:	9009      	str	r0, [sp, #36]	; 0x24
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 8005942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005946:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800594a:	2100      	movs	r1, #0
 800594c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8005950:	a809      	add	r0, sp, #36	; 0x24
 8005952:	f00d fb6f 	bl	8013034 <rcutils_string_map_init>
  if (rcutils_ret != RCUTILS_RET_OK) {
 8005956:	b120      	cbz	r0, 8005962 <rcl_publisher_init+0xbe>
    if (rcutils_ret == RCUTILS_RET_BAD_ALLOC) {
 8005958:	280a      	cmp	r0, #10
      return RCL_RET_BAD_ALLOC;
 800595a:	bf0c      	ite	eq
 800595c:	260a      	moveq	r6, #10
    return RCL_RET_ERROR;
 800595e:	2601      	movne	r6, #1
 8005960:	e7ac      	b.n	80058bc <rcl_publisher_init+0x18>
  rcl_ret_t ret = rcl_get_default_topic_name_substitutions(&substitutions_map);
 8005962:	a809      	add	r0, sp, #36	; 0x24
 8005964:	f00f fbfa 	bl	801515c <rcl_get_default_topic_name_substitutions>
  if (ret != RCL_RET_OK) {
 8005968:	4683      	mov	fp, r0
 800596a:	b300      	cbz	r0, 80059ae <rcl_publisher_init+0x10a>
    rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 800596c:	a809      	add	r0, sp, #36	; 0x24
 800596e:	f00d fbb2 	bl	80130d6 <rcutils_string_map_fini>
    if (rcutils_ret != RCUTILS_RET_OK) {
 8005972:	4604      	mov	r4, r0
 8005974:	b1c0      	cbz	r0, 80059a8 <rcl_publisher_init+0x104>
      RCUTILS_LOG_ERROR_NAMED(
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <rcl_publisher_init+0x2a4>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b923      	cbnz	r3, 8005986 <rcl_publisher_init+0xe2>
 800597c:	f00d fa4e 	bl	8012e1c <rcutils_logging_initialize>
 8005980:	b108      	cbz	r0, 8005986 <rcl_publisher_init+0xe2>
 8005982:	f001 faf1 	bl	8006f68 <rcutils_reset_error>
 8005986:	4871      	ldr	r0, [pc, #452]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005988:	2128      	movs	r1, #40	; 0x28
 800598a:	f001 fd33 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800598e:	b158      	cbz	r0, 80059a8 <rcl_publisher_init+0x104>
 8005990:	ad10      	add	r5, sp, #64	; 0x40
 8005992:	4628      	mov	r0, r5
 8005994:	f001 fac4 	bl	8006f20 <rcutils_get_error_string>
 8005998:	e9cd 4500 	strd	r4, r5, [sp]
 800599c:	4b6e      	ldr	r3, [pc, #440]	; (8005b58 <rcl_publisher_init+0x2b4>)
 800599e:	4a6b      	ldr	r2, [pc, #428]	; (8005b4c <rcl_publisher_init+0x2a8>)
 80059a0:	486e      	ldr	r0, [pc, #440]	; (8005b5c <rcl_publisher_init+0x2b8>)
 80059a2:	2128      	movs	r1, #40	; 0x28
 80059a4:	f001 fd50 	bl	8007448 <rcutils_log>
    if (ret == RCL_RET_BAD_ALLOC) {
 80059a8:	f1bb 0f0a 	cmp.w	fp, #10
 80059ac:	e7d5      	b.n	800595a <rcl_publisher_init+0xb6>
  char * expanded_topic_name = NULL;
 80059ae:	900a      	str	r0, [sp, #40]	; 0x28
  ret = rcl_expand_topic_name(
 80059b0:	4640      	mov	r0, r8
 80059b2:	f00f fc62 	bl	801527a <rcl_node_get_name>
 80059b6:	4683      	mov	fp, r0
 80059b8:	4640      	mov	r0, r8
 80059ba:	f00f fc67 	bl	801528c <rcl_node_get_namespace>
  char * expanded_topic_name = NULL;
 80059be:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  ret = rcl_expand_topic_name(
 80059c2:	f8cd 9014 	str.w	r9, [sp, #20]
 80059c6:	4686      	mov	lr, r0
 80059c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80059ca:	46ec      	mov	ip, sp
 80059cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	f8cc 3000 	str.w	r3, [ip]
 80059d6:	4672      	mov	r2, lr
 80059d8:	ab09      	add	r3, sp, #36	; 0x24
 80059da:	4659      	mov	r1, fp
 80059dc:	4650      	mov	r0, sl
 80059de:	f002 fdc1 	bl	8008564 <rcl_expand_topic_name>
 80059e2:	4606      	mov	r6, r0
  rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 80059e4:	a809      	add	r0, sp, #36	; 0x24
 80059e6:	f00d fb76 	bl	80130d6 <rcutils_string_map_fini>
  if (rcutils_ret != RCUTILS_RET_OK) {
 80059ea:	b928      	cbnz	r0, 80059f8 <rcl_publisher_init+0x154>
  if (ret != RCL_RET_OK) {
 80059ec:	b136      	cbz	r6, 80059fc <rcl_publisher_init+0x158>
    if (ret == RCL_RET_TOPIC_NAME_INVALID || ret == RCL_RET_UNKNOWN_SUBSTITUTION) {
 80059ee:	2e67      	cmp	r6, #103	; 0x67
 80059f0:	d07d      	beq.n	8005aee <rcl_publisher_init+0x24a>
 80059f2:	2e69      	cmp	r6, #105	; 0x69
 80059f4:	f000 809f 	beq.w	8005b36 <rcl_publisher_init+0x292>
  ret = fail_ret;
 80059f8:	2601      	movs	r6, #1
 80059fa:	e078      	b.n	8005aee <rcl_publisher_init+0x24a>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Expanded topic name '%s'", expanded_topic_name);
 80059fc:	4b52      	ldr	r3, [pc, #328]	; (8005b48 <rcl_publisher_init+0x2a4>)
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	469a      	mov	sl, r3
 8005a02:	b922      	cbnz	r2, 8005a0e <rcl_publisher_init+0x16a>
 8005a04:	f00d fa0a 	bl	8012e1c <rcutils_logging_initialize>
 8005a08:	b108      	cbz	r0, 8005a0e <rcl_publisher_init+0x16a>
 8005a0a:	f001 faad 	bl	8006f68 <rcutils_reset_error>
 8005a0e:	484f      	ldr	r0, [pc, #316]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005a10:	210a      	movs	r1, #10
 8005a12:	f001 fcef 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005a16:	b140      	cbz	r0, 8005a2a <rcl_publisher_init+0x186>
 8005a18:	f8d9 3000 	ldr.w	r3, [r9]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	4a4b      	ldr	r2, [pc, #300]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005a20:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <rcl_publisher_init+0x2bc>)
 8005a22:	4850      	ldr	r0, [pc, #320]	; (8005b64 <rcl_publisher_init+0x2c0>)
 8005a24:	210a      	movs	r1, #10
 8005a26:	f001 fd0f 	bl	8007448 <rcutils_log>
  const rcl_node_options_t * node_options = rcl_node_get_options(node);
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f00f fc37 	bl	801529e <rcl_node_get_options>
  if (NULL == node_options) {
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d0e1      	beq.n	80059f8 <rcl_publisher_init+0x154>
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 8005a34:	f8d9 0000 	ldr.w	r0, [r9]
 8005a38:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8005a3a:	f7fa fbc1 	bl	80001c0 <strlen>
 8005a3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005a40:	3001      	adds	r0, #1
 8005a42:	47b0      	blx	r6
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 8005a44:	f8d9 6000 	ldr.w	r6, [r9]
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 8005a48:	4607      	mov	r7, r0
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7fa fbb8 	bl	80001c0 <strlen>
 8005a50:	4631      	mov	r1, r6
 8005a52:	1c42      	adds	r2, r0, #1
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7fb fea3 	bl	80017a0 <memcpy>
  rmw_ret_t rmw_ret = rmw_validate_full_topic_name(remapped_topic_name, &validation_result, NULL);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	a910      	add	r1, sp, #64	; 0x40
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f00d fb76 	bl	8013150 <rmw_validate_full_topic_name>
  if (rmw_ret != RMW_RET_OK) {
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d1c7      	bne.n	80059f8 <rcl_publisher_init+0x154>
  if (validation_result != RMW_TOPIC_VALID) {
 8005a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d163      	bne.n	8005b36 <rcl_publisher_init+0x292>
  publisher->impl = (rcl_publisher_impl_t *)allocator->allocate(
 8005a6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a70:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005a72:	20c0      	movs	r0, #192	; 0xc0
 8005a74:	4798      	blx	r3
 8005a76:	6028      	str	r0, [r5, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d05e      	beq.n	8005b3a <rcl_publisher_init+0x296>
    rcl_node_get_rmw_handle(node),
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	f00f fc15 	bl	80152ac <rcl_node_get_rmw_handle>
  publisher->impl->rmw_handle = rmw_create_publisher(
 8005a82:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8005a86:	682e      	ldr	r6, [r5, #0]
 8005a88:	9907      	ldr	r1, [sp, #28]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	463a      	mov	r2, r7
 8005a8e:	4623      	mov	r3, r4
 8005a90:	f001 ff82 	bl	8007998 <rmw_create_publisher>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8005a94:	6829      	ldr	r1, [r5, #0]
  publisher->impl->rmw_handle = rmw_create_publisher(
 8005a96:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8005a9a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d033      	beq.n	8005b0a <rcl_publisher_init+0x266>
  rmw_ret = rmw_publisher_get_actual_qos(
 8005aa2:	3168      	adds	r1, #104	; 0x68
 8005aa4:	f00d fba6 	bl	80131f4 <rmw_publisher_get_actual_qos>
  if (RMW_RET_OK != rmw_ret) {
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	bb70      	cbnz	r0, 8005b0a <rcl_publisher_init+0x266>
  publisher->impl->actual_qos.avoid_ros_namespace_conventions =
 8005aac:	6828      	ldr	r0, [r5, #0]
 8005aae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8005ab2:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
  publisher->impl->options = *options;
 8005ab6:	2268      	movs	r2, #104	; 0x68
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f7fb fe71 	bl	80017a0 <memcpy>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Publisher initialized");
 8005abe:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac2:	b923      	cbnz	r3, 8005ace <rcl_publisher_init+0x22a>
 8005ac4:	f00d f9aa 	bl	8012e1c <rcutils_logging_initialize>
 8005ac8:	b108      	cbz	r0, 8005ace <rcl_publisher_init+0x22a>
 8005aca:	f001 fa4d 	bl	8006f68 <rcutils_reset_error>
 8005ace:	481f      	ldr	r0, [pc, #124]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005ad0:	210a      	movs	r1, #10
 8005ad2:	f001 fc8f 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005ad6:	b128      	cbz	r0, 8005ae4 <rcl_publisher_init+0x240>
 8005ad8:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <rcl_publisher_init+0x2c4>)
 8005ada:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <rcl_publisher_init+0x2a8>)
 8005adc:	4823      	ldr	r0, [pc, #140]	; (8005b6c <rcl_publisher_init+0x2c8>)
 8005ade:	210a      	movs	r1, #10
 8005ae0:	f001 fcb2 	bl	8007448 <rcutils_log>
  publisher->impl->context = node->context;
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	f8d8 2000 	ldr.w	r2, [r8]
 8005aea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  if (NULL != expanded_topic_name) {
 8005aee:	f8d9 0000 	ldr.w	r0, [r9]
 8005af2:	b110      	cbz	r0, 8005afa <rcl_publisher_init+0x256>
    allocator->deallocate(expanded_topic_name, allocator->state);
 8005af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005af6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005af8:	4798      	blx	r3
  if (NULL != remapped_topic_name) {
 8005afa:	2f00      	cmp	r7, #0
 8005afc:	f43f aede 	beq.w	80058bc <rcl_publisher_init+0x18>
    allocator->deallocate(remapped_topic_name, allocator->state);
 8005b00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b02:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005b04:	4638      	mov	r0, r7
 8005b06:	4798      	blx	r3
 8005b08:	e6d8      	b.n	80058bc <rcl_publisher_init+0x18>
  if (publisher->impl) {
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f af73 	beq.w	80059f8 <rcl_publisher_init+0x154>
    if (publisher->impl->rmw_handle) {
 8005b12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b16:	b13b      	cbz	r3, 8005b28 <rcl_publisher_init+0x284>
      rmw_ret_t rmw_fail_ret = rmw_destroy_publisher(
 8005b18:	4640      	mov	r0, r8
 8005b1a:	f00f fbc7 	bl	80152ac <rcl_node_get_rmw_handle>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8005b24:	f00d fb68 	bl	80131f8 <rmw_destroy_publisher>
    allocator->deallocate(publisher->impl, allocator->state);
 8005b28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005b2c:	6828      	ldr	r0, [r5, #0]
 8005b2e:	4798      	blx	r3
    publisher->impl = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	602b      	str	r3, [r5, #0]
 8005b34:	e760      	b.n	80059f8 <rcl_publisher_init+0x154>
    ret = RCL_RET_TOPIC_NAME_INVALID;
 8005b36:	2667      	movs	r6, #103	; 0x67
 8005b38:	e7d9      	b.n	8005aee <rcl_publisher_init+0x24a>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8005b3a:	260a      	movs	r6, #10
 8005b3c:	e7d7      	b.n	8005aee <rcl_publisher_init+0x24a>
    return RCL_RET_ALREADY_INIT;
 8005b3e:	2664      	movs	r6, #100	; 0x64
 8005b40:	e6bc      	b.n	80058bc <rcl_publisher_init+0x18>
    return RCL_RET_NODE_INVALID;  // error already set
 8005b42:	26c8      	movs	r6, #200	; 0xc8
 8005b44:	e6ba      	b.n	80058bc <rcl_publisher_init+0x18>
 8005b46:	bf00      	nop
 8005b48:	2000461a 	.word	0x2000461a
 8005b4c:	0801c072 	.word	0x0801c072
 8005b50:	0801c076 	.word	0x0801c076
 8005b54:	20000394 	.word	0x20000394
 8005b58:	0801c0a1 	.word	0x0801c0a1
 8005b5c:	200003a0 	.word	0x200003a0
 8005b60:	0801c0da 	.word	0x0801c0da
 8005b64:	200003ac 	.word	0x200003ac
 8005b68:	0801c0f3 	.word	0x0801c0f3
 8005b6c:	200003b8 	.word	0x200003b8

08005b70 <rcl_publisher_get_default_options>:
  return result;
}

rcl_publisher_options_t
rcl_publisher_get_default_options()
{
 8005b70:	b5f0      	push	{r4, r5, r6, r7, lr}
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_publisher_options_t default_options;
  // Must set the allocator and qos after because they are not a compile time constant.
  default_options.qos = rmw_qos_profile_default;
 8005b72:	4f0e      	ldr	r7, [pc, #56]	; (8005bac <rcl_publisher_get_default_options+0x3c>)
 8005b74:	490e      	ldr	r1, [pc, #56]	; (8005bb0 <rcl_publisher_get_default_options+0x40>)
{
 8005b76:	b087      	sub	sp, #28
 8005b78:	4606      	mov	r6, r0
  default_options.qos = rmw_qos_profile_default;
 8005b7a:	2250      	movs	r2, #80	; 0x50
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7fb fe0f 	bl	80017a0 <memcpy>
  default_options.allocator = rcl_get_default_allocator();
 8005b82:	466c      	mov	r4, sp
 8005b84:	4668      	mov	r0, sp
 8005b86:	f001 f917 	bl	8006db8 <rcutils_get_default_allocator>
 8005b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b8c:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8005b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	602b      	str	r3, [r5, #0]
  default_options.rmw_publisher_options = rmw_get_default_publisher_options();
 8005b96:	f00d fad9 	bl	801314c <rmw_get_default_publisher_options>
  return default_options;
 8005b9a:	2268      	movs	r2, #104	; 0x68
  default_options.rmw_publisher_options = rmw_get_default_publisher_options();
 8005b9c:	6678      	str	r0, [r7, #100]	; 0x64
  return default_options;
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fb fdfd 	bl	80017a0 <memcpy>
}
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	b007      	add	sp, #28
 8005baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bac:	20000fd8 	.word	0x20000fd8
 8005bb0:	0801b5a8 	.word	0x0801b5a8

08005bb4 <_rclc_check_for_new_data>:
{
 8005bb4:	b530      	push	{r4, r5, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005bb6:	4605      	mov	r5, r0
{
 8005bb8:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f000 8087 	beq.w	8005cd0 <_rclc_check_for_new_data+0x11c>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	f000 8084 	beq.w	8005cd0 <_rclc_check_for_new_data+0x11c>
  switch (handle->type) {
 8005bc8:	7803      	ldrb	r3, [r0, #0]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d869      	bhi.n	8005ca2 <_rclc_check_for_new_data+0xee>
 8005bce:	e8df f003 	tbb	[pc, r3]
 8005bd2:	1003      	.short	0x1003
 8005bd4:	5f62      	.short	0x5f62
 8005bd6:	65          	.byte	0x65
 8005bd7:	00          	.byte	0x00
      if (wait_set->subscriptions[handle->index]) {
 8005bd8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005bda:	680b      	ldr	r3, [r1, #0]
 8005bdc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005be0:	b11c      	cbz	r4, 8005bea <_rclc_check_for_new_data+0x36>
        handle->data_available = true;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  return rc;
 8005be8:	2400      	movs	r4, #0
}
 8005bea:	4620      	mov	r0, r4
 8005bec:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 8005bf0:	bd30      	pop	{r4, r5, pc}
      if (wait_set->timers[handle->index]) {
 8005bf2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005bf4:	690b      	ldr	r3, [r1, #16]
 8005bf6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d0f5      	beq.n	8005bea <_rclc_check_for_new_data+0x36>
        bool timer_is_ready = false;
 8005bfe:	2300      	movs	r3, #0
        rc = rcl_timer_is_ready(handle->timer, &timer_is_ready);
 8005c00:	6840      	ldr	r0, [r0, #4]
        bool timer_is_ready = false;
 8005c02:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = rcl_timer_is_ready(handle->timer, &timer_is_ready);
 8005c06:	f10d 010f 	add.w	r1, sp, #15
 8005c0a:	f00f fcc6 	bl	801559a <rcl_timer_is_ready>
        if (rc != RCL_RET_OK) {
 8005c0e:	4604      	mov	r4, r0
 8005c10:	b1d0      	cbz	r0, 8005c48 <_rclc_check_for_new_data+0x94>
          PRINT_RCLC_ERROR(rclc_read_input_data, rcl_timer_is_ready);
 8005c12:	4b30      	ldr	r3, [pc, #192]	; (8005cd4 <_rclc_check_for_new_data+0x120>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	b923      	cbnz	r3, 8005c22 <_rclc_check_for_new_data+0x6e>
 8005c18:	f00d f900 	bl	8012e1c <rcutils_logging_initialize>
 8005c1c:	b108      	cbz	r0, 8005c22 <_rclc_check_for_new_data+0x6e>
 8005c1e:	f001 f9a3 	bl	8006f68 <rcutils_reset_error>
 8005c22:	482d      	ldr	r0, [pc, #180]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005c24:	2128      	movs	r1, #40	; 0x28
 8005c26:	f001 fbe5 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005c2a:	b150      	cbz	r0, 8005c42 <_rclc_check_for_new_data+0x8e>
 8005c2c:	ad04      	add	r5, sp, #16
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f001 f976 	bl	8006f20 <rcutils_get_error_string>
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <_rclc_check_for_new_data+0x128>)
 8005c36:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005c38:	4829      	ldr	r0, [pc, #164]	; (8005ce0 <_rclc_check_for_new_data+0x12c>)
 8005c3a:	9500      	str	r5, [sp, #0]
 8005c3c:	2128      	movs	r1, #40	; 0x28
 8005c3e:	f001 fc03 	bl	8007448 <rcutils_log>
 8005c42:	f001 f991 	bl	8006f68 <rcutils_reset_error>
          return rc;
 8005c46:	e7d0      	b.n	8005bea <_rclc_check_for_new_data+0x36>
        if (timer_is_ready) {
 8005c48:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005c4c:	b11b      	cbz	r3, 8005c56 <_rclc_check_for_new_data+0xa2>
          handle->data_available = true;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8005c54:	e7c9      	b.n	8005bea <_rclc_check_for_new_data+0x36>
          PRINT_RCLC_ERROR(rclc_read_input_data, rcl_timer_should_be_ready);
 8005c56:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <_rclc_check_for_new_data+0x120>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b923      	cbnz	r3, 8005c66 <_rclc_check_for_new_data+0xb2>
 8005c5c:	f00d f8de 	bl	8012e1c <rcutils_logging_initialize>
 8005c60:	b108      	cbz	r0, 8005c66 <_rclc_check_for_new_data+0xb2>
 8005c62:	f001 f981 	bl	8006f68 <rcutils_reset_error>
 8005c66:	481c      	ldr	r0, [pc, #112]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005c68:	2128      	movs	r1, #40	; 0x28
 8005c6a:	f001 fbc3 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005c6e:	b158      	cbz	r0, 8005c88 <_rclc_check_for_new_data+0xd4>
 8005c70:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
 8005c74:	4620      	mov	r0, r4
 8005c76:	f001 f953 	bl	8006f20 <rcutils_get_error_string>
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <_rclc_check_for_new_data+0x130>)
 8005c7c:	4a16      	ldr	r2, [pc, #88]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005c7e:	481a      	ldr	r0, [pc, #104]	; (8005ce8 <_rclc_check_for_new_data+0x134>)
 8005c80:	9400      	str	r4, [sp, #0]
 8005c82:	2128      	movs	r1, #40	; 0x28
 8005c84:	f001 fbe0 	bl	8007448 <rcutils_log>
 8005c88:	f001 f96e 	bl	8006f68 <rcutils_reset_error>
      return RCL_RET_ERROR;
 8005c8c:	2401      	movs	r4, #1
 8005c8e:	e7ac      	b.n	8005bea <_rclc_check_for_new_data+0x36>
      if (wait_set->services[handle->index]) {
 8005c90:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c92:	6a0b      	ldr	r3, [r1, #32]
 8005c94:	e7a2      	b.n	8005bdc <_rclc_check_for_new_data+0x28>
      if (wait_set->clients[handle->index]) {
 8005c96:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c98:	698b      	ldr	r3, [r1, #24]
 8005c9a:	e79f      	b.n	8005bdc <_rclc_check_for_new_data+0x28>
      if (wait_set->guard_conditions[handle->index]) {
 8005c9c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005c9e:	688b      	ldr	r3, [r1, #8]
 8005ca0:	e79c      	b.n	8005bdc <_rclc_check_for_new_data+0x28>
      RCUTILS_LOG_DEBUG_NAMED(
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <_rclc_check_for_new_data+0x120>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	b923      	cbnz	r3, 8005cb2 <_rclc_check_for_new_data+0xfe>
 8005ca8:	f00d f8b8 	bl	8012e1c <rcutils_logging_initialize>
 8005cac:	b108      	cbz	r0, 8005cb2 <_rclc_check_for_new_data+0xfe>
 8005cae:	f001 f95b 	bl	8006f68 <rcutils_reset_error>
 8005cb2:	4809      	ldr	r0, [pc, #36]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005cb4:	210a      	movs	r1, #10
 8005cb6:	f001 fb9d 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d0e6      	beq.n	8005c8c <_rclc_check_for_new_data+0xd8>
 8005cbe:	782b      	ldrb	r3, [r5, #0]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <_rclc_check_for_new_data+0x124>)
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <_rclc_check_for_new_data+0x138>)
 8005cc6:	480a      	ldr	r0, [pc, #40]	; (8005cf0 <_rclc_check_for_new_data+0x13c>)
 8005cc8:	210a      	movs	r1, #10
 8005cca:	f001 fbbd 	bl	8007448 <rcutils_log>
 8005cce:	e7dd      	b.n	8005c8c <_rclc_check_for_new_data+0xd8>
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005cd0:	240b      	movs	r4, #11
 8005cd2:	e78a      	b.n	8005bea <_rclc_check_for_new_data+0x36>
 8005cd4:	2000461a 	.word	0x2000461a
 8005cd8:	0801c172 	.word	0x0801c172
 8005cdc:	0801c177 	.word	0x0801c177
 8005ce0:	200003dc 	.word	0x200003dc
 8005ce4:	0801c1af 	.word	0x0801c1af
 8005ce8:	200003e8 	.word	0x200003e8
 8005cec:	0801c1ee 	.word	0x0801c1ee
 8005cf0:	200003f4 	.word	0x200003f4

08005cf4 <_rclc_take_new_data>:
{
 8005cf4:	b570      	push	{r4, r5, r6, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005cf6:	4604      	mov	r4, r0
{
 8005cf8:	f6ad 4d08 	subw	sp, sp, #3080	; 0xc08
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	f000 80ed 	beq.w	8005edc <_rclc_take_new_data+0x1e8>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8005d02:	2900      	cmp	r1, #0
 8005d04:	f000 80ea 	beq.w	8005edc <_rclc_take_new_data+0x1e8>
  switch (handle->type) {
 8005d08:	7803      	ldrb	r3, [r0, #0]
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	f200 80cf 	bhi.w	8005eae <_rclc_take_new_data+0x1ba>
 8005d10:	e8df f003 	tbb	[pc, r3]
 8005d14:	48890803 	.word	0x48890803
 8005d18:	08          	.byte	0x08
 8005d19:	00          	.byte	0x00
      if (wait_set->subscriptions[handle->index]) {
 8005d1a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005d1c:	680b      	ldr	r3, [r1, #0]
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	b90b      	cbnz	r3, 8005d28 <_rclc_take_new_data+0x34>
  switch (handle->type) {
 8005d24:	2400      	movs	r4, #0
 8005d26:	e039      	b.n	8005d9c <_rclc_take_new_data+0xa8>
        rc = rcl_take(
 8005d28:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f60d 0208 	addw	r2, sp, #2056	; 0x808
 8005d32:	f003 fceb 	bl	800970c <rcl_take>
        if (rc != RCL_RET_OK) {
 8005d36:	4604      	mov	r4, r0
 8005d38:	b380      	cbz	r0, 8005d9c <_rclc_take_new_data+0xa8>
          if (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED) {
 8005d3a:	f240 1391 	movw	r3, #401	; 0x191
 8005d3e:	4298      	cmp	r0, r3
 8005d40:	d02c      	beq.n	8005d9c <_rclc_take_new_data+0xa8>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take);
 8005d42:	4d67      	ldr	r5, [pc, #412]	; (8005ee0 <_rclc_take_new_data+0x1ec>)
 8005d44:	782a      	ldrb	r2, [r5, #0]
 8005d46:	b922      	cbnz	r2, 8005d52 <_rclc_take_new_data+0x5e>
 8005d48:	f00d f868 	bl	8012e1c <rcutils_logging_initialize>
 8005d4c:	b108      	cbz	r0, 8005d52 <_rclc_take_new_data+0x5e>
 8005d4e:	f001 f90b 	bl	8006f68 <rcutils_reset_error>
 8005d52:	4864      	ldr	r0, [pc, #400]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005d54:	2128      	movs	r1, #40	; 0x28
 8005d56:	f001 fb4d 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005d5a:	b150      	cbz	r0, 8005d72 <_rclc_take_new_data+0x7e>
 8005d5c:	ae02      	add	r6, sp, #8
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f001 f8de 	bl	8006f20 <rcutils_get_error_string>
 8005d64:	4b60      	ldr	r3, [pc, #384]	; (8005ee8 <_rclc_take_new_data+0x1f4>)
 8005d66:	4a5f      	ldr	r2, [pc, #380]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005d68:	4860      	ldr	r0, [pc, #384]	; (8005eec <_rclc_take_new_data+0x1f8>)
 8005d6a:	9600      	str	r6, [sp, #0]
 8005d6c:	2128      	movs	r1, #40	; 0x28
 8005d6e:	f001 fb6b 	bl	8007448 <rcutils_log>
 8005d72:	f001 f8f9 	bl	8006f68 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
 8005d76:	782b      	ldrb	r3, [r5, #0]
 8005d78:	b923      	cbnz	r3, 8005d84 <_rclc_take_new_data+0x90>
 8005d7a:	f00d f84f 	bl	8012e1c <rcutils_logging_initialize>
 8005d7e:	b108      	cbz	r0, 8005d84 <_rclc_take_new_data+0x90>
 8005d80:	f001 f8f2 	bl	8006f68 <rcutils_reset_error>
 8005d84:	4857      	ldr	r0, [pc, #348]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005d86:	2128      	movs	r1, #40	; 0x28
 8005d88:	f001 fb34 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005d8c:	b130      	cbz	r0, 8005d9c <_rclc_take_new_data+0xa8>
 8005d8e:	4b58      	ldr	r3, [pc, #352]	; (8005ef0 <_rclc_take_new_data+0x1fc>)
 8005d90:	4a54      	ldr	r2, [pc, #336]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005d92:	4858      	ldr	r0, [pc, #352]	; (8005ef4 <_rclc_take_new_data+0x200>)
 8005d94:	9400      	str	r4, [sp, #0]
 8005d96:	2128      	movs	r1, #40	; 0x28
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
 8005d98:	f001 fb56 	bl	8007448 <rcutils_log>
}
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f60d 4d08 	addw	sp, sp, #3080	; 0xc08
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
      if (wait_set->services[handle->index]) {
 8005da4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005da6:	6a0b      	ldr	r3, [r1, #32]
 8005da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0b9      	beq.n	8005d24 <_rclc_take_new_data+0x30>
        rc = rcl_take_request(
 8005db0:	6882      	ldr	r2, [r0, #8]
 8005db2:	f100 0110 	add.w	r1, r0, #16
 8005db6:	6840      	ldr	r0, [r0, #4]
 8005db8:	f00f fab0 	bl	801531c <rcl_take_request>
        if (rc != RCL_RET_OK) {
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0b0      	beq.n	8005d24 <_rclc_take_new_data+0x30>
          if (rc != RCL_RET_SERVICE_TAKE_FAILED) {
 8005dc2:	f240 2359 	movw	r3, #601	; 0x259
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	d0e8      	beq.n	8005d9c <_rclc_take_new_data+0xa8>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take_request);
 8005dca:	4d45      	ldr	r5, [pc, #276]	; (8005ee0 <_rclc_take_new_data+0x1ec>)
 8005dcc:	782a      	ldrb	r2, [r5, #0]
 8005dce:	b922      	cbnz	r2, 8005dda <_rclc_take_new_data+0xe6>
 8005dd0:	f00d f824 	bl	8012e1c <rcutils_logging_initialize>
 8005dd4:	b108      	cbz	r0, 8005dda <_rclc_take_new_data+0xe6>
 8005dd6:	f001 f8c7 	bl	8006f68 <rcutils_reset_error>
 8005dda:	4842      	ldr	r0, [pc, #264]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005ddc:	2128      	movs	r1, #40	; 0x28
 8005dde:	f001 fb09 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005de2:	b158      	cbz	r0, 8005dfc <_rclc_take_new_data+0x108>
 8005de4:	f50d 6681 	add.w	r6, sp, #1032	; 0x408
 8005de8:	4630      	mov	r0, r6
 8005dea:	f001 f899 	bl	8006f20 <rcutils_get_error_string>
 8005dee:	4b42      	ldr	r3, [pc, #264]	; (8005ef8 <_rclc_take_new_data+0x204>)
 8005df0:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005df2:	4842      	ldr	r0, [pc, #264]	; (8005efc <_rclc_take_new_data+0x208>)
 8005df4:	9600      	str	r6, [sp, #0]
 8005df6:	2128      	movs	r1, #40	; 0x28
 8005df8:	f001 fb26 	bl	8007448 <rcutils_log>
 8005dfc:	f001 f8b4 	bl	8006f68 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
 8005e00:	782b      	ldrb	r3, [r5, #0]
 8005e02:	b923      	cbnz	r3, 8005e0e <_rclc_take_new_data+0x11a>
 8005e04:	f00d f80a 	bl	8012e1c <rcutils_logging_initialize>
 8005e08:	b108      	cbz	r0, 8005e0e <_rclc_take_new_data+0x11a>
 8005e0a:	f001 f8ad 	bl	8006f68 <rcutils_reset_error>
 8005e0e:	4835      	ldr	r0, [pc, #212]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005e10:	2128      	movs	r1, #40	; 0x28
 8005e12:	f001 faef 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0c0      	beq.n	8005d9c <_rclc_take_new_data+0xa8>
 8005e1a:	4b35      	ldr	r3, [pc, #212]	; (8005ef0 <_rclc_take_new_data+0x1fc>)
 8005e1c:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005e1e:	4838      	ldr	r0, [pc, #224]	; (8005f00 <_rclc_take_new_data+0x20c>)
 8005e20:	9400      	str	r4, [sp, #0]
 8005e22:	2128      	movs	r1, #40	; 0x28
 8005e24:	e7b8      	b.n	8005d98 <_rclc_take_new_data+0xa4>
      if (wait_set->clients[handle->index]) {
 8005e26:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005e28:	698b      	ldr	r3, [r1, #24]
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f43f af78 	beq.w	8005d24 <_rclc_take_new_data+0x30>
        rc = rcl_take_response(
 8005e34:	6882      	ldr	r2, [r0, #8]
 8005e36:	f100 0110 	add.w	r1, r0, #16
 8005e3a:	6840      	ldr	r0, [r0, #4]
 8005e3c:	f00f f8fa 	bl	8015034 <rcl_take_response>
        if (rc != RCL_RET_OK) {
 8005e40:	4604      	mov	r4, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f43f af6e 	beq.w	8005d24 <_rclc_take_new_data+0x30>
          if (rc != RCL_RET_CLIENT_TAKE_FAILED) {
 8005e48:	f240 13f5 	movw	r3, #501	; 0x1f5
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	d0a5      	beq.n	8005d9c <_rclc_take_new_data+0xa8>
            PRINT_RCLC_ERROR(rclc_take_new_data, rcl_take_response);
 8005e50:	4d23      	ldr	r5, [pc, #140]	; (8005ee0 <_rclc_take_new_data+0x1ec>)
 8005e52:	782a      	ldrb	r2, [r5, #0]
 8005e54:	b922      	cbnz	r2, 8005e60 <_rclc_take_new_data+0x16c>
 8005e56:	f00c ffe1 	bl	8012e1c <rcutils_logging_initialize>
 8005e5a:	b108      	cbz	r0, 8005e60 <_rclc_take_new_data+0x16c>
 8005e5c:	f001 f884 	bl	8006f68 <rcutils_reset_error>
 8005e60:	4820      	ldr	r0, [pc, #128]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005e62:	2128      	movs	r1, #40	; 0x28
 8005e64:	f001 fac6 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005e68:	b158      	cbz	r0, 8005e82 <_rclc_take_new_data+0x18e>
 8005e6a:	f60d 0608 	addw	r6, sp, #2056	; 0x808
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f001 f856 	bl	8006f20 <rcutils_get_error_string>
 8005e74:	4b23      	ldr	r3, [pc, #140]	; (8005f04 <_rclc_take_new_data+0x210>)
 8005e76:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005e78:	4823      	ldr	r0, [pc, #140]	; (8005f08 <_rclc_take_new_data+0x214>)
 8005e7a:	9600      	str	r6, [sp, #0]
 8005e7c:	2128      	movs	r1, #40	; 0x28
 8005e7e:	f001 fae3 	bl	8007448 <rcutils_log>
 8005e82:	f001 f871 	bl	8006f68 <rcutils_reset_error>
            RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Error number: %d", rc);
 8005e86:	782b      	ldrb	r3, [r5, #0]
 8005e88:	b923      	cbnz	r3, 8005e94 <_rclc_take_new_data+0x1a0>
 8005e8a:	f00c ffc7 	bl	8012e1c <rcutils_logging_initialize>
 8005e8e:	b108      	cbz	r0, 8005e94 <_rclc_take_new_data+0x1a0>
 8005e90:	f001 f86a 	bl	8006f68 <rcutils_reset_error>
 8005e94:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005e96:	2128      	movs	r1, #40	; 0x28
 8005e98:	f001 faac 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f43f af7d 	beq.w	8005d9c <_rclc_take_new_data+0xa8>
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <_rclc_take_new_data+0x1fc>)
 8005ea4:	4a0f      	ldr	r2, [pc, #60]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005ea6:	4819      	ldr	r0, [pc, #100]	; (8005f0c <_rclc_take_new_data+0x218>)
 8005ea8:	9400      	str	r4, [sp, #0]
 8005eaa:	2128      	movs	r1, #40	; 0x28
 8005eac:	e774      	b.n	8005d98 <_rclc_take_new_data+0xa4>
      RCUTILS_LOG_DEBUG_NAMED(
 8005eae:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <_rclc_take_new_data+0x1ec>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b923      	cbnz	r3, 8005ebe <_rclc_take_new_data+0x1ca>
 8005eb4:	f00c ffb2 	bl	8012e1c <rcutils_logging_initialize>
 8005eb8:	b108      	cbz	r0, 8005ebe <_rclc_take_new_data+0x1ca>
 8005eba:	f001 f855 	bl	8006f68 <rcutils_reset_error>
 8005ebe:	4809      	ldr	r0, [pc, #36]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	f001 fa97 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005ec6:	b138      	cbz	r0, 8005ed8 <_rclc_take_new_data+0x1e4>
 8005ec8:	7823      	ldrb	r3, [r4, #0]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4a05      	ldr	r2, [pc, #20]	; (8005ee4 <_rclc_take_new_data+0x1f0>)
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <_rclc_take_new_data+0x21c>)
 8005ed0:	4810      	ldr	r0, [pc, #64]	; (8005f14 <_rclc_take_new_data+0x220>)
 8005ed2:	210a      	movs	r1, #10
 8005ed4:	f001 fab8 	bl	8007448 <rcutils_log>
      return RCL_RET_ERROR;
 8005ed8:	2401      	movs	r4, #1
 8005eda:	e75f      	b.n	8005d9c <_rclc_take_new_data+0xa8>
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005edc:	240b      	movs	r4, #11
 8005ede:	e75d      	b.n	8005d9c <_rclc_take_new_data+0xa8>
 8005ee0:	2000461a 	.word	0x2000461a
 8005ee4:	0801c172 	.word	0x0801c172
 8005ee8:	0801c231 	.word	0x0801c231
 8005eec:	20000400 	.word	0x20000400
 8005ef0:	0801c25d 	.word	0x0801c25d
 8005ef4:	2000040c 	.word	0x2000040c
 8005ef8:	0801c26e 	.word	0x0801c26e
 8005efc:	20000418 	.word	0x20000418
 8005f00:	20000424 	.word	0x20000424
 8005f04:	0801c2a2 	.word	0x0801c2a2
 8005f08:	20000430 	.word	0x20000430
 8005f0c:	2000043c 	.word	0x2000043c
 8005f10:	0801c2d7 	.word	0x0801c2d7
 8005f14:	20000448 	.word	0x20000448

08005f18 <_rclc_execute>:
{
 8005f18:	b530      	push	{r4, r5, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005f1a:	4604      	mov	r4, r0
{
 8005f1c:	f6ad 0d0c 	subw	sp, sp, #2060	; 0x80c
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f000 8098 	beq.w	8006056 <_rclc_execute+0x13e>
  if (handle->invocation == ON_NEW_DATA &&
 8005f26:	7843      	ldrb	r3, [r0, #1]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 8096 	bne.w	800605a <_rclc_execute+0x142>
 8005f2e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 8094 	bne.w	8006060 <_rclc_execute+0x148>
  return rc;
 8005f38:	2500      	movs	r5, #0
}
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f60d 0d0c 	addw	sp, sp, #2060	; 0x80c
 8005f40:	bd30      	pop	{r4, r5, pc}
        if (handle->data_available) {
 8005f42:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8005f46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f48:	b100      	cbz	r0, 8005f4c <_rclc_execute+0x34>
          handle->client_callback(handle->data);
 8005f4a:	68a0      	ldr	r0, [r4, #8]
 8005f4c:	4798      	blx	r3
  if (handle->data_available == true) {
 8005f4e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <_rclc_execute+0x20>
    handle->data_available = false;
 8005f56:	2500      	movs	r5, #0
 8005f58:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
 8005f5c:	e7ed      	b.n	8005f3a <_rclc_execute+0x22>
        rc = rcl_timer_call(handle->timer);
 8005f5e:	6860      	ldr	r0, [r4, #4]
 8005f60:	f003 feac 	bl	8009cbc <rcl_timer_call>
        if (rc != RCL_RET_OK) {
 8005f64:	4605      	mov	r5, r0
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d0f1      	beq.n	8005f4e <_rclc_execute+0x36>
          PRINT_RCLC_ERROR(rclc_execute, rcl_timer_call);
 8005f6a:	4b45      	ldr	r3, [pc, #276]	; (8006080 <_rclc_execute+0x168>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b923      	cbnz	r3, 8005f7a <_rclc_execute+0x62>
 8005f70:	f00c ff54 	bl	8012e1c <rcutils_logging_initialize>
 8005f74:	b108      	cbz	r0, 8005f7a <_rclc_execute+0x62>
 8005f76:	f000 fff7 	bl	8006f68 <rcutils_reset_error>
 8005f7a:	4842      	ldr	r0, [pc, #264]	; (8006084 <_rclc_execute+0x16c>)
 8005f7c:	2128      	movs	r1, #40	; 0x28
 8005f7e:	f001 fa39 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005f82:	b150      	cbz	r0, 8005f9a <_rclc_execute+0x82>
 8005f84:	ac02      	add	r4, sp, #8
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 ffca 	bl	8006f20 <rcutils_get_error_string>
 8005f8c:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <_rclc_execute+0x170>)
 8005f8e:	4a3d      	ldr	r2, [pc, #244]	; (8006084 <_rclc_execute+0x16c>)
 8005f90:	483e      	ldr	r0, [pc, #248]	; (800608c <_rclc_execute+0x174>)
 8005f92:	9400      	str	r4, [sp, #0]
 8005f94:	2128      	movs	r1, #40	; 0x28
          PRINT_RCLC_ERROR(rclc_execute, rcl_send_response);
 8005f96:	f001 fa57 	bl	8007448 <rcutils_log>
 8005f9a:	f000 ffe5 	bl	8006f68 <rcutils_reset_error>
          return rc;
 8005f9e:	e7cc      	b.n	8005f3a <_rclc_execute+0x22>
        if (handle->callback_type == CB_WITHOUT_REQUEST_ID) {
 8005fa0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	f104 0510 	add.w	r5, r4, #16
 8005fac:	d124      	bne.n	8005ff8 <_rclc_execute+0xe0>
          handle->service_callback(handle->data, handle->data_response_msg);
 8005fae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fb0:	68a0      	ldr	r0, [r4, #8]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4798      	blx	r3
        rc = rcl_send_response(handle->service, &handle->req_id, handle->data_response_msg);
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005fba:	6860      	ldr	r0, [r4, #4]
 8005fbc:	f003 f9dc 	bl	8009378 <rcl_send_response>
        if (rc != RCL_RET_OK) {
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d0c3      	beq.n	8005f4e <_rclc_execute+0x36>
          PRINT_RCLC_ERROR(rclc_execute, rcl_send_response);
 8005fc6:	4b2e      	ldr	r3, [pc, #184]	; (8006080 <_rclc_execute+0x168>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b923      	cbnz	r3, 8005fd6 <_rclc_execute+0xbe>
 8005fcc:	f00c ff26 	bl	8012e1c <rcutils_logging_initialize>
 8005fd0:	b108      	cbz	r0, 8005fd6 <_rclc_execute+0xbe>
 8005fd2:	f000 ffc9 	bl	8006f68 <rcutils_reset_error>
 8005fd6:	482b      	ldr	r0, [pc, #172]	; (8006084 <_rclc_execute+0x16c>)
 8005fd8:	2128      	movs	r1, #40	; 0x28
 8005fda:	f001 fa0b 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0db      	beq.n	8005f9a <_rclc_execute+0x82>
 8005fe2:	f50d 6481 	add.w	r4, sp, #1032	; 0x408
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 ff9a 	bl	8006f20 <rcutils_get_error_string>
 8005fec:	4b28      	ldr	r3, [pc, #160]	; (8006090 <_rclc_execute+0x178>)
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <_rclc_execute+0x16c>)
 8005ff0:	4828      	ldr	r0, [pc, #160]	; (8006094 <_rclc_execute+0x17c>)
 8005ff2:	9400      	str	r4, [sp, #0]
 8005ff4:	2128      	movs	r1, #40	; 0x28
 8005ff6:	e7ce      	b.n	8005f96 <_rclc_execute+0x7e>
        } else if (handle->callback_type == CB_WITH_REQUEST_ID) {
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d1dc      	bne.n	8005fb6 <_rclc_execute+0x9e>
          handle->service_callback_with_reqid(
 8005ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ffe:	68a0      	ldr	r0, [r4, #8]
 8006000:	4629      	mov	r1, r5
 8006002:	4798      	blx	r3
 8006004:	e7d7      	b.n	8005fb6 <_rclc_execute+0x9e>
        if (handle->callback_type == CB_WITHOUT_REQUEST_ID) {
 8006006:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <_rclc_execute+0xfa>
          handle->client_callback(handle->data);
 800600e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006010:	e79b      	b.n	8005f4a <_rclc_execute+0x32>
        } else if (handle->callback_type == CB_WITH_REQUEST_ID) {
 8006012:	2b02      	cmp	r3, #2
 8006014:	d19b      	bne.n	8005f4e <_rclc_execute+0x36>
          handle->client_callback_with_reqid(handle->data, &handle->req_id);
 8006016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006018:	68a0      	ldr	r0, [r4, #8]
 800601a:	f104 0110 	add.w	r1, r4, #16
 800601e:	4798      	blx	r3
 8006020:	e795      	b.n	8005f4e <_rclc_execute+0x36>
        handle->gc_callback();
 8006022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006024:	4798      	blx	r3
        break;
 8006026:	e792      	b.n	8005f4e <_rclc_execute+0x36>
        RCUTILS_LOG_DEBUG_NAMED(
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <_rclc_execute+0x168>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b923      	cbnz	r3, 8006038 <_rclc_execute+0x120>
 800602e:	f00c fef5 	bl	8012e1c <rcutils_logging_initialize>
 8006032:	b108      	cbz	r0, 8006038 <_rclc_execute+0x120>
 8006034:	f000 ff98 	bl	8006f68 <rcutils_reset_error>
 8006038:	4812      	ldr	r0, [pc, #72]	; (8006084 <_rclc_execute+0x16c>)
 800603a:	210a      	movs	r1, #10
 800603c:	f001 f9da 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006040:	b138      	cbz	r0, 8006052 <_rclc_execute+0x13a>
 8006042:	7823      	ldrb	r3, [r4, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <_rclc_execute+0x16c>)
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <_rclc_execute+0x180>)
 800604a:	4814      	ldr	r0, [pc, #80]	; (800609c <_rclc_execute+0x184>)
 800604c:	210a      	movs	r1, #10
 800604e:	f001 f9fb 	bl	8007448 <rcutils_log>
        return RCL_RET_ERROR;
 8006052:	2501      	movs	r5, #1
 8006054:	e771      	b.n	8005f3a <_rclc_execute+0x22>
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8006056:	250b      	movs	r5, #11
 8006058:	e76f      	b.n	8005f3a <_rclc_execute+0x22>
  if (handle->invocation == ALWAYS) {
 800605a:	2b01      	cmp	r3, #1
 800605c:	f47f af77 	bne.w	8005f4e <_rclc_execute+0x36>
    switch (handle->type) {
 8006060:	7823      	ldrb	r3, [r4, #0]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d8e0      	bhi.n	8006028 <_rclc_execute+0x110>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <_rclc_execute+0x154>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08005f43 	.word	0x08005f43
 8006070:	08005f5f 	.word	0x08005f5f
 8006074:	08006007 	.word	0x08006007
 8006078:	08005fa1 	.word	0x08005fa1
 800607c:	08006023 	.word	0x08006023
 8006080:	2000461a 	.word	0x2000461a
 8006084:	0801c172 	.word	0x0801c172
 8006088:	0801c315 	.word	0x0801c315
 800608c:	20000454 	.word	0x20000454
 8006090:	0801c341 	.word	0x0801c341
 8006094:	20000460 	.word	0x20000460
 8006098:	0801c370 	.word	0x0801c370
 800609c:	2000046c 	.word	0x2000046c

080060a0 <rclc_executor_get_zero_initialized_executor>:
{
 80060a0:	b510      	push	{r4, lr}
  return null_executor;
 80060a2:	4903      	ldr	r1, [pc, #12]	; (80060b0 <rclc_executor_get_zero_initialized_executor+0x10>)
{
 80060a4:	4604      	mov	r4, r0
  return null_executor;
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	f7fb fb7a 	bl	80017a0 <memcpy>
}
 80060ac:	4620      	mov	r0, r4
 80060ae:	bd10      	pop	{r4, pc}
 80060b0:	0801b5f8 	.word	0x0801b5f8

080060b4 <rclc_executor_add_subscription>:
{
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 80060b6:	4604      	mov	r4, r0
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d040      	beq.n	800613e <rclc_executor_add_subscription+0x8a>
  RCL_CHECK_ARGUMENT_FOR_NULL(subscription, RCL_RET_INVALID_ARGUMENT);
 80060bc:	2900      	cmp	r1, #0
 80060be:	d03e      	beq.n	800613e <rclc_executor_add_subscription+0x8a>
  RCL_CHECK_ARGUMENT_FOR_NULL(msg, RCL_RET_INVALID_ARGUMENT);
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d03c      	beq.n	800613e <rclc_executor_add_subscription+0x8a>
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03a      	beq.n	800613e <rclc_executor_add_subscription+0x8a>
  if (executor->index >= executor->max_handles) {
 80060c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 80060cc:	42a8      	cmp	r0, r5
 80060ce:	d238      	bcs.n	8006142 <rclc_executor_add_subscription+0x8e>
  executor->handles[executor->index].type = SUBSCRIPTION;
 80060d0:	6867      	ldr	r7, [r4, #4]
 80060d2:	2638      	movs	r6, #56	; 0x38
 80060d4:	4346      	muls	r6, r0
 80060d6:	19bd      	adds	r5, r7, r6
 80060d8:	f04f 0c00 	mov.w	ip, #0
 80060dc:	f807 c006 	strb.w	ip, [r7, r6]
  executor->handles[executor->index].callback = callback;
 80060e0:	62eb      	str	r3, [r5, #44]	; 0x2c
  executor->handles[executor->index].invocation = invocation;
 80060e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80060e6:	706b      	strb	r3, [r5, #1]
  executor->handles[executor->index].initialized = true;
 80060e8:	2301      	movs	r3, #1
  executor->handles[executor->index].data = msg;
 80060ea:	e9c5 1201 	strd	r1, r2, [r5, #4]
  executor->handles[executor->index].initialized = true;
 80060ee:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  executor->index++;
 80060f2:	4418      	add	r0, r3
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 80060f4:	f104 0514 	add.w	r5, r4, #20
  executor->index++;
 80060f8:	60e0      	str	r0, [r4, #12]
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 80060fa:	4628      	mov	r0, r5
 80060fc:	f00f faa9 	bl	8015652 <rcl_wait_set_is_valid>
 8006100:	b9b8      	cbnz	r0, 8006132 <rclc_executor_add_subscription+0x7e>
  executor->info.number_of_subscriptions++;
 8006102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006104:	3301      	adds	r3, #1
 8006106:	64a3      	str	r3, [r4, #72]	; 0x48
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Added a subscription.");
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <rclc_executor_add_subscription+0x94>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b923      	cbnz	r3, 8006118 <rclc_executor_add_subscription+0x64>
 800610e:	f00c fe85 	bl	8012e1c <rcutils_logging_initialize>
 8006112:	b108      	cbz	r0, 8006118 <rclc_executor_add_subscription+0x64>
 8006114:	f000 ff28 	bl	8006f68 <rcutils_reset_error>
 8006118:	480c      	ldr	r0, [pc, #48]	; (800614c <rclc_executor_add_subscription+0x98>)
 800611a:	210a      	movs	r1, #10
 800611c:	f001 f96a 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006120:	b160      	cbz	r0, 800613c <rclc_executor_add_subscription+0x88>
 8006122:	480b      	ldr	r0, [pc, #44]	; (8006150 <rclc_executor_add_subscription+0x9c>)
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <rclc_executor_add_subscription+0xa0>)
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <rclc_executor_add_subscription+0x98>)
 8006128:	210a      	movs	r1, #10
 800612a:	f001 f98d 	bl	8007448 <rcutils_log>
  return ret;
 800612e:	2000      	movs	r0, #0
 8006130:	e004      	b.n	800613c <rclc_executor_add_subscription+0x88>
    ret = rcl_wait_set_fini(&executor->wait_set);
 8006132:	4628      	mov	r0, r5
 8006134:	f00f fcc8 	bl	8015ac8 <rcl_wait_set_fini>
    if (RCL_RET_OK != ret) {
 8006138:	2800      	cmp	r0, #0
 800613a:	d0e2      	beq.n	8006102 <rclc_executor_add_subscription+0x4e>
}
 800613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 800613e:	200b      	movs	r0, #11
 8006140:	e7fc      	b.n	800613c <rclc_executor_add_subscription+0x88>
    return RCL_RET_ERROR;
 8006142:	2001      	movs	r0, #1
 8006144:	e7fa      	b.n	800613c <rclc_executor_add_subscription+0x88>
 8006146:	bf00      	nop
 8006148:	2000461a 	.word	0x2000461a
 800614c:	0801c172 	.word	0x0801c172
 8006150:	200003c4 	.word	0x200003c4
 8006154:	0801c3a0 	.word	0x0801c3a0

08006158 <rclc_executor_add_timer>:
{
 8006158:	b538      	push	{r3, r4, r5, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 800615a:	4604      	mov	r4, r0
 800615c:	2800      	cmp	r0, #0
 800615e:	d034      	beq.n	80061ca <rclc_executor_add_timer+0x72>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8006160:	2900      	cmp	r1, #0
 8006162:	d032      	beq.n	80061ca <rclc_executor_add_timer+0x72>
  if (executor->index >= executor->max_handles) {
 8006164:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8006168:	4293      	cmp	r3, r2
 800616a:	d230      	bcs.n	80061ce <rclc_executor_add_timer+0x76>
  executor->handles[executor->index].type = TIMER;
 800616c:	6845      	ldr	r5, [r0, #4]
 800616e:	2238      	movs	r2, #56	; 0x38
 8006170:	435a      	muls	r2, r3
 8006172:	18a8      	adds	r0, r5, r2
  executor->handles[executor->index].timer = timer;
 8006174:	6041      	str	r1, [r0, #4]
  executor->handles[executor->index].type = TIMER;
 8006176:	2101      	movs	r1, #1
 8006178:	52a9      	strh	r1, [r5, r2]
  executor->index++;
 800617a:	440b      	add	r3, r1
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 800617c:	f104 0514 	add.w	r5, r4, #20
  executor->handles[executor->index].initialized = true;
 8006180:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  executor->index++;
 8006184:	60e3      	str	r3, [r4, #12]
  if (rcl_wait_set_is_valid(&executor->wait_set)) {
 8006186:	4628      	mov	r0, r5
 8006188:	f00f fa63 	bl	8015652 <rcl_wait_set_is_valid>
 800618c:	b9b8      	cbnz	r0, 80061be <rclc_executor_add_timer+0x66>
  executor->info.number_of_timers++;
 800618e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006190:	3301      	adds	r3, #1
 8006192:	64e3      	str	r3, [r4, #76]	; 0x4c
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Added a timer.");
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <rclc_executor_add_timer+0x7c>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	b923      	cbnz	r3, 80061a4 <rclc_executor_add_timer+0x4c>
 800619a:	f00c fe3f 	bl	8012e1c <rcutils_logging_initialize>
 800619e:	b108      	cbz	r0, 80061a4 <rclc_executor_add_timer+0x4c>
 80061a0:	f000 fee2 	bl	8006f68 <rcutils_reset_error>
 80061a4:	480c      	ldr	r0, [pc, #48]	; (80061d8 <rclc_executor_add_timer+0x80>)
 80061a6:	210a      	movs	r1, #10
 80061a8:	f001 f924 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80061ac:	b160      	cbz	r0, 80061c8 <rclc_executor_add_timer+0x70>
 80061ae:	480b      	ldr	r0, [pc, #44]	; (80061dc <rclc_executor_add_timer+0x84>)
 80061b0:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <rclc_executor_add_timer+0x88>)
 80061b2:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <rclc_executor_add_timer+0x80>)
 80061b4:	210a      	movs	r1, #10
 80061b6:	f001 f947 	bl	8007448 <rcutils_log>
  return ret;
 80061ba:	2000      	movs	r0, #0
 80061bc:	e004      	b.n	80061c8 <rclc_executor_add_timer+0x70>
    ret = rcl_wait_set_fini(&executor->wait_set);
 80061be:	4628      	mov	r0, r5
 80061c0:	f00f fc82 	bl	8015ac8 <rcl_wait_set_fini>
    if (RCL_RET_OK != ret) {
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d0e2      	beq.n	800618e <rclc_executor_add_timer+0x36>
}
 80061c8:	bd38      	pop	{r3, r4, r5, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 80061ca:	200b      	movs	r0, #11
 80061cc:	e7fc      	b.n	80061c8 <rclc_executor_add_timer+0x70>
    return ret;
 80061ce:	2001      	movs	r0, #1
 80061d0:	e7fa      	b.n	80061c8 <rclc_executor_add_timer+0x70>
 80061d2:	bf00      	nop
 80061d4:	2000461a 	.word	0x2000461a
 80061d8:	0801c172 	.word	0x0801c172
 80061dc:	200003d0 	.word	0x200003d0
 80061e0:	0801c3b6 	.word	0x0801c3b6

080061e4 <rclc_executor_spin_some>:
{
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	f5ad 5d22 	sub.w	sp, sp, #10368	; 0x2880
 80061ec:	b083      	sub	sp, #12
 80061ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 80061f2:	4605      	mov	r5, r0
 80061f4:	2800      	cmp	r0, #0
 80061f6:	f000 833e 	beq.w	8006876 <rclc_executor_spin_some+0x692>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "spin_some");
 80061fa:	4ca2      	ldr	r4, [pc, #648]	; (8006484 <rclc_executor_spin_some+0x2a0>)
 80061fc:	7822      	ldrb	r2, [r4, #0]
 80061fe:	b922      	cbnz	r2, 800620a <rclc_executor_spin_some+0x26>
 8006200:	f00c fe0c 	bl	8012e1c <rcutils_logging_initialize>
 8006204:	b108      	cbz	r0, 800620a <rclc_executor_spin_some+0x26>
 8006206:	f000 feaf 	bl	8006f68 <rcutils_reset_error>
 800620a:	489f      	ldr	r0, [pc, #636]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 800620c:	210a      	movs	r1, #10
 800620e:	f001 f8f1 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006212:	b128      	cbz	r0, 8006220 <rclc_executor_spin_some+0x3c>
 8006214:	4b9d      	ldr	r3, [pc, #628]	; (800648c <rclc_executor_spin_some+0x2a8>)
 8006216:	4a9c      	ldr	r2, [pc, #624]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006218:	489d      	ldr	r0, [pc, #628]	; (8006490 <rclc_executor_spin_some+0x2ac>)
 800621a:	210a      	movs	r1, #10
 800621c:	f001 f914 	bl	8007448 <rcutils_log>
  if (!rcl_wait_set_is_valid(&executor->wait_set)) {
 8006220:	f105 0614 	add.w	r6, r5, #20
 8006224:	4630      	mov	r0, r6
 8006226:	f00f fa14 	bl	8015652 <rcl_wait_set_is_valid>
 800622a:	2800      	cmp	r0, #0
 800622c:	d173      	bne.n	8006316 <rclc_executor_spin_some+0x132>
    rcl_ret_t rc = rcl_wait_set_fini(&executor->wait_set);
 800622e:	4630      	mov	r0, r6
 8006230:	f00f fc4a 	bl	8015ac8 <rcl_wait_set_fini>
    if (rc != RCL_RET_OK) {
 8006234:	b1c0      	cbz	r0, 8006268 <rclc_executor_spin_some+0x84>
      PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_fini);
 8006236:	7823      	ldrb	r3, [r4, #0]
 8006238:	b923      	cbnz	r3, 8006244 <rclc_executor_spin_some+0x60>
 800623a:	f00c fdef 	bl	8012e1c <rcutils_logging_initialize>
 800623e:	b108      	cbz	r0, 8006244 <rclc_executor_spin_some+0x60>
 8006240:	f000 fe92 	bl	8006f68 <rcutils_reset_error>
 8006244:	4890      	ldr	r0, [pc, #576]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006246:	2128      	movs	r1, #40	; 0x28
 8006248:	f001 f8d4 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800624c:	b150      	cbz	r0, 8006264 <rclc_executor_spin_some+0x80>
 800624e:	ac22      	add	r4, sp, #136	; 0x88
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fe65 	bl	8006f20 <rcutils_get_error_string>
 8006256:	4b8f      	ldr	r3, [pc, #572]	; (8006494 <rclc_executor_spin_some+0x2b0>)
 8006258:	4a8b      	ldr	r2, [pc, #556]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 800625a:	488f      	ldr	r0, [pc, #572]	; (8006498 <rclc_executor_spin_some+0x2b4>)
 800625c:	9400      	str	r4, [sp, #0]
 800625e:	2128      	movs	r1, #40	; 0x28
 8006260:	f001 f8f2 	bl	8007448 <rcutils_log>
 8006264:	f000 fe80 	bl	8006f68 <rcutils_reset_error>
    executor->wait_set = rcl_get_zero_initialized_wait_set();
 8006268:	a80e      	add	r0, sp, #56	; 0x38
 800626a:	ac0e      	add	r4, sp, #56	; 0x38
 800626c:	f003 feb4 	bl	8009fd8 <rcl_get_zero_initialized_wait_set>
 8006270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006272:	f105 0714 	add.w	r7, r5, #20
 8006276:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8006278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800627c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	603b      	str	r3, [r7, #0]
    rc = rcl_wait_set_init(
 8006284:	e9d5 8313 	ldrd	r8, r3, [r5, #76]	; 0x4c
 8006288:	a81d      	add	r0, sp, #116	; 0x74
 800628a:	6cac      	ldr	r4, [r5, #72]	; 0x48
 800628c:	930b      	str	r3, [sp, #44]	; 0x2c
 800628e:	6daf      	ldr	r7, [r5, #88]	; 0x58
 8006290:	f8d5 b054 	ldr.w	fp, [r5, #84]	; 0x54
 8006294:	f8d5 a05c 	ldr.w	sl, [r5, #92]	; 0x5c
 8006298:	f8d5 9000 	ldr.w	r9, [r5]
 800629c:	f000 fd8c 	bl	8006db8 <rcutils_get_default_allocator>
 80062a0:	f10d 0c74 	add.w	ip, sp, #116	; 0x74
 80062a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80062a8:	f10d 0e10 	add.w	lr, sp, #16
 80062ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80062b0:	f8dc 3000 	ldr.w	r3, [ip]
 80062b4:	f8ce 3000 	str.w	r3, [lr]
 80062b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4621      	mov	r1, r4
 80062be:	e9cd a902 	strd	sl, r9, [sp, #8]
 80062c2:	f8cd b004 	str.w	fp, [sp, #4]
 80062c6:	4643      	mov	r3, r8
 80062c8:	463a      	mov	r2, r7
 80062ca:	4630      	mov	r0, r6
 80062cc:	f003 feb6 	bl	800a03c <rcl_wait_set_init>
    if (rc != RCL_RET_OK) {
 80062d0:	4604      	mov	r4, r0
 80062d2:	b300      	cbz	r0, 8006316 <rclc_executor_spin_some+0x132>
      PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_init);
 80062d4:	4b6b      	ldr	r3, [pc, #428]	; (8006484 <rclc_executor_spin_some+0x2a0>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b923      	cbnz	r3, 80062e4 <rclc_executor_spin_some+0x100>
 80062da:	f00c fd9f 	bl	8012e1c <rcutils_logging_initialize>
 80062de:	b108      	cbz	r0, 80062e4 <rclc_executor_spin_some+0x100>
 80062e0:	f000 fe42 	bl	8006f68 <rcutils_reset_error>
 80062e4:	4868      	ldr	r0, [pc, #416]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 80062e6:	2128      	movs	r1, #40	; 0x28
 80062e8:	f001 f884 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80062ec:	b158      	cbz	r0, 8006306 <rclc_executor_spin_some+0x122>
 80062ee:	f50d 6591 	add.w	r5, sp, #1160	; 0x488
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fe14 	bl	8006f20 <rcutils_get_error_string>
 80062f8:	4b68      	ldr	r3, [pc, #416]	; (800649c <rclc_executor_spin_some+0x2b8>)
 80062fa:	4a63      	ldr	r2, [pc, #396]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 80062fc:	4868      	ldr	r0, [pc, #416]	; (80064a0 <rclc_executor_spin_some+0x2bc>)
 80062fe:	9500      	str	r5, [sp, #0]
 8006300:	2128      	movs	r1, #40	; 0x28
    PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_clear);
 8006302:	f001 f8a1 	bl	8007448 <rcutils_log>
 8006306:	f000 fe2f 	bl	8006f68 <rcutils_reset_error>
}
 800630a:	4620      	mov	r0, r4
 800630c:	f50d 5d22 	add.w	sp, sp, #10368	; 0x2880
 8006310:	b003      	add	sp, #12
 8006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rc = rcl_wait_set_clear(&executor->wait_set);
 8006316:	4630      	mov	r0, r6
 8006318:	f00f f9cd 	bl	80156b6 <rcl_wait_set_clear>
  if (rc != RCL_RET_OK) {
 800631c:	4604      	mov	r4, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	f000 81e6 	beq.w	80066f0 <rclc_executor_spin_some+0x50c>
    PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_clear);
 8006324:	4b57      	ldr	r3, [pc, #348]	; (8006484 <rclc_executor_spin_some+0x2a0>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	b923      	cbnz	r3, 8006334 <rclc_executor_spin_some+0x150>
 800632a:	f00c fd77 	bl	8012e1c <rcutils_logging_initialize>
 800632e:	b108      	cbz	r0, 8006334 <rclc_executor_spin_some+0x150>
 8006330:	f000 fe1a 	bl	8006f68 <rcutils_reset_error>
 8006334:	4854      	ldr	r0, [pc, #336]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006336:	2128      	movs	r1, #40	; 0x28
 8006338:	f001 f85c 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800633c:	2800      	cmp	r0, #0
 800633e:	d0e2      	beq.n	8006306 <rclc_executor_spin_some+0x122>
 8006340:	f60d 0588 	addw	r5, sp, #2184	; 0x888
 8006344:	4628      	mov	r0, r5
 8006346:	f000 fdeb 	bl	8006f20 <rcutils_get_error_string>
 800634a:	4b56      	ldr	r3, [pc, #344]	; (80064a4 <rclc_executor_spin_some+0x2c0>)
 800634c:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 800634e:	4856      	ldr	r0, [pc, #344]	; (80064a8 <rclc_executor_spin_some+0x2c4>)
 8006350:	9500      	str	r5, [sp, #0]
 8006352:	2128      	movs	r1, #40	; 0x28
 8006354:	e7d5      	b.n	8006302 <rclc_executor_spin_some+0x11e>
    RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "wait_set_add_* %d", executor->handles[i].type);
 8006356:	783b      	ldrb	r3, [r7, #0]
 8006358:	b923      	cbnz	r3, 8006364 <rclc_executor_spin_some+0x180>
 800635a:	f00c fd5f 	bl	8012e1c <rcutils_logging_initialize>
 800635e:	b108      	cbz	r0, 8006364 <rclc_executor_spin_some+0x180>
 8006360:	f000 fe02 	bl	8006f68 <rcutils_reset_error>
 8006364:	210a      	movs	r1, #10
 8006366:	4648      	mov	r0, r9
 8006368:	f001 f844 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800636c:	b148      	cbz	r0, 8006382 <rclc_executor_spin_some+0x19e>
 800636e:	686b      	ldr	r3, [r5, #4]
 8006370:	484e      	ldr	r0, [pc, #312]	; (80064ac <rclc_executor_spin_some+0x2c8>)
 8006372:	f813 3008 	ldrb.w	r3, [r3, r8]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	464a      	mov	r2, r9
 800637a:	4b4d      	ldr	r3, [pc, #308]	; (80064b0 <rclc_executor_spin_some+0x2cc>)
 800637c:	210a      	movs	r1, #10
 800637e:	f001 f863 	bl	8007448 <rcutils_log>
    switch (executor->handles[i].type) {
 8006382:	686a      	ldr	r2, [r5, #4]
 8006384:	eb02 0308 	add.w	r3, r2, r8
 8006388:	f812 2008 	ldrb.w	r2, [r2, r8]
 800638c:	2a04      	cmp	r2, #4
 800638e:	f200 817c 	bhi.w	800668a <rclc_executor_spin_some+0x4a6>
 8006392:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006396:	0005      	.short	0x0005
 8006398:	010a009b 	.word	0x010a009b
 800639c:	014200d2 	.word	0x014200d2
        rc = rcl_wait_set_add_subscription(
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063a6:	4630      	mov	r0, r6
 80063a8:	f00f f959 	bl	801565e <rcl_wait_set_add_subscription>
          RCUTILS_LOG_DEBUG_NAMED(
 80063ac:	783b      	ldrb	r3, [r7, #0]
        if (rc == RCL_RET_OK) {
 80063ae:	4683      	mov	fp, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d14b      	bne.n	800644c <rclc_executor_spin_some+0x268>
          RCUTILS_LOG_DEBUG_NAMED(
 80063b4:	b923      	cbnz	r3, 80063c0 <rclc_executor_spin_some+0x1dc>
 80063b6:	f00c fd31 	bl	8012e1c <rcutils_logging_initialize>
 80063ba:	b108      	cbz	r0, 80063c0 <rclc_executor_spin_some+0x1dc>
 80063bc:	f000 fdd4 	bl	8006f68 <rcutils_reset_error>
 80063c0:	210a      	movs	r1, #10
 80063c2:	4648      	mov	r0, r9
 80063c4:	f001 f816 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80063c8:	b148      	cbz	r0, 80063de <rclc_executor_spin_some+0x1fa>
 80063ca:	686b      	ldr	r3, [r5, #4]
 80063cc:	4839      	ldr	r0, [pc, #228]	; (80064b4 <rclc_executor_spin_some+0x2d0>)
 80063ce:	4443      	add	r3, r8
 80063d0:	464a      	mov	r2, r9
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4b38      	ldr	r3, [pc, #224]	; (80064b8 <rclc_executor_spin_some+0x2d4>)
 80063d8:	210a      	movs	r1, #10
          RCUTILS_LOG_DEBUG_NAMED(
 80063da:	f001 f835 	bl	8007448 <rcutils_log>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 80063de:	f10a 0a01 	add.w	sl, sl, #1
 80063e2:	68ab      	ldr	r3, [r5, #8]
 80063e4:	4553      	cmp	r3, sl
 80063e6:	d909      	bls.n	80063fc <rclc_executor_spin_some+0x218>
 80063e8:	686b      	ldr	r3, [r5, #4]
 80063ea:	f04f 0838 	mov.w	r8, #56	; 0x38
 80063ee:	fb08 f80a 	mul.w	r8, r8, sl
 80063f2:	4443      	add	r3, r8
 80063f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1ac      	bne.n	8006356 <rclc_executor_spin_some+0x172>
  rc = rcl_wait(&executor->wait_set, timeout_ns);
 80063fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006400:	4630      	mov	r0, r6
 8006402:	f7fb fc65 	bl	8001cd0 <rcl_wait>
  switch (executor->data_comm_semantics) {
 8006406:	f895 7078 	ldrb.w	r7, [r5, #120]	; 0x78
 800640a:	2f00      	cmp	r7, #0
 800640c:	f000 8210 	beq.w	8006830 <rclc_executor_spin_some+0x64c>
 8006410:	2f01      	cmp	r7, #1
 8006412:	f000 8192 	beq.w	800673a <rclc_executor_spin_some+0x556>
      PRINT_RCLC_ERROR(rclc_executor_spin_some, unknown_semantics);
 8006416:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <rclc_executor_spin_some+0x2a0>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b923      	cbnz	r3, 8006426 <rclc_executor_spin_some+0x242>
 800641c:	f00c fcfe 	bl	8012e1c <rcutils_logging_initialize>
 8006420:	b108      	cbz	r0, 8006426 <rclc_executor_spin_some+0x242>
 8006422:	f000 fda1 	bl	8006f68 <rcutils_reset_error>
 8006426:	4818      	ldr	r0, [pc, #96]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006428:	2128      	movs	r1, #40	; 0x28
 800642a:	f000 ffe3 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800642e:	2800      	cmp	r0, #0
 8006430:	f000 815a 	beq.w	80066e8 <rclc_executor_spin_some+0x504>
 8006434:	f50d 5412 	add.w	r4, sp, #9344	; 0x2480
 8006438:	3408      	adds	r4, #8
 800643a:	4620      	mov	r0, r4
 800643c:	f000 fd70 	bl	8006f20 <rcutils_get_error_string>
 8006440:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <rclc_executor_spin_some+0x2d8>)
 8006442:	4a11      	ldr	r2, [pc, #68]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006444:	481e      	ldr	r0, [pc, #120]	; (80064c0 <rclc_executor_spin_some+0x2dc>)
 8006446:	9400      	str	r4, [sp, #0]
 8006448:	2128      	movs	r1, #40	; 0x28
 800644a:	e14b      	b.n	80066e4 <rclc_executor_spin_some+0x500>
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_subscription);
 800644c:	b923      	cbnz	r3, 8006458 <rclc_executor_spin_some+0x274>
 800644e:	f00c fce5 	bl	8012e1c <rcutils_logging_initialize>
 8006452:	b108      	cbz	r0, 8006458 <rclc_executor_spin_some+0x274>
 8006454:	f000 fd88 	bl	8006f68 <rcutils_reset_error>
 8006458:	480b      	ldr	r0, [pc, #44]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 800645a:	2128      	movs	r1, #40	; 0x28
 800645c:	f000 ffca 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006460:	b158      	cbz	r0, 800647a <rclc_executor_spin_some+0x296>
 8006462:	f60d 4488 	addw	r4, sp, #3208	; 0xc88
 8006466:	4620      	mov	r0, r4
 8006468:	f000 fd5a 	bl	8006f20 <rcutils_get_error_string>
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <rclc_executor_spin_some+0x2e0>)
 800646e:	4a06      	ldr	r2, [pc, #24]	; (8006488 <rclc_executor_spin_some+0x2a4>)
 8006470:	4815      	ldr	r0, [pc, #84]	; (80064c8 <rclc_executor_spin_some+0x2e4>)
 8006472:	9400      	str	r4, [sp, #0]
 8006474:	2128      	movs	r1, #40	; 0x28
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_guard_condition);
 8006476:	f000 ffe7 	bl	8007448 <rcutils_log>
 800647a:	f000 fd75 	bl	8006f68 <rcutils_reset_error>
        rc = rcl_wait_set_add_guard_condition(
 800647e:	465c      	mov	r4, fp
          return rc;
 8006480:	e743      	b.n	800630a <rclc_executor_spin_some+0x126>
 8006482:	bf00      	nop
 8006484:	2000461a 	.word	0x2000461a
 8006488:	0801c172 	.word	0x0801c172
 800648c:	0801c3c5 	.word	0x0801c3c5
 8006490:	20000478 	.word	0x20000478
 8006494:	0801c3cf 	.word	0x0801c3cf
 8006498:	20000484 	.word	0x20000484
 800649c:	0801c409 	.word	0x0801c409
 80064a0:	20000490 	.word	0x20000490
 80064a4:	0801c443 	.word	0x0801c443
 80064a8:	2000049c 	.word	0x2000049c
 80064ac:	200004a8 	.word	0x200004a8
 80064b0:	0801c47e 	.word	0x0801c47e
 80064b4:	200004b4 	.word	0x200004b4
 80064b8:	0801c490 	.word	0x0801c490
 80064bc:	0801c715 	.word	0x0801c715
 80064c0:	20000544 	.word	0x20000544
 80064c4:	0801c4c1 	.word	0x0801c4c1
 80064c8:	200004c0 	.word	0x200004c0
        rc = rcl_wait_set_add_timer(
 80064cc:	6859      	ldr	r1, [r3, #4]
 80064ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064d2:	4630      	mov	r0, r6
 80064d4:	f00f fb3a 	bl	8015b4c <rcl_wait_set_add_timer>
          RCUTILS_LOG_DEBUG_NAMED(
 80064d8:	783b      	ldrb	r3, [r7, #0]
        if (rc == RCL_RET_OK) {
 80064da:	4683      	mov	fp, r0
 80064dc:	b9a8      	cbnz	r0, 800650a <rclc_executor_spin_some+0x326>
          RCUTILS_LOG_DEBUG_NAMED(
 80064de:	b923      	cbnz	r3, 80064ea <rclc_executor_spin_some+0x306>
 80064e0:	f00c fc9c 	bl	8012e1c <rcutils_logging_initialize>
 80064e4:	b108      	cbz	r0, 80064ea <rclc_executor_spin_some+0x306>
 80064e6:	f000 fd3f 	bl	8006f68 <rcutils_reset_error>
 80064ea:	210a      	movs	r1, #10
 80064ec:	4648      	mov	r0, r9
 80064ee:	f000 ff81 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f43f af73 	beq.w	80063de <rclc_executor_spin_some+0x1fa>
 80064f8:	686b      	ldr	r3, [r5, #4]
 80064fa:	48a7      	ldr	r0, [pc, #668]	; (8006798 <rclc_executor_spin_some+0x5b4>)
 80064fc:	4443      	add	r3, r8
 80064fe:	464a      	mov	r2, r9
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	210a      	movs	r1, #10
 8006506:	4ba5      	ldr	r3, [pc, #660]	; (800679c <rclc_executor_spin_some+0x5b8>)
 8006508:	e767      	b.n	80063da <rclc_executor_spin_some+0x1f6>
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_timer);
 800650a:	b923      	cbnz	r3, 8006516 <rclc_executor_spin_some+0x332>
 800650c:	f00c fc86 	bl	8012e1c <rcutils_logging_initialize>
 8006510:	b108      	cbz	r0, 8006516 <rclc_executor_spin_some+0x332>
 8006512:	f000 fd29 	bl	8006f68 <rcutils_reset_error>
 8006516:	48a2      	ldr	r0, [pc, #648]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006518:	2128      	movs	r1, #40	; 0x28
 800651a:	f000 ff6b 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800651e:	2800      	cmp	r0, #0
 8006520:	d0ab      	beq.n	800647a <rclc_executor_spin_some+0x296>
 8006522:	f50d 5484 	add.w	r4, sp, #4224	; 0x1080
 8006526:	3408      	adds	r4, #8
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fcf9 	bl	8006f20 <rcutils_get_error_string>
 800652e:	4b9d      	ldr	r3, [pc, #628]	; (80067a4 <rclc_executor_spin_some+0x5c0>)
 8006530:	4a9b      	ldr	r2, [pc, #620]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006532:	489d      	ldr	r0, [pc, #628]	; (80067a8 <rclc_executor_spin_some+0x5c4>)
 8006534:	9400      	str	r4, [sp, #0]
 8006536:	2128      	movs	r1, #40	; 0x28
 8006538:	e79d      	b.n	8006476 <rclc_executor_spin_some+0x292>
        rc = rcl_wait_set_add_service(
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006540:	4630      	mov	r0, r6
 8006542:	f00f fb5f 	bl	8015c04 <rcl_wait_set_add_service>
          RCUTILS_LOG_DEBUG_NAMED(
 8006546:	783b      	ldrb	r3, [r7, #0]
        if (rc == RCL_RET_OK) {
 8006548:	4683      	mov	fp, r0
 800654a:	b9a8      	cbnz	r0, 8006578 <rclc_executor_spin_some+0x394>
          RCUTILS_LOG_DEBUG_NAMED(
 800654c:	b923      	cbnz	r3, 8006558 <rclc_executor_spin_some+0x374>
 800654e:	f00c fc65 	bl	8012e1c <rcutils_logging_initialize>
 8006552:	b108      	cbz	r0, 8006558 <rclc_executor_spin_some+0x374>
 8006554:	f000 fd08 	bl	8006f68 <rcutils_reset_error>
 8006558:	210a      	movs	r1, #10
 800655a:	4648      	mov	r0, r9
 800655c:	f000 ff4a 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006560:	2800      	cmp	r0, #0
 8006562:	f43f af3c 	beq.w	80063de <rclc_executor_spin_some+0x1fa>
 8006566:	686b      	ldr	r3, [r5, #4]
 8006568:	4890      	ldr	r0, [pc, #576]	; (80067ac <rclc_executor_spin_some+0x5c8>)
 800656a:	4443      	add	r3, r8
 800656c:	464a      	mov	r2, r9
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	210a      	movs	r1, #10
 8006574:	4b8e      	ldr	r3, [pc, #568]	; (80067b0 <rclc_executor_spin_some+0x5cc>)
 8006576:	e730      	b.n	80063da <rclc_executor_spin_some+0x1f6>
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_service);
 8006578:	b923      	cbnz	r3, 8006584 <rclc_executor_spin_some+0x3a0>
 800657a:	f00c fc4f 	bl	8012e1c <rcutils_logging_initialize>
 800657e:	b108      	cbz	r0, 8006584 <rclc_executor_spin_some+0x3a0>
 8006580:	f000 fcf2 	bl	8006f68 <rcutils_reset_error>
 8006584:	4886      	ldr	r0, [pc, #536]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006586:	2128      	movs	r1, #40	; 0x28
 8006588:	f000 ff34 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800658c:	2800      	cmp	r0, #0
 800658e:	f43f af74 	beq.w	800647a <rclc_executor_spin_some+0x296>
 8006592:	f50d 54a4 	add.w	r4, sp, #5248	; 0x1480
 8006596:	3408      	adds	r4, #8
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fcc1 	bl	8006f20 <rcutils_get_error_string>
 800659e:	4b85      	ldr	r3, [pc, #532]	; (80067b4 <rclc_executor_spin_some+0x5d0>)
 80065a0:	4a7f      	ldr	r2, [pc, #508]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 80065a2:	4885      	ldr	r0, [pc, #532]	; (80067b8 <rclc_executor_spin_some+0x5d4>)
 80065a4:	9400      	str	r4, [sp, #0]
 80065a6:	2128      	movs	r1, #40	; 0x28
 80065a8:	e765      	b.n	8006476 <rclc_executor_spin_some+0x292>
        rc = rcl_wait_set_add_client(
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065b0:	4630      	mov	r0, r6
 80065b2:	f00f fafb 	bl	8015bac <rcl_wait_set_add_client>
          RCUTILS_LOG_DEBUG_NAMED(
 80065b6:	783b      	ldrb	r3, [r7, #0]
        if (rc == RCL_RET_OK) {
 80065b8:	4683      	mov	fp, r0
 80065ba:	b9a8      	cbnz	r0, 80065e8 <rclc_executor_spin_some+0x404>
          RCUTILS_LOG_DEBUG_NAMED(
 80065bc:	b923      	cbnz	r3, 80065c8 <rclc_executor_spin_some+0x3e4>
 80065be:	f00c fc2d 	bl	8012e1c <rcutils_logging_initialize>
 80065c2:	b108      	cbz	r0, 80065c8 <rclc_executor_spin_some+0x3e4>
 80065c4:	f000 fcd0 	bl	8006f68 <rcutils_reset_error>
 80065c8:	210a      	movs	r1, #10
 80065ca:	4648      	mov	r0, r9
 80065cc:	f000 ff12 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f43f af04 	beq.w	80063de <rclc_executor_spin_some+0x1fa>
 80065d6:	686b      	ldr	r3, [r5, #4]
 80065d8:	4878      	ldr	r0, [pc, #480]	; (80067bc <rclc_executor_spin_some+0x5d8>)
 80065da:	4443      	add	r3, r8
 80065dc:	464a      	mov	r2, r9
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	210a      	movs	r1, #10
 80065e4:	4b76      	ldr	r3, [pc, #472]	; (80067c0 <rclc_executor_spin_some+0x5dc>)
 80065e6:	e6f8      	b.n	80063da <rclc_executor_spin_some+0x1f6>
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_client);
 80065e8:	b923      	cbnz	r3, 80065f4 <rclc_executor_spin_some+0x410>
 80065ea:	f00c fc17 	bl	8012e1c <rcutils_logging_initialize>
 80065ee:	b108      	cbz	r0, 80065f4 <rclc_executor_spin_some+0x410>
 80065f0:	f000 fcba 	bl	8006f68 <rcutils_reset_error>
 80065f4:	486a      	ldr	r0, [pc, #424]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 80065f6:	2128      	movs	r1, #40	; 0x28
 80065f8:	f000 fefc 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	f43f af3c 	beq.w	800647a <rclc_executor_spin_some+0x296>
 8006602:	f50d 54c4 	add.w	r4, sp, #6272	; 0x1880
 8006606:	3408      	adds	r4, #8
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fc89 	bl	8006f20 <rcutils_get_error_string>
 800660e:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <rclc_executor_spin_some+0x5e0>)
 8006610:	4a63      	ldr	r2, [pc, #396]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006612:	486d      	ldr	r0, [pc, #436]	; (80067c8 <rclc_executor_spin_some+0x5e4>)
 8006614:	9400      	str	r4, [sp, #0]
 8006616:	2128      	movs	r1, #40	; 0x28
 8006618:	e72d      	b.n	8006476 <rclc_executor_spin_some+0x292>
        rc = rcl_wait_set_add_guard_condition(
 800661a:	6859      	ldr	r1, [r3, #4]
 800661c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006620:	4630      	mov	r0, r6
 8006622:	f00f fa67 	bl	8015af4 <rcl_wait_set_add_guard_condition>
          RCUTILS_LOG_DEBUG_NAMED(
 8006626:	783b      	ldrb	r3, [r7, #0]
        if (rc == RCL_RET_OK) {
 8006628:	4683      	mov	fp, r0
 800662a:	b9a8      	cbnz	r0, 8006658 <rclc_executor_spin_some+0x474>
          RCUTILS_LOG_DEBUG_NAMED(
 800662c:	b923      	cbnz	r3, 8006638 <rclc_executor_spin_some+0x454>
 800662e:	f00c fbf5 	bl	8012e1c <rcutils_logging_initialize>
 8006632:	b108      	cbz	r0, 8006638 <rclc_executor_spin_some+0x454>
 8006634:	f000 fc98 	bl	8006f68 <rcutils_reset_error>
 8006638:	210a      	movs	r1, #10
 800663a:	4648      	mov	r0, r9
 800663c:	f000 feda 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006640:	2800      	cmp	r0, #0
 8006642:	f43f aecc 	beq.w	80063de <rclc_executor_spin_some+0x1fa>
 8006646:	686b      	ldr	r3, [r5, #4]
 8006648:	4860      	ldr	r0, [pc, #384]	; (80067cc <rclc_executor_spin_some+0x5e8>)
 800664a:	4443      	add	r3, r8
 800664c:	464a      	mov	r2, r9
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	210a      	movs	r1, #10
 8006654:	4b5e      	ldr	r3, [pc, #376]	; (80067d0 <rclc_executor_spin_some+0x5ec>)
 8006656:	e6c0      	b.n	80063da <rclc_executor_spin_some+0x1f6>
          PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_guard_condition);
 8006658:	b923      	cbnz	r3, 8006664 <rclc_executor_spin_some+0x480>
 800665a:	f00c fbdf 	bl	8012e1c <rcutils_logging_initialize>
 800665e:	b108      	cbz	r0, 8006664 <rclc_executor_spin_some+0x480>
 8006660:	f000 fc82 	bl	8006f68 <rcutils_reset_error>
 8006664:	484e      	ldr	r0, [pc, #312]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006666:	2128      	movs	r1, #40	; 0x28
 8006668:	f000 fec4 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800666c:	2800      	cmp	r0, #0
 800666e:	f43f af04 	beq.w	800647a <rclc_executor_spin_some+0x296>
 8006672:	f50d 54e4 	add.w	r4, sp, #7296	; 0x1c80
 8006676:	3408      	adds	r4, #8
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fc51 	bl	8006f20 <rcutils_get_error_string>
 800667e:	4b55      	ldr	r3, [pc, #340]	; (80067d4 <rclc_executor_spin_some+0x5f0>)
 8006680:	4a47      	ldr	r2, [pc, #284]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 8006682:	4855      	ldr	r0, [pc, #340]	; (80067d8 <rclc_executor_spin_some+0x5f4>)
 8006684:	9400      	str	r4, [sp, #0]
 8006686:	2128      	movs	r1, #40	; 0x28
 8006688:	e6f5      	b.n	8006476 <rclc_executor_spin_some+0x292>
        RCUTILS_LOG_DEBUG_NAMED(
 800668a:	783b      	ldrb	r3, [r7, #0]
 800668c:	b923      	cbnz	r3, 8006698 <rclc_executor_spin_some+0x4b4>
 800668e:	f00c fbc5 	bl	8012e1c <rcutils_logging_initialize>
 8006692:	b108      	cbz	r0, 8006698 <rclc_executor_spin_some+0x4b4>
 8006694:	f000 fc68 	bl	8006f68 <rcutils_reset_error>
 8006698:	4841      	ldr	r0, [pc, #260]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 800669a:	210a      	movs	r1, #10
 800669c:	f000 feaa 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80066a0:	b148      	cbz	r0, 80066b6 <rclc_executor_spin_some+0x4d2>
 80066a2:	686b      	ldr	r3, [r5, #4]
 80066a4:	4a3e      	ldr	r2, [pc, #248]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 80066a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	484b      	ldr	r0, [pc, #300]	; (80067dc <rclc_executor_spin_some+0x5f8>)
 80066ae:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <rclc_executor_spin_some+0x5fc>)
 80066b0:	210a      	movs	r1, #10
 80066b2:	f000 fec9 	bl	8007448 <rcutils_log>
        PRINT_RCLC_ERROR(rclc_executor_spin_some, rcl_wait_set_add_unknown_handle);
 80066b6:	783b      	ldrb	r3, [r7, #0]
 80066b8:	b923      	cbnz	r3, 80066c4 <rclc_executor_spin_some+0x4e0>
 80066ba:	f00c fbaf 	bl	8012e1c <rcutils_logging_initialize>
 80066be:	b108      	cbz	r0, 80066c4 <rclc_executor_spin_some+0x4e0>
 80066c0:	f000 fc52 	bl	8006f68 <rcutils_reset_error>
 80066c4:	4836      	ldr	r0, [pc, #216]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 80066c6:	2128      	movs	r1, #40	; 0x28
 80066c8:	f000 fe94 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80066cc:	b160      	cbz	r0, 80066e8 <rclc_executor_spin_some+0x504>
 80066ce:	f50d 5402 	add.w	r4, sp, #8320	; 0x2080
 80066d2:	3408      	adds	r4, #8
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 fc23 	bl	8006f20 <rcutils_get_error_string>
 80066da:	4b42      	ldr	r3, [pc, #264]	; (80067e4 <rclc_executor_spin_some+0x600>)
 80066dc:	4a30      	ldr	r2, [pc, #192]	; (80067a0 <rclc_executor_spin_some+0x5bc>)
 80066de:	4842      	ldr	r0, [pc, #264]	; (80067e8 <rclc_executor_spin_some+0x604>)
 80066e0:	9400      	str	r4, [sp, #0]
 80066e2:	2128      	movs	r1, #40	; 0x28
 80066e4:	f000 feb0 	bl	8007448 <rcutils_log>
 80066e8:	f000 fc3e 	bl	8006f68 <rcutils_reset_error>
        return RCL_RET_ERROR;
 80066ec:	2401      	movs	r4, #1
 80066ee:	e60c      	b.n	800630a <rclc_executor_spin_some+0x126>
    RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "wait_set_add_* %d", executor->handles[i].type);
 80066f0:	4f3e      	ldr	r7, [pc, #248]	; (80067ec <rclc_executor_spin_some+0x608>)
 80066f2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80067a0 <rclc_executor_spin_some+0x5bc>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 80066f6:	4682      	mov	sl, r0
 80066f8:	e673      	b.n	80063e2 <rclc_executor_spin_some+0x1fe>
    rc = _rclc_check_for_new_data(&executor->handles[i], &executor->wait_set);
 80066fa:	4631      	mov	r1, r6
 80066fc:	f7ff fa5a 	bl	8005bb4 <_rclc_check_for_new_data>
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 8006700:	4604      	mov	r4, r0
 8006702:	b110      	cbz	r0, 800670a <rclc_executor_spin_some+0x526>
 8006704:	4548      	cmp	r0, r9
 8006706:	f47f ae00 	bne.w	800630a <rclc_executor_spin_some+0x126>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800670a:	3701      	adds	r7, #1
 800670c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 8006710:	428f      	cmp	r7, r1
 8006712:	d205      	bcs.n	8006720 <rclc_executor_spin_some+0x53c>
 8006714:	fb08 3007 	mla	r0, r8, r7, r3
 8006718:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800671c:	2a00      	cmp	r2, #0
 800671e:	d1ec      	bne.n	80066fa <rclc_executor_spin_some+0x516>
  if (executor->trigger_function(
 8006720:	e9d5 721c 	ldrd	r7, r2, [r5, #112]	; 0x70
 8006724:	4618      	mov	r0, r3
 8006726:	47b8      	blx	r7
 8006728:	2800      	cmp	r0, #0
 800672a:	f43f adee 	beq.w	800630a <rclc_executor_spin_some+0x126>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800672e:	2700      	movs	r7, #0
 8006730:	f04f 0838 	mov.w	r8, #56	; 0x38
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 8006734:	f240 1991 	movw	r9, #401	; 0x191
 8006738:	e00e      	b.n	8006758 <rclc_executor_spin_some+0x574>
  switch (executor->data_comm_semantics) {
 800673a:	2700      	movs	r7, #0
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800673c:	f04f 0838 	mov.w	r8, #56	; 0x38
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 8006740:	f240 1991 	movw	r9, #401	; 0x191
 8006744:	e7e2      	b.n	800670c <rclc_executor_spin_some+0x528>
      rc = _rclc_take_new_data(&executor->handles[i], &executor->wait_set);
 8006746:	4631      	mov	r1, r6
 8006748:	f7ff fad4 	bl	8005cf4 <_rclc_take_new_data>
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 800674c:	4604      	mov	r4, r0
 800674e:	b110      	cbz	r0, 8006756 <rclc_executor_spin_some+0x572>
 8006750:	4548      	cmp	r0, r9
 8006752:	f47f adda 	bne.w	800630a <rclc_executor_spin_some+0x126>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 8006756:	3701      	adds	r7, #1
 8006758:	68ab      	ldr	r3, [r5, #8]
 800675a:	429f      	cmp	r7, r3
 800675c:	d206      	bcs.n	800676c <rclc_executor_spin_some+0x588>
 800675e:	6868      	ldr	r0, [r5, #4]
 8006760:	fb08 0007 	mla	r0, r8, r7, r0
 8006764:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ec      	bne.n	8006746 <rclc_executor_spin_some+0x562>
 800676c:	2600      	movs	r6, #0
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800676e:	2738      	movs	r7, #56	; 0x38
 8006770:	e006      	b.n	8006780 <rclc_executor_spin_some+0x59c>
      rc = _rclc_execute(&executor->handles[i]);
 8006772:	f7ff fbd1 	bl	8005f18 <_rclc_execute>
      if (rc != RCL_RET_OK) {
 8006776:	4604      	mov	r4, r0
 8006778:	2800      	cmp	r0, #0
 800677a:	f47f adc6 	bne.w	800630a <rclc_executor_spin_some+0x126>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800677e:	3601      	adds	r6, #1
 8006780:	68ab      	ldr	r3, [r5, #8]
 8006782:	429e      	cmp	r6, r3
 8006784:	f4bf adc1 	bcs.w	800630a <rclc_executor_spin_some+0x126>
 8006788:	6868      	ldr	r0, [r5, #4]
 800678a:	fb07 0006 	mla	r0, r7, r6, r0
 800678e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ed      	bne.n	8006772 <rclc_executor_spin_some+0x58e>
 8006796:	e5b8      	b.n	800630a <rclc_executor_spin_some+0x126>
 8006798:	200004cc 	.word	0x200004cc
 800679c:	0801c507 	.word	0x0801c507
 80067a0:	0801c172 	.word	0x0801c172
 80067a4:	0801c52b 	.word	0x0801c52b
 80067a8:	200004d8 	.word	0x200004d8
 80067ac:	200004e4 	.word	0x200004e4
 80067b0:	0801c56a 	.word	0x0801c56a
 80067b4:	0801c591 	.word	0x0801c591
 80067b8:	200004f0 	.word	0x200004f0
 80067bc:	200004fc 	.word	0x200004fc
 80067c0:	0801c5d2 	.word	0x0801c5d2
 80067c4:	0801c5f7 	.word	0x0801c5f7
 80067c8:	20000508 	.word	0x20000508
 80067cc:	20000514 	.word	0x20000514
 80067d0:	0801c637 	.word	0x0801c637
 80067d4:	0801c665 	.word	0x0801c665
 80067d8:	20000520 	.word	0x20000520
 80067dc:	2000052c 	.word	0x2000052c
 80067e0:	0801c6ae 	.word	0x0801c6ae
 80067e4:	0801c6cd 	.word	0x0801c6cd
 80067e8:	20000538 	.word	0x20000538
 80067ec:	2000461a 	.word	0x2000461a
    rc = _rclc_check_for_new_data(&executor->handles[i], &executor->wait_set);
 80067f0:	4631      	mov	r1, r6
 80067f2:	f7ff f9df 	bl	8005bb4 <_rclc_check_for_new_data>
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 80067f6:	4604      	mov	r4, r0
 80067f8:	b110      	cbz	r0, 8006800 <rclc_executor_spin_some+0x61c>
 80067fa:	4548      	cmp	r0, r9
 80067fc:	f47f ad85 	bne.w	800630a <rclc_executor_spin_some+0x126>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 8006800:	3701      	adds	r7, #1
 8006802:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 8006806:	428f      	cmp	r7, r1
 8006808:	d205      	bcs.n	8006816 <rclc_executor_spin_some+0x632>
 800680a:	fb08 3007 	mla	r0, r8, r7, r3
 800680e:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8006812:	2a00      	cmp	r2, #0
 8006814:	d1ec      	bne.n	80067f0 <rclc_executor_spin_some+0x60c>
  if (executor->trigger_function(
 8006816:	e9d5 721c 	ldrd	r7, r2, [r5, #112]	; 0x70
 800681a:	4618      	mov	r0, r3
 800681c:	47b8      	blx	r7
 800681e:	2800      	cmp	r0, #0
 8006820:	f43f ad73 	beq.w	800630a <rclc_executor_spin_some+0x126>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 8006824:	2700      	movs	r7, #0
 8006826:	f04f 0838 	mov.w	r8, #56	; 0x38
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 800682a:	f240 1991 	movw	r9, #401	; 0x191
 800682e:	e015      	b.n	800685c <rclc_executor_spin_some+0x678>
  for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 8006830:	f04f 0838 	mov.w	r8, #56	; 0x38
    if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 8006834:	f240 1991 	movw	r9, #401	; 0x191
 8006838:	e7e3      	b.n	8006802 <rclc_executor_spin_some+0x61e>
      rc = _rclc_take_new_data(&executor->handles[i], &executor->wait_set);
 800683a:	4631      	mov	r1, r6
 800683c:	f7ff fa5a 	bl	8005cf4 <_rclc_take_new_data>
      if ((rc != RCL_RET_OK) && (rc != RCL_RET_SUBSCRIPTION_TAKE_FAILED)) {
 8006840:	4604      	mov	r4, r0
 8006842:	b110      	cbz	r0, 800684a <rclc_executor_spin_some+0x666>
 8006844:	4548      	cmp	r0, r9
 8006846:	f47f ad60 	bne.w	800630a <rclc_executor_spin_some+0x126>
      rc = _rclc_execute(&executor->handles[i]);
 800684a:	6868      	ldr	r0, [r5, #4]
 800684c:	4450      	add	r0, sl
 800684e:	f7ff fb63 	bl	8005f18 <_rclc_execute>
      if (rc != RCL_RET_OK) {
 8006852:	4604      	mov	r4, r0
 8006854:	2800      	cmp	r0, #0
 8006856:	f47f ad58 	bne.w	800630a <rclc_executor_spin_some+0x126>
    for (size_t i = 0; (i < executor->max_handles && executor->handles[i].initialized); i++) {
 800685a:	3701      	adds	r7, #1
 800685c:	68ab      	ldr	r3, [r5, #8]
 800685e:	429f      	cmp	r7, r3
 8006860:	f4bf ad53 	bcs.w	800630a <rclc_executor_spin_some+0x126>
 8006864:	6868      	ldr	r0, [r5, #4]
 8006866:	fb08 fa07 	mul.w	sl, r8, r7
 800686a:	4450      	add	r0, sl
 800686c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e2      	bne.n	800683a <rclc_executor_spin_some+0x656>
 8006874:	e549      	b.n	800630a <rclc_executor_spin_some+0x126>
  RCL_CHECK_ARGUMENT_FOR_NULL(executor, RCL_RET_INVALID_ARGUMENT);
 8006876:	240b      	movs	r4, #11
 8006878:	e547      	b.n	800630a <rclc_executor_spin_some+0x126>
 800687a:	bf00      	nop

0800687c <rclc_support_init_with_options>:
  rclc_support_t * support,
  int argc,
  char const * const * argv,
  rcl_init_options_t * init_options,
  rcl_allocator_t * allocator)
{
 800687c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006880:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8006884:	4688      	mov	r8, r1
 8006886:	f8dd 7838 	ldr.w	r7, [sp, #2104]	; 0x838
 800688a:	4691      	mov	r9, r2
  RCL_CHECK_FOR_NULL_WITH_MSG(
 800688c:	4605      	mov	r5, r0
 800688e:	2800      	cmp	r0, #0
 8006890:	d059      	beq.n	8006946 <rclc_support_init_with_options+0xca>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006892:	2b00      	cmp	r3, #0
 8006894:	d057      	beq.n	8006946 <rclc_support_init_with_options+0xca>
    init_options, "init_options is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006896:	2f00      	cmp	r7, #0
 8006898:	d055      	beq.n	8006946 <rclc_support_init_with_options+0xca>
 800689a:	4604      	mov	r4, r0
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f844 3b08 	str.w	r3, [r4], #8
    allocator, "allocator is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  rcl_ret_t rc = RCL_RET_OK;

  memcpy(&support->init_options, init_options, sizeof(rcl_init_options_t));

  support->context = rcl_get_zero_initialized_context();
 80068a2:	ae02      	add	r6, sp, #8
 80068a4:	4630      	mov	r0, r6
 80068a6:	f001 fe4f 	bl	8008548 <rcl_get_zero_initialized_context>
 80068aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80068ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  rc = rcl_init(argc, argv, &support->init_options, &support->context);
 80068b2:	4623      	mov	r3, r4
 80068b4:	462a      	mov	r2, r5
 80068b6:	4649      	mov	r1, r9
 80068b8:	4640      	mov	r0, r8
 80068ba:	f001 ff85 	bl	80087c8 <rcl_init>
  if (rc != RCL_RET_OK) {
 80068be:	4604      	mov	r4, r0
 80068c0:	b1f0      	cbz	r0, 8006900 <rclc_support_init_with_options+0x84>
    PRINT_RCLC_ERROR(rclc_init, rcl_init);
 80068c2:	4b22      	ldr	r3, [pc, #136]	; (800694c <rclc_support_init_with_options+0xd0>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b923      	cbnz	r3, 80068d2 <rclc_support_init_with_options+0x56>
 80068c8:	f00c faa8 	bl	8012e1c <rcutils_logging_initialize>
 80068cc:	b108      	cbz	r0, 80068d2 <rclc_support_init_with_options+0x56>
 80068ce:	f000 fb4b 	bl	8006f68 <rcutils_reset_error>
 80068d2:	481f      	ldr	r0, [pc, #124]	; (8006950 <rclc_support_init_with_options+0xd4>)
 80068d4:	2128      	movs	r1, #40	; 0x28
 80068d6:	f000 fd8d 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80068da:	b150      	cbz	r0, 80068f2 <rclc_support_init_with_options+0x76>
 80068dc:	ad06      	add	r5, sp, #24
 80068de:	4628      	mov	r0, r5
 80068e0:	f000 fb1e 	bl	8006f20 <rcutils_get_error_string>
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <rclc_support_init_with_options+0xd8>)
 80068e6:	4a1a      	ldr	r2, [pc, #104]	; (8006950 <rclc_support_init_with_options+0xd4>)
 80068e8:	481b      	ldr	r0, [pc, #108]	; (8006958 <rclc_support_init_with_options+0xdc>)
 80068ea:	9500      	str	r5, [sp, #0]
 80068ec:	2128      	movs	r1, #40	; 0x28
  }
  support->allocator = allocator;

  rc = rcl_clock_init(RCL_STEADY_TIME, &support->clock, support->allocator);
  if (rc != RCL_RET_OK) {
    PRINT_RCLC_ERROR(rclc_init, rcl_clock_init);
 80068ee:	f000 fdab 	bl	8007448 <rcutils_log>
 80068f2:	f000 fb39 	bl	8006f68 <rcutils_reset_error>
  }
  return rc;
}
 80068f6:	4620      	mov	r0, r4
 80068f8:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 80068fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  support->allocator = allocator;
 8006900:	61af      	str	r7, [r5, #24]
  rc = rcl_clock_init(RCL_STEADY_TIME, &support->clock, support->allocator);
 8006902:	463a      	mov	r2, r7
 8006904:	f105 011c 	add.w	r1, r5, #28
 8006908:	2003      	movs	r0, #3
 800690a:	f00e fd4c 	bl	80153a6 <rcl_clock_init>
  if (rc != RCL_RET_OK) {
 800690e:	4604      	mov	r4, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	d0f0      	beq.n	80068f6 <rclc_support_init_with_options+0x7a>
    PRINT_RCLC_ERROR(rclc_init, rcl_clock_init);
 8006914:	4b0d      	ldr	r3, [pc, #52]	; (800694c <rclc_support_init_with_options+0xd0>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b923      	cbnz	r3, 8006924 <rclc_support_init_with_options+0xa8>
 800691a:	f00c fa7f 	bl	8012e1c <rcutils_logging_initialize>
 800691e:	b108      	cbz	r0, 8006924 <rclc_support_init_with_options+0xa8>
 8006920:	f000 fb22 	bl	8006f68 <rcutils_reset_error>
 8006924:	480a      	ldr	r0, [pc, #40]	; (8006950 <rclc_support_init_with_options+0xd4>)
 8006926:	2128      	movs	r1, #40	; 0x28
 8006928:	f000 fd64 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800692c:	2800      	cmp	r0, #0
 800692e:	d0e0      	beq.n	80068f2 <rclc_support_init_with_options+0x76>
 8006930:	f50d 6583 	add.w	r5, sp, #1048	; 0x418
 8006934:	4628      	mov	r0, r5
 8006936:	f000 faf3 	bl	8006f20 <rcutils_get_error_string>
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <rclc_support_init_with_options+0xe0>)
 800693c:	4a04      	ldr	r2, [pc, #16]	; (8006950 <rclc_support_init_with_options+0xd4>)
 800693e:	4808      	ldr	r0, [pc, #32]	; (8006960 <rclc_support_init_with_options+0xe4>)
 8006940:	9500      	str	r5, [sp, #0]
 8006942:	2128      	movs	r1, #40	; 0x28
 8006944:	e7d3      	b.n	80068ee <rclc_support_init_with_options+0x72>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006946:	240b      	movs	r4, #11
 8006948:	e7d5      	b.n	80068f6 <rclc_support_init_with_options+0x7a>
 800694a:	bf00      	nop
 800694c:	2000461a 	.word	0x2000461a
 8006950:	0801c172 	.word	0x0801c172
 8006954:	0801c831 	.word	0x0801c831
 8006958:	2000055c 	.word	0x2000055c
 800695c:	0801c854 	.word	0x0801c854
 8006960:	20000568 	.word	0x20000568

08006964 <rclc_support_init>:
{
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	460f      	mov	r7, r1
 800696a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800696e:	4690      	mov	r8, r2
 8006970:	461d      	mov	r5, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006972:	4606      	mov	r6, r0
 8006974:	2800      	cmp	r0, #0
 8006976:	d037      	beq.n	80069e8 <rclc_support_init+0x84>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006978:	2b00      	cmp	r3, #0
 800697a:	d035      	beq.n	80069e8 <rclc_support_init+0x84>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800697c:	f00e fbf3 	bl	8015166 <rcl_get_zero_initialized_init_options>
 8006980:	9003      	str	r0, [sp, #12]
  rc = rcl_init_options_init(&init_options, (*allocator) );
 8006982:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
 8006986:	e88d 0003 	stmia.w	sp, {r0, r1}
 800698a:	a803      	add	r0, sp, #12
 800698c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8006990:	f00e fbeb 	bl	801516a <rcl_init_options_init>
  if (rc != RCL_RET_OK) {
 8006994:	4604      	mov	r4, r0
 8006996:	b1f0      	cbz	r0, 80069d6 <rclc_support_init+0x72>
    PRINT_RCLC_ERROR(rclc_support_init, rcl_init_options_init);
 8006998:	4b14      	ldr	r3, [pc, #80]	; (80069ec <rclc_support_init+0x88>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b923      	cbnz	r3, 80069a8 <rclc_support_init+0x44>
 800699e:	f00c fa3d 	bl	8012e1c <rcutils_logging_initialize>
 80069a2:	b108      	cbz	r0, 80069a8 <rclc_support_init+0x44>
 80069a4:	f000 fae0 	bl	8006f68 <rcutils_reset_error>
 80069a8:	4811      	ldr	r0, [pc, #68]	; (80069f0 <rclc_support_init+0x8c>)
 80069aa:	2128      	movs	r1, #40	; 0x28
 80069ac:	f000 fd22 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80069b0:	b150      	cbz	r0, 80069c8 <rclc_support_init+0x64>
 80069b2:	ad04      	add	r5, sp, #16
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fab3 	bl	8006f20 <rcutils_get_error_string>
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <rclc_support_init+0x90>)
 80069bc:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <rclc_support_init+0x8c>)
 80069be:	480e      	ldr	r0, [pc, #56]	; (80069f8 <rclc_support_init+0x94>)
 80069c0:	9500      	str	r5, [sp, #0]
 80069c2:	2128      	movs	r1, #40	; 0x28
 80069c4:	f000 fd40 	bl	8007448 <rcutils_log>
 80069c8:	f000 face 	bl	8006f68 <rcutils_reset_error>
}
 80069cc:	4620      	mov	r0, r4
 80069ce:	f50d 6d82 	add.w	sp, sp, #1040	; 0x410
 80069d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  rc = rclc_support_init_with_options(support, argc, argv, &init_options, allocator);
 80069d6:	9500      	str	r5, [sp, #0]
 80069d8:	ab03      	add	r3, sp, #12
 80069da:	4642      	mov	r2, r8
 80069dc:	4639      	mov	r1, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ff4c 	bl	800687c <rclc_support_init_with_options>
 80069e4:	4604      	mov	r4, r0
  return rc;
 80069e6:	e7f1      	b.n	80069cc <rclc_support_init+0x68>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80069e8:	240b      	movs	r4, #11
 80069ea:	e7ef      	b.n	80069cc <rclc_support_init+0x68>
 80069ec:	2000461a 	.word	0x2000461a
 80069f0:	0801c172 	.word	0x0801c172
 80069f4:	0801c87d 	.word	0x0801c87d
 80069f8:	20000550 	.word	0x20000550

080069fc <rclc_node_init_with_options.part.0>:
  }
  return rc;
}

rcl_ret_t
rclc_node_init_with_options(
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
    node_ops, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  rcl_ret_t rc = RCL_RET_OK;
  (*node) = rcl_get_zero_initialized_node();
 8006a04:	f10d 0808 	add.w	r8, sp, #8
rclc_node_init_with_options(
 8006a08:	4604      	mov	r4, r0
  (*node) = rcl_get_zero_initialized_node();
 8006a0a:	4640      	mov	r0, r8
rclc_node_init_with_options(
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	461f      	mov	r7, r3
 8006a10:	4616      	mov	r6, r2
  (*node) = rcl_get_zero_initialized_node();
 8006a12:	f002 f8f7 	bl	8008c04 <rcl_get_zero_initialized_node>
 8006a16:	e898 0003 	ldmia.w	r8, {r0, r1}
  rc = rcl_node_init(
 8006a1a:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
  (*node) = rcl_get_zero_initialized_node();
 8006a1e:	e884 0003 	stmia.w	r4, {r0, r1}
  rc = rcl_node_init(
 8006a22:	4632      	mov	r2, r6
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4620      	mov	r0, r4
 8006a28:	f107 0308 	add.w	r3, r7, #8
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	f002 f8f3 	bl	8008c18 <rcl_node_init>
    node,
    name,
    namespace_,
    &support->context,
    node_ops);
  if (rc != RCL_RET_OK) {
 8006a32:	4604      	mov	r4, r0
 8006a34:	b1c8      	cbz	r0, 8006a6a <rclc_node_init_with_options.part.0+0x6e>
    PRINT_RCLC_WARN(rclc_node_init_with_options, rcl_node_init);
 8006a36:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <rclc_node_init_with_options.part.0+0x78>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	b923      	cbnz	r3, 8006a46 <rclc_node_init_with_options.part.0+0x4a>
 8006a3c:	f00c f9ee 	bl	8012e1c <rcutils_logging_initialize>
 8006a40:	b108      	cbz	r0, 8006a46 <rclc_node_init_with_options.part.0+0x4a>
 8006a42:	f000 fa91 	bl	8006f68 <rcutils_reset_error>
 8006a46:	480c      	ldr	r0, [pc, #48]	; (8006a78 <rclc_node_init_with_options.part.0+0x7c>)
 8006a48:	211e      	movs	r1, #30
 8006a4a:	f000 fcd3 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006a4e:	b150      	cbz	r0, 8006a66 <rclc_node_init_with_options.part.0+0x6a>
 8006a50:	ad04      	add	r5, sp, #16
 8006a52:	4628      	mov	r0, r5
 8006a54:	f000 fa64 	bl	8006f20 <rcutils_get_error_string>
 8006a58:	4b08      	ldr	r3, [pc, #32]	; (8006a7c <rclc_node_init_with_options.part.0+0x80>)
 8006a5a:	4a07      	ldr	r2, [pc, #28]	; (8006a78 <rclc_node_init_with_options.part.0+0x7c>)
 8006a5c:	4808      	ldr	r0, [pc, #32]	; (8006a80 <rclc_node_init_with_options.part.0+0x84>)
 8006a5e:	9500      	str	r5, [sp, #0]
 8006a60:	211e      	movs	r1, #30
 8006a62:	f000 fcf1 	bl	8007448 <rcutils_log>
 8006a66:	f000 fa7f 	bl	8006f68 <rcutils_reset_error>
  }
  return rc;
}
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f50d 6d82 	add.w	sp, sp, #1040	; 0x410
 8006a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a74:	2000461a 	.word	0x2000461a
 8006a78:	0801c172 	.word	0x0801c172
 8006a7c:	0801c93a 	.word	0x0801c93a
 8006a80:	20000580 	.word	0x20000580

08006a84 <rclc_node_init_default>:
{
 8006a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a88:	460d      	mov	r5, r1
 8006a8a:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8006a8e:	4616      	mov	r6, r2
 8006a90:	461f      	mov	r7, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006a92:	4604      	mov	r4, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d03a      	beq.n	8006b0e <rclc_node_init_default+0x8a>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d038      	beq.n	8006b0e <rclc_node_init_default+0x8a>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006a9c:	b3ba      	cbz	r2, 8006b0e <rclc_node_init_default+0x8a>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006a9e:	b3b3      	cbz	r3, 8006b0e <rclc_node_init_default+0x8a>
  (*node) = rcl_get_zero_initialized_node();
 8006aa0:	f10d 0808 	add.w	r8, sp, #8
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	f002 f8ad 	bl	8008c04 <rcl_get_zero_initialized_node>
 8006aaa:	e898 0003 	ldmia.w	r8, {r0, r1}
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8006aae:	f10d 0814 	add.w	r8, sp, #20
  (*node) = rcl_get_zero_initialized_node();
 8006ab2:	e884 0003 	stmia.w	r4, {r0, r1}
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f002 fa8a 	bl	8008fd0 <rcl_node_get_default_options>
  rc = rclc_node_init_with_options(
 8006abc:	4620      	mov	r0, r4
 8006abe:	f8cd 8000 	str.w	r8, [sp]
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f00c f938 	bl	8012d3c <rclc_node_init_with_options>
  if (rc != RCL_RET_OK) {
 8006acc:	4604      	mov	r4, r0
 8006ace:	b1c8      	cbz	r0, 8006b04 <rclc_node_init_default+0x80>
    PRINT_RCLC_WARN(rclc_node_init_default, rclc_node_init_with_options);
 8006ad0:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <rclc_node_init_default+0x90>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b923      	cbnz	r3, 8006ae0 <rclc_node_init_default+0x5c>
 8006ad6:	f00c f9a1 	bl	8012e1c <rcutils_logging_initialize>
 8006ada:	b108      	cbz	r0, 8006ae0 <rclc_node_init_default+0x5c>
 8006adc:	f000 fa44 	bl	8006f68 <rcutils_reset_error>
 8006ae0:	480d      	ldr	r0, [pc, #52]	; (8006b18 <rclc_node_init_default+0x94>)
 8006ae2:	211e      	movs	r1, #30
 8006ae4:	f000 fc86 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006ae8:	b150      	cbz	r0, 8006b00 <rclc_node_init_default+0x7c>
 8006aea:	ad0c      	add	r5, sp, #48	; 0x30
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fa17 	bl	8006f20 <rcutils_get_error_string>
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <rclc_node_init_default+0x98>)
 8006af4:	4a08      	ldr	r2, [pc, #32]	; (8006b18 <rclc_node_init_default+0x94>)
 8006af6:	480a      	ldr	r0, [pc, #40]	; (8006b20 <rclc_node_init_default+0x9c>)
 8006af8:	9500      	str	r5, [sp, #0]
 8006afa:	211e      	movs	r1, #30
 8006afc:	f000 fca4 	bl	8007448 <rcutils_log>
 8006b00:	f000 fa32 	bl	8006f68 <rcutils_reset_error>
}
 8006b04:	4620      	mov	r0, r4
 8006b06:	f50d 6d86 	add.w	sp, sp, #1072	; 0x430
 8006b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b0e:	240b      	movs	r4, #11
 8006b10:	e7f8      	b.n	8006b04 <rclc_node_init_default+0x80>
 8006b12:	bf00      	nop
 8006b14:	2000461a 	.word	0x2000461a
 8006b18:	0801c172 	.word	0x0801c172
 8006b1c:	0801c976 	.word	0x0801c976
 8006b20:	20000574 	.word	0x20000574

08006b24 <rclc_publisher_init_default>:
rclc_publisher_init_default(
  rcl_publisher_t * publisher,
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	460d      	mov	r5, r1
 8006b2a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8006b2e:	4616      	mov	r6, r2
 8006b30:	461f      	mov	r7, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b32:	4604      	mov	r4, r0
 8006b34:	b398      	cbz	r0, 8006b9e <rclc_publisher_init_default+0x7a>
    publisher, "publisher is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b36:	b391      	cbz	r1, 8006b9e <rclc_publisher_init_default+0x7a>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b38:	b38a      	cbz	r2, 8006b9e <rclc_publisher_init_default+0x7a>
    type_support, "type_support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b3a:	b383      	cbz	r3, 8006b9e <rclc_publisher_init_default+0x7a>
    topic_name, "topic_name is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*publisher) = rcl_get_zero_initialized_publisher();
 8006b3c:	f7fe feac 	bl	8005898 <rcl_get_zero_initialized_publisher>
  rcl_publisher_options_t pub_opt = rcl_publisher_get_default_options();
 8006b40:	f10d 0808 	add.w	r8, sp, #8
  (*publisher) = rcl_get_zero_initialized_publisher();
 8006b44:	6020      	str	r0, [r4, #0]
  rcl_publisher_options_t pub_opt = rcl_publisher_get_default_options();
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff f812 	bl	8005b70 <rcl_publisher_get_default_options>
  rcl_ret_t rc = rcl_publisher_init(
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f8cd 8000 	str.w	r8, [sp]
 8006b52:	463b      	mov	r3, r7
 8006b54:	4632      	mov	r2, r6
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7fe fea4 	bl	80058a4 <rcl_publisher_init>
    publisher,
    node,
    type_support,
    topic_name,
    &pub_opt);
  if (rc != RCL_RET_OK) {
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	b1c8      	cbz	r0, 8006b94 <rclc_publisher_init_default+0x70>
    PRINT_RCLC_ERROR(rclc_publisher_init_default, rcl_publisher_init);
 8006b60:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <rclc_publisher_init_default+0x80>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b923      	cbnz	r3, 8006b70 <rclc_publisher_init_default+0x4c>
 8006b66:	f00c f959 	bl	8012e1c <rcutils_logging_initialize>
 8006b6a:	b108      	cbz	r0, 8006b70 <rclc_publisher_init_default+0x4c>
 8006b6c:	f000 f9fc 	bl	8006f68 <rcutils_reset_error>
 8006b70:	480d      	ldr	r0, [pc, #52]	; (8006ba8 <rclc_publisher_init_default+0x84>)
 8006b72:	2128      	movs	r1, #40	; 0x28
 8006b74:	f000 fc3e 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006b78:	b150      	cbz	r0, 8006b90 <rclc_publisher_init_default+0x6c>
 8006b7a:	ad1c      	add	r5, sp, #112	; 0x70
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 f9cf 	bl	8006f20 <rcutils_get_error_string>
 8006b82:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <rclc_publisher_init_default+0x88>)
 8006b84:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <rclc_publisher_init_default+0x84>)
 8006b86:	480a      	ldr	r0, [pc, #40]	; (8006bb0 <rclc_publisher_init_default+0x8c>)
 8006b88:	9500      	str	r5, [sp, #0]
 8006b8a:	2128      	movs	r1, #40	; 0x28
 8006b8c:	f000 fc5c 	bl	8007448 <rcutils_log>
 8006b90:	f000 f9ea 	bl	8006f68 <rcutils_reset_error>
  }
  return rc;
}
 8006b94:	4620      	mov	r0, r4
 8006b96:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8006b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006b9e:	240b      	movs	r4, #11
 8006ba0:	e7f8      	b.n	8006b94 <rclc_publisher_init_default+0x70>
 8006ba2:	bf00      	nop
 8006ba4:	2000461a 	.word	0x2000461a
 8006ba8:	0801c172 	.word	0x0801c172
 8006bac:	0801ca42 	.word	0x0801ca42
 8006bb0:	2000058c 	.word	0x2000058c

08006bb4 <rclc_publisher_init_best_effort>:
rclc_publisher_init_best_effort(
  rcl_publisher_t * publisher,
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 8006bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb8:	460d      	mov	r5, r1
 8006bba:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	461f      	mov	r7, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	b3b0      	cbz	r0, 8006c34 <rclc_publisher_init_best_effort+0x80>
    publisher, "publisher is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006bc6:	b3a9      	cbz	r1, 8006c34 <rclc_publisher_init_best_effort+0x80>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006bc8:	b3a2      	cbz	r2, 8006c34 <rclc_publisher_init_best_effort+0x80>
    type_support, "type_support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006bca:	b39b      	cbz	r3, 8006c34 <rclc_publisher_init_best_effort+0x80>
    topic_name, "topic_name is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*publisher) = rcl_get_zero_initialized_publisher();
 8006bcc:	f7fe fe64 	bl	8005898 <rcl_get_zero_initialized_publisher>
  rcl_publisher_options_t pub_opt = rcl_publisher_get_default_options();
 8006bd0:	f10d 0808 	add.w	r8, sp, #8
  (*publisher) = rcl_get_zero_initialized_publisher();
 8006bd4:	6020      	str	r0, [r4, #0]
  rcl_publisher_options_t pub_opt = rcl_publisher_get_default_options();
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	f7fe ffca 	bl	8005b70 <rcl_publisher_get_default_options>
  pub_opt.qos.reliability = RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f888 3008 	strb.w	r3, [r8, #8]
  rcl_ret_t rc = rcl_publisher_init(
 8006be2:	4620      	mov	r0, r4
 8006be4:	f8cd 8000 	str.w	r8, [sp]
 8006be8:	463b      	mov	r3, r7
 8006bea:	4632      	mov	r2, r6
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7fe fe59 	bl	80058a4 <rcl_publisher_init>
    publisher,
    node,
    type_support,
    topic_name,
    &pub_opt);
  if (rc != RCL_RET_OK) {
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	b1c8      	cbz	r0, 8006c2a <rclc_publisher_init_best_effort+0x76>
    PRINT_RCLC_ERROR(rclc_publisher_init_best_effort, rcl_publisher_init);
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <rclc_publisher_init_best_effort+0x84>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	b923      	cbnz	r3, 8006c06 <rclc_publisher_init_best_effort+0x52>
 8006bfc:	f00c f90e 	bl	8012e1c <rcutils_logging_initialize>
 8006c00:	b108      	cbz	r0, 8006c06 <rclc_publisher_init_best_effort+0x52>
 8006c02:	f000 f9b1 	bl	8006f68 <rcutils_reset_error>
 8006c06:	480d      	ldr	r0, [pc, #52]	; (8006c3c <rclc_publisher_init_best_effort+0x88>)
 8006c08:	2128      	movs	r1, #40	; 0x28
 8006c0a:	f000 fbf3 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006c0e:	b150      	cbz	r0, 8006c26 <rclc_publisher_init_best_effort+0x72>
 8006c10:	ad1c      	add	r5, sp, #112	; 0x70
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f984 	bl	8006f20 <rcutils_get_error_string>
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <rclc_publisher_init_best_effort+0x8c>)
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <rclc_publisher_init_best_effort+0x88>)
 8006c1c:	4809      	ldr	r0, [pc, #36]	; (8006c44 <rclc_publisher_init_best_effort+0x90>)
 8006c1e:	9500      	str	r5, [sp, #0]
 8006c20:	2128      	movs	r1, #40	; 0x28
 8006c22:	f000 fc11 	bl	8007448 <rcutils_log>
 8006c26:	f000 f99f 	bl	8006f68 <rcutils_reset_error>
  }
  return rc;
}
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006c34:	240b      	movs	r4, #11
 8006c36:	e7f8      	b.n	8006c2a <rclc_publisher_init_best_effort+0x76>
 8006c38:	2000461a 	.word	0x2000461a
 8006c3c:	0801c172 	.word	0x0801c172
 8006c40:	0801ca81 	.word	0x0801ca81
 8006c44:	20000598 	.word	0x20000598

08006c48 <rclc_subscription_init_best_effort>:
rclc_subscription_init_best_effort(
  rcl_subscription_t * subscription,
  rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name)
{
 8006c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8006c52:	4616      	mov	r6, r2
 8006c54:	461f      	mov	r7, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006c56:	4604      	mov	r4, r0
 8006c58:	b3b0      	cbz	r0, 8006cc8 <rclc_subscription_init_best_effort+0x80>
    subscription, "subscription is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006c5a:	b3a9      	cbz	r1, 8006cc8 <rclc_subscription_init_best_effort+0x80>
    node, "node is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006c5c:	b3a2      	cbz	r2, 8006cc8 <rclc_subscription_init_best_effort+0x80>
    type_support, "type_support is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006c5e:	b39b      	cbz	r3, 8006cc8 <rclc_subscription_init_best_effort+0x80>
    topic_name, "topic_name is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*subscription) = rcl_get_zero_initialized_subscription();
 8006c60:	f002 fbc4 	bl	80093ec <rcl_get_zero_initialized_subscription>
  rcl_subscription_options_t sub_opt = rcl_subscription_get_default_options();
 8006c64:	f10d 0808 	add.w	r8, sp, #8
  (*subscription) = rcl_get_zero_initialized_subscription();
 8006c68:	6020      	str	r0, [r4, #0]
  rcl_subscription_options_t sub_opt = rcl_subscription_get_default_options();
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f002 fd24 	bl	80096b8 <rcl_subscription_get_default_options>
  sub_opt.qos.reliability = RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT;
 8006c70:	2302      	movs	r3, #2
 8006c72:	f888 3008 	strb.w	r3, [r8, #8]
  rcl_ret_t rc = rcl_subscription_init(
 8006c76:	4620      	mov	r0, r4
 8006c78:	f8cd 8000 	str.w	r8, [sp]
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	4632      	mov	r2, r6
 8006c80:	4629      	mov	r1, r5
 8006c82:	f002 fbb9 	bl	80093f8 <rcl_subscription_init>
    subscription,
    node,
    type_support,
    topic_name,
    &sub_opt);
  if (rc != RCL_RET_OK) {
 8006c86:	4604      	mov	r4, r0
 8006c88:	b1c8      	cbz	r0, 8006cbe <rclc_subscription_init_best_effort+0x76>
    PRINT_RCLC_ERROR(rclc_subscription_init_best_effort, rcl_subscription_init);
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <rclc_subscription_init_best_effort+0x84>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b923      	cbnz	r3, 8006c9a <rclc_subscription_init_best_effort+0x52>
 8006c90:	f00c f8c4 	bl	8012e1c <rcutils_logging_initialize>
 8006c94:	b108      	cbz	r0, 8006c9a <rclc_subscription_init_best_effort+0x52>
 8006c96:	f000 f967 	bl	8006f68 <rcutils_reset_error>
 8006c9a:	480d      	ldr	r0, [pc, #52]	; (8006cd0 <rclc_subscription_init_best_effort+0x88>)
 8006c9c:	2128      	movs	r1, #40	; 0x28
 8006c9e:	f000 fba9 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006ca2:	b150      	cbz	r0, 8006cba <rclc_subscription_init_best_effort+0x72>
 8006ca4:	ad1e      	add	r5, sp, #120	; 0x78
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f000 f93a 	bl	8006f20 <rcutils_get_error_string>
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <rclc_subscription_init_best_effort+0x8c>)
 8006cae:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <rclc_subscription_init_best_effort+0x88>)
 8006cb0:	4809      	ldr	r0, [pc, #36]	; (8006cd8 <rclc_subscription_init_best_effort+0x90>)
 8006cb2:	9500      	str	r5, [sp, #0]
 8006cb4:	2128      	movs	r1, #40	; 0x28
 8006cb6:	f000 fbc7 	bl	8007448 <rcutils_log>
 8006cba:	f000 f955 	bl	8006f68 <rcutils_reset_error>
  }
  return rc;
}
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f50d 6d8f 	add.w	sp, sp, #1144	; 0x478
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006cc8:	240b      	movs	r4, #11
 8006cca:	e7f8      	b.n	8006cbe <rclc_subscription_init_best_effort+0x76>
 8006ccc:	2000461a 	.word	0x2000461a
 8006cd0:	0801c172 	.word	0x0801c172
 8006cd4:	0801cb9e 	.word	0x0801cb9e
 8006cd8:	200005a4 	.word	0x200005a4

08006cdc <rclc_timer_init_default>:
rclc_timer_init_default(
  rcl_timer_t * timer,
  rclc_support_t * support,
  const uint64_t timeout_ns,
  const rcl_timer_callback_t callback)
{
 8006cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8006ce6:	4691      	mov	r9, r2
 8006ce8:	4698      	mov	r8, r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006cea:	4607      	mov	r7, r0
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d052      	beq.n	8006d96 <rclc_timer_init_default+0xba>
    timer, "timer is a null pointer", return RCL_RET_INVALID_ARGUMENT);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d050      	beq.n	8006d96 <rclc_timer_init_default+0xba>
    support, "support is a null pointer", return RCL_RET_INVALID_ARGUMENT);

  (*timer) = rcl_get_zero_initialized_timer();
 8006cf4:	f002 fece 	bl	8009a94 <rcl_get_zero_initialized_timer>
  rcl_ret_t rc = rcl_timer_init(
 8006cf8:	69b5      	ldr	r5, [r6, #24]
  (*timer) = rcl_get_zero_initialized_timer();
 8006cfa:	6038      	str	r0, [r7, #0]
  rcl_ret_t rc = rcl_timer_init(
 8006cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cfe:	ac03      	add	r4, sp, #12
 8006d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
 8006d0a:	9302      	str	r3, [sp, #8]
 8006d0c:	e9cd 9800 	strd	r9, r8, [sp]
 8006d10:	f106 0208 	add.w	r2, r6, #8
 8006d14:	f106 011c 	add.w	r1, r6, #28
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f002 fec1 	bl	8009aa0 <rcl_timer_init>
    &support->clock,
    &support->context,
    timeout_ns,
    callback,
    (*support->allocator));
  if (rc != RCL_RET_OK) {
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	; (8006d9c <rclc_timer_init_default+0xc0>)
 8006d20:	4604      	mov	r4, r0
    PRINT_RCLC_ERROR(rclc_timer_init_default, rcl_timer_init);
 8006d22:	781b      	ldrb	r3, [r3, #0]
  if (rc != RCL_RET_OK) {
 8006d24:	b1e0      	cbz	r0, 8006d60 <rclc_timer_init_default+0x84>
    PRINT_RCLC_ERROR(rclc_timer_init_default, rcl_timer_init);
 8006d26:	b923      	cbnz	r3, 8006d32 <rclc_timer_init_default+0x56>
 8006d28:	f00c f878 	bl	8012e1c <rcutils_logging_initialize>
 8006d2c:	b108      	cbz	r0, 8006d32 <rclc_timer_init_default+0x56>
 8006d2e:	f000 f91b 	bl	8006f68 <rcutils_reset_error>
 8006d32:	481b      	ldr	r0, [pc, #108]	; (8006da0 <rclc_timer_init_default+0xc4>)
 8006d34:	2128      	movs	r1, #40	; 0x28
 8006d36:	f000 fb5d 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006d3a:	b150      	cbz	r0, 8006d52 <rclc_timer_init_default+0x76>
 8006d3c:	ad08      	add	r5, sp, #32
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f8ee 	bl	8006f20 <rcutils_get_error_string>
 8006d44:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <rclc_timer_init_default+0xc8>)
 8006d46:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <rclc_timer_init_default+0xc4>)
 8006d48:	4817      	ldr	r0, [pc, #92]	; (8006da8 <rclc_timer_init_default+0xcc>)
 8006d4a:	9500      	str	r5, [sp, #0]
 8006d4c:	2128      	movs	r1, #40	; 0x28
 8006d4e:	f000 fb7b 	bl	8007448 <rcutils_log>
 8006d52:	f000 f909 	bl	8006f68 <rcutils_reset_error>
  } else {
    RCUTILS_LOG_INFO("Created a timer with period %ld ms.\n", timeout_ns / 1000000);
  }
  return rc;
}
 8006d56:	4620      	mov	r0, r4
 8006d58:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
 8006d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    RCUTILS_LOG_INFO("Created a timer with period %ld ms.\n", timeout_ns / 1000000);
 8006d60:	b923      	cbnz	r3, 8006d6c <rclc_timer_init_default+0x90>
 8006d62:	f00c f85b 	bl	8012e1c <rcutils_logging_initialize>
 8006d66:	b108      	cbz	r0, 8006d6c <rclc_timer_init_default+0x90>
 8006d68:	f000 f8fe 	bl	8006f68 <rcutils_reset_error>
 8006d6c:	2114      	movs	r1, #20
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f000 fb40 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d0ee      	beq.n	8006d56 <rclc_timer_init_default+0x7a>
 8006d78:	4a0c      	ldr	r2, [pc, #48]	; (8006dac <rclc_timer_init_default+0xd0>)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	4641      	mov	r1, r8
 8006d80:	f7fa faca 	bl	8001318 <__aeabi_uldivmod>
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <rclc_timer_init_default+0xd4>)
 8006d86:	e9cd 0100 	strd	r0, r1, [sp]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4809      	ldr	r0, [pc, #36]	; (8006db4 <rclc_timer_init_default+0xd8>)
 8006d8e:	2114      	movs	r1, #20
 8006d90:	f000 fb5a 	bl	8007448 <rcutils_log>
 8006d94:	e7df      	b.n	8006d56 <rclc_timer_init_default+0x7a>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8006d96:	240b      	movs	r4, #11
 8006d98:	e7dd      	b.n	8006d56 <rclc_timer_init_default+0x7a>
 8006d9a:	bf00      	nop
 8006d9c:	2000461a 	.word	0x2000461a
 8006da0:	0801c172 	.word	0x0801c172
 8006da4:	0801cc66 	.word	0x0801cc66
 8006da8:	200005b0 	.word	0x200005b0
 8006dac:	000f4240 	.word	0x000f4240
 8006db0:	0801cc9d 	.word	0x0801cc9d
 8006db4:	200005bc 	.word	0x200005bc

08006db8 <rcutils_get_default_allocator>:
  return false;
}

rcutils_allocator_t
rcutils_get_default_allocator()
{
 8006db8:	b570      	push	{r4, r5, r6, lr}
  return default_allocator;
 8006dba:	4d04      	ldr	r5, [pc, #16]	; (8006dcc <rcutils_get_default_allocator+0x14>)
{
 8006dbc:	4606      	mov	r6, r0
  return default_allocator;
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	6023      	str	r3, [r4, #0]
}
 8006dc8:	4630      	mov	r0, r6
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	200005c8 	.word	0x200005c8

08006dd0 <__rcutils_copy_string>:

// do not use externally, internal function which is only to be used by error_handling.c
static
size_t
__rcutils_copy_string(char * dst, size_t dst_size, const char * src)
{
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	4616      	mov	r6, r2
  assert(dst != NULL);
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b928      	cbnz	r0, 8006de6 <__rcutils_copy_string+0x16>
 8006dda:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <__rcutils_copy_string+0x4c>)
 8006ddc:	4a10      	ldr	r2, [pc, #64]	; (8006e20 <__rcutils_copy_string+0x50>)
 8006dde:	2135      	movs	r1, #53	; 0x35
  assert(dst_size > 0);
 8006de0:	4810      	ldr	r0, [pc, #64]	; (8006e24 <__rcutils_copy_string+0x54>)
 8006de2:	f004 fa83 	bl	800b2ec <__assert_func>
 8006de6:	b919      	cbnz	r1, 8006df0 <__rcutils_copy_string+0x20>
 8006de8:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <__rcutils_copy_string+0x58>)
 8006dea:	4a0d      	ldr	r2, [pc, #52]	; (8006e20 <__rcutils_copy_string+0x50>)
 8006dec:	2136      	movs	r1, #54	; 0x36
 8006dee:	e7f7      	b.n	8006de0 <__rcutils_copy_string+0x10>
  assert(src != NULL);
 8006df0:	b91a      	cbnz	r2, 8006dfa <__rcutils_copy_string+0x2a>
 8006df2:	4b0e      	ldr	r3, [pc, #56]	; (8006e2c <__rcutils_copy_string+0x5c>)
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <__rcutils_copy_string+0x50>)
 8006df6:	2137      	movs	r1, #55	; 0x37
 8006df8:	e7f2      	b.n	8006de0 <__rcutils_copy_string+0x10>
  // doesn't matter how long src actually is if it is longer than dst, so limit to dst + 1
  size_t src_length = strnlen(src, dst_size);
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f011 f84d 	bl	8017e9a <strnlen>
  size_t size_to_copy = src_length;
  // the destination must be one byte bigger to store the NULL terminating character
  if (src_length >= dst_size) {
 8006e00:	4287      	cmp	r7, r0
  size_t src_length = strnlen(src, dst_size);
 8006e02:	4604      	mov	r4, r0
    size_to_copy = dst_size - 1;
 8006e04:	bf98      	it	ls
 8006e06:	f107 34ff 	addls.w	r4, r7, #4294967295	; 0xffffffff
__ssp_bos_icheck3(memmove, void *, const void *)
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f010 fca7 	bl	8017762 <memmove>
# endif
  }
#else
  (void)memmove(dst, src, size_to_copy);
#endif
  dst[size_to_copy] = '\0';
 8006e14:	2300      	movs	r3, #0
 8006e16:	552b      	strb	r3, [r5, r4]
  return size_to_copy;
}
 8006e18:	4620      	mov	r0, r4
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	0801cd2f 	.word	0x0801cd2f
 8006e20:	0801cdb5 	.word	0x0801cdb5
 8006e24:	0801cd3b 	.word	0x0801cd3b
 8006e28:	0801cd9c 	.word	0x0801cd9c
 8006e2c:	0801cda9 	.word	0x0801cda9

08006e30 <__rcutils_format_error_string>:
static
void
__rcutils_format_error_string(
  rcutils_error_string_t * error_string,
  const rcutils_error_state_t * error_state)
{
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      sizeof(line_number_buffer) - 1 /* minus the null-term */ +
      1  // null terminator
    ), "math error in static string formatting");
  char * offset = error_string->str;
  size_t bytes_left = sizeof(error_string->str);
  size_t written = __rcutils_copy_string(offset, bytes_left, error_state->message);
 8006e34:	460a      	mov	r2, r1
{
 8006e36:	b089      	sub	sp, #36	; 0x24
 8006e38:	4689      	mov	r9, r1
  size_t written = __rcutils_copy_string(offset, bytes_left, error_state->message);
 8006e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
{
 8006e3e:	4604      	mov	r4, r0
  size_t written = __rcutils_copy_string(offset, bytes_left, error_state->message);
 8006e40:	f7ff ffc6 	bl	8006dd0 <__rcutils_copy_string>
  offset += written;
  bytes_left -= written;
 8006e44:	f5c0 6580 	rsb	r5, r0, #1024	; 0x400
  offset += written;
 8006e48:	4404      	add	r4, r0
  written = __rcutils_copy_string(offset, bytes_left, format_1);
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4a32      	ldr	r2, [pc, #200]	; (8006f18 <__rcutils_format_error_string+0xe8>)
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f7ff ffbe 	bl	8006dd0 <__rcutils_copy_string>
  offset += written;
  bytes_left -= written;
 8006e54:	1a2d      	subs	r5, r5, r0
  offset += written;
 8006e56:	4404      	add	r4, r0
  written = __rcutils_copy_string(offset, bytes_left, error_state->file);
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f509 7240 	add.w	r2, r9, #768	; 0x300
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f7ff ffb6 	bl	8006dd0 <__rcutils_copy_string>
  offset += written;
  bytes_left -= written;
 8006e64:	1a2d      	subs	r5, r5, r0
  offset += written;
 8006e66:	4404      	add	r4, r0
  written = __rcutils_copy_string(offset, bytes_left, format_2);
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <__rcutils_format_error_string+0xec>)
 8006e6e:	f7ff ffaf 	bl	8006dd0 <__rcutils_copy_string>
  offset += written;
  bytes_left -= written;
  __rcutils_convert_uint64_t_into_c_str(
 8006e72:	e9d9 67fa 	ldrd	r6, r7, [r9, #1000]	; 0x3e8
  if (number == 0) {
 8006e76:	ea56 0307 	orrs.w	r3, r6, r7
  offset += written;
 8006e7a:	4404      	add	r4, r0
  bytes_left -= written;
 8006e7c:	eba5 0500 	sub.w	r5, r5, r0
  if (number == 0) {
 8006e80:	d10c      	bne.n	8006e9c <__rcutils_format_error_string+0x6c>
    buffer[0] = '0';
 8006e82:	2330      	movs	r3, #48	; 0x30
 8006e84:	f8ad 3008 	strh.w	r3, [sp, #8]
    error_state->line_number, line_number_buffer, sizeof(line_number_buffer));
  written = __rcutils_copy_string(offset, bytes_left, line_number_buffer);
 8006e88:	aa02      	add	r2, sp, #8
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f7ff ff9f 	bl	8006dd0 <__rcutils_copy_string>
  offset += written;
  offset[0] = '\0';
 8006e92:	2300      	movs	r3, #0
 8006e94:	5423      	strb	r3, [r4, r0]
}
 8006e96:	b009      	add	sp, #36	; 0x24
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	f10d 0b08 	add.w	fp, sp, #8
  if (number == 0) {
 8006ea0:	f8cd b004 	str.w	fp, [sp, #4]
  size_t i = 0;
 8006ea4:	f04f 0a00 	mov.w	sl, #0
    buffer[i++] = (char)(number % 10 + '0');
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4639      	mov	r1, r7
 8006eac:	220a      	movs	r2, #10
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f7fa fa32 	bl	8001318 <__aeabi_uldivmod>
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	3230      	adds	r2, #48	; 0x30
 8006eb8:	f803 2b01 	strb.w	r2, [r3], #1
    number = number / 10;
 8006ebc:	4630      	mov	r0, r6
    buffer[i++] = (char)(number % 10 + '0');
 8006ebe:	9301      	str	r3, [sp, #4]
    number = number / 10;
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	220a      	movs	r2, #10
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f7fa fa27 	bl	8001318 <__aeabi_uldivmod>
 8006eca:	46b9      	mov	r9, r7
 8006ecc:	46b0      	mov	r8, r6
  while (number != 0) {
 8006ece:	f1b9 0f00 	cmp.w	r9, #0
 8006ed2:	bf08      	it	eq
 8006ed4:	f1b8 0f0a 	cmpeq.w	r8, #10
    buffer[i++] = (char)(number % 10 + '0');
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
    number = number / 10;
 8006edc:	4606      	mov	r6, r0
 8006ede:	460f      	mov	r7, r1
  while (number != 0) {
 8006ee0:	d2e2      	bcs.n	8006ea8 <__rcutils_format_error_string+0x78>
  buffer[i] = '\0';
 8006ee2:	ab08      	add	r3, sp, #32
 8006ee4:	449a      	add	sl, r3
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	f80a 6c18 	strb.w	r6, [sl, #-24]
  __rcutils_reverse_str(buffer, strnlen(buffer, 21));
 8006eec:	2115      	movs	r1, #21
 8006eee:	a802      	add	r0, sp, #8
 8006ef0:	f010 ffd3 	bl	8017e9a <strnlen>
  if (0 == string_len) {
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0c7      	beq.n	8006e88 <__rcutils_format_error_string+0x58>
  size_t j = string_len - 1;
 8006ef8:	ab02      	add	r3, sp, #8
 8006efa:	1e41      	subs	r1, r0, #1
  for (; i < j; i++, j--) {
 8006efc:	4418      	add	r0, r3
  size_t i = 0;
 8006efe:	4633      	mov	r3, r6
  for (; i < j; i++, j--) {
 8006f00:	1aca      	subs	r2, r1, r3
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d2c0      	bcs.n	8006e88 <__rcutils_format_error_string+0x58>
    char c = string_in[i];
 8006f06:	f89b 2000 	ldrb.w	r2, [fp]
    string_in[i] = string_in[j];
 8006f0a:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
 8006f0e:	f80b 6b01 	strb.w	r6, [fp], #1
  for (; i < j; i++, j--) {
 8006f12:	3301      	adds	r3, #1
    string_in[j] = c;
 8006f14:	7002      	strb	r2, [r0, #0]
  for (; i < j; i++, j--) {
 8006f16:	e7f3      	b.n	8006f00 <__rcutils_format_error_string+0xd0>
 8006f18:	0801cdcb 	.word	0x0801cdcb
 8006f1c:	0801cdd1 	.word	0x0801cdd1

08006f20 <rcutils_get_error_string>:
  return &gtls_rcutils_error_state;
}

rcutils_error_string_t
rcutils_get_error_string(void)
{
 8006f20:	b538      	push	{r3, r4, r5, lr}
  if (!gtls_rcutils_error_is_set) {
 8006f22:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <rcutils_get_error_string+0x34>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
{
 8006f26:	4604      	mov	r4, r0
  if (!gtls_rcutils_error_is_set) {
 8006f28:	b933      	cbnz	r3, 8006f38 <rcutils_get_error_string+0x18>
    return (rcutils_error_string_t) {"error not set"};  // NOLINT(readability/braces)
 8006f2a:	490b      	ldr	r1, [pc, #44]	; (8006f58 <rcutils_get_error_string+0x38>)
 8006f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  }
  if (!gtls_rcutils_error_string_is_formatted) {
    __rcutils_format_error_string(&gtls_rcutils_error_string, &gtls_rcutils_error_state);
    gtls_rcutils_error_string_is_formatted = true;
  }
  return gtls_rcutils_error_string;
 8006f30:	f7fa fc36 	bl	80017a0 <memcpy>
}
 8006f34:	4620      	mov	r0, r4
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
  if (!gtls_rcutils_error_string_is_formatted) {
 8006f38:	4d08      	ldr	r5, [pc, #32]	; (8006f5c <rcutils_get_error_string+0x3c>)
 8006f3a:	782b      	ldrb	r3, [r5, #0]
 8006f3c:	b92b      	cbnz	r3, 8006f4a <rcutils_get_error_string+0x2a>
    __rcutils_format_error_string(&gtls_rcutils_error_string, &gtls_rcutils_error_state);
 8006f3e:	4908      	ldr	r1, [pc, #32]	; (8006f60 <rcutils_get_error_string+0x40>)
 8006f40:	4808      	ldr	r0, [pc, #32]	; (8006f64 <rcutils_get_error_string+0x44>)
 8006f42:	f7ff ff75 	bl	8006e30 <__rcutils_format_error_string>
    gtls_rcutils_error_string_is_formatted = true;
 8006f46:	2301      	movs	r3, #1
 8006f48:	702b      	strb	r3, [r5, #0]
  return gtls_rcutils_error_string;
 8006f4a:	4906      	ldr	r1, [pc, #24]	; (8006f64 <rcutils_get_error_string+0x44>)
 8006f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f50:	4620      	mov	r0, r4
 8006f52:	e7ed      	b.n	8006f30 <rcutils_get_error_string+0x10>
 8006f54:	20004218 	.word	0x20004218
 8006f58:	0801a999 	.word	0x0801a999
 8006f5c:	20004619 	.word	0x20004619
 8006f60:	20001040 	.word	0x20001040
 8006f64:	20004219 	.word	0x20004219

08006f68 <rcutils_reset_error>:

void
rcutils_reset_error(void)
{
 8006f68:	b510      	push	{r4, lr}
  gtls_rcutils_error_state = (const rcutils_error_state_t) {
 8006f6a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4807      	ldr	r0, [pc, #28]	; (8006f90 <rcutils_reset_error+0x28>)
 8006f72:	f010 fc7f 	bl	8017874 <memset>
    .message = {0}, .file = {0}, .line_number = 0
  };  // NOLINT(readability/braces)
  gtls_rcutils_error_string_is_formatted = false;
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <rcutils_reset_error+0x2c>)
  gtls_rcutils_error_string = (const rcutils_error_string_t) {
 8006f78:	4907      	ldr	r1, [pc, #28]	; (8006f98 <rcutils_reset_error+0x30>)
 8006f7a:	4808      	ldr	r0, [pc, #32]	; (8006f9c <rcutils_reset_error+0x34>)
  gtls_rcutils_error_string_is_formatted = false;
 8006f7c:	2400      	movs	r4, #0
  gtls_rcutils_error_string = (const rcutils_error_string_t) {
 8006f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  gtls_rcutils_error_string_is_formatted = false;
 8006f82:	701c      	strb	r4, [r3, #0]
  gtls_rcutils_error_string = (const rcutils_error_string_t) {
 8006f84:	f7fa fc0c 	bl	80017a0 <memcpy>
    .str = "\0"
  };
  gtls_rcutils_error_is_set = false;
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <rcutils_reset_error+0x38>)
 8006f8a:	701c      	strb	r4, [r3, #0]
}
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	20001040 	.word	0x20001040
 8006f94:	20004619 	.word	0x20004619
 8006f98:	0801b199 	.word	0x0801b199
 8006f9c:	20004219 	.word	0x20004219
 8006fa0:	20004218 	.word	0x20004218

08006fa4 <expand_severity>:

const char * expand_severity(
  const logging_input * logging_input,
  rcutils_char_array_t * logging_output)
{
  const char * severity_string = g_rcutils_log_severity_names[logging_input->severity];
 8006fa4:	68c2      	ldr	r2, [r0, #12]
  APPEND_AND_RETURN_LOG_OUTPUT(severity_string);
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <expand_severity+0x20>)
{
 8006fa8:	b510      	push	{r4, lr}
 8006faa:	460c      	mov	r4, r1
  APPEND_AND_RETURN_LOG_OUTPUT(severity_string);
 8006fac:	4620      	mov	r0, r4
 8006fae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fb2:	f00e ff9a 	bl	8015eea <rcutils_char_array_strcat>
 8006fb6:	b118      	cbz	r0, 8006fc0 <expand_severity+0x1c>
 8006fb8:	f7ff ffd6 	bl	8006f68 <rcutils_reset_error>
 8006fbc:	2000      	movs	r0, #0
}
 8006fbe:	bd10      	pop	{r4, pc}
  APPEND_AND_RETURN_LOG_OUTPUT(severity_string);
 8006fc0:	6820      	ldr	r0, [r4, #0]
 8006fc2:	e7fc      	b.n	8006fbe <expand_severity+0x1a>
 8006fc4:	0801b9f0 	.word	0x0801b9f0

08006fc8 <rcutils_get_env_var_zero_or_one.isra.0>:
static enum rcutils_get_env_retval rcutils_get_env_var_zero_or_one(
 8006fc8:	b507      	push	{r0, r1, r2, lr}
  const char * env_var_value = NULL;
 8006fca:	2300      	movs	r3, #0
  const char * ret_str = rcutils_get_env(name, &env_var_value);
 8006fcc:	a901      	add	r1, sp, #4
  const char * env_var_value = NULL;
 8006fce:	9301      	str	r3, [sp, #4]
  const char * ret_str = rcutils_get_env(name, &env_var_value);
 8006fd0:	f003 f924 	bl	800a21c <rcutils_get_env>
  if (NULL != ret_str) {
 8006fd4:	b120      	cbz	r0, 8006fe0 <rcutils_get_env_var_zero_or_one.isra.0+0x18>
    return RCUTILS_GET_ENV_ERROR;
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006fda:	b003      	add	sp, #12
 8006fdc:	f85d fb04 	ldr.w	pc, [sp], #4
  if (strcmp(env_var_value, "") == 0) {
 8006fe0:	490a      	ldr	r1, [pc, #40]	; (800700c <rcutils_get_env_var_zero_or_one.isra.0+0x44>)
 8006fe2:	9801      	ldr	r0, [sp, #4]
 8006fe4:	f7f9 f960 	bl	80002a8 <strcmp>
 8006fe8:	b168      	cbz	r0, 8007006 <rcutils_get_env_var_zero_or_one.isra.0+0x3e>
  if (strcmp(env_var_value, "0") == 0) {
 8006fea:	4909      	ldr	r1, [pc, #36]	; (8007010 <rcutils_get_env_var_zero_or_one.isra.0+0x48>)
 8006fec:	9801      	ldr	r0, [sp, #4]
 8006fee:	f7f9 f95b 	bl	80002a8 <strcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d0f1      	beq.n	8006fda <rcutils_get_env_var_zero_or_one.isra.0+0x12>
  if (strcmp(env_var_value, "1") == 0) {
 8006ff6:	4907      	ldr	r1, [pc, #28]	; (8007014 <rcutils_get_env_var_zero_or_one.isra.0+0x4c>)
 8006ff8:	9801      	ldr	r0, [sp, #4]
 8006ffa:	f7f9 f955 	bl	80002a8 <strcmp>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d1e9      	bne.n	8006fd6 <rcutils_get_env_var_zero_or_one.isra.0+0xe>
    return RCUTILS_GET_ENV_ONE;
 8007002:	2001      	movs	r0, #1
 8007004:	e7e9      	b.n	8006fda <rcutils_get_env_var_zero_or_one.isra.0+0x12>
    return RCUTILS_GET_ENV_EMPTY;
 8007006:	2002      	movs	r0, #2
 8007008:	e7e7      	b.n	8006fda <rcutils_get_env_var_zero_or_one.isra.0+0x12>
 800700a:	bf00      	nop
 800700c:	0801d00d 	.word	0x0801d00d
 8007010:	0801cda7 	.word	0x0801cda7
 8007014:	0801bfa5 	.word	0x0801bfa5

08007018 <expand_line_number>:
{
 8007018:	b530      	push	{r4, r5, lr}
  const rcutils_log_location_t * location = logging_input->location;
 800701a:	6845      	ldr	r5, [r0, #4]
{
 800701c:	b085      	sub	sp, #20
 800701e:	460c      	mov	r4, r1
  if (!location) {
 8007020:	b94d      	cbnz	r5, 8007036 <expand_line_number+0x1e>
    OK_OR_RETURN_NULL(rcutils_char_array_strcpy(logging_output, "0"));
 8007022:	4910      	ldr	r1, [pc, #64]	; (8007064 <expand_line_number+0x4c>)
 8007024:	4620      	mov	r0, r4
 8007026:	f00e ff3a 	bl	8015e9e <rcutils_char_array_strcpy>
 800702a:	b1c8      	cbz	r0, 8007060 <expand_line_number+0x48>
 800702c:	f7ff ff9c 	bl	8006f68 <rcutils_reset_error>
    return NULL;
 8007030:	2000      	movs	r0, #0
}
 8007032:	b005      	add	sp, #20
 8007034:	bd30      	pop	{r4, r5, pc}
  int written = rcutils_snprintf(
 8007036:	68ab      	ldr	r3, [r5, #8]
 8007038:	4a0b      	ldr	r2, [pc, #44]	; (8007068 <expand_line_number+0x50>)
 800703a:	210a      	movs	r1, #10
 800703c:	a801      	add	r0, sp, #4
 800703e:	f00b ff24 	bl	8012e8a <rcutils_snprintf>
  if (written < 0) {
 8007042:	2800      	cmp	r0, #0
 8007044:	da07      	bge.n	8007056 <expand_line_number+0x3e>
    fprintf(stderr, "failed to format line number: '%zu'\n", location->line_number);
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <expand_line_number+0x54>)
 8007048:	68aa      	ldr	r2, [r5, #8]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4908      	ldr	r1, [pc, #32]	; (8007070 <expand_line_number+0x58>)
 800704e:	68d8      	ldr	r0, [r3, #12]
 8007050:	f004 fa56 	bl	800b500 <fprintf>
 8007054:	e7ec      	b.n	8007030 <expand_line_number+0x18>
  APPEND_AND_RETURN_LOG_OUTPUT(line_number_expansion);
 8007056:	a901      	add	r1, sp, #4
 8007058:	4620      	mov	r0, r4
 800705a:	f00e ff46 	bl	8015eea <rcutils_char_array_strcat>
 800705e:	e7e4      	b.n	800702a <expand_line_number+0x12>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	e7e6      	b.n	8007032 <expand_line_number+0x1a>
 8007064:	0801cda7 	.word	0x0801cda7
 8007068:	0801cdd3 	.word	0x0801cdd3
 800706c:	20000820 	.word	0x20000820
 8007070:	0801cdd7 	.word	0x0801cdd7

08007074 <rcutils_logging_initialize_with_allocator>:
{
 8007074:	b084      	sub	sp, #16
 8007076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!g_rcutils_logging_initialized) {
 800707a:	4f65      	ldr	r7, [pc, #404]	; (8007210 <rcutils_logging_initialize_with_allocator+0x19c>)
{
 800707c:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
  if (!g_rcutils_logging_initialized) {
 8007080:	783e      	ldrb	r6, [r7, #0]
{
 8007082:	f50d 6487 	add.w	r4, sp, #1080	; 0x438
 8007086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (!g_rcutils_logging_initialized) {
 800708a:	2e00      	cmp	r6, #0
 800708c:	f040 80be 	bne.w	800720c <rcutils_logging_initialize_with_allocator+0x198>
    if (!rcutils_allocator_is_valid(&allocator)) {
 8007090:	4620      	mov	r0, r4
 8007092:	f00b fe68 	bl	8012d66 <rcutils_allocator_is_valid>
 8007096:	4680      	mov	r8, r0
 8007098:	2800      	cmp	r0, #0
 800709a:	f000 80b5 	beq.w	8007208 <rcutils_logging_initialize_with_allocator+0x194>
    g_rcutils_logging_allocator = allocator;
 800709e:	f50d 6587 	add.w	r5, sp, #1080	; 0x438
 80070a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070a4:	4c5b      	ldr	r4, [pc, #364]	; (8007214 <rcutils_logging_initialize_with_allocator+0x1a0>)
    const char * line_buffered = NULL;
 80070a6:	9605      	str	r6, [sp, #20]
    g_rcutils_logging_allocator = allocator;
 80070a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070aa:	682b      	ldr	r3, [r5, #0]
    g_rcutils_logging_output_handler = &rcutils_logging_console_output_handler;
 80070ac:	4a5a      	ldr	r2, [pc, #360]	; (8007218 <rcutils_logging_initialize_with_allocator+0x1a4>)
    const char * ret_str = rcutils_get_env("RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED", &line_buffered);
 80070ae:	485b      	ldr	r0, [pc, #364]	; (800721c <rcutils_logging_initialize_with_allocator+0x1a8>)
    g_rcutils_logging_allocator = allocator;
 80070b0:	4625      	mov	r5, r4
 80070b2:	f845 3910 	str.w	r3, [r5], #-16
    g_rcutils_logging_output_handler = &rcutils_logging_console_output_handler;
 80070b6:	4b5a      	ldr	r3, [pc, #360]	; (8007220 <rcutils_logging_initialize_with_allocator+0x1ac>)
 80070b8:	601a      	str	r2, [r3, #0]
    g_rcutils_logging_default_logger_level = RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL;
 80070ba:	2214      	movs	r2, #20
 80070bc:	4b59      	ldr	r3, [pc, #356]	; (8007224 <rcutils_logging_initialize_with_allocator+0x1b0>)
    const char * ret_str = rcutils_get_env("RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED", &line_buffered);
 80070be:	eb0d 0102 	add.w	r1, sp, r2
    g_rcutils_logging_default_logger_level = RCUTILS_DEFAULT_LOGGER_DEFAULT_LEVEL;
 80070c2:	601a      	str	r2, [r3, #0]
    const char * ret_str = rcutils_get_env("RCUTILS_CONSOLE_STDOUT_LINE_BUFFERED", &line_buffered);
 80070c4:	f003 f8aa 	bl	800a21c <rcutils_get_env>
    if (NULL == ret_str) {
 80070c8:	b138      	cbz	r0, 80070da <rcutils_logging_initialize_with_allocator+0x66>
        return RCUTILS_RET_ERROR;
 80070ca:	2402      	movs	r4, #2
}
 80070cc:	4620      	mov	r0, r4
 80070ce:	f50d 6d83 	add.w	sp, sp, #1048	; 0x418
 80070d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d6:	b004      	add	sp, #16
 80070d8:	4770      	bx	lr
      if (strcmp(line_buffered, "") != 0) {
 80070da:	4953      	ldr	r1, [pc, #332]	; (8007228 <rcutils_logging_initialize_with_allocator+0x1b4>)
 80070dc:	9805      	ldr	r0, [sp, #20]
 80070de:	f7f9 f8e3 	bl	80002a8 <strcmp>
 80070e2:	b128      	cbz	r0, 80070f0 <rcutils_logging_initialize_with_allocator+0x7c>
          stderr,
 80070e4:	4b51      	ldr	r3, [pc, #324]	; (800722c <rcutils_logging_initialize_with_allocator+0x1b8>)
        fprintf(
 80070e6:	4952      	ldr	r1, [pc, #328]	; (8007230 <rcutils_logging_initialize_with_allocator+0x1bc>)
          stderr,
 80070e8:	681b      	ldr	r3, [r3, #0]
        fprintf(
 80070ea:	68d8      	ldr	r0, [r3, #12]
 80070ec:	f004 fa08 	bl	800b500 <fprintf>
    enum rcutils_get_env_retval retval = rcutils_get_env_var_zero_or_one(
 80070f0:	4850      	ldr	r0, [pc, #320]	; (8007234 <rcutils_logging_initialize_with_allocator+0x1c0>)
 80070f2:	f7ff ff69 	bl	8006fc8 <rcutils_get_env_var_zero_or_one.isra.0>
    switch (retval) {
 80070f6:	3001      	adds	r0, #1
 80070f8:	2803      	cmp	r0, #3
 80070fa:	d8e6      	bhi.n	80070ca <rcutils_logging_initialize_with_allocator+0x56>
 80070fc:	e8df f000 	tbb	[pc, r0]
 8007100:	02250284 	.word	0x02250284
        g_output_stream = stderr;
 8007104:	4b49      	ldr	r3, [pc, #292]	; (800722c <rcutils_logging_initialize_with_allocator+0x1b8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
        g_output_stream = stdout;
 800710a:	4b4b      	ldr	r3, [pc, #300]	; (8007238 <rcutils_logging_initialize_with_allocator+0x1c4>)
    retval = rcutils_get_env_var_zero_or_one(
 800710c:	484b      	ldr	r0, [pc, #300]	; (800723c <rcutils_logging_initialize_with_allocator+0x1c8>)
        g_output_stream = stdout;
 800710e:	601a      	str	r2, [r3, #0]
    retval = rcutils_get_env_var_zero_or_one(
 8007110:	f7ff ff5a 	bl	8006fc8 <rcutils_get_env_var_zero_or_one.isra.0>
    if (RCUTILS_GET_ENV_ERROR == retval) {
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d077      	beq.n	8007208 <rcutils_logging_initialize_with_allocator+0x194>
    if (RCUTILS_GET_ENV_ZERO == retval || RCUTILS_GET_ENV_ONE == retval) {
 8007118:	b2c3      	uxtb	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d81f      	bhi.n	800715e <rcutils_logging_initialize_with_allocator+0xea>
      int mode = retval == RCUTILS_GET_ENV_ZERO ? _IONBF : _IOLBF;
 800711e:	2800      	cmp	r0, #0
      if (setvbuf(g_output_stream, NULL, mode, buffer_size) != 0) {
 8007120:	4845      	ldr	r0, [pc, #276]	; (8007238 <rcutils_logging_initialize_with_allocator+0x1c4>)
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	bf0c      	ite	eq
 8007128:	2202      	moveq	r2, #2
 800712a:	2201      	movne	r2, #1
 800712c:	6800      	ldr	r0, [r0, #0]
 800712e:	4619      	mov	r1, r3
 8007130:	f005 fa68 	bl	800c604 <setvbuf>
 8007134:	b968      	cbnz	r0, 8007152 <rcutils_logging_initialize_with_allocator+0xde>
    retval = rcutils_get_env_var_zero_or_one(
 8007136:	4842      	ldr	r0, [pc, #264]	; (8007240 <rcutils_logging_initialize_with_allocator+0x1cc>)
 8007138:	f7ff ff46 	bl	8006fc8 <rcutils_get_env_var_zero_or_one.isra.0>
    switch (retval) {
 800713c:	3001      	adds	r0, #1
 800713e:	2803      	cmp	r0, #3
 8007140:	d8c3      	bhi.n	80070ca <rcutils_logging_initialize_with_allocator+0x56>
 8007142:	e8df f000 	tbb	[pc, r0]
 8007146:	4f61      	.short	0x4f61
 8007148:	0f52      	.short	0x0f52
        g_output_stream = stdout;
 800714a:	4b38      	ldr	r3, [pc, #224]	; (800722c <rcutils_logging_initialize_with_allocator+0x1b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	e7db      	b.n	800710a <rcutils_logging_initialize_with_allocator+0x96>
        rcutils_strerror(error_string, sizeof(error_string));
 8007152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007156:	a806      	add	r0, sp, #24
 8007158:	f000 fb40 	bl	80077dc <rcutils_strerror>
 800715c:	e7b5      	b.n	80070ca <rcutils_logging_initialize_with_allocator+0x56>
    } else if (RCUTILS_GET_ENV_EMPTY != retval) {
 800715e:	2802      	cmp	r0, #2
 8007160:	d1b3      	bne.n	80070ca <rcutils_logging_initialize_with_allocator+0x56>
 8007162:	e7e8      	b.n	8007136 <rcutils_logging_initialize_with_allocator+0xc2>
        g_colorized_output = RCUTILS_COLORIZED_OUTPUT_AUTO;
 8007164:	4b37      	ldr	r3, [pc, #220]	; (8007244 <rcutils_logging_initialize_with_allocator+0x1d0>)
 8007166:	2202      	movs	r2, #2
    ret_str = rcutils_get_env("RCUTILS_CONSOLE_OUTPUT_FORMAT", &output_format);
 8007168:	4837      	ldr	r0, [pc, #220]	; (8007248 <rcutils_logging_initialize_with_allocator+0x1d4>)
        g_colorized_output = RCUTILS_COLORIZED_OUTPUT_FORCE_ENABLE;
 800716a:	701a      	strb	r2, [r3, #0]
    ret_str = rcutils_get_env("RCUTILS_CONSOLE_OUTPUT_FORMAT", &output_format);
 800716c:	a906      	add	r1, sp, #24
 800716e:	f003 f855 	bl	800a21c <rcutils_get_env>
    if (NULL == ret_str && strcmp(output_format, "") != 0) {
 8007172:	4681      	mov	r9, r0
 8007174:	2800      	cmp	r0, #0
 8007176:	d13b      	bne.n	80071f0 <rcutils_logging_initialize_with_allocator+0x17c>
 8007178:	492b      	ldr	r1, [pc, #172]	; (8007228 <rcutils_logging_initialize_with_allocator+0x1b4>)
 800717a:	9806      	ldr	r0, [sp, #24]
 800717c:	f7f9 f894 	bl	80002a8 <strcmp>
 8007180:	4604      	mov	r4, r0
 8007182:	b3b0      	cbz	r0, 80071f2 <rcutils_logging_initialize_with_allocator+0x17e>
      size_t chars_to_copy = strlen(output_format);
 8007184:	9806      	ldr	r0, [sp, #24]
      memcpy(g_rcutils_logging_output_format_string, output_format, chars_to_copy);
 8007186:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8007258 <rcutils_logging_initialize_with_allocator+0x1e4>
      size_t chars_to_copy = strlen(output_format);
 800718a:	f7f9 f819 	bl	80001c0 <strlen>
      if (chars_to_copy > RCUTILS_LOGGING_MAX_OUTPUT_FORMAT_LEN - 1) {
 800718e:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8007192:	4284      	cmp	r4, r0
 8007194:	bf28      	it	cs
 8007196:	4604      	movcs	r4, r0
      memcpy(g_rcutils_logging_output_format_string, output_format, chars_to_copy);
 8007198:	4622      	mov	r2, r4
 800719a:	9906      	ldr	r1, [sp, #24]
 800719c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071a0:	4650      	mov	r0, sl
 80071a2:	f010 fab1 	bl	8017708 <__memcpy_chk>
      g_rcutils_logging_output_format_string[chars_to_copy] = '\0';
 80071a6:	f80a 9004 	strb.w	r9, [sl, r4]
  rcutils_ret_t ret = RCUTILS_RET_OK;
 80071aa:	464c      	mov	r4, r9
    g_rcutils_logging_severities_map = rcutils_get_zero_initialized_string_map();
 80071ac:	f000 fb2e 	bl	800780c <rcutils_get_zero_initialized_string_map>
 80071b0:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800725c <rcutils_logging_initialize_with_allocator+0x1e8>
    rcutils_ret_t string_map_ret = rcutils_string_map_init(
 80071b4:	4b25      	ldr	r3, [pc, #148]	; (800724c <rcutils_logging_initialize_with_allocator+0x1d8>)
    g_rcutils_logging_severities_map = rcutils_get_zero_initialized_string_map();
 80071b6:	f8cc 0000 	str.w	r0, [ip]
    rcutils_ret_t string_map_ret = rcutils_string_map_init(
 80071ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80071c2:	2100      	movs	r1, #0
 80071c4:	e895 000c 	ldmia.w	r5, {r2, r3}
 80071c8:	4660      	mov	r0, ip
 80071ca:	f00b ff33 	bl	8013034 <rcutils_string_map_init>
    if (string_map_ret != RCUTILS_RET_OK) {
 80071ce:	4b20      	ldr	r3, [pc, #128]	; (8007250 <rcutils_logging_initialize_with_allocator+0x1dc>)
      g_rcutils_logging_severities_map_valid = true;
 80071d0:	2800      	cmp	r0, #0
 80071d2:	bf08      	it	eq
 80071d4:	4646      	moveq	r6, r8
 80071d6:	701e      	strb	r6, [r3, #0]
    g_rcutils_logging_initialized = true;
 80071d8:	f04f 0301 	mov.w	r3, #1
      g_rcutils_logging_severities_map_valid = true;
 80071dc:	bf18      	it	ne
 80071de:	241f      	movne	r4, #31
    g_rcutils_logging_initialized = true;
 80071e0:	703b      	strb	r3, [r7, #0]
 80071e2:	e773      	b.n	80070cc <rcutils_logging_initialize_with_allocator+0x58>
        g_colorized_output = RCUTILS_COLORIZED_OUTPUT_FORCE_DISABLE;
 80071e4:	4b17      	ldr	r3, [pc, #92]	; (8007244 <rcutils_logging_initialize_with_allocator+0x1d0>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	e7be      	b.n	8007168 <rcutils_logging_initialize_with_allocator+0xf4>
        g_colorized_output = RCUTILS_COLORIZED_OUTPUT_FORCE_ENABLE;
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <rcutils_logging_initialize_with_allocator+0x1d0>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	e7bb      	b.n	8007168 <rcutils_logging_initialize_with_allocator+0xf4>
        ret = RCUTILS_RET_INVALID_ARGUMENT;
 80071f0:	240b      	movs	r4, #11
      memcpy(
 80071f2:	4818      	ldr	r0, [pc, #96]	; (8007254 <rcutils_logging_initialize_with_allocator+0x1e0>)
 80071f4:	f7f8 ffe4 	bl	80001c0 <strlen>
 80071f8:	4916      	ldr	r1, [pc, #88]	; (8007254 <rcutils_logging_initialize_with_allocator+0x1e0>)
 80071fa:	1c42      	adds	r2, r0, #1
 80071fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007200:	4815      	ldr	r0, [pc, #84]	; (8007258 <rcutils_logging_initialize_with_allocator+0x1e4>)
 8007202:	f010 fa81 	bl	8017708 <__memcpy_chk>
 8007206:	e7d1      	b.n	80071ac <rcutils_logging_initialize_with_allocator+0x138>
      return RCUTILS_RET_INVALID_ARGUMENT;
 8007208:	240b      	movs	r4, #11
 800720a:	e75f      	b.n	80070cc <rcutils_logging_initialize_with_allocator+0x58>
  rcutils_ret_t ret = RCUTILS_RET_OK;
 800720c:	2400      	movs	r4, #0
 800720e:	e75d      	b.n	80070cc <rcutils_logging_initialize_with_allocator+0x58>
 8007210:	2000461a 	.word	0x2000461a
 8007214:	2000403c 	.word	0x2000403c
 8007218:	080075c9 	.word	0x080075c9
 800721c:	0801cdfc 	.word	0x0801cdfc
 8007220:	20004054 	.word	0x20004054
 8007224:	20004050 	.word	0x20004050
 8007228:	0801d00d 	.word	0x0801d00d
 800722c:	20000820 	.word	0x20000820
 8007230:	0801ce21 	.word	0x0801ce21
 8007234:	0801cedb 	.word	0x0801cedb
 8007238:	20004038 	.word	0x20004038
 800723c:	0801cef6 	.word	0x0801cef6
 8007240:	0801cf16 	.word	0x0801cf16
 8007244:	20000da4 	.word	0x20000da4
 8007248:	0801cf2f 	.word	0x0801cf2f
 800724c:	20004044 	.word	0x20004044
 8007250:	20004e1b 	.word	0x20004e1b
 8007254:	0801cf4d 	.word	0x0801cf4d
 8007258:	2000461b 	.word	0x2000461b
 800725c:	20004058 	.word	0x20004058

08007260 <rcutils_logging_severity_level_from_string>:
{
 8007260:	b084      	sub	sp, #16
 8007262:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007266:	ac09      	add	r4, sp, #36	; 0x24
 8007268:	4605      	mov	r5, r0
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 800726a:	4620      	mov	r0, r4
{
 800726c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8007270:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 8007272:	f00b fd78 	bl	8012d66 <rcutils_allocator_is_valid>
 8007276:	b398      	cbz	r0, 80072e0 <rcutils_logging_severity_level_from_string+0x80>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(severity_string, RCUTILS_RET_INVALID_ARGUMENT);
 8007278:	b395      	cbz	r5, 80072e0 <rcutils_logging_severity_level_from_string+0x80>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(severity, RCUTILS_RET_INVALID_ARGUMENT);
 800727a:	b38f      	cbz	r7, 80072e0 <rcutils_logging_severity_level_from_string+0x80>
  char * severity_string_upper = rcutils_strdup(severity_string, allocator);
 800727c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007280:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007284:	4628      	mov	r0, r5
 8007286:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800728a:	f00b fe26 	bl	8012eda <rcutils_strdup>
  if (NULL == severity_string_upper) {
 800728e:	4606      	mov	r6, r0
 8007290:	b340      	cbz	r0, 80072e4 <rcutils_logging_severity_level_from_string+0x84>
    severity_string_upper[i] = (char)toupper(severity_string_upper[i]);
 8007292:	4915      	ldr	r1, [pc, #84]	; (80072e8 <rcutils_logging_severity_level_from_string+0x88>)
 8007294:	1e43      	subs	r3, r0, #1
  for (int i = 0; severity_string_upper[i]; ++i) {
 8007296:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800729a:	b9a4      	cbnz	r4, 80072c6 <rcutils_logging_severity_level_from_string+0x66>
 800729c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80072ec <rcutils_logging_severity_level_from_string+0x8c>
    const char * severity_string_i = g_rcutils_log_severity_names[i];
 80072a0:	f858 0b04 	ldr.w	r0, [r8], #4
    if (severity_string_i && strcmp(severity_string_i, severity_string_upper) == 0) {
 80072a4:	b1b8      	cbz	r0, 80072d6 <rcutils_logging_severity_level_from_string+0x76>
 80072a6:	4631      	mov	r1, r6
 80072a8:	f7f8 fffe 	bl	80002a8 <strcmp>
 80072ac:	4605      	mov	r5, r0
 80072ae:	b990      	cbnz	r0, 80072d6 <rcutils_logging_severity_level_from_string+0x76>
      *severity = (enum RCUTILS_LOG_SEVERITY)i;
 80072b0:	603c      	str	r4, [r7, #0]
  allocator.deallocate(severity_string_upper, allocator.state);
 80072b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b6:	4630      	mov	r0, r6
 80072b8:	4798      	blx	r3
}
 80072ba:	4628      	mov	r0, r5
 80072bc:	b002      	add	sp, #8
 80072be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	b004      	add	sp, #16
 80072c4:	4770      	bx	lr
    severity_string_upper[i] = (char)toupper(severity_string_upper[i]);
 80072c6:	5d0a      	ldrb	r2, [r1, r4]
 80072c8:	f002 0203 	and.w	r2, r2, #3
 80072cc:	2a02      	cmp	r2, #2
 80072ce:	bf08      	it	eq
 80072d0:	3c20      	subeq	r4, #32
 80072d2:	701c      	strb	r4, [r3, #0]
  for (int i = 0; severity_string_upper[i]; ++i) {
 80072d4:	e7df      	b.n	8007296 <rcutils_logging_severity_level_from_string+0x36>
    ++i)
 80072d6:	3401      	adds	r4, #1
  for (size_t i = 0;
 80072d8:	2c33      	cmp	r4, #51	; 0x33
 80072da:	d1e1      	bne.n	80072a0 <rcutils_logging_severity_level_from_string+0x40>
  rcutils_ret_t ret = RCUTILS_RET_LOGGING_SEVERITY_STRING_INVALID;
 80072dc:	2529      	movs	r5, #41	; 0x29
 80072de:	e7e8      	b.n	80072b2 <rcutils_logging_severity_level_from_string+0x52>
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 80072e0:	250b      	movs	r5, #11
 80072e2:	e7ea      	b.n	80072ba <rcutils_logging_severity_level_from_string+0x5a>
    return RCUTILS_RET_BAD_ALLOC;
 80072e4:	250a      	movs	r5, #10
 80072e6:	e7e8      	b.n	80072ba <rcutils_logging_severity_level_from_string+0x5a>
 80072e8:	0801bb81 	.word	0x0801bb81
 80072ec:	0801b9f0 	.word	0x0801b9f0

080072f0 <rcutils_logging_get_logger_leveln>:
{
 80072f0:	b570      	push	{r4, r5, r6, lr}
  RCUTILS_LOGGING_AUTOINIT
 80072f2:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <rcutils_logging_get_logger_leveln+0x78>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
{
 80072f6:	b086      	sub	sp, #24
 80072f8:	4605      	mov	r5, r0
 80072fa:	460e      	mov	r6, r1
  RCUTILS_LOGGING_AUTOINIT
 80072fc:	b923      	cbnz	r3, 8007308 <rcutils_logging_get_logger_leveln+0x18>
 80072fe:	f00b fd8d 	bl	8012e1c <rcutils_logging_initialize>
 8007302:	b108      	cbz	r0, 8007308 <rcutils_logging_get_logger_leveln+0x18>
 8007304:	f7ff fe30 	bl	8006f68 <rcutils_reset_error>
  if (NULL == name) {
 8007308:	b34d      	cbz	r5, 800735e <rcutils_logging_get_logger_leveln+0x6e>
  if (0 == name_length) {
 800730a:	b91e      	cbnz	r6, 8007314 <rcutils_logging_get_logger_leveln+0x24>
    return g_rcutils_logging_default_logger_level;
 800730c:	4b17      	ldr	r3, [pc, #92]	; (800736c <rcutils_logging_get_logger_leveln+0x7c>)
 800730e:	6818      	ldr	r0, [r3, #0]
}
 8007310:	b006      	add	sp, #24
 8007312:	bd70      	pop	{r4, r5, r6, pc}
  if (!g_rcutils_logging_severities_map_valid) {
 8007314:	4b16      	ldr	r3, [pc, #88]	; (8007370 <rcutils_logging_get_logger_leveln+0x80>)
 8007316:	7818      	ldrb	r0, [r3, #0]
 8007318:	2800      	cmp	r0, #0
 800731a:	d0f9      	beq.n	8007310 <rcutils_logging_get_logger_leveln+0x20>
  const char * severity_string = rcutils_string_map_getn(
 800731c:	4815      	ldr	r0, [pc, #84]	; (8007374 <rcutils_logging_get_logger_leveln+0x84>)
 800731e:	4632      	mov	r2, r6
 8007320:	4629      	mov	r1, r5
 8007322:	f00b fefd 	bl	8013120 <rcutils_string_map_getn>
  if (NULL == severity_string) {
 8007326:	4604      	mov	r4, r0
 8007328:	b930      	cbnz	r0, 8007338 <rcutils_logging_get_logger_leveln+0x48>
    if (rcutils_string_map_key_existsn(&g_rcutils_logging_severities_map, name, name_length)) {
 800732a:	4812      	ldr	r0, [pc, #72]	; (8007374 <rcutils_logging_get_logger_leveln+0x84>)
 800732c:	4632      	mov	r2, r6
 800732e:	4629      	mov	r1, r5
 8007330:	f00b fee9 	bl	8013106 <rcutils_string_map_key_existsn>
 8007334:	4240      	negs	r0, r0
 8007336:	e7eb      	b.n	8007310 <rcutils_logging_get_logger_leveln+0x20>
  rcutils_ret_t ret = rcutils_logging_severity_level_from_string(
 8007338:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <rcutils_logging_get_logger_leveln+0x88>)
 800733a:	aa05      	add	r2, sp, #20
 800733c:	9202      	str	r2, [sp, #8]
 800733e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 8007342:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007346:	4620      	mov	r0, r4
 8007348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800734a:	f7ff ff89 	bl	8007260 <rcutils_logging_severity_level_from_string>
  if (RCUTILS_RET_OK != ret) {
 800734e:	b148      	cbz	r0, 8007364 <rcutils_logging_get_logger_leveln+0x74>
      stderr,
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <rcutils_logging_get_logger_leveln+0x8c>)
    fprintf(
 8007352:	490b      	ldr	r1, [pc, #44]	; (8007380 <rcutils_logging_get_logger_leveln+0x90>)
      stderr,
 8007354:	681b      	ldr	r3, [r3, #0]
    fprintf(
 8007356:	4622      	mov	r2, r4
 8007358:	68d8      	ldr	r0, [r3, #12]
 800735a:	f004 f8d1 	bl	800b500 <fprintf>
    return -1;
 800735e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007362:	e7d5      	b.n	8007310 <rcutils_logging_get_logger_leveln+0x20>
  return severity;
 8007364:	9805      	ldr	r0, [sp, #20]
 8007366:	e7d3      	b.n	8007310 <rcutils_logging_get_logger_leveln+0x20>
 8007368:	2000461a 	.word	0x2000461a
 800736c:	20004050 	.word	0x20004050
 8007370:	20004e1b 	.word	0x20004e1b
 8007374:	20004058 	.word	0x20004058
 8007378:	2000403c 	.word	0x2000403c
 800737c:	20000820 	.word	0x20000820
 8007380:	0801cf77 	.word	0x0801cf77

08007384 <rcutils_logging_get_logger_effective_level>:
  RCUTILS_LOGGING_AUTOINIT
 8007384:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <rcutils_logging_get_logger_effective_level+0x60>)
 8007386:	781b      	ldrb	r3, [r3, #0]
{
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	4606      	mov	r6, r0
  RCUTILS_LOGGING_AUTOINIT
 800738c:	b923      	cbnz	r3, 8007398 <rcutils_logging_get_logger_effective_level+0x14>
 800738e:	f00b fd45 	bl	8012e1c <rcutils_logging_initialize>
 8007392:	b108      	cbz	r0, 8007398 <rcutils_logging_get_logger_effective_level+0x14>
 8007394:	f7ff fde8 	bl	8006f68 <rcutils_reset_error>
  if (NULL == name) {
 8007398:	b306      	cbz	r6, 80073dc <rcutils_logging_get_logger_effective_level+0x58>
  size_t substring_length = strlen(name);
 800739a:	4630      	mov	r0, r6
 800739c:	f7f8 ff10 	bl	80001c0 <strlen>
 80073a0:	4604      	mov	r4, r0
    int severity = rcutils_logging_get_logger_leveln(name, substring_length);
 80073a2:	4621      	mov	r1, r4
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff ffa3 	bl	80072f0 <rcutils_logging_get_logger_leveln>
    if (-1 == severity) {
 80073aa:	1c42      	adds	r2, r0, #1
    int severity = rcutils_logging_get_logger_leveln(name, substring_length);
 80073ac:	4605      	mov	r5, r0
    if (-1 == severity) {
 80073ae:	d108      	bne.n	80073c2 <rcutils_logging_get_logger_effective_level+0x3e>
        stderr,
 80073b0:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <rcutils_logging_get_logger_effective_level+0x64>)
      fprintf(
 80073b2:	490e      	ldr	r1, [pc, #56]	; (80073ec <rcutils_logging_get_logger_effective_level+0x68>)
        stderr,
 80073b4:	681b      	ldr	r3, [r3, #0]
      fprintf(
 80073b6:	4632      	mov	r2, r6
 80073b8:	68d8      	ldr	r0, [r3, #12]
 80073ba:	f004 f8a1 	bl	800b500 <fprintf>
}
 80073be:	4628      	mov	r0, r5
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
    if (severity != RCUTILS_LOG_SEVERITY_UNSET) {
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d1fb      	bne.n	80073be <rcutils_logging_get_logger_effective_level+0x3a>
    size_t index_last_separator = rcutils_find_lastn(
 80073c6:	4622      	mov	r2, r4
 80073c8:	212e      	movs	r1, #46	; 0x2e
 80073ca:	4630      	mov	r0, r6
 80073cc:	f00e fdbe 	bl	8015f4c <rcutils_find_lastn>
    if (SIZE_MAX == index_last_separator) {
 80073d0:	1c43      	adds	r3, r0, #1
    size_t index_last_separator = rcutils_find_lastn(
 80073d2:	4604      	mov	r4, r0
    if (SIZE_MAX == index_last_separator) {
 80073d4:	d1e5      	bne.n	80073a2 <rcutils_logging_get_logger_effective_level+0x1e>
  return g_rcutils_logging_default_logger_level;
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <rcutils_logging_get_logger_effective_level+0x6c>)
 80073d8:	681d      	ldr	r5, [r3, #0]
 80073da:	e7f0      	b.n	80073be <rcutils_logging_get_logger_effective_level+0x3a>
    return -1;
 80073dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073e0:	e7ed      	b.n	80073be <rcutils_logging_get_logger_effective_level+0x3a>
 80073e2:	bf00      	nop
 80073e4:	2000461a 	.word	0x2000461a
 80073e8:	20000820 	.word	0x20000820
 80073ec:	0801cfa1 	.word	0x0801cfa1
 80073f0:	20004050 	.word	0x20004050

080073f4 <rcutils_logging_logger_is_enabled_for>:
{
 80073f4:	b538      	push	{r3, r4, r5, lr}
  RCUTILS_LOGGING_AUTOINIT
 80073f6:	4b10      	ldr	r3, [pc, #64]	; (8007438 <rcutils_logging_logger_is_enabled_for+0x44>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
{
 80073fa:	4604      	mov	r4, r0
 80073fc:	460d      	mov	r5, r1
  RCUTILS_LOGGING_AUTOINIT
 80073fe:	b923      	cbnz	r3, 800740a <rcutils_logging_logger_is_enabled_for+0x16>
 8007400:	f00b fd0c 	bl	8012e1c <rcutils_logging_initialize>
 8007404:	b108      	cbz	r0, 800740a <rcutils_logging_logger_is_enabled_for+0x16>
 8007406:	f7ff fdaf 	bl	8006f68 <rcutils_reset_error>
  if (name) {
 800740a:	b174      	cbz	r4, 800742a <rcutils_logging_logger_is_enabled_for+0x36>
    logger_level = rcutils_logging_get_logger_effective_level(name);
 800740c:	4620      	mov	r0, r4
 800740e:	f7ff ffb9 	bl	8007384 <rcutils_logging_get_logger_effective_level>
    if (-1 == logger_level) {
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d10b      	bne.n	800742e <rcutils_logging_logger_is_enabled_for+0x3a>
        stderr,
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <rcutils_logging_logger_is_enabled_for+0x48>)
      fprintf(
 8007418:	4909      	ldr	r1, [pc, #36]	; (8007440 <rcutils_logging_logger_is_enabled_for+0x4c>)
        stderr,
 800741a:	6818      	ldr	r0, [r3, #0]
      fprintf(
 800741c:	4622      	mov	r2, r4
 800741e:	68c0      	ldr	r0, [r0, #12]
 8007420:	462b      	mov	r3, r5
 8007422:	f004 f86d 	bl	800b500 <fprintf>
 8007426:	2000      	movs	r0, #0
}
 8007428:	bd38      	pop	{r3, r4, r5, pc}
  int logger_level = g_rcutils_logging_default_logger_level;
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <rcutils_logging_logger_is_enabled_for+0x50>)
 800742c:	6818      	ldr	r0, [r3, #0]
  return severity >= logger_level;
 800742e:	42a8      	cmp	r0, r5
 8007430:	bfcc      	ite	gt
 8007432:	2000      	movgt	r0, #0
 8007434:	2001      	movle	r0, #1
 8007436:	e7f7      	b.n	8007428 <rcutils_logging_logger_is_enabled_for+0x34>
 8007438:	2000461a 	.word	0x2000461a
 800743c:	20000820 	.word	0x20000820
 8007440:	0801cfcf 	.word	0x0801cfcf
 8007444:	20004050 	.word	0x20004050

08007448 <rcutils_log>:
{
 8007448:	b408      	push	{r3}
 800744a:	b570      	push	{r4, r5, r6, lr}
 800744c:	4605      	mov	r5, r0
 800744e:	b089      	sub	sp, #36	; 0x24
  if (!rcutils_logging_logger_is_enabled_for(name, severity)) {
 8007450:	4610      	mov	r0, r2
{
 8007452:	460e      	mov	r6, r1
 8007454:	4614      	mov	r4, r2
  if (!rcutils_logging_logger_is_enabled_for(name, severity)) {
 8007456:	f7ff ffcd 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800745a:	b1b8      	cbz	r0, 800748c <rcutils_log+0x44>
  rcutils_ret_t ret = rcutils_system_time_now(&now);
 800745c:	a806      	add	r0, sp, #24
 800745e:	f000 f9f5 	bl	800784c <rcutils_system_time_now>
  if (ret != RCUTILS_RET_OK) {
 8007462:	b998      	cbnz	r0, 800748c <rcutils_log+0x44>
  rcutils_logging_output_handler_t output_handler = g_rcutils_logging_output_handler;
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <rcutils_log+0x50>)
 8007466:	681b      	ldr	r3, [r3, #0]
  if (output_handler != NULL) {
 8007468:	b183      	cbz	r3, 800748c <rcutils_log+0x44>
    va_start(args, format);
 800746a:	aa0e      	add	r2, sp, #56	; 0x38
 800746c:	9205      	str	r2, [sp, #20]
    (*output_handler)(location, severity, name ? name : "", now, format, &args);
 800746e:	aa05      	add	r2, sp, #20
 8007470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007474:	9203      	str	r2, [sp, #12]
 8007476:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007478:	9202      	str	r2, [sp, #8]
 800747a:	4a08      	ldr	r2, [pc, #32]	; (800749c <rcutils_log+0x54>)
 800747c:	e9cd 0100 	strd	r0, r1, [sp]
 8007480:	2c00      	cmp	r4, #0
 8007482:	bf18      	it	ne
 8007484:	4622      	movne	r2, r4
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	4798      	blx	r3
}
 800748c:	b009      	add	sp, #36	; 0x24
 800748e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007492:	b001      	add	sp, #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20004054 	.word	0x20004054
 800749c:	0801d00d 	.word	0x0801d00d

080074a0 <expand_time_as_seconds>:
  return expand_time(logging_input, logging_output, rcutils_time_point_value_as_seconds_string);
 80074a0:	4a01      	ldr	r2, [pc, #4]	; (80074a8 <expand_time_as_seconds+0x8>)
 80074a2:	f00b bcc9 	b.w	8012e38 <expand_time>
 80074a6:	bf00      	nop
 80074a8:	08001c49 	.word	0x08001c49

080074ac <expand_time_as_nanoseconds>:
  return expand_time(logging_input, logging_output, rcutils_time_point_value_as_nanoseconds_string);
 80074ac:	4a01      	ldr	r2, [pc, #4]	; (80074b4 <expand_time_as_nanoseconds+0x8>)
 80074ae:	f00b bcc3 	b.w	8012e38 <expand_time>
 80074b2:	bf00      	nop
 80074b4:	08007819 	.word	0x08007819

080074b8 <find_token_handler>:
  {.token = "time_as_nanoseconds", .handler = expand_time_as_nanoseconds},
  {.token = "line_number", .handler = expand_line_number},
};

token_handler find_token_handler(const char * token)
{
 80074b8:	b570      	push	{r4, r5, r6, lr}
  int token_number = sizeof(tokens) / sizeof(tokens[0]);
  for (int token_index = 0; token_index < token_number; token_index++) {
    if (strcmp(token, tokens[token_index].token) == 0) {
 80074ba:	4d09      	ldr	r5, [pc, #36]	; (80074e0 <find_token_handler+0x28>)
{
 80074bc:	4606      	mov	r6, r0
  for (int token_index = 0; token_index < token_number; token_index++) {
 80074be:	2400      	movs	r4, #0
    if (strcmp(token, tokens[token_index].token) == 0) {
 80074c0:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7f8 feef 	bl	80002a8 <strcmp>
 80074ca:	b918      	cbnz	r0, 80074d4 <find_token_handler+0x1c>
      return tokens[token_index].handler;
 80074cc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80074d0:	6860      	ldr	r0, [r4, #4]
    }
  }
  return NULL;
}
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
  for (int token_index = 0; token_index < token_number; token_index++) {
 80074d4:	3401      	adds	r4, #1
 80074d6:	2c08      	cmp	r4, #8
 80074d8:	d1f2      	bne.n	80074c0 <find_token_handler+0x8>
  return NULL;
 80074da:	2000      	movs	r0, #0
 80074dc:	e7f9      	b.n	80074d2 <find_token_handler+0x1a>
 80074de:	bf00      	nop
 80074e0:	0801babc 	.word	0x0801babc

080074e4 <rcutils_logging_format_message>:

rcutils_ret_t rcutils_logging_format_message(
  const rcutils_log_location_t * location,
  int severity, const char * name, rcutils_time_point_value_t timestamp,
  const char * msg, rcutils_char_array_t * logging_output)
{
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80074ec:	4605      	mov	r5, r0
  // Process the format string looking for known tokens.
  const char token_start_delimiter = '{';
  const char token_end_delimiter = '}';

  const char * str = g_rcutils_logging_output_format_string;
  size_t size = strlen(g_rcutils_logging_output_format_string);
 80074ee:	4835      	ldr	r0, [pc, #212]	; (80075c4 <rcutils_logging_format_message+0xe0>)
{
 80074f0:	f8dd 784c 	ldr.w	r7, [sp, #2124]	; 0x84c
 80074f4:	4690      	mov	r8, r2
 80074f6:	460c      	mov	r4, r1
  size_t size = strlen(g_rcutils_logging_output_format_string);
 80074f8:	f7f8 fe62 	bl	80001c0 <strlen>

  const logging_input logging_input = {
 80074fc:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8007500:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007504:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007510:	e9cd 8500 	strd	r8, r5, [sp]

  // Walk through the format string and expand tokens when they're encountered.
  size_t i = 0;
  while (i < size) {
    // Print everything up to the next token start delimiter.
    size_t chars_to_start_delim = rcutils_find(str + i, token_start_delimiter);
 8007514:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80075c4 <rcutils_logging_format_message+0xe0>
  size_t size = strlen(g_rcutils_logging_output_format_string);
 8007518:	4606      	mov	r6, r0
  size_t i = 0;
 800751a:	2400      	movs	r4, #0
  while (i < size) {
 800751c:	42b4      	cmp	r4, r6
 800751e:	d301      	bcc.n	8007524 <rcutils_logging_format_message+0x40>
 8007520:	2000      	movs	r0, #0
 8007522:	e022      	b.n	800756a <rcutils_logging_format_message+0x86>
    size_t chars_to_start_delim = rcutils_find(str + i, token_start_delimiter);
 8007524:	eb08 0904 	add.w	r9, r8, r4
 8007528:	217b      	movs	r1, #123	; 0x7b
 800752a:	4648      	mov	r0, r9
 800752c:	f00e fcfa 	bl	8015f24 <rcutils_find>
    size_t remaining_chars = size - i;

    if (chars_to_start_delim > 0) {  // there are stuff before a token start delimiter
 8007530:	b160      	cbz	r0, 800754c <rcutils_logging_format_message+0x68>
    size_t remaining_chars = size - i;
 8007532:	1b35      	subs	r5, r6, r4
      size_t chars_to_copy = chars_to_start_delim >
 8007534:	4285      	cmp	r5, r0
 8007536:	bf28      	it	cs
 8007538:	4605      	movcs	r5, r0
        remaining_chars ? remaining_chars : chars_to_start_delim;
      status = rcutils_char_array_strncat(logging_output, str + i, chars_to_copy);
 800753a:	462a      	mov	r2, r5
 800753c:	4649      	mov	r1, r9
 800753e:	4638      	mov	r0, r7
 8007540:	f00e fcba 	bl	8015eb8 <rcutils_char_array_strncat>
      OK_OR_RETURN_EARLY(status);
 8007544:	b988      	cbnz	r0, 800756a <rcutils_logging_format_message+0x86>
      i += chars_to_copy;
 8007546:	442c      	add	r4, r5
      if (i >= size) {  // perhaps no start delimiter was found
 8007548:	42a6      	cmp	r6, r4
 800754a:	d9e9      	bls.n	8007520 <rcutils_logging_format_message+0x3c>
    // We are at a token start delimiter: determine if there's a known token or not.
    // Potential tokens can't possibly be longer than the format string itself.
    char token[RCUTILS_LOGGING_MAX_OUTPUT_FORMAT_LEN];

    // Look for a token end delimiter.
    size_t chars_to_end_delim = rcutils_find(str + i, token_end_delimiter);
 800754c:	eb08 0a04 	add.w	sl, r8, r4
 8007550:	217d      	movs	r1, #125	; 0x7d
 8007552:	4650      	mov	r0, sl
 8007554:	f00e fce6 	bl	8015f24 <rcutils_find>
    remaining_chars = size - i;
 8007558:	1b32      	subs	r2, r6, r4

    if (chars_to_end_delim > remaining_chars) {
 800755a:	4290      	cmp	r0, r2
 800755c:	d909      	bls.n	8007572 <rcutils_logging_format_message+0x8e>
      // No end delimiters found in the remainder of the format string;
      // there won't be any more tokens so shortcut the rest of the checking.
      status = rcutils_char_array_strncat(logging_output, str + i, remaining_chars);
 800755e:	4651      	mov	r1, sl
 8007560:	4638      	mov	r0, r7
 8007562:	f00e fca9 	bl	8015eb8 <rcutils_char_array_strncat>
      OK_OR_RETURN_EARLY(status);
 8007566:	2800      	cmp	r0, #0
 8007568:	d0da      	beq.n	8007520 <rcutils_logging_format_message+0x3c>
    // Skip ahead to avoid re-processing the token characters (including the 2 delimiters).
    i += token_len + 2;
  }

  return status;
}
 800756a:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t token_len = chars_to_end_delim - 1;  // Not including delimiters.
 8007572:	1e45      	subs	r5, r0, #1
    memcpy(token, str + i + 1, token_len);  // Skip the start delimiter.
 8007574:	f10d 0b18 	add.w	fp, sp, #24
 8007578:	f104 0901 	add.w	r9, r4, #1
 800757c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007580:	462a      	mov	r2, r5
 8007582:	eb08 0109 	add.w	r1, r8, r9
 8007586:	4658      	mov	r0, fp
 8007588:	f010 f8be 	bl	8017708 <__memcpy_chk>
    token[token_len] = '\0';
 800758c:	2300      	movs	r3, #0
    token_handler expand_token = find_token_handler(token);
 800758e:	4658      	mov	r0, fp
    token[token_len] = '\0';
 8007590:	f80b 3005 	strb.w	r3, [fp, r5]
    token_handler expand_token = find_token_handler(token);
 8007594:	f7ff ff90 	bl	80074b8 <find_token_handler>
    if (!expand_token) {
 8007598:	4603      	mov	r3, r0
 800759a:	b940      	cbnz	r0, 80075ae <rcutils_logging_format_message+0xca>
      status = rcutils_char_array_strncat(logging_output, str + i, 1);
 800759c:	2201      	movs	r2, #1
 800759e:	4651      	mov	r1, sl
 80075a0:	4638      	mov	r0, r7
 80075a2:	f00e fc89 	bl	8015eb8 <rcutils_char_array_strncat>
      OK_OR_RETURN_EARLY(status);
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1df      	bne.n	800756a <rcutils_logging_format_message+0x86>
      return RCUTILS_RET_ERROR;
 80075aa:	464c      	mov	r4, r9
 80075ac:	e7b6      	b.n	800751c <rcutils_logging_format_message+0x38>
    if (!expand_token(&logging_input, logging_output)) {
 80075ae:	4639      	mov	r1, r7
 80075b0:	4668      	mov	r0, sp
 80075b2:	4798      	blx	r3
 80075b4:	b118      	cbz	r0, 80075be <rcutils_logging_format_message+0xda>
    i += token_len + 2;
 80075b6:	3402      	adds	r4, #2
 80075b8:	eb04 0905 	add.w	r9, r4, r5
 80075bc:	e7f5      	b.n	80075aa <rcutils_logging_format_message+0xc6>
      return RCUTILS_RET_ERROR;
 80075be:	2002      	movs	r0, #2
 80075c0:	e7d3      	b.n	800756a <rcutils_logging_format_message+0x86>
 80075c2:	bf00      	nop
 80075c4:	2000461b 	.word	0x2000461b

080075c8 <rcutils_logging_console_output_handler>:

void rcutils_logging_console_output_handler(
  const rcutils_log_location_t * location,
  int severity, const char * name, rcutils_time_point_value_t timestamp,
  const char * format, va_list * args)
{
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rcutils_ret_t status = RCUTILS_RET_OK;
  bool is_colorized = false;

  if (!g_rcutils_logging_initialized) {
 80075cc:	4b72      	ldr	r3, [pc, #456]	; (8007798 <rcutils_logging_console_output_handler+0x1d0>)
 80075ce:	f893 9000 	ldrb.w	r9, [r3]
{
 80075d2:	f6ad 0d64 	subw	sp, sp, #2148	; 0x864
 80075d6:	4682      	mov	sl, r0
 80075d8:	460c      	mov	r4, r1
 80075da:	4693      	mov	fp, r2
  if (!g_rcutils_logging_initialized) {
 80075dc:	f1b9 0f00 	cmp.w	r9, #0
 80075e0:	d106      	bne.n	80075f0 <rcutils_logging_console_output_handler+0x28>
    fprintf(
      stderr,
 80075e2:	4b6e      	ldr	r3, [pc, #440]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
    fprintf(
 80075e4:	496e      	ldr	r1, [pc, #440]	; (80077a0 <rcutils_logging_console_output_handler+0x1d8>)
      stderr,
 80075e6:	681b      	ldr	r3, [r3, #0]
  if (RCUTILS_RET_OK != status) {
    fprintf(stderr, "Failed to fini array.\n");
  }
  status = rcutils_char_array_fini(&output_array);
  if (RCUTILS_RET_OK != status) {
    fprintf(stderr, "Failed to fini array.\n");
 80075e8:	68d8      	ldr	r0, [r3, #12]
 80075ea:	f003 ff89 	bl	800b500 <fprintf>
 80075ee:	e011      	b.n	8007614 <rcutils_logging_console_output_handler+0x4c>
  switch (severity) {
 80075f0:	290a      	cmp	r1, #10
 80075f2:	d013      	beq.n	800761c <rcutils_logging_console_output_handler+0x54>
 80075f4:	f1a1 0214 	sub.w	r2, r1, #20
 80075f8:	2a1e      	cmp	r2, #30
 80075fa:	d804      	bhi.n	8007606 <rcutils_logging_console_output_handler+0x3e>
 80075fc:	2301      	movs	r3, #1
 80075fe:	4093      	lsls	r3, r2
 8007600:	4a68      	ldr	r2, [pc, #416]	; (80077a4 <rcutils_logging_console_output_handler+0x1dc>)
 8007602:	4213      	tst	r3, r2
 8007604:	d10a      	bne.n	800761c <rcutils_logging_console_output_handler+0x54>
      fprintf(stderr, "unknown severity level: %d\n", severity);
 8007606:	4b65      	ldr	r3, [pc, #404]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
 8007608:	4967      	ldr	r1, [pc, #412]	; (80077a8 <rcutils_logging_console_output_handler+0x1e0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4622      	mov	r2, r4
 800760e:	68d8      	ldr	r0, [r3, #12]
 8007610:	f003 ff76 	bl	800b500 <fprintf>
  }
}
 8007614:	f60d 0d64 	addw	sp, sp, #2148	; 0x864
 8007618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  IS_OUTPUT_COLORIZED(is_colorized)
 800761c:	4b63      	ldr	r3, [pc, #396]	; (80077ac <rcutils_logging_console_output_handler+0x1e4>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d00c      	beq.n	800763e <rcutils_logging_console_output_handler+0x76>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d065      	beq.n	80076f4 <rcutils_logging_console_output_handler+0x12c>
 8007628:	4b61      	ldr	r3, [pc, #388]	; (80077b0 <rcutils_logging_console_output_handler+0x1e8>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	f003 fe9c 	bl	800b368 <fileno>
 8007630:	f00a ff45 	bl	80124be <_isatty>
 8007634:	f1b0 0900 	subs.w	r9, r0, #0
 8007638:	bf18      	it	ne
 800763a:	f04f 0901 	movne.w	r9, #1
  char msg_buf[1024] = "";
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8007646:	4641      	mov	r1, r8
  rcutils_char_array_t msg_array = {
 8007648:	4e5a      	ldr	r6, [pc, #360]	; (80077b4 <rcutils_logging_console_output_handler+0x1ec>)
  char msg_buf[1024] = "";
 800764a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800764e:	a819      	add	r0, sp, #100	; 0x64
 8007650:	f010 f910 	bl	8017874 <memset>
  rcutils_char_array_t msg_array = {
 8007654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007658:	9309      	str	r3, [sp, #36]	; 0x24
 800765a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  char msg_buf[1024] = "";
 800765c:	ad18      	add	r5, sp, #96	; 0x60
  rcutils_char_array_t msg_array = {
 800765e:	9506      	str	r5, [sp, #24]
 8007660:	ad0a      	add	r5, sp, #40	; 0x28
 8007662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007664:	4637      	mov	r7, r6
  char output_buf[1024] = "";
 8007666:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
  rcutils_char_array_t msg_array = {
 800766a:	f857 3910 	ldr.w	r3, [r7], #-16
 800766e:	602b      	str	r3, [r5, #0]
  char output_buf[1024] = "";
 8007670:	4641      	mov	r1, r8
  rcutils_char_array_t output_array = {
 8007672:	ad0f      	add	r5, sp, #60	; 0x3c
  char output_buf[1024] = "";
 8007674:	f20d 4064 	addw	r0, sp, #1124	; 0x464
  rcutils_char_array_t msg_array = {
 8007678:	f88d 801c 	strb.w	r8, [sp, #28]
 800767c:	f8cd 8020 	str.w	r8, [sp, #32]
  char output_buf[1024] = "";
 8007680:	f8cd 8460 	str.w	r8, [sp, #1120]	; 0x460
 8007684:	f010 f8f6 	bl	8017874 <memset>
  rcutils_char_array_t output_array = {
 8007688:	f50d 638c 	add.w	r3, sp, #1120	; 0x460
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007692:	60eb      	str	r3, [r5, #12]
 8007694:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007696:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 800769a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800769e:	6833      	ldr	r3, [r6, #0]
 80076a0:	f885 8004 	strb.w	r8, [r5, #4]
 80076a4:	f8c5 8008 	str.w	r8, [r5, #8]
 80076a8:	f8cc 3000 	str.w	r3, [ip]
  if (is_colorized) {
 80076ac:	f1b9 0f00 	cmp.w	r9, #0
 80076b0:	d03b      	beq.n	800772a <rcutils_logging_console_output_handler+0x162>
    SET_OUTPUT_COLOR_WITH_SEVERITY(status, severity, output_array)
 80076b2:	2c1e      	cmp	r4, #30
 80076b4:	d026      	beq.n	8007704 <rcutils_logging_console_output_handler+0x13c>
 80076b6:	dc1f      	bgt.n	80076f8 <rcutils_logging_console_output_handler+0x130>
 80076b8:	2c0a      	cmp	r4, #10
 80076ba:	d032      	beq.n	8007722 <rcutils_logging_console_output_handler+0x15a>
 80076bc:	2c14      	cmp	r4, #20
 80076be:	d032      	beq.n	8007726 <rcutils_logging_console_output_handler+0x15e>
 80076c0:	4b36      	ldr	r3, [pc, #216]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
 80076c2:	4939      	ldr	r1, [pc, #228]	; (80077a8 <rcutils_logging_console_output_handler+0x1e0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4622      	mov	r2, r4
  SET_STANDARD_COLOR_IN_BUFFER(is_colorized, status, output_array)
 80076c8:	68d8      	ldr	r0, [r3, #12]
    fprintf(g_output_stream, "%s\n", output_array.buffer);
 80076ca:	f003 ff19 	bl	800b500 <fprintf>
  status = rcutils_char_array_fini(&msg_array);
 80076ce:	a806      	add	r0, sp, #24
 80076d0:	f00e fb53 	bl	8015d7a <rcutils_char_array_fini>
  if (RCUTILS_RET_OK != status) {
 80076d4:	b128      	cbz	r0, 80076e2 <rcutils_logging_console_output_handler+0x11a>
    fprintf(stderr, "Failed to fini array.\n");
 80076d6:	4b31      	ldr	r3, [pc, #196]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
 80076d8:	4937      	ldr	r1, [pc, #220]	; (80077b8 <rcutils_logging_console_output_handler+0x1f0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68d8      	ldr	r0, [r3, #12]
 80076de:	f003 ff0f 	bl	800b500 <fprintf>
  status = rcutils_char_array_fini(&output_array);
 80076e2:	4628      	mov	r0, r5
 80076e4:	f00e fb49 	bl	8015d7a <rcutils_char_array_fini>
  if (RCUTILS_RET_OK != status) {
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d093      	beq.n	8007614 <rcutils_logging_console_output_handler+0x4c>
    fprintf(stderr, "Failed to fini array.\n");
 80076ec:	4b2b      	ldr	r3, [pc, #172]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
 80076ee:	4932      	ldr	r1, [pc, #200]	; (80077b8 <rcutils_logging_console_output_handler+0x1f0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	e779      	b.n	80075e8 <rcutils_logging_console_output_handler+0x20>
  IS_OUTPUT_COLORIZED(is_colorized)
 80076f4:	4699      	mov	r9, r3
 80076f6:	e7a2      	b.n	800763e <rcutils_logging_console_output_handler+0x76>
    SET_OUTPUT_COLOR_WITH_SEVERITY(status, severity, output_array)
 80076f8:	2c28      	cmp	r4, #40	; 0x28
 80076fa:	d001      	beq.n	8007700 <rcutils_logging_console_output_handler+0x138>
 80076fc:	2c32      	cmp	r4, #50	; 0x32
 80076fe:	d1df      	bne.n	80076c0 <rcutils_logging_console_output_handler+0xf8>
 8007700:	4e2e      	ldr	r6, [pc, #184]	; (80077bc <rcutils_logging_console_output_handler+0x1f4>)
 8007702:	e000      	b.n	8007706 <rcutils_logging_console_output_handler+0x13e>
 8007704:	4e2e      	ldr	r6, [pc, #184]	; (80077c0 <rcutils_logging_console_output_handler+0x1f8>)
 8007706:	4630      	mov	r0, r6
 8007708:	f7f8 fd5a 	bl	80001c0 <strlen>
 800770c:	4631      	mov	r1, r6
 800770e:	4602      	mov	r2, r0
 8007710:	4628      	mov	r0, r5
 8007712:	f00e fbd1 	bl	8015eb8 <rcutils_char_array_strncat>
 8007716:	4602      	mov	r2, r0
 8007718:	b138      	cbz	r0, 800772a <rcutils_logging_console_output_handler+0x162>
  SET_STANDARD_COLOR_IN_BUFFER(is_colorized, status, output_array)
 800771a:	4b20      	ldr	r3, [pc, #128]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
 800771c:	4929      	ldr	r1, [pc, #164]	; (80077c4 <rcutils_logging_console_output_handler+0x1fc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	e7d2      	b.n	80076c8 <rcutils_logging_console_output_handler+0x100>
    SET_OUTPUT_COLOR_WITH_SEVERITY(status, severity, output_array)
 8007722:	4e29      	ldr	r6, [pc, #164]	; (80077c8 <rcutils_logging_console_output_handler+0x200>)
 8007724:	e7ef      	b.n	8007706 <rcutils_logging_console_output_handler+0x13e>
 8007726:	4e29      	ldr	r6, [pc, #164]	; (80077cc <rcutils_logging_console_output_handler+0x204>)
 8007728:	e7ed      	b.n	8007706 <rcutils_logging_console_output_handler+0x13e>
    va_copy(args_clone, *args);
 800772a:	f8dd 3894 	ldr.w	r3, [sp, #2196]	; 0x894
    status = rcutils_char_array_vsprintf(&msg_array, format, args_clone);
 800772e:	f8dd 1890 	ldr.w	r1, [sp, #2192]	; 0x890
    va_copy(args_clone, *args);
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	9205      	str	r2, [sp, #20]
    status = rcutils_char_array_vsprintf(&msg_array, format, args_clone);
 8007736:	a806      	add	r0, sp, #24
 8007738:	f00e fb7e 	bl	8015e38 <rcutils_char_array_vsprintf>
    if (RCUTILS_RET_OK != status) {
 800773c:	4602      	mov	r2, r0
 800773e:	b118      	cbz	r0, 8007748 <rcutils_logging_console_output_handler+0x180>
        stderr, "Error: rcutils_char_array_vsprintf failed with: %d\n",
 8007740:	4b16      	ldr	r3, [pc, #88]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
      fprintf(
 8007742:	4923      	ldr	r1, [pc, #140]	; (80077d0 <rcutils_logging_console_output_handler+0x208>)
        stderr, "Error: rcutils_char_array_vsprintf failed with: %d\n",
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	e7bf      	b.n	80076c8 <rcutils_logging_console_output_handler+0x100>
    status = rcutils_logging_format_message(
 8007748:	9b06      	ldr	r3, [sp, #24]
 800774a:	9302      	str	r3, [sp, #8]
 800774c:	9503      	str	r5, [sp, #12]
 800774e:	f60d 0388 	addw	r3, sp, #2184	; 0x888
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	4621      	mov	r1, r4
 8007758:	e9cd 2300 	strd	r2, r3, [sp]
 800775c:	4650      	mov	r0, sl
 800775e:	465a      	mov	r2, fp
 8007760:	f7ff fec0 	bl	80074e4 <rcutils_logging_format_message>
    if (RCUTILS_RET_OK != status) {
 8007764:	4602      	mov	r2, r0
 8007766:	b118      	cbz	r0, 8007770 <rcutils_logging_console_output_handler+0x1a8>
        stderr, "Error: rcutils_logging_format_message failed with: %d\n",
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <rcutils_logging_console_output_handler+0x1d4>)
      fprintf(
 800776a:	491a      	ldr	r1, [pc, #104]	; (80077d4 <rcutils_logging_console_output_handler+0x20c>)
        stderr, "Error: rcutils_logging_format_message failed with: %d\n",
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	e7ab      	b.n	80076c8 <rcutils_logging_console_output_handler+0x100>
  SET_STANDARD_COLOR_IN_BUFFER(is_colorized, status, output_array)
 8007770:	f1b9 0f00 	cmp.w	r9, #0
 8007774:	d00a      	beq.n	800778c <rcutils_logging_console_output_handler+0x1c4>
 8007776:	4815      	ldr	r0, [pc, #84]	; (80077cc <rcutils_logging_console_output_handler+0x204>)
 8007778:	f7f8 fd22 	bl	80001c0 <strlen>
 800777c:	4913      	ldr	r1, [pc, #76]	; (80077cc <rcutils_logging_console_output_handler+0x204>)
 800777e:	4602      	mov	r2, r0
 8007780:	4628      	mov	r0, r5
 8007782:	f00e fb99 	bl	8015eb8 <rcutils_char_array_strncat>
 8007786:	4602      	mov	r2, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	d1c6      	bne.n	800771a <rcutils_logging_console_output_handler+0x152>
    fprintf(g_output_stream, "%s\n", output_array.buffer);
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <rcutils_logging_console_output_handler+0x1e8>)
 800778e:	682a      	ldr	r2, [r5, #0]
 8007790:	4911      	ldr	r1, [pc, #68]	; (80077d8 <rcutils_logging_console_output_handler+0x210>)
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	e799      	b.n	80076ca <rcutils_logging_console_output_handler+0x102>
 8007796:	bf00      	nop
 8007798:	2000461a 	.word	0x2000461a
 800779c:	20000820 	.word	0x20000820
 80077a0:	0801d025 	.word	0x0801d025
 80077a4:	40100401 	.word	0x40100401
 80077a8:	0801d07f 	.word	0x0801d07f
 80077ac:	20000da4 	.word	0x20000da4
 80077b0:	20004038 	.word	0x20004038
 80077b4:	2000403c 	.word	0x2000403c
 80077b8:	0801d139 	.word	0x0801d139
 80077bc:	0801d01f 	.word	0x0801d01f
 80077c0:	0801d013 	.word	0x0801d013
 80077c4:	0801d09b 	.word	0x0801d09b
 80077c8:	0801d019 	.word	0x0801d019
 80077cc:	0801d00e 	.word	0x0801d00e
 80077d0:	0801d0ce 	.word	0x0801d0ce
 80077d4:	0801d102 	.word	0x0801d102
 80077d8:	0801c5ce 	.word	0x0801c5ce

080077dc <rcutils_strerror>:

#include "rcutils/strerror.h"

void
rcutils_strerror(char * buffer, size_t buffer_length)
{
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	460d      	mov	r5, r1
 80077e0:	4604      	mov	r4, r0
    strncpy(buffer, msg, buffer_length);
    buffer[buffer_length - 1] = '\0';
  }
#else
  /* XSI-compliant */
  int error_status = strerror_r(errno, buffer, buffer_length);
 80077e2:	f00a fe7a 	bl	80124da <__errno>
 80077e6:	462a      	mov	r2, r5
 80077e8:	6800      	ldr	r0, [r0, #0]
 80077ea:	4621      	mov	r1, r4
 80077ec:	f009 fb6e 	bl	8010ecc <__xpg_strerror_r>
  if (error_status != 0) {
 80077f0:	b140      	cbz	r0, 8007804 <rcutils_strerror+0x28>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80077f2:	4620      	mov	r0, r4
 80077f4:	4904      	ldr	r1, [pc, #16]	; (8007808 <rcutils_strerror+0x2c>)
 80077f6:	462a      	mov	r2, r5
    strncpy(buffer, "Failed to get error", buffer_length);
    buffer[buffer_length - 1] = '\0';
 80077f8:	442c      	add	r4, r5
 80077fa:	f010 faf2 	bl	8017de2 <strncpy>
 80077fe:	2300      	movs	r3, #0
 8007800:	f804 3c01 	strb.w	r3, [r4, #-1]
  }
#endif
}
 8007804:	bd38      	pop	{r3, r4, r5, pc}
 8007806:	bf00      	nop
 8007808:	0801d1b8 	.word	0x0801d1b8

0800780c <rcutils_get_zero_initialized_string_map>:

rcutils_string_map_t
rcutils_get_zero_initialized_string_map(void)
{
  static rcutils_string_map_t zero_initialized_string_map;
  zero_initialized_string_map.impl = NULL;
 800780c:	4b01      	ldr	r3, [pc, #4]	; (8007814 <rcutils_get_zero_initialized_string_map+0x8>)
 800780e:	2000      	movs	r0, #0
 8007810:	6018      	str	r0, [r3, #0]
  return zero_initialized_string_map;
}
 8007812:	4770      	bx	lr
 8007814:	2000405c 	.word	0x2000405c

08007818 <rcutils_time_point_value_as_nanoseconds_string>:
{
 8007818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800781a:	460b      	mov	r3, r1
 800781c:	4611      	mov	r1, r2
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(time_point, RCUTILS_RET_INVALID_ARGUMENT);
 800781e:	b180      	cbz	r0, 8007842 <rcutils_time_point_value_as_nanoseconds_string+0x2a>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(str, RCUTILS_RET_INVALID_ARGUMENT);
 8007820:	b17b      	cbz	r3, 8007842 <rcutils_time_point_value_as_nanoseconds_string+0x2a>
  if (0 == str_size) {
 8007822:	b912      	cbnz	r2, 800782a <rcutils_time_point_value_as_nanoseconds_string+0x12>
    return RCUTILS_RET_OK;
 8007824:	2000      	movs	r0, #0
}
 8007826:	b003      	add	sp, #12
 8007828:	bd30      	pop	{r4, r5, pc}
  if (rcutils_snprintf(str, str_size, "%.19" PRId64, *time_point) < 0) {
 800782a:	e9d0 4500 	ldrd	r4, r5, [r0]
 800782e:	4a06      	ldr	r2, [pc, #24]	; (8007848 <rcutils_time_point_value_as_nanoseconds_string+0x30>)
 8007830:	e9cd 4500 	strd	r4, r5, [sp]
 8007834:	4618      	mov	r0, r3
 8007836:	f00b fb28 	bl	8012e8a <rcutils_snprintf>
 800783a:	2800      	cmp	r0, #0
 800783c:	daf2      	bge.n	8007824 <rcutils_time_point_value_as_nanoseconds_string+0xc>
    return RCUTILS_RET_ERROR;
 800783e:	2002      	movs	r0, #2
 8007840:	e7f1      	b.n	8007826 <rcutils_time_point_value_as_nanoseconds_string+0xe>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(time_point, RCUTILS_RET_INVALID_ARGUMENT);
 8007842:	200b      	movs	r0, #11
 8007844:	e7ef      	b.n	8007826 <rcutils_time_point_value_as_nanoseconds_string+0xe>
 8007846:	bf00      	nop
 8007848:	0801d1cc 	.word	0x0801d1cc

0800784c <rcutils_system_time_now>:

#define __WOULD_BE_NEGATIVE(seconds, subseconds) (seconds < 0 || (subseconds < 0 && seconds == 0))

rcutils_ret_t
rcutils_system_time_now(rcutils_time_point_value_t * now)
{
 800784c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 800784e:	4604      	mov	r4, r0
 8007850:	b1e0      	cbz	r0, 800788c <rcutils_system_time_now+0x40>
 8007852:	2001      	movs	r0, #1
 8007854:	4669      	mov	r1, sp
 8007856:	f7fa f94b 	bl	8001af0 <z_impl_clock_gettime>
  timespec_now.tv_nsec = mts.tv_nsec;
#else  // defined(__MACH__)
  // Otherwise use clock_gettime.
  clock_gettime(CLOCK_REALTIME, &timespec_now);
#endif  // defined(__MACH__)
  if (__WOULD_BE_NEGATIVE(timespec_now.tv_sec, timespec_now.tv_nsec)) {
 800785a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800785e:	2800      	cmp	r0, #0
 8007860:	f171 0300 	sbcs.w	r3, r1, #0
 8007864:	db14      	blt.n	8007890 <rcutils_system_time_now+0x44>
 8007866:	9d02      	ldr	r5, [sp, #8]
 8007868:	2d00      	cmp	r5, #0
 800786a:	da02      	bge.n	8007872 <rcutils_system_time_now+0x26>
 800786c:	ea50 0301 	orrs.w	r3, r0, r1
 8007870:	d00e      	beq.n	8007890 <rcutils_system_time_now+0x44>
    RCUTILS_SET_ERROR_MSG("unexpected negative time");
    return RCUTILS_RET_ERROR;
  }
  *now = RCUTILS_S_TO_NS((int64_t)timespec_now.tv_sec) + timespec_now.tv_nsec;
 8007872:	4e08      	ldr	r6, [pc, #32]	; (8007894 <rcutils_system_time_now+0x48>)
 8007874:	fba0 2306 	umull	r2, r3, r0, r6
 8007878:	1952      	adds	r2, r2, r5
 800787a:	fb06 3301 	mla	r3, r6, r1, r3
 800787e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 8007882:	e9c4 2300 	strd	r2, r3, [r4]
  return RCUTILS_RET_OK;
 8007886:	2000      	movs	r0, #0
}
 8007888:	b004      	add	sp, #16
 800788a:	bd70      	pop	{r4, r5, r6, pc}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 800788c:	200b      	movs	r0, #11
 800788e:	e7fb      	b.n	8007888 <rcutils_system_time_now+0x3c>
    return RCUTILS_RET_ERROR;
 8007890:	2002      	movs	r0, #2
 8007892:	e7f9      	b.n	8007888 <rcutils_system_time_now+0x3c>
 8007894:	3b9aca00 	.word	0x3b9aca00

08007898 <rcutils_steady_time_now>:

rcutils_ret_t
rcutils_steady_time_now(rcutils_time_point_value_t * now)
{
 8007898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 800789a:	4604      	mov	r4, r0
 800789c:	b1e0      	cbz	r0, 80078d8 <rcutils_steady_time_now+0x40>
 800789e:	2004      	movs	r0, #4
 80078a0:	4669      	mov	r1, sp
 80078a2:	f7fa f925 	bl	8001af0 <z_impl_clock_gettime>
  clock_gettime(CLOCK_MONOTONIC_RAW, &timespec_now);
#else  // defined(CLOCK_MONOTONIC_RAW)
  clock_gettime(CLOCK_MONOTONIC, &timespec_now);
#endif  // defined(CLOCK_MONOTONIC_RAW)
#endif  // defined(__MACH__)
  if (__WOULD_BE_NEGATIVE(timespec_now.tv_sec, timespec_now.tv_nsec)) {
 80078a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f171 0300 	sbcs.w	r3, r1, #0
 80078b0:	db14      	blt.n	80078dc <rcutils_steady_time_now+0x44>
 80078b2:	9d02      	ldr	r5, [sp, #8]
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	da02      	bge.n	80078be <rcutils_steady_time_now+0x26>
 80078b8:	ea50 0301 	orrs.w	r3, r0, r1
 80078bc:	d00e      	beq.n	80078dc <rcutils_steady_time_now+0x44>
    RCUTILS_SET_ERROR_MSG("unexpected negative time");
    return RCUTILS_RET_ERROR;
  }
  *now = RCUTILS_S_TO_NS((int64_t)timespec_now.tv_sec) + timespec_now.tv_nsec;
 80078be:	4e08      	ldr	r6, [pc, #32]	; (80078e0 <rcutils_steady_time_now+0x48>)
 80078c0:	fba0 2306 	umull	r2, r3, r0, r6
 80078c4:	1952      	adds	r2, r2, r5
 80078c6:	fb06 3301 	mla	r3, r6, r1, r3
 80078ca:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80078ce:	e9c4 2300 	strd	r2, r3, [r4]
  return RCUTILS_RET_OK;
 80078d2:	2000      	movs	r0, #0
}
 80078d4:	b004      	add	sp, #16
 80078d6:	bd70      	pop	{r4, r5, r6, pc}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(now, RCUTILS_RET_INVALID_ARGUMENT);
 80078d8:	200b      	movs	r0, #11
 80078da:	e7fb      	b.n	80078d4 <rcutils_steady_time_now+0x3c>
    return RCUTILS_RET_ERROR;
 80078dc:	2002      	movs	r0, #2
 80078de:	e7f9      	b.n	80078d4 <rcutils_steady_time_now+0x3c>
 80078e0:	3b9aca00 	.word	0x3b9aca00

080078e4 <rmw_validate_full_topic_name_with_size>:
rmw_validate_full_topic_name_with_size(
  const char * topic_name,
  size_t topic_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!topic_name) {
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d052      	beq.n	8007990 <rmw_validate_full_topic_name_with_size+0xac>
    return RMW_RET_INVALID_ARGUMENT;
  }
  if (!validation_result) {
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	d050      	beq.n	8007990 <rmw_validate_full_topic_name_with_size+0xac>
    return RMW_RET_INVALID_ARGUMENT;
  }
  if (topic_name_length == 0) {
 80078ee:	b939      	cbnz	r1, 8007900 <rmw_validate_full_topic_name_with_size+0x1c>
    *validation_result = RMW_TOPIC_INVALID_IS_EMPTY_STRING;
 80078f0:	2101      	movs	r1, #1
 80078f2:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 80078f4:	b90b      	cbnz	r3, 80078fa <rmw_validate_full_topic_name_with_size+0x16>
  // note topic_name_length is >= 1 at this point
  if (topic_name[topic_name_length - 1] == '/') {
    // catches both "/foo/" and "/"
    *validation_result = RMW_TOPIC_INVALID_ENDS_WITH_FORWARD_SLASH;
    if (invalid_index) {
      *invalid_index = topic_name_length - 1;
 80078f6:	2000      	movs	r0, #0
 80078f8:	e001      	b.n	80078fe <rmw_validate_full_topic_name_with_size+0x1a>
      *invalid_index = 0;
 80078fa:	2000      	movs	r0, #0
 80078fc:	6018      	str	r0, [r3, #0]
    return RMW_RET_OK;
  }
  // everything was ok, set result to valid topic, avoid setting invalid_index, and return
  *validation_result = RMW_TOPIC_VALID;
  return RMW_RET_OK;
}
 80078fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (topic_name[0] != '/') {
 8007900:	7804      	ldrb	r4, [r0, #0]
 8007902:	2c2f      	cmp	r4, #47	; 0x2f
 8007904:	d001      	beq.n	800790a <rmw_validate_full_topic_name_with_size+0x26>
    *validation_result = RMW_TOPIC_INVALID_NOT_ABSOLUTE;
 8007906:	2102      	movs	r1, #2
 8007908:	e7f3      	b.n	80078f2 <rmw_validate_full_topic_name_with_size+0xe>
  if (topic_name[topic_name_length - 1] == '/') {
 800790a:	1e4e      	subs	r6, r1, #1
 800790c:	5d84      	ldrb	r4, [r0, r6]
 800790e:	2c2f      	cmp	r4, #47	; 0x2f
 8007910:	d105      	bne.n	800791e <rmw_validate_full_topic_name_with_size+0x3a>
    *validation_result = RMW_TOPIC_INVALID_ENDS_WITH_FORWARD_SLASH;
 8007912:	2103      	movs	r1, #3
 8007914:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0ed      	beq.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
      *invalid_index = topic_name_length - 1;
 800791a:	601e      	str	r6, [r3, #0]
 800791c:	e7eb      	b.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
  for (size_t i = 0; i < topic_name_length; ++i) {
 800791e:	2400      	movs	r4, #0
    if (rcutils_isalnum_no_locale(topic_name[i])) {
 8007920:	5d05      	ldrb	r5, [r0, r4]
  // if in '0', ..., '9', then ok
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
    return true;
  }
  // if in 'A', ..., 'Z', then ok
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 8007922:	f025 0720 	bic.w	r7, r5, #32
 8007926:	3f41      	subs	r7, #65	; 0x41
 8007928:	2f19      	cmp	r7, #25
 800792a:	d90a      	bls.n	8007942 <rmw_validate_full_topic_name_with_size+0x5e>
    } else if (topic_name[i] == '_') {
 800792c:	2d5f      	cmp	r5, #95	; 0x5f
 800792e:	d008      	beq.n	8007942 <rmw_validate_full_topic_name_with_size+0x5e>
    } else if (topic_name[i] == '/') {
 8007930:	3d2f      	subs	r5, #47	; 0x2f
 8007932:	2d0a      	cmp	r5, #10
 8007934:	d905      	bls.n	8007942 <rmw_validate_full_topic_name_with_size+0x5e>
      *validation_result = RMW_TOPIC_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 8007936:	2104      	movs	r1, #4
        *validation_result = RMW_TOPIC_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8007938:	6011      	str	r1, [r2, #0]
        if (invalid_index) {
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0db      	beq.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
          *invalid_index = i + 1;
 800793e:	601c      	str	r4, [r3, #0]
 8007940:	e7d9      	b.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
  for (size_t i = 0; i < topic_name_length; ++i) {
 8007942:	3401      	adds	r4, #1
 8007944:	42a1      	cmp	r1, r4
 8007946:	d1eb      	bne.n	8007920 <rmw_validate_full_topic_name_with_size+0x3c>
      if (isdigit(topic_name[i + 1]) != 0) {
 8007948:	f8df c048 	ldr.w	ip, [pc, #72]	; 8007994 <rmw_validate_full_topic_name_with_size+0xb0>
  for (size_t i = 0; i < topic_name_length; ++i) {
 800794c:	2400      	movs	r4, #0
    if (topic_name[i] == '/') {
 800794e:	1e47      	subs	r7, r0, #1
    if (i == topic_name_length - 1) {
 8007950:	42b4      	cmp	r4, r6
 8007952:	f104 0401 	add.w	r4, r4, #1
 8007956:	d00d      	beq.n	8007974 <rmw_validate_full_topic_name_with_size+0x90>
    if (topic_name[i] == '/') {
 8007958:	5d3d      	ldrb	r5, [r7, r4]
 800795a:	2d2f      	cmp	r5, #47	; 0x2f
 800795c:	d10a      	bne.n	8007974 <rmw_validate_full_topic_name_with_size+0x90>
      if (topic_name[i + 1] == '/') {
 800795e:	5d05      	ldrb	r5, [r0, r4]
 8007960:	2d2f      	cmp	r5, #47	; 0x2f
 8007962:	d101      	bne.n	8007968 <rmw_validate_full_topic_name_with_size+0x84>
        *validation_result = RMW_TOPIC_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 8007964:	2105      	movs	r1, #5
 8007966:	e7e7      	b.n	8007938 <rmw_validate_full_topic_name_with_size+0x54>
      if (isdigit(topic_name[i + 1]) != 0) {
 8007968:	f815 500c 	ldrb.w	r5, [r5, ip]
 800796c:	076d      	lsls	r5, r5, #29
 800796e:	d501      	bpl.n	8007974 <rmw_validate_full_topic_name_with_size+0x90>
        *validation_result = RMW_TOPIC_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8007970:	2106      	movs	r1, #6
 8007972:	e7e1      	b.n	8007938 <rmw_validate_full_topic_name_with_size+0x54>
  for (size_t i = 0; i < topic_name_length; ++i) {
 8007974:	42a1      	cmp	r1, r4
 8007976:	d1eb      	bne.n	8007950 <rmw_validate_full_topic_name_with_size+0x6c>
  if (topic_name_length > RMW_TOPIC_MAX_NAME_LENGTH) {
 8007978:	29f7      	cmp	r1, #247	; 0xf7
 800797a:	d906      	bls.n	800798a <rmw_validate_full_topic_name_with_size+0xa6>
    *validation_result = RMW_TOPIC_INVALID_TOO_LONG;
 800797c:	2107      	movs	r1, #7
 800797e:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0b8      	beq.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
      *invalid_index = RMW_TOPIC_MAX_NAME_LENGTH - 1;
 8007984:	22f6      	movs	r2, #246	; 0xf6
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e7b5      	b.n	80078f6 <rmw_validate_full_topic_name_with_size+0x12>
  *validation_result = RMW_TOPIC_VALID;
 800798a:	2000      	movs	r0, #0
 800798c:	6010      	str	r0, [r2, #0]
  return RMW_RET_OK;
 800798e:	e7b6      	b.n	80078fe <rmw_validate_full_topic_name_with_size+0x1a>
    return RMW_RET_INVALID_ARGUMENT;
 8007990:	200b      	movs	r0, #11
 8007992:	e7b4      	b.n	80078fe <rmw_validate_full_topic_name_with_size+0x1a>
 8007994:	0801bb81 	.word	0x0801bb81

08007998 <rmw_create_publisher>:
  const rmw_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_policies,
  const rmw_publisher_options_t * publisher_options)
{
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4689      	mov	r9, r1
 800799e:	b088      	sub	sp, #32
 80079a0:	4617      	mov	r7, r2
 80079a2:	4698      	mov	r8, r3
  (void) publisher_options;

  EPROS_PRINT_TRACE()
  rmw_publisher_t * rmw_publisher = NULL;
  if (!node) {
 80079a4:	4604      	mov	r4, r0
 80079a6:	b908      	cbnz	r0, 80079ac <rmw_create_publisher+0x14>
  return rmw_publisher;

fail:
  rmw_uxrce_fini_publisher_memory(rmw_publisher);
  rmw_publisher = NULL;
  return rmw_publisher;
 80079a8:	2500      	movs	r5, #0
 80079aa:	e0c1      	b.n	8007b30 <rmw_create_publisher+0x198>
  } else if (!type_support) {
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d0fb      	beq.n	80079a8 <rmw_create_publisher+0x10>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 80079b0:	6800      	ldr	r0, [r0, #0]
 80079b2:	f00b fd62 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d0f6      	beq.n	80079a8 <rmw_create_publisher+0x10>
  } else if (!topic_name || strlen(topic_name) == 0) {
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d0f4      	beq.n	80079a8 <rmw_create_publisher+0x10>
 80079be:	4638      	mov	r0, r7
 80079c0:	f7f8 fbfe 	bl	80001c0 <strlen>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d0ef      	beq.n	80079a8 <rmw_create_publisher+0x10>
  } else if (!qos_policies) {
 80079c8:	f1b8 0f00 	cmp.w	r8, #0
 80079cc:	d0ec      	beq.n	80079a8 <rmw_create_publisher+0x10>
    rmw_publisher = (rmw_publisher_t *)rmw_allocate(sizeof(rmw_publisher_t));
 80079ce:	2014      	movs	r0, #20
 80079d0:	f00e fb9a 	bl	8016108 <rmw_allocate>
    rmw_publisher->data = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	6043      	str	r3, [r0, #4]
    rmw_publisher = (rmw_publisher_t *)rmw_allocate(sizeof(rmw_publisher_t));
 80079d8:	4605      	mov	r5, r0
    rmw_publisher->implementation_identifier = rmw_get_implementation_identifier();
 80079da:	f002 fce5 	bl	800a3a8 <rmw_get_implementation_identifier>
 80079de:	6028      	str	r0, [r5, #0]
      (const char *)(rmw_allocate(sizeof(char) * (strlen(topic_name) + 1)));
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7f8 fbed 	bl	80001c0 <strlen>
 80079e6:	3001      	adds	r0, #1
 80079e8:	f00e fb8e 	bl	8016108 <rmw_allocate>
    rmw_publisher->topic_name =
 80079ec:	60a8      	str	r0, [r5, #8]
    if (!rmw_publisher->topic_name) {
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d070      	beq.n	8007ad4 <rmw_create_publisher+0x13c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 80079f2:	4639      	mov	r1, r7
 80079f4:	f004 ff54 	bl	800c8a0 <strcpy>
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&publisher_memory);
 80079f8:	484f      	ldr	r0, [pc, #316]	; (8007b38 <rmw_create_publisher+0x1a0>)
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 80079fa:	6866      	ldr	r6, [r4, #4]
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&publisher_memory);
 80079fc:	f00e fbea 	bl	80161d4 <get_memory>
    if (!memory_node) {
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d067      	beq.n	8007ad4 <rmw_create_publisher+0x13c>
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)memory_node->data;
 8007a04:	68c4      	ldr	r4, [r0, #12]
    custom_publisher->rmw_handle = rmw_publisher;
 8007a06:	6125      	str	r5, [r4, #16]
    custom_publisher->owner_node = custom_node;
 8007a08:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
    custom_publisher->publisher_gid.implementation_identifier = rmw_get_implementation_identifier();
 8007a0c:	f002 fccc 	bl	800a3a8 <rmw_get_implementation_identifier>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007a10:	4641      	mov	r1, r8
 8007a12:	61e0      	str	r0, [r4, #28]
 8007a14:	2250      	movs	r2, #80	; 0x50
 8007a16:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007a1a:	f7f9 fec1 	bl	80017a0 <memcpy>
    custom_publisher->stream_id =
 8007a1e:	f898 3008 	ldrb.w	r3, [r8, #8]
    type_support_xrce = get_message_typesupport_handle(
 8007a22:	4946      	ldr	r1, [pc, #280]	; (8007b3c <rmw_create_publisher+0x1a4>)
    custom_publisher->stream_id =
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	6973      	ldr	r3, [r6, #20]
 8007a28:	bf0c      	ite	eq
 8007a2a:	f8d3 33a0 	ldreq.w	r3, [r3, #928]	; 0x3a0
 8007a2e:	f8d3 3394 	ldrne.w	r3, [r3, #916]	; 0x394
 8007a32:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    type_support_xrce = get_message_typesupport_handle(
 8007a36:	4648      	mov	r0, r9
 8007a38:	f000 fa52 	bl	8007ee0 <get_message_typesupport_handle>
    if (NULL == type_support_xrce) {
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d049      	beq.n	8007ad4 <rmw_create_publisher+0x13c>
      (const message_type_support_callbacks_t *)type_support_xrce->data;
 8007a40:	f8d0 9004 	ldr.w	r9, [r0, #4]
    custom_publisher->type_support_callbacks =
 8007a44:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    if (custom_publisher->type_support_callbacks == NULL) {
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	d042      	beq.n	8007ad4 <rmw_create_publisher+0x13c>
__ssp_bos_icheck3(memset, void *, int)
 8007a4e:	2218      	movs	r2, #24
 8007a50:	2100      	movs	r1, #0
 8007a52:	f104 0020 	add.w	r0, r4, #32
 8007a56:	f00f ff0d 	bl	8017874 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	6223      	str	r3, [r4, #32]
    custom_publisher->topic = create_topic(
 8007a5e:	464a      	mov	r2, r9
 8007a60:	4643      	mov	r3, r8
 8007a62:	4639      	mov	r1, r7
 8007a64:	4630      	mov	r0, r6
 8007a66:	f002 fe59 	bl	800a71c <create_topic>
 8007a6a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (custom_publisher->topic == NULL) {
 8007a6c:	b390      	cbz	r0, 8007ad4 <rmw_create_publisher+0x13c>
      custom_node->context->id_publisher++,
 8007a6e:	6972      	ldr	r2, [r6, #20]
    if (!build_publisher_xml(publisher_name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 8007a70:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007b40 <rmw_create_publisher+0x1a8>
      custom_node->context->id_publisher++,
 8007a74:	f241 53ac 	movw	r3, #5548	; 0x15ac
 8007a78:	5ad0      	ldrh	r0, [r2, r3]
    custom_publisher->publisher_id = uxr_object_id(
 8007a7a:	1c41      	adds	r1, r0, #1
 8007a7c:	52d1      	strh	r1, [r2, r3]
 8007a7e:	2103      	movs	r1, #3
 8007a80:	f00c f93e 	bl	8013d00 <uxr_object_id>
 8007a84:	4623      	mov	r3, r4
    generate_name(&custom_publisher->publisher_id, publisher_name, sizeof(publisher_name));
 8007a86:	2214      	movs	r2, #20
    custom_publisher->publisher_id = uxr_object_id(
 8007a88:	f843 0f14 	str.w	r0, [r3, #20]!
    generate_name(&custom_publisher->publisher_id, publisher_name, sizeof(publisher_name));
 8007a8c:	a903      	add	r1, sp, #12
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 f910 	bl	8007cb4 <generate_name>
    if (!build_publisher_xml(publisher_name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 8007a94:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007a98:	4649      	mov	r1, r9
 8007a9a:	a803      	add	r0, sp, #12
 8007a9c:	f00b fce5 	bl	801346a <build_publisher_xml>
 8007aa0:	b1c0      	cbz	r0, 8007ad4 <rmw_create_publisher+0x13c>
      &custom_publisher->owner_node->context->session,
 8007aa2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    publisher_req = uxr_buffer_create_publisher_xml(
 8007aa6:	6971      	ldr	r1, [r6, #20]
 8007aa8:	6958      	ldr	r0, [r3, #20]
 8007aaa:	f04f 0a04 	mov.w	sl, #4
 8007aae:	e9cd 9a00 	strd	r9, sl, [sp]
 8007ab2:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8007ab6:	f8d1 1398 	ldr.w	r1, [r1, #920]	; 0x398
 8007aba:	69b3      	ldr	r3, [r6, #24]
 8007abc:	6962      	ldr	r2, [r4, #20]
 8007abe:	f00c f8b7 	bl	8013c30 <uxr_buffer_create_publisher_xml>
 8007ac2:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, publisher_req))
 8007ac4:	6970      	ldr	r0, [r6, #20]
 8007ac6:	f00b fcb4 	bl	8013432 <run_xrce_session>
 8007aca:	b938      	cbnz	r0, 8007adc <rmw_create_publisher+0x144>
      put_memory(&publisher_memory, &custom_publisher->mem);
 8007acc:	481a      	ldr	r0, [pc, #104]	; (8007b38 <rmw_create_publisher+0x1a0>)
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f00e fb90 	bl	80161f4 <put_memory>
  rmw_uxrce_fini_publisher_memory(rmw_publisher);
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f85f 	bl	8007b98 <rmw_uxrce_fini_publisher_memory>
 8007ada:	e765      	b.n	80079a8 <rmw_create_publisher+0x10>
      custom_node->context->id_datawriter++,
 8007adc:	6972      	ldr	r2, [r6, #20]
    rmw_publisher->data = custom_publisher;
 8007ade:	606c      	str	r4, [r5, #4]
      custom_node->context->id_datawriter++,
 8007ae0:	f241 53ae 	movw	r3, #5550	; 0x15ae
 8007ae4:	5ad0      	ldrh	r0, [r2, r3]
    custom_publisher->datawriter_id = uxr_object_id(
 8007ae6:	1c41      	adds	r1, r0, #1
 8007ae8:	52d1      	strh	r1, [r2, r3]
 8007aea:	2105      	movs	r1, #5
 8007aec:	f00c f908 	bl	8013d00 <uxr_object_id>
    if (!build_datawriter_xml(
 8007af0:	f44f 7316 	mov.w	r3, #600	; 0x258
    custom_publisher->datawriter_id = uxr_object_id(
 8007af4:	61a0      	str	r0, [r4, #24]
    if (!build_datawriter_xml(
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007afa:	464b      	mov	r3, r9
 8007afc:	4642      	mov	r2, r8
 8007afe:	4638      	mov	r0, r7
 8007b00:	f000 f9d2 	bl	8007ea8 <build_datawriter_xml>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d0e5      	beq.n	8007ad4 <rmw_create_publisher+0x13c>
      &custom_publisher->owner_node->context->session,
 8007b08:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    datawriter_req = uxr_buffer_create_datawriter_xml(
 8007b0c:	6971      	ldr	r1, [r6, #20]
 8007b0e:	6958      	ldr	r0, [r3, #20]
 8007b10:	e9cd 9a00 	strd	r9, sl, [sp]
 8007b14:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8007b18:	f8d1 1398 	ldr.w	r1, [r1, #920]	; 0x398
 8007b1c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8007b20:	f00c f8ba 	bl	8013c98 <uxr_buffer_create_datawriter_xml>
 8007b24:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, datawriter_req))
 8007b26:	6970      	ldr	r0, [r6, #20]
 8007b28:	f00b fc83 	bl	8013432 <run_xrce_session>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0cd      	beq.n	8007acc <rmw_create_publisher+0x134>
}
 8007b30:	4628      	mov	r0, r5
 8007b32:	b008      	add	sp, #32
 8007b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b38:	20004144 	.word	0x20004144
 8007b3c:	0801d1e7 	.word	0x0801d1e7
 8007b40:	20004e1c 	.word	0x20004e1c

08007b44 <rmw_uxrce_fini_session_memory>:
RMW_INIT_MEMORY(topic)

// Memory management functions

void rmw_uxrce_fini_session_memory(rmw_context_impl_t * session)
{
 8007b44:	4601      	mov	r1, r0
  put_memory(&session_memory, &session->mem);
 8007b46:	4801      	ldr	r0, [pc, #4]	; (8007b4c <rmw_uxrce_fini_session_memory+0x8>)
 8007b48:	f00e bb54 	b.w	80161f4 <put_memory>
 8007b4c:	2000416c 	.word	0x2000416c

08007b50 <rmw_uxrce_fini_node_memory>:
}

void rmw_uxrce_fini_node_memory(rmw_node_t * node)
{
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4604      	mov	r4, r0
  if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 8007b54:	6800      	ldr	r0, [r0, #0]
 8007b56:	f00b fc90 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8007b5a:	b1c8      	cbz	r0, 8007b90 <rmw_uxrce_fini_node_memory+0x40>
    RMW_SET_ERROR_MSG("node handle not from this implementation");
    return;
  }
  if (node->namespace_) {
 8007b5c:	68e0      	ldr	r0, [r4, #12]
 8007b5e:	b108      	cbz	r0, 8007b64 <rmw_uxrce_fini_node_memory+0x14>
    rmw_free((char *)node->namespace_);
 8007b60:	f00e fae5 	bl	801612e <rmw_free>
  }
  if (node->name) {
 8007b64:	68a0      	ldr	r0, [r4, #8]
 8007b66:	b108      	cbz	r0, 8007b6c <rmw_uxrce_fini_node_memory+0x1c>
    rmw_free((char *)node->name);
 8007b68:	f00e fae1 	bl	801612e <rmw_free>
  }
  if (node->implementation_identifier) {
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	b10b      	cbz	r3, 8007b74 <rmw_uxrce_fini_node_memory+0x24>
    node->implementation_identifier = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	6023      	str	r3, [r4, #0]
  }
  if (node->data) {
 8007b74:	6861      	ldr	r1, [r4, #4]
 8007b76:	b131      	cbz	r1, 8007b86 <rmw_uxrce_fini_node_memory+0x36>
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
    custom_node->rmw_handle = NULL;
 8007b78:	2500      	movs	r5, #0
    custom_node->context = NULL;
 8007b7a:	e9c1 5504 	strd	r5, r5, [r1, #16]

    put_memory(&node_memory, &custom_node->mem);
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <rmw_uxrce_fini_node_memory+0x44>)
 8007b80:	f00e fb38 	bl	80161f4 <put_memory>

    node->data = NULL;
 8007b84:	6065      	str	r5, [r4, #4]
  }

  rmw_node_free(node);
 8007b86:	4620      	mov	r0, r4
  node = NULL;
}
 8007b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rmw_node_free(node);
 8007b8c:	f00e badf 	b.w	801614e <rmw_node_free>
}
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	20004130 	.word	0x20004130

08007b98 <rmw_uxrce_fini_publisher_memory>:

void rmw_uxrce_fini_publisher_memory(rmw_publisher_t * publisher)
{
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4604      	mov	r4, r0
  if (!is_uxrce_rmw_identifier_valid(publisher->implementation_identifier)) {
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f00b fc6c 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8007ba2:	b1a0      	cbz	r0, 8007bce <rmw_uxrce_fini_publisher_memory+0x36>
    RMW_SET_ERROR_MSG("node handle not from this implementation");
    return;
  }
  if (publisher->implementation_identifier) {
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	b10b      	cbz	r3, 8007bac <rmw_uxrce_fini_publisher_memory+0x14>
    publisher->implementation_identifier = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6023      	str	r3, [r4, #0]
  }
  if (publisher->topic_name) {
 8007bac:	68a0      	ldr	r0, [r4, #8]
 8007bae:	b108      	cbz	r0, 8007bb4 <rmw_uxrce_fini_publisher_memory+0x1c>
    rmw_free((char *)publisher->topic_name);
 8007bb0:	f00e fabd 	bl	801612e <rmw_free>
  }
  if (publisher->data) {
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	b129      	cbz	r1, 8007bc4 <rmw_uxrce_fini_publisher_memory+0x2c>
    rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;

    custom_publisher->rmw_handle = NULL;
 8007bb8:	2500      	movs	r5, #0

    put_memory(&publisher_memory, &custom_publisher->mem);
 8007bba:	4805      	ldr	r0, [pc, #20]	; (8007bd0 <rmw_uxrce_fini_publisher_memory+0x38>)
    custom_publisher->rmw_handle = NULL;
 8007bbc:	610d      	str	r5, [r1, #16]
    put_memory(&publisher_memory, &custom_publisher->mem);
 8007bbe:	f00e fb19 	bl	80161f4 <put_memory>
    publisher->data = NULL;
 8007bc2:	6065      	str	r5, [r4, #4]
  }

  rmw_free(publisher);
 8007bc4:	4620      	mov	r0, r4
}
 8007bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rmw_free(publisher);
 8007bca:	f00e bab0 	b.w	801612e <rmw_free>
}
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20004144 	.word	0x20004144

08007bd4 <rmw_uxrce_fini_subscription_memory>:

void rmw_uxrce_fini_subscription_memory(rmw_subscription_t * subscriber)
{
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4604      	mov	r4, r0
  if (!is_uxrce_rmw_identifier_valid(subscriber->implementation_identifier)) {
 8007bd8:	6800      	ldr	r0, [r0, #0]
 8007bda:	f00b fc4e 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8007bde:	b1a0      	cbz	r0, 8007c0a <rmw_uxrce_fini_subscription_memory+0x36>
    RMW_SET_ERROR_MSG("node handle not from this implementation");
    return;
  }
  if (subscriber->implementation_identifier) {
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	b10b      	cbz	r3, 8007be8 <rmw_uxrce_fini_subscription_memory+0x14>
    subscriber->implementation_identifier = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	6023      	str	r3, [r4, #0]
  }
  if (subscriber->topic_name) {
 8007be8:	68a0      	ldr	r0, [r4, #8]
 8007bea:	b108      	cbz	r0, 8007bf0 <rmw_uxrce_fini_subscription_memory+0x1c>
    rmw_free((char *)subscriber->topic_name);
 8007bec:	f00e fa9f 	bl	801612e <rmw_free>
  }
  if (subscriber->data) {
 8007bf0:	6861      	ldr	r1, [r4, #4]
 8007bf2:	b129      	cbz	r1, 8007c00 <rmw_uxrce_fini_subscription_memory+0x2c>
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscriber->data;

    custom_subscription->rmw_handle = NULL;
 8007bf4:	2500      	movs	r5, #0

    put_memory(&subscription_memory, &custom_subscription->mem);
 8007bf6:	4805      	ldr	r0, [pc, #20]	; (8007c0c <rmw_uxrce_fini_subscription_memory+0x38>)
    custom_subscription->rmw_handle = NULL;
 8007bf8:	610d      	str	r5, [r1, #16]
    put_memory(&subscription_memory, &custom_subscription->mem);
 8007bfa:	f00e fafb 	bl	80161f4 <put_memory>
    subscriber->data = NULL;
 8007bfe:	6065      	str	r5, [r4, #4]
  }
  rmw_free(subscriber);
 8007c00:	4620      	mov	r0, r4
}
 8007c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rmw_free(subscriber);
 8007c06:	f00e ba92 	b.w	801612e <rmw_free>
}
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20004180 	.word	0x20004180

08007c10 <rmw_uxrce_fini_service_memory>:

void rmw_uxrce_fini_service_memory(rmw_service_t * service)
{
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4604      	mov	r4, r0
  if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 8007c14:	6800      	ldr	r0, [r0, #0]
 8007c16:	f00b fc30 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8007c1a:	b1a0      	cbz	r0, 8007c46 <rmw_uxrce_fini_service_memory+0x36>
    RMW_SET_ERROR_MSG("node handle not from this implementation");
    return;
  }
  if (service->implementation_identifier) {
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	b10b      	cbz	r3, 8007c24 <rmw_uxrce_fini_service_memory+0x14>
    service->implementation_identifier = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	6023      	str	r3, [r4, #0]
  }
  if (service->service_name) {
 8007c24:	68a0      	ldr	r0, [r4, #8]
 8007c26:	b108      	cbz	r0, 8007c2c <rmw_uxrce_fini_service_memory+0x1c>
    rmw_free((char *)service->service_name);
 8007c28:	f00e fa81 	bl	801612e <rmw_free>
  }
  if (service->data) {
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	b129      	cbz	r1, 8007c3c <rmw_uxrce_fini_service_memory+0x2c>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
    custom_service->rmw_handle = NULL;
 8007c30:	2500      	movs	r5, #0

    put_memory(&service_memory, &custom_service->mem);
 8007c32:	4805      	ldr	r0, [pc, #20]	; (8007c48 <rmw_uxrce_fini_service_memory+0x38>)
    custom_service->rmw_handle = NULL;
 8007c34:	610d      	str	r5, [r1, #16]
    put_memory(&service_memory, &custom_service->mem);
 8007c36:	f00e fadd 	bl	80161f4 <put_memory>
    service->data = NULL;
 8007c3a:	6065      	str	r5, [r4, #4]
  }
  rmw_free(service);
 8007c3c:	4620      	mov	r0, r4
}
 8007c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rmw_free(service);
 8007c42:	f00e ba74 	b.w	801612e <rmw_free>
}
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20004158 	.word	0x20004158

08007c4c <rmw_uxrce_fini_client_memory>:

void rmw_uxrce_fini_client_memory(rmw_client_t * client)
{
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4604      	mov	r4, r0
  if (!is_uxrce_rmw_identifier_valid(client->implementation_identifier)) {
 8007c50:	6800      	ldr	r0, [r0, #0]
 8007c52:	f00b fc12 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8007c56:	b1a0      	cbz	r0, 8007c82 <rmw_uxrce_fini_client_memory+0x36>
    RMW_SET_ERROR_MSG("node handle not from this implementation");
    return;
  }
  if (client->implementation_identifier) {
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	b10b      	cbz	r3, 8007c60 <rmw_uxrce_fini_client_memory+0x14>
    client->implementation_identifier = NULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	6023      	str	r3, [r4, #0]
  }
  if (client->service_name) {
 8007c60:	68a0      	ldr	r0, [r4, #8]
 8007c62:	b108      	cbz	r0, 8007c68 <rmw_uxrce_fini_client_memory+0x1c>
    rmw_free((char *)client->service_name);
 8007c64:	f00e fa63 	bl	801612e <rmw_free>
  }
  if (client->data) {
 8007c68:	6861      	ldr	r1, [r4, #4]
 8007c6a:	b129      	cbz	r1, 8007c78 <rmw_uxrce_fini_client_memory+0x2c>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client->data;
    custom_client->rmw_handle = NULL;
 8007c6c:	2500      	movs	r5, #0

    put_memory(&client_memory, &custom_client->mem);
 8007c6e:	4805      	ldr	r0, [pc, #20]	; (8007c84 <rmw_uxrce_fini_client_memory+0x38>)
    custom_client->rmw_handle = NULL;
 8007c70:	610d      	str	r5, [r1, #16]
    put_memory(&client_memory, &custom_client->mem);
 8007c72:	f00e fabf 	bl	80161f4 <put_memory>
    client->data = NULL;
 8007c76:	6065      	str	r5, [r4, #4]
  }
  rmw_free(client);
 8007c78:	4620      	mov	r0, r4
}
 8007c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rmw_free(client);
 8007c7e:	f00e ba56 	b.w	801612e <rmw_free>
}
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20004060 	.word	0x20004060

08007c88 <rmw_uxrce_fini_topic_memory>:

void rmw_uxrce_fini_topic_memory(rmw_uxrce_topic_t * topic)
{
 8007c88:	4601      	mov	r1, r0
  put_memory(&topics_memory, &topic->mem);
 8007c8a:	4801      	ldr	r0, [pc, #4]	; (8007c90 <rmw_uxrce_fini_topic_memory+0x8>)
 8007c8c:	f00e bab2 	b.w	80161f4 <put_memory>
 8007c90:	20004194 	.word	0x20004194

08007c94 <build_participant_xml>:
}

int build_participant_xml(
  size_t domain_id, const char * participant_name, char xml[],
  size_t buffer_size)
{
 8007c94:	b510      	push	{r4, lr}
 8007c96:	461c      	mov	r4, r3
 8007c98:	4610      	mov	r0, r2
    "<name>%s</name>"
    "</rtps>"
    "</participant>"
    "</dds>";

  int ret = snprintf(xml, buffer_size, format, participant_name);
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4a04      	ldr	r2, [pc, #16]	; (8007cb0 <build_participant_xml+0x1c>)
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	f004 fd86 	bl	800c7b0 <snprintf>
  if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	da02      	bge.n	8007cae <build_participant_xml+0x1a>
    ret = 0;
 8007ca8:	4284      	cmp	r4, r0
 8007caa:	bfd8      	it	le
 8007cac:	2000      	movle	r0, #0
  }

  return ret;
}
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	0801d23c 	.word	0x0801d23c

08007cb4 <generate_name>:
  xml[0] = '\0';
  return 1;
}

int generate_name(const uxrObjectId * id, char name[], size_t buffer_size)
{
 8007cb4:	b513      	push	{r0, r1, r4, lr}
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4614      	mov	r4, r2
  static const char format[] = "%hu_%hi";

  int ret = snprintf(name, buffer_size, format, id->id, id->type);
 8007cba:	789a      	ldrb	r2, [r3, #2]
 8007cbc:	9200      	str	r2, [sp, #0]
{
 8007cbe:	4608      	mov	r0, r1
  int ret = snprintf(name, buffer_size, format, id->id, id->type);
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	4a05      	ldr	r2, [pc, #20]	; (8007cd8 <generate_name+0x24>)
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f004 fd73 	bl	800c7b0 <snprintf>
  if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	da02      	bge.n	8007cd4 <generate_name+0x20>
    ret = 0;
 8007cce:	4284      	cmp	r4, r0
 8007cd0:	bfd8      	it	le
 8007cd2:	2000      	movle	r0, #0
  }

  return ret;
}
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd10      	pop	{r4, pc}
 8007cd8:	0801d27f 	.word	0x0801d27f

08007cdc <generate_type_name>:

size_t generate_type_name(
  const message_type_support_callbacks_t * members, char type_name[],
  size_t buffer_size)
{
 8007cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce0:	4680      	mov	r8, r0
  static const char * sep = "::";
  static const char * protocol = "dds";
  static const char * suffix = "_";
  size_t ret = 0;
  size_t full_name_size = strlen(protocol) + strlen(suffix) + strlen(sep) + strlen(
 8007ce2:	4824      	ldr	r0, [pc, #144]	; (8007d74 <generate_type_name+0x98>)
{
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	4691      	mov	r9, r2
  size_t full_name_size = strlen(protocol) + strlen(suffix) + strlen(sep) + strlen(
 8007ce8:	f7f8 fa6a 	bl	80001c0 <strlen>
 8007cec:	4607      	mov	r7, r0
 8007cee:	4822      	ldr	r0, [pc, #136]	; (8007d78 <generate_type_name+0x9c>)
 8007cf0:	f7f8 fa66 	bl	80001c0 <strlen>
 8007cf4:	4407      	add	r7, r0
 8007cf6:	4821      	ldr	r0, [pc, #132]	; (8007d7c <generate_type_name+0xa0>)
 8007cf8:	f7f8 fa62 	bl	80001c0 <strlen>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d02:	f7f8 fa5d 	bl	80001c0 <strlen>
 8007d06:	4605      	mov	r5, r0
    members->message_name_) + strlen(suffix) +
 8007d08:	481b      	ldr	r0, [pc, #108]	; (8007d78 <generate_type_name+0x9c>)
 8007d0a:	f7f8 fa59 	bl	80001c0 <strlen>
 8007d0e:	3701      	adds	r7, #1
 8007d10:	4437      	add	r7, r6
 8007d12:	4606      	mov	r6, r0
    ((NULL != members->message_namespace_) ? strlen(members->message_namespace_) : 0) + 1;
 8007d14:	f8d8 0000 	ldr.w	r0, [r8]
 8007d18:	443d      	add	r5, r7
 8007d1a:	b108      	cbz	r0, 8007d20 <generate_type_name+0x44>
 8007d1c:	f7f8 fa50 	bl	80001c0 <strlen>
  size_t full_name_size = strlen(protocol) + strlen(suffix) + strlen(sep) + strlen(
 8007d20:	442e      	add	r6, r5
 8007d22:	4406      	add	r6, r0
  type_name[0] = 0;
 8007d24:	2300      	movs	r3, #0

  if (full_name_size < buffer_size) {
 8007d26:	454e      	cmp	r6, r9
  type_name[0] = 0;
 8007d28:	7023      	strb	r3, [r4, #0]
  if (full_name_size < buffer_size) {
 8007d2a:	d221      	bcs.n	8007d70 <generate_type_name+0x94>
    if (NULL != members->message_namespace_) {
 8007d2c:	f8d8 1000 	ldr.w	r1, [r8]
 8007d30:	b131      	cbz	r1, 8007d40 <generate_type_name+0x64>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
 8007d32:	4620      	mov	r0, r4
 8007d34:	f00f fedc 	bl	8017af0 <strcat>
 8007d38:	4910      	ldr	r1, [pc, #64]	; (8007d7c <generate_type_name+0xa0>)
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f00f fed8 	bl	8017af0 <strcat>
 8007d40:	490c      	ldr	r1, [pc, #48]	; (8007d74 <generate_type_name+0x98>)
 8007d42:	4620      	mov	r0, r4
 8007d44:	f00f fed4 	bl	8017af0 <strcat>
 8007d48:	490b      	ldr	r1, [pc, #44]	; (8007d78 <generate_type_name+0x9c>)
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f00f fed0 	bl	8017af0 <strcat>
 8007d50:	490a      	ldr	r1, [pc, #40]	; (8007d7c <generate_type_name+0xa0>)
 8007d52:	4620      	mov	r0, r4
 8007d54:	f00f fecc 	bl	8017af0 <strcat>
 8007d58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f00f fec7 	bl	8017af0 <strcat>
 8007d62:	4905      	ldr	r1, [pc, #20]	; (8007d78 <generate_type_name+0x9c>)
 8007d64:	4620      	mov	r0, r4
 8007d66:	f00f fec3 	bl	8017af0 <strcat>
    strcat(type_name, suffix);
    ret = full_name_size;
  }

  return ret;
}
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  size_t ret = 0;
 8007d70:	461e      	mov	r6, r3
  return ret;
 8007d72:	e7fa      	b.n	8007d6a <generate_type_name+0x8e>
 8007d74:	0801e61f 	.word	0x0801e61f
 8007d78:	0801d209 	.word	0x0801d209
 8007d7c:	0801d20b 	.word	0x0801d20b

08007d80 <build_topic_xml>:

int build_topic_xml(
  const char * topic_name, const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies, char xml[], size_t buffer_size)
{
 8007d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	b09c      	sub	sp, #112	; 0x70
 8007d86:	4605      	mov	r5, r0
 8007d88:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8007d8a:	4688      	mov	r8, r1
 8007d8c:	4617      	mov	r7, r2
 8007d8e:	461e      	mov	r6, r3
    "</dds>";

  int ret = 0;
  static char type_name_buffer[RMW_UXRCE_TYPE_NAME_MAX_LENGTH];

  if (RMW_UXRCE_TOPIC_NAME_MAX_LENGTH >= strlen(topic_name) &&
 8007d90:	f7f8 fa16 	bl	80001c0 <strlen>
 8007d94:	2864      	cmp	r0, #100	; 0x64
 8007d96:	d901      	bls.n	8007d9c <build_topic_xml+0x1c>
    if (!qos_policies->avoid_ros_namespace_conventions) {
      ret = snprintf(
        full_topic_name, sizeof(full_topic_name), "%s%s", ros_topic_prefix,
        topic_name);
      if ((ret < 0) && (ret >= (int)buffer_size)) {
        return 0;
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e01f      	b.n	8007ddc <build_topic_xml+0x5c>
    0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer)))
 8007d9c:	4916      	ldr	r1, [pc, #88]	; (8007df8 <build_topic_xml+0x78>)
 8007d9e:	2280      	movs	r2, #128	; 0x80
 8007da0:	4640      	mov	r0, r8
 8007da2:	f7ff ff9b 	bl	8007cdc <generate_type_name>
  if (RMW_UXRCE_TOPIC_NAME_MAX_LENGTH >= strlen(topic_name) &&
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d0f6      	beq.n	8007d98 <build_topic_xml+0x18>
    if (!qos_policies->avoid_ros_namespace_conventions) {
 8007daa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007dae:	b9c3      	cbnz	r3, 8007de2 <build_topic_xml+0x62>
      ret = snprintf(
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <build_topic_xml+0x7c>)
 8007db2:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <build_topic_xml+0x80>)
 8007db4:	9500      	str	r5, [sp, #0]
 8007db6:	2168      	movs	r1, #104	; 0x68
 8007db8:	a802      	add	r0, sp, #8
 8007dba:	f004 fcf9 	bl	800c7b0 <snprintf>
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	db16      	blt.n	8007df0 <build_topic_xml+0x70>
      if ((ret < 0) && (ret >= (int)buffer_size)) {
        return 0;
      }
    }

    ret = snprintf(xml, buffer_size, format, full_topic_name, type_name_buffer);
 8007dc2:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <build_topic_xml+0x78>)
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	4a0f      	ldr	r2, [pc, #60]	; (8007e04 <build_topic_xml+0x84>)
 8007dc8:	ab02      	add	r3, sp, #8
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f004 fcef 	bl	800c7b0 <snprintf>
    if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	da02      	bge.n	8007ddc <build_topic_xml+0x5c>
      ret = 0;
 8007dd6:	4284      	cmp	r4, r0
 8007dd8:	bfd8      	it	le
 8007dda:	2000      	movle	r0, #0
    }
  }

  return ret;
}
 8007ddc:	b01c      	add	sp, #112	; 0x70
 8007dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = snprintf(full_topic_name, sizeof(full_topic_name), "%s", topic_name);
 8007de2:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <build_topic_xml+0x88>)
 8007de4:	462b      	mov	r3, r5
 8007de6:	2168      	movs	r1, #104	; 0x68
 8007de8:	a802      	add	r0, sp, #8
 8007dea:	f004 fce1 	bl	800c7b0 <snprintf>
 8007dee:	e7e6      	b.n	8007dbe <build_topic_xml+0x3e>
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007df0:	4284      	cmp	r4, r0
 8007df2:	dce6      	bgt.n	8007dc2 <build_topic_xml+0x42>
 8007df4:	e7d0      	b.n	8007d98 <build_topic_xml+0x18>
 8007df6:	bf00      	nop
 8007df8:	20005074 	.word	0x20005074
 8007dfc:	0801d4f4 	.word	0x0801d4f4
 8007e00:	0801d77d 	.word	0x0801d77d
 8007e04:	0801d287 	.word	0x0801d287
 8007e08:	0801de34 	.word	0x0801de34

08007e0c <build_xml>:

int build_xml(
  const char * format, const char * topic_name, const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies, char xml[], size_t buffer_size)
{
 8007e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e10:	b09c      	sub	sp, #112	; 0x70
 8007e12:	4607      	mov	r7, r0
 8007e14:	460e      	mov	r6, r1
 8007e16:	4610      	mov	r0, r2
  int ret = 0;
  static char type_name_buffer[RMW_UXRCE_TYPE_NAME_MAX_LENGTH];

  if (0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer))) {
 8007e18:	491d      	ldr	r1, [pc, #116]	; (8007e90 <build_xml+0x84>)
{
 8007e1a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  if (0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer))) {
 8007e1c:	2280      	movs	r2, #128	; 0x80
{
 8007e1e:	461d      	mov	r5, r3
  if (0 != generate_type_name(members, type_name_buffer, sizeof(type_name_buffer))) {
 8007e20:	f7ff ff5c 	bl	8007cdc <generate_type_name>
 8007e24:	b318      	cbz	r0, 8007e6e <build_xml+0x62>
    char full_topic_name[RMW_UXRCE_TOPIC_NAME_MAX_LENGTH + 1 + sizeof(ros_topic_prefix)];
    full_topic_name[0] = '\0';
 8007e26:	2300      	movs	r3, #0
 8007e28:	f88d 3008 	strb.w	r3, [sp, #8]

    if (!qos_policies->avoid_ros_namespace_conventions) {
 8007e2c:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8007e30:	f10d 0808 	add.w	r8, sp, #8
 8007e34:	bb13      	cbnz	r3, 8007e7c <build_xml+0x70>
      ret = snprintf(
 8007e36:	4b17      	ldr	r3, [pc, #92]	; (8007e94 <build_xml+0x88>)
 8007e38:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <build_xml+0x8c>)
 8007e3a:	9600      	str	r6, [sp, #0]
 8007e3c:	2168      	movs	r1, #104	; 0x68
 8007e3e:	4640      	mov	r0, r8
 8007e40:	f004 fcb6 	bl	800c7b0 <snprintf>
        full_topic_name, sizeof(full_topic_name), "%s%s", ros_topic_prefix,
        topic_name);
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007e44:	2800      	cmp	r0, #0
 8007e46:	db15      	blt.n	8007e74 <build_xml+0x68>
      if ((ret < 0) && (ret >= (int)buffer_size)) {
        return 0;
      }
    }

    ret = snprintf(
 8007e48:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <build_xml+0x84>)
 8007e4a:	7a29      	ldrb	r1, [r5, #8]
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <build_xml+0x90>)
 8007e4e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007e50:	e9cd 8300 	strd	r8, r3, [sp]
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <build_xml+0x94>)
 8007e56:	2902      	cmp	r1, #2
 8007e58:	bf18      	it	ne
 8007e5a:	4613      	movne	r3, r2
 8007e5c:	463a      	mov	r2, r7
 8007e5e:	4621      	mov	r1, r4
 8007e60:	f004 fca6 	bl	800c7b0 <snprintf>
      (qos_policies->reliability == RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT) ?
      "BEST_EFFORT" : "RELIABLE",
      full_topic_name,
      type_name_buffer);

    if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007e64:	2800      	cmp	r0, #0
 8007e66:	da02      	bge.n	8007e6e <build_xml+0x62>
      ret = 0;
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	bfa8      	it	ge
 8007e6c:	2000      	movge	r0, #0
    }
  }

  return ret;
}
 8007e6e:	b01c      	add	sp, #112	; 0x70
 8007e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007e74:	42a0      	cmp	r0, r4
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007e76:	dbe7      	blt.n	8007e48 <build_xml+0x3c>
        return 0;
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e7f8      	b.n	8007e6e <build_xml+0x62>
      ret = snprintf(full_topic_name, sizeof(full_topic_name), "%s", topic_name);
 8007e7c:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <build_xml+0x98>)
 8007e7e:	4633      	mov	r3, r6
 8007e80:	2168      	movs	r1, #104	; 0x68
 8007e82:	4640      	mov	r0, r8
 8007e84:	f004 fc94 	bl	800c7b0 <snprintf>
      if ((ret < 0) && (ret >= (int)buffer_size)) {
 8007e88:	1e02      	subs	r2, r0, #0
 8007e8a:	dadd      	bge.n	8007e48 <build_xml+0x3c>
 8007e8c:	42a2      	cmp	r2, r4
 8007e8e:	e7f2      	b.n	8007e76 <build_xml+0x6a>
 8007e90:	200050f4 	.word	0x200050f4
 8007e94:	0801d4f4 	.word	0x0801d4f4
 8007e98:	0801d77d 	.word	0x0801d77d
 8007e9c:	0801d233 	.word	0x0801d233
 8007ea0:	0801d227 	.word	0x0801d227
 8007ea4:	0801de34 	.word	0x0801de34

08007ea8 <build_datawriter_xml>:
int build_datawriter_xml(
  const char * topic_name, const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies, char xml[], size_t buffer_size)
{
 8007ea8:	b513      	push	{r0, r1, r4, lr}
    "</historyQos>"
    "</topic>"
    "</data_writer>"
    "</dds>";

  return build_xml(format, topic_name, members, qos_policies, xml, buffer_size);
 8007eaa:	9c04      	ldr	r4, [sp, #16]
 8007eac:	e9cd 3400 	strd	r3, r4, [sp]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4802      	ldr	r0, [pc, #8]	; (8007ec0 <build_datawriter_xml+0x18>)
 8007eb8:	f7ff ffa8 	bl	8007e0c <build_xml>
}
 8007ebc:	b002      	add	sp, #8
 8007ebe:	bd10      	pop	{r4, pc}
 8007ec0:	0801d2c8 	.word	0x0801d2c8

08007ec4 <build_datareader_xml>:

int build_datareader_xml(
  const char * topic_name, const message_type_support_callbacks_t * members,
  const rmw_qos_profile_t * qos_policies, char xml[], size_t buffer_size)
{
 8007ec4:	b513      	push	{r0, r1, r4, lr}
    "</historyQos>"
    "</topic>"
    "</data_reader>"
    "</dds>";

  return build_xml(format, topic_name, members, qos_policies, xml, buffer_size);
 8007ec6:	9c04      	ldr	r4, [sp, #16]
 8007ec8:	e9cd 3400 	strd	r3, r4, [sp]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	460a      	mov	r2, r1
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	4802      	ldr	r0, [pc, #8]	; (8007edc <build_datareader_xml+0x18>)
 8007ed4:	f7ff ff9a 	bl	8007e0c <build_xml>
}
 8007ed8:	b002      	add	sp, #8
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	0801d3de 	.word	0x0801d3de

08007ee0 <get_message_typesupport_handle>:
#include <stdio.h>
#include <string.h>

const rosidl_message_type_support_t * get_message_typesupport_handle(
  const rosidl_message_type_support_t * handle, const char * identifier)
{
 8007ee0:	b510      	push	{r4, lr}
  assert(handle);
 8007ee2:	b928      	cbnz	r0, 8007ef0 <get_message_typesupport_handle+0x10>
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <get_message_typesupport_handle+0x24>)
 8007ee6:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <get_message_typesupport_handle+0x28>)
 8007ee8:	2118      	movs	r1, #24
  assert(handle->func);
 8007eea:	4808      	ldr	r0, [pc, #32]	; (8007f0c <get_message_typesupport_handle+0x2c>)
 8007eec:	f003 f9fe 	bl	800b2ec <__assert_func>
 8007ef0:	6883      	ldr	r3, [r0, #8]
 8007ef2:	b91b      	cbnz	r3, 8007efc <get_message_typesupport_handle+0x1c>
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <get_message_typesupport_handle+0x30>)
 8007ef6:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <get_message_typesupport_handle+0x28>)
 8007ef8:	2119      	movs	r1, #25
 8007efa:	e7f6      	b.n	8007eea <get_message_typesupport_handle+0xa>
  rosidl_message_typesupport_handle_function func =
    (rosidl_message_typesupport_handle_function)(handle->func);
  return func(handle, identifier);
}
 8007efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return func(handle, identifier);
 8007f00:	4718      	bx	r3
 8007f02:	bf00      	nop
 8007f04:	0801d4f7 	.word	0x0801d4f7
 8007f08:	0801d597 	.word	0x0801d597
 8007f0c:	0801d4fe 	.word	0x0801d4fe
 8007f10:	0801d56b 	.word	0x0801d56b

08007f14 <get_message_typesupport_handle_function>:

const rosidl_message_type_support_t * get_message_typesupport_handle_function(
  const rosidl_message_type_support_t * handle, const char * identifier)
{
 8007f14:	b510      	push	{r4, lr}
  assert(handle);
 8007f16:	4604      	mov	r4, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <get_message_typesupport_handle_function+0x12>
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <get_message_typesupport_handle_function+0x38>)
 8007f1c:	4a0c      	ldr	r2, [pc, #48]	; (8007f50 <get_message_typesupport_handle_function+0x3c>)
 8007f1e:	2122      	movs	r1, #34	; 0x22
  assert(handle->typesupport_identifier);
 8007f20:	480c      	ldr	r0, [pc, #48]	; (8007f54 <get_message_typesupport_handle_function+0x40>)
 8007f22:	f003 f9e3 	bl	800b2ec <__assert_func>
 8007f26:	6800      	ldr	r0, [r0, #0]
 8007f28:	b918      	cbnz	r0, 8007f32 <get_message_typesupport_handle_function+0x1e>
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	; (8007f58 <get_message_typesupport_handle_function+0x44>)
 8007f2c:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <get_message_typesupport_handle_function+0x3c>)
 8007f2e:	2123      	movs	r1, #35	; 0x23
 8007f30:	e7f6      	b.n	8007f20 <get_message_typesupport_handle_function+0xc>
  assert(identifier);
 8007f32:	b919      	cbnz	r1, 8007f3c <get_message_typesupport_handle_function+0x28>
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <get_message_typesupport_handle_function+0x48>)
 8007f36:	4a06      	ldr	r2, [pc, #24]	; (8007f50 <get_message_typesupport_handle_function+0x3c>)
 8007f38:	2124      	movs	r1, #36	; 0x24
 8007f3a:	e7f1      	b.n	8007f20 <get_message_typesupport_handle_function+0xc>
  if (strcmp(handle->typesupport_identifier, identifier) == 0) {
 8007f3c:	f7f8 f9b4 	bl	80002a8 <strcmp>
 8007f40:	2800      	cmp	r0, #0
    return handle;
  }
  return 0;
}
 8007f42:	bf0c      	ite	eq
 8007f44:	4620      	moveq	r0, r4
 8007f46:	2000      	movne	r0, #0
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0801d4f7 	.word	0x0801d4f7
 8007f50:	0801d5b6 	.word	0x0801d5b6
 8007f54:	0801d4fe 	.word	0x0801d4fe
 8007f58:	0801d578 	.word	0x0801d578
 8007f5c:	0801d58c 	.word	0x0801d58c

08007f60 <get_serialized_size_std_msgs__msg__Header>:

ROSIDL_TYPESUPPORT_MICROXRCEDDS_C_PUBLIC_std_msgs
size_t get_serialized_size_std_msgs__msg__Header(
  const void * untyped_ros_message,
  size_t current_alignment)
{
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	460c      	mov	r4, r1
  if (!untyped_ros_message) {
 8007f64:	4605      	mov	r5, r0
 8007f66:	b938      	cbnz	r0, 8007f78 <get_serialized_size_std_msgs__msg__Header+0x18>
    fprintf(stderr, "ros message handle is null\n");
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <get_serialized_size_std_msgs__msg__Header+0x34>)
 8007f6a:	490b      	ldr	r1, [pc, #44]	; (8007f98 <get_serialized_size_std_msgs__msg__Header+0x38>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68d8      	ldr	r0, [r3, #12]
 8007f70:	f003 fac6 	bl	800b500 <fprintf>
 8007f74:	4628      	mov	r0, r5
  // Member: frame_id
  current_alignment += ucdr_alignment(current_alignment, MICROXRCEDDS_PADDING) + MICROXRCEDDS_PADDING;
  current_alignment += ros_message->frame_id.size + 1;

  return current_alignment - initial_alignment;
}
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
    get_serialized_size_builtin_interfaces__msg__Time(&ros_message->stamp, current_alignment);
 8007f78:	f000 f85e 	bl	8008038 <get_serialized_size_builtin_interfaces__msg__Time>
  current_alignment +=
 8007f7c:	1826      	adds	r6, r4, r0
  current_alignment += ucdr_alignment(current_alignment, MICROXRCEDDS_PADDING) + MICROXRCEDDS_PADDING;
 8007f7e:	2104      	movs	r1, #4
 8007f80:	4630      	mov	r0, r6
 8007f82:	f00b fd47 	bl	8013a14 <ucdr_alignment>
  return current_alignment - initial_alignment;
 8007f86:	68e9      	ldr	r1, [r5, #12]
 8007f88:	f1c4 0405 	rsb	r4, r4, #5
 8007f8c:	440c      	add	r4, r1
 8007f8e:	4404      	add	r4, r0
 8007f90:	19a0      	adds	r0, r4, r6
 8007f92:	e7f0      	b.n	8007f76 <get_serialized_size_std_msgs__msg__Header+0x16>
 8007f94:	20000820 	.word	0x20000820
 8007f98:	0801d5de 	.word	0x0801d5de

08007f9c <_Header__cdr_deserialize>:
{
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4605      	mov	r5, r0
  if (!untyped_ros_message) {
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	b941      	cbnz	r1, 8007fb6 <_Header__cdr_deserialize+0x1a>
    fprintf(stderr, "ros message handle is null\n");
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <_Header__cdr_deserialize+0x44>)
 8007fa6:	490f      	ldr	r1, [pc, #60]	; (8007fe4 <_Header__cdr_deserialize+0x48>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68d8      	ldr	r0, [r3, #12]
 8007fac:	f003 faa8 	bl	800b500 <fprintf>
 8007fb0:	4625      	mov	r5, r4
}
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
      ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_microxrcedds_c, builtin_interfaces, msg, Time
 8007fb6:	f000 f891 	bl	80080dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
      )()->data))->cdr_deserialize(cdr, &ros_message->stamp);
 8007fba:	6843      	ldr	r3, [r0, #4]
  rv = ((const message_type_support_callbacks_t *)(
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	4798      	blx	r3
    rv = ucdr_deserialize_string(cdr, ros_message->frame_id.data, capacity);
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	6922      	ldr	r2, [r4, #16]
 8007fc8:	68a1      	ldr	r1, [r4, #8]
 8007fca:	f00b fda0 	bl	8013b0e <ucdr_deserialize_string>
    if (rv) {
 8007fce:	4605      	mov	r5, r0
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d0ee      	beq.n	8007fb2 <_Header__cdr_deserialize+0x16>
      ros_message->frame_id.size = strlen(ros_message->frame_id.data);
 8007fd4:	68a0      	ldr	r0, [r4, #8]
 8007fd6:	f7f8 f8f3 	bl	80001c0 <strlen>
 8007fda:	60e0      	str	r0, [r4, #12]
 8007fdc:	e7e9      	b.n	8007fb2 <_Header__cdr_deserialize+0x16>
 8007fde:	bf00      	nop
 8007fe0:	20000820 	.word	0x20000820
 8007fe4:	0801d5de 	.word	0x0801d5de

08007fe8 <_Header__cdr_serialize>:
{
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	460d      	mov	r5, r1
  if (!untyped_ros_message) {
 8007fec:	4604      	mov	r4, r0
 8007fee:	b940      	cbnz	r0, 8008002 <_Header__cdr_serialize+0x1a>
    fprintf(stderr, "ros message handle is null\n");
 8007ff0:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <_Header__cdr_serialize+0x40>)
 8007ff2:	490e      	ldr	r1, [pc, #56]	; (800802c <_Header__cdr_serialize+0x44>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68d8      	ldr	r0, [r3, #12]
 8007ff8:	f003 fa82 	bl	800b500 <fprintf>
 8007ffc:	4625      	mov	r5, r4
}
 8007ffe:	4628      	mov	r0, r5
 8008000:	bd38      	pop	{r3, r4, r5, pc}
      ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_microxrcedds_c, builtin_interfaces, msg, Time
 8008002:	f000 f86b 	bl	80080dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
      )()->data))->cdr_serialize(&ros_message->stamp, cdr);
 8008006:	6843      	ldr	r3, [r0, #4]
  rv = ((const message_type_support_callbacks_t *)(
 8008008:	4629      	mov	r1, r5
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	4620      	mov	r0, r4
 800800e:	4798      	blx	r3
  rv = ucdr_serialize_string(cdr, ros_message->frame_id.data);
 8008010:	4628      	mov	r0, r5
 8008012:	68a1      	ldr	r1, [r4, #8]
 8008014:	f00b fd6e 	bl	8013af4 <ucdr_serialize_string>
  if (rv) {
 8008018:	4605      	mov	r5, r0
 800801a:	2800      	cmp	r0, #0
 800801c:	d0ef      	beq.n	8007ffe <_Header__cdr_serialize+0x16>
    ros_message->frame_id.size = strlen(ros_message->frame_id.data);
 800801e:	68a0      	ldr	r0, [r4, #8]
 8008020:	f7f8 f8ce 	bl	80001c0 <strlen>
 8008024:	60e0      	str	r0, [r4, #12]
 8008026:	e7ea      	b.n	8007ffe <_Header__cdr_serialize+0x16>
 8008028:	20000820 	.word	0x20000820
 800802c:	0801d5de 	.word	0x0801d5de

08008030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
};

const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_microxrcedds_c, std_msgs, msg, Header)() {
  return &_Header__type_support;
}
 8008030:	4800      	ldr	r0, [pc, #0]	; (8008034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8008032:	4770      	bx	lr
 8008034:	200005dc 	.word	0x200005dc

08008038 <get_serialized_size_builtin_interfaces__msg__Time>:

ROSIDL_TYPESUPPORT_MICROXRCEDDS_C_PUBLIC_builtin_interfaces
size_t get_serialized_size_builtin_interfaces__msg__Time(
  const void * untyped_ros_message,
  size_t current_alignment)
{
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	460d      	mov	r5, r1
  if (!untyped_ros_message) {
 800803c:	4604      	mov	r4, r0
 800803e:	b938      	cbnz	r0, 8008050 <get_serialized_size_builtin_interfaces__msg__Time+0x18>
    fprintf(stderr, "ros message handle is null\n");
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <get_serialized_size_builtin_interfaces__msg__Time+0x38>)
 8008042:	490c      	ldr	r1, [pc, #48]	; (8008074 <get_serialized_size_builtin_interfaces__msg__Time+0x3c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68d8      	ldr	r0, [r3, #12]
 8008048:	f003 fa5a 	bl	800b500 <fprintf>
 800804c:	4620      	mov	r0, r4
    const size_t item_size = sizeof(ros_message->nanosec);
    current_alignment += ucdr_alignment(current_alignment, item_size) + item_size;
  }

  return current_alignment - initial_alignment;
}
 800804e:	bd38      	pop	{r3, r4, r5, pc}
    current_alignment += ucdr_alignment(current_alignment, item_size) + item_size;
 8008050:	2104      	movs	r1, #4
 8008052:	4628      	mov	r0, r5
 8008054:	f00b fcde 	bl	8013a14 <ucdr_alignment>
 8008058:	1d2c      	adds	r4, r5, #4
 800805a:	4404      	add	r4, r0
    current_alignment += ucdr_alignment(current_alignment, item_size) + item_size;
 800805c:	2104      	movs	r1, #4
 800805e:	4620      	mov	r0, r4
 8008060:	f00b fcd8 	bl	8013a14 <ucdr_alignment>
  return current_alignment - initial_alignment;
 8008064:	f1c5 0504 	rsb	r5, r5, #4
 8008068:	4428      	add	r0, r5
 800806a:	4420      	add	r0, r4
 800806c:	e7ef      	b.n	800804e <get_serialized_size_builtin_interfaces__msg__Time+0x16>
 800806e:	bf00      	nop
 8008070:	20000820 	.word	0x20000820
 8008074:	0801d5de 	.word	0x0801d5de

08008078 <_Time__cdr_serialize>:
{
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	460d      	mov	r5, r1
  if (!untyped_ros_message) {
 800807c:	4604      	mov	r4, r0
 800807e:	b148      	cbz	r0, 8008094 <_Time__cdr_serialize+0x1c>
  rv = ucdr_serialize_int32_t(cdr, ros_message->sec);
 8008080:	6801      	ldr	r1, [r0, #0]
 8008082:	4628      	mov	r0, r5
 8008084:	f00b fc1e 	bl	80138c4 <ucdr_serialize_int32_t>
  rv = ucdr_serialize_uint32_t(cdr, ros_message->nanosec);
 8008088:	6861      	ldr	r1, [r4, #4]
 800808a:	4628      	mov	r0, r5
}
 800808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rv = ucdr_serialize_uint32_t(cdr, ros_message->nanosec);
 8008090:	f00b bb32 	b.w	80136f8 <ucdr_serialize_uint32_t>
    fprintf(stderr, "ros message handle is null\n");
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <_Time__cdr_serialize+0x2c>)
 8008096:	4904      	ldr	r1, [pc, #16]	; (80080a8 <_Time__cdr_serialize+0x30>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68d8      	ldr	r0, [r3, #12]
 800809c:	f003 fa30 	bl	800b500 <fprintf>
}
 80080a0:	4620      	mov	r0, r4
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000820 	.word	0x20000820
 80080a8:	0801d5de 	.word	0x0801d5de

080080ac <_Time__cdr_deserialize>:
{
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4605      	mov	r5, r0
  if (!untyped_ros_message) {
 80080b0:	460c      	mov	r4, r1
 80080b2:	b139      	cbz	r1, 80080c4 <_Time__cdr_deserialize+0x18>
  rv = ucdr_deserialize_int32_t(cdr, &ros_message->sec);
 80080b4:	f00b fc36 	bl	8013924 <ucdr_deserialize_int32_t>
  rv = ucdr_deserialize_uint32_t(cdr, &ros_message->nanosec);
 80080b8:	1d21      	adds	r1, r4, #4
 80080ba:	4628      	mov	r0, r5
}
 80080bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  rv = ucdr_deserialize_uint32_t(cdr, &ros_message->nanosec);
 80080c0:	f00b bb7a 	b.w	80137b8 <ucdr_deserialize_uint32_t>
    fprintf(stderr, "ros message handle is null\n");
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <_Time__cdr_deserialize+0x28>)
 80080c6:	4904      	ldr	r1, [pc, #16]	; (80080d8 <_Time__cdr_deserialize+0x2c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68d8      	ldr	r0, [r3, #12]
 80080cc:	f003 fa18 	bl	800b500 <fprintf>
}
 80080d0:	4620      	mov	r0, r4
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	20000820 	.word	0x20000820
 80080d8:	0801d5de 	.word	0x0801d5de

080080dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
};

const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_microxrcedds_c, builtin_interfaces, msg, Time)() {
  return &_Time__type_support;
}
 80080dc:	4800      	ldr	r0, [pc, #0]	; (80080e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80080de:	4770      	bx	lr
 80080e0:	20000604 	.word	0x20000604

080080e4 <read_submessage_list>:
            break;
    }
}

void read_submessage_list(uxrSession* session, ucdrBuffer* submessages, uxrStreamId stream_id)
{
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	b099      	sub	sp, #100	; 0x64
 80080ea:	4e9c      	ldr	r6, [pc, #624]	; (800835c <read_submessage_list+0x278>)
 80080ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80080ee:	4604      	mov	r4, r0
 80080f0:	460d      	mov	r5, r1
    uint8_t id; uint16_t length; uint8_t flags;
    while(uxr_read_submessage_header(submessages, &id, &length, &flags))
 80080f2:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80080f6:	aa0e      	add	r2, sp, #56	; 0x38
 80080f8:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80080fc:	4628      	mov	r0, r5
 80080fe:	f00c fb60 	bl	80147c2 <uxr_read_submessage_header>
 8008102:	b910      	cbnz	r0, 800810a <read_submessage_list+0x26>
    {
        read_submessage(session, submessages, id, stream_id, length, flags);
    }
}
 8008104:	b019      	add	sp, #100	; 0x64
 8008106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        read_submessage(session, submessages, id, stream_id, length, flags);
 800810a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800810e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e

void read_submessage(uxrSession* session, ucdrBuffer* submessage, uint8_t submessage_id, uxrStreamId stream_id, uint16_t length, uint8_t flags)
{
    switch(submessage_id)
 8008112:	3b04      	subs	r3, #4
 8008114:	2b0b      	cmp	r3, #11
 8008116:	d8ec      	bhi.n	80080f2 <read_submessage_list+0xe>
 8008118:	a101      	add	r1, pc, #4	; (adr r1, 8008120 <read_submessage_list+0x3c>)
 800811a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008151 	.word	0x08008151
 8008124:	0800815f 	.word	0x0800815f
 8008128:	080080f3 	.word	0x080080f3
 800812c:	080080f3 	.word	0x080080f3
 8008130:	080080f3 	.word	0x080080f3
 8008134:	0800818f 	.word	0x0800818f
 8008138:	08008237 	.word	0x08008237
 800813c:	080081f5 	.word	0x080081f5
 8008140:	080080f3 	.word	0x080080f3
 8008144:	080080f3 	.word	0x080080f3
 8008148:	080080f3 	.word	0x080080f3
 800814c:	0800829f 	.word	0x0800829f
    {
        case SUBMESSAGE_ID_STATUS_AGENT:
            if(stream_id.type == UXR_NONE_STREAM)
 8008150:	2a00      	cmp	r2, #0
 8008152:	d1ce      	bne.n	80080f2 <read_submessage_list+0xe>
            {
                uxr_read_create_session_status(&session->info, submessage);
 8008154:	4629      	mov	r1, r5
 8008156:	4620      	mov	r0, r4
 8008158:	f00c f978 	bl	801444c <uxr_read_create_session_status>
 800815c:	e7c9      	b.n	80080f2 <read_submessage_list+0xe>
            }
            break;

        case SUBMESSAGE_ID_STATUS:
            if(stream_id.type == UXR_NONE_STREAM)
 800815e:	b922      	cbnz	r2, 800816a <read_submessage_list+0x86>
            {
                uxr_read_delete_session_status(&session->info, submessage);
 8008160:	4629      	mov	r1, r5
 8008162:	4620      	mov	r0, r4
 8008164:	f00c fa03 	bl	801456e <uxr_read_delete_session_status>
 8008168:	e7c3      	b.n	80080f2 <read_submessage_list+0xe>
}

void read_submessage_status(uxrSession* session, ucdrBuffer* submessage)
{
    STATUS_Payload payload;
    uxr_deserialize_STATUS_Payload(submessage, &payload);
 800816a:	a912      	add	r1, sp, #72	; 0x48
 800816c:	4628      	mov	r0, r5
 800816e:	f00c fe69 	bl	8014e44 <uxr_deserialize_STATUS_Payload>

    uxrObjectId object_id; uint16_t request_id;
    uxr_parse_base_object_request(&payload.base.related_request, &object_id, &request_id);
 8008172:	aa10      	add	r2, sp, #64	; 0x40
 8008174:	a911      	add	r1, sp, #68	; 0x44
 8008176:	a812      	add	r0, sp, #72	; 0x48
 8008178:	f00c f9e8 	bl	801454c <uxr_parse_base_object_request>

    uint8_t status = payload.base.result.status;
    process_status(session, object_id, request_id, status);
 800817c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8008180:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8008184:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008186:	4620      	mov	r0, r4
 8008188:	f00b fde6 	bl	8013d58 <process_status>
}
 800818c:	e7b1      	b.n	80080f2 <read_submessage_list+0xe>
 800818e:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8008192:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8008196:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
            read_submessage_data(session, submessage, length, stream_id, flags & FORMAT_MASK);
 800819a:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 800819e:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
                                   uxrStreamId stream_id, uxrObjectId object_id, uint16_t request_id);

void read_submessage_data(uxrSession* session, ucdrBuffer* submessage, uint16_t length, uxrStreamId stream_id, uint8_t format)
{
    BaseObjectRequest base;
    uxr_deserialize_BaseObjectRequest(submessage, &base);
 80081a2:	4628      	mov	r0, r5
 80081a4:	a911      	add	r1, sp, #68	; 0x44
 80081a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
        read_submessage(session, submessages, id, stream_id, length, flags);
 80081aa:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
            read_submessage_data(session, submessage, length, stream_id, flags & FORMAT_MASK);
 80081ae:	f89d 8037 	ldrb.w	r8, [sp, #55]	; 0x37
 80081b2:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    uxr_deserialize_BaseObjectRequest(submessage, &base);
 80081b6:	f00c fdcc 	bl	8014d52 <uxr_deserialize_BaseObjectRequest>
    length = (uint16_t)(length - 4); //CHANGE: by a future size_of_BaseObjectRequest

    uxrObjectId object_id;
    uint16_t request_id;
    uxr_parse_base_object_request(&base, &object_id, &request_id);
 80081ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80081bc:	a912      	add	r1, sp, #72	; 0x48
 80081be:	a811      	add	r0, sp, #68	; 0x44
 80081c0:	f00c f9c4 	bl	801454c <uxr_parse_base_object_request>

    process_status(session, object_id, request_id, UXR_STATUS_OK);
 80081c4:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80081c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80081ca:	4620      	mov	r0, r4
 80081cc:	2300      	movs	r3, #0
 80081ce:	f00b fdc3 	bl	8013d58 <process_status>
    read_submessage_format(session, submessage, length, format, stream_id, object_id, request_id);
 80081d2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80081d6:	9302      	str	r3, [sp, #8]
 80081d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081da:	9301      	str	r3, [sp, #4]
            read_submessage_data(session, submessage, length, stream_id, flags & FORMAT_MASK);
 80081dc:	f008 080e 	and.w	r8, r8, #14
    read_submessage_format(session, submessage, length, format, stream_id, object_id, request_id);
 80081e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081e2:	9300      	str	r3, [sp, #0]
    length = (uint16_t)(length - 4); //CHANGE: by a future size_of_BaseObjectRequest
 80081e4:	1f3a      	subs	r2, r7, #4
    read_submessage_format(session, submessage, length, format, stream_id, object_id, request_id);
 80081e6:	4643      	mov	r3, r8
 80081e8:	b292      	uxth	r2, r2
 80081ea:	4629      	mov	r1, r5
 80081ec:	4620      	mov	r0, r4
 80081ee:	f00e fda9 	bl	8016d44 <read_submessage_format>
            break;
 80081f2:	e77e      	b.n	80080f2 <read_submessage_list+0xe>
}

void read_submessage_heartbeat(uxrSession* session, ucdrBuffer* submessage)
{
    HEARTBEAT_Payload heartbeat;
    uxr_deserialize_HEARTBEAT_Payload(submessage, &heartbeat);
 80081f4:	a912      	add	r1, sp, #72	; 0x48
 80081f6:	4628      	mov	r0, r5
 80081f8:	f00c fe71 	bl	8014ede <uxr_deserialize_HEARTBEAT_Payload>
    uxrStreamId id = uxr_stream_id_from_raw(heartbeat.stream_id, UXR_INPUT_STREAM);
 80081fc:	2100      	movs	r1, #0
 80081fe:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8008202:	f00c f9e4 	bl	80145ce <uxr_stream_id_from_raw>
 8008206:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800820a:	9011      	str	r0, [sp, #68]	; 0x44

    uxrInputReliableStream* stream = uxr_get_input_reliable_stream(&session->streams, id.index);
 800820c:	4639      	mov	r1, r7
 800820e:	f104 0008 	add.w	r0, r4, #8
 8008212:	f00c faa1 	bl	8014758 <uxr_get_input_reliable_stream>
    if(stream)
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f af6b 	beq.w	80080f2 <read_submessage_list+0xe>
    {
        uxr_process_heartbeat(stream, heartbeat.first_unacked_seq_nr, heartbeat.last_unacked_seq_nr);
 800821c:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8008220:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8008224:	f00e fb9d 	bl	8016962 <uxr_process_heartbeat>
        write_submessage_acknack(session, id);
 8008228:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800822c:	463a      	mov	r2, r7
 800822e:	4620      	mov	r0, r4
 8008230:	f00b fdd1 	bl	8013dd6 <write_submessage_acknack.isra.0>
    }
}
 8008234:	e75d      	b.n	80080f2 <read_submessage_list+0xe>

void read_submessage_acknack(uxrSession* session, ucdrBuffer* submessage)
{
    ACKNACK_Payload acknack;
    uxr_deserialize_ACKNACK_Payload(submessage, &acknack);
 8008236:	a912      	add	r1, sp, #72	; 0x48
 8008238:	4628      	mov	r0, r5
 800823a:	f00c fe2a 	bl	8014e92 <uxr_deserialize_ACKNACK_Payload>
    uxrStreamId id = uxr_stream_id_from_raw(acknack.stream_id, UXR_INPUT_STREAM);
 800823e:	2100      	movs	r1, #0
 8008240:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8008244:	f00c f9c3 	bl	80145ce <uxr_stream_id_from_raw>
 8008248:	900f      	str	r0, [sp, #60]	; 0x3c

    uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, id.index);
 800824a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800824e:	f104 0008 	add.w	r0, r4, #8
 8008252:	f00c fa6e 	bl	8014732 <uxr_get_output_reliable_stream>
    if(stream)
 8008256:	4607      	mov	r7, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	f43f af4a 	beq.w	80080f2 <read_submessage_list+0xe>
    {
        uint16_t nack_bitmap = (uint16_t)(((uint16_t)acknack.nack_bitmap[0] << 8) + acknack.nack_bitmap[1]);
 800825e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8008262:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
        uxr_process_acknack(stream, nack_bitmap, acknack.first_unacked_seq_num);
 8008266:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
        uint16_t nack_bitmap = (uint16_t)(((uint16_t)acknack.nack_bitmap[0] << 8) + acknack.nack_bitmap[1]);
 800826a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
        uxr_process_acknack(stream, nack_bitmap, acknack.first_unacked_seq_num);
 800826e:	b289      	uxth	r1, r1
 8008270:	f00e fd02 	bl	8016c78 <uxr_process_acknack>

        uint8_t* buffer; size_t length;
        uxrSeqNum seq_num_it = uxr_begin_output_nack_buffer_it(stream);
 8008274:	4638      	mov	r0, r7
 8008276:	f00e fcd6 	bl	8016c26 <uxr_begin_output_nack_buffer_it>
 800827a:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
        while (uxr_next_reliable_nack_buffer_to_send(stream, &buffer, &length, &seq_num_it))
 800827e:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8008282:	aa11      	add	r2, sp, #68	; 0x44
 8008284:	a910      	add	r1, sp, #64	; 0x40
 8008286:	4638      	mov	r0, r7
 8008288:	f00e fccf 	bl	8016c2a <uxr_next_reliable_nack_buffer_to_send>
 800828c:	2800      	cmp	r0, #0
 800828e:	f43f af30 	beq.w	80080f2 <read_submessage_list+0xe>
        {
            send_message(session, buffer, length);
 8008292:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8008296:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008298:	f00b fd9a 	bl	8013dd0 <send_message.isra.0>
 800829c:	e7ef      	b.n	800827e <read_submessage_list+0x19a>
}

void read_submessage_timestamp_reply(uxrSession* session, ucdrBuffer* submessage)
{
    TIMESTAMP_REPLY_Payload timestamp_reply;
    uxr_deserialize_TIMESTAMP_REPLY_Payload(submessage, &timestamp_reply);
 800829e:	a912      	add	r1, sp, #72	; 0x48
 80082a0:	4628      	mov	r0, r5
 80082a2:	f00c fe2e 	bl	8014f02 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
    }
}

void process_timestamp_reply(uxrSession* session, TIMESTAMP_REPLY_Payload* timestamp)
{
    if(session->on_time != NULL)
 80082a6:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
 80082aa:	b32f      	cbz	r7, 80082f8 <read_submessage_list+0x214>
    {
        session->on_time(session,
 80082ac:	f000 f8bc 	bl	8008428 <uxr_nanos>
#include <uxr/client/visibility.h>
#include <stdint.h>

static inline int64_t uxr_convert_to_nanos(int32_t sec, uint32_t nsec)
{
    return ((int64_t)sec * 1000000000) + nsec;
 80082b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082b6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80082ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80082bc:	9106      	str	r1, [sp, #24]
 80082be:	2100      	movs	r1, #0
 80082c0:	fbc6 0103 	smlal	r0, r1, r6, r3
 80082c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80082cc:	2100      	movs	r1, #0
 80082ce:	fbc6 0103 	smlal	r0, r1, r6, r3
 80082d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80082d8:	4688      	mov	r8, r1
 80082da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80082dc:	f04f 0900 	mov.w	r9, #0
 80082e0:	fbc6 8901 	smlal	r8, r9, r6, r1
 80082e4:	e9cd 8900 	strd	r8, r9, [sp]
 80082e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082ec:	4620      	mov	r0, r4
 80082ee:	47b8      	blx	r7
                                          timestamp->receive_timestamp.nanoseconds);
        int64_t t2 = uxr_convert_to_nanos(timestamp->transmit_timestamp.seconds,
                                          timestamp->transmit_timestamp.nanoseconds);
        session->time_offset = ((t0 + t3) - (t1 + t2)) / 2;
    }
    session->synchronized = true;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
 80082f6:	e6fc      	b.n	80080f2 <read_submessage_list+0xe>
        int64_t t3 = uxr_nanos();
 80082f8:	f000 f896 	bl	8008428 <uxr_nanos>
 80082fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082fe:	460f      	mov	r7, r1
        session->time_offset = ((t0 + t3) - (t1 + t2)) / 2;
 8008300:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008302:	fb82 2306 	smull	r2, r3, r2, r6
 8008306:	1a52      	subs	r2, r2, r1
 8008308:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800830a:	f163 0300 	sbc.w	r3, r3, #0
 800830e:	1852      	adds	r2, r2, r1
 8008310:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008312:	f143 0300 	adc.w	r3, r3, #0
 8008316:	ebb2 0801 	subs.w	r8, r2, r1
 800831a:	f163 0900 	sbc.w	r9, r3, #0
 800831e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008320:	fb83 2306 	smull	r2, r3, r3, r6
 8008324:	ebb8 0102 	subs.w	r1, r8, r2
 8008328:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800832a:	eb69 0c03 	sbc.w	ip, r9, r3
 800832e:	fb82 8906 	smull	r8, r9, r2, r6
 8008332:	ebb1 0208 	subs.w	r2, r1, r8
 8008336:	eb6c 0309 	sbc.w	r3, ip, r9
 800833a:	eb12 0a00 	adds.w	sl, r2, r0
 800833e:	eb43 0b07 	adc.w	fp, r3, r7
 8008342:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8008346:	eb1a 0003 	adds.w	r0, sl, r3
 800834a:	f14b 0100 	adc.w	r1, fp, #0
 800834e:	0843      	lsrs	r3, r0, #1
 8008350:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8008354:	104a      	asrs	r2, r1, #1
 8008356:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800835a:	e7c9      	b.n	80082f0 <read_submessage_list+0x20c>
 800835c:	3b9aca00 	.word	0x3b9aca00

08008360 <uxr_create_input_reliable_stream>:
{
 8008360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return uxr_add_input_reliable_buffer(&session->streams, buffer, size, history, on_get_fragmentation_info);
 8008362:	4c0b      	ldr	r4, [pc, #44]	; (8008390 <uxr_create_input_reliable_stream+0x30>)
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	3008      	adds	r0, #8
 8008368:	f00c f9c5 	bl	80146f6 <uxr_add_input_reliable_buffer>
 800836c:	4603      	mov	r3, r0
 800836e:	b2da      	uxtb	r2, r3
 8008370:	2000      	movs	r0, #0
 8008372:	f362 0007 	bfi	r0, r2, #0, #8
 8008376:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800837a:	f362 200f 	bfi	r0, r2, #8, #8
 800837e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008382:	f362 4017 	bfi	r0, r2, #16, #8
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	f363 601f 	bfi	r0, r3, #24, #8
}
 800838c:	b004      	add	sp, #16
 800838e:	bd10      	pop	{r4, pc}
 8008390:	08013d93 	.word	0x08013d93

08008394 <uxr_buffer_create_session>:
    info->last_request_id = RESERVED_REQUESTS_ID;
    info->last_requested_status = UXR_STATUS_NONE;
}

void uxr_buffer_create_session(uxrSessionInfo* info, ucdrBuffer* ub, uint16_t mtu)
{
 8008394:	b530      	push	{r4, r5, lr}
    CREATE_CLIENT_Payload payload;
    payload.client_representation.xrce_cookie = DDS_XRCE_XRCE_COOKIE;
 8008396:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <uxr_buffer_create_session+0x5c>)
{
 8008398:	4604      	mov	r4, r0
    payload.client_representation.xrce_cookie = DDS_XRCE_XRCE_COOKIE;
 800839a:	f853 0b04 	ldr.w	r0, [r3], #4
{
 800839e:	b089      	sub	sp, #36	; 0x24
    payload.client_representation.xrce_version = DDS_XRCE_XRCE_VERSION;
    payload.client_representation.xrce_vendor_id = VENDOR_ID_EPROSIMA;
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    payload.client_representation.client_key.data[0] = info->key[0];
 80083a6:	7863      	ldrb	r3, [r4, #1]
 80083a8:	f88d 3008 	strb.w	r3, [sp, #8]
    payload.client_representation.client_key.data[1] = info->key[1];
 80083ac:	78a3      	ldrb	r3, [r4, #2]
 80083ae:	f88d 3009 	strb.w	r3, [sp, #9]
    payload.client_representation.client_key.data[2] = info->key[2];
 80083b2:	78e3      	ldrb	r3, [r4, #3]
 80083b4:	f88d 300a 	strb.w	r3, [sp, #10]
    payload.client_representation.client_key.data[3] = info->key[3];
 80083b8:	7923      	ldrb	r3, [r4, #4]
 80083ba:	f88d 300b 	strb.w	r3, [sp, #11]
    payload.client_representation.session_id = info->id;
 80083be:	7823      	ldrb	r3, [r4, #0]
 80083c0:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80083c4:	460d      	mov	r5, r1
    payload.client_representation.optional_properties = false;
 80083c6:	2300      	movs	r3, #0
    payload.client_representation.xrce_version = DDS_XRCE_XRCE_VERSION;
 80083c8:	2101      	movs	r1, #1
    payload.client_representation.xrce_cookie = DDS_XRCE_XRCE_COOKIE;
 80083ca:	9000      	str	r0, [sp, #0]
    payload.client_representation.xrce_version = DDS_XRCE_XRCE_VERSION;
 80083cc:	f8ad 1004 	strh.w	r1, [sp, #4]
    payload.client_representation.mtu = mtu;
 80083d0:	f8ad 201c 	strh.w	r2, [sp, #28]

    info->last_request_id = UXR_REQUEST_LOGIN;
 80083d4:	80e1      	strh	r1, [r4, #6]

    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_CREATE_CLIENT, CREATE_CLIENT_PAYLOAD_SIZE, 0);
 80083d6:	2210      	movs	r2, #16
 80083d8:	4619      	mov	r1, r3
 80083da:	4628      	mov	r0, r5
    payload.client_representation.optional_properties = false;
 80083dc:	f88d 300d 	strb.w	r3, [sp, #13]
    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_CREATE_CLIENT, CREATE_CLIENT_PAYLOAD_SIZE, 0);
 80083e0:	f00c f9d6 	bl	8014790 <uxr_buffer_submessage_header>
    (void) uxr_serialize_CREATE_CLIENT_Payload(ub, &payload);
 80083e4:	4669      	mov	r1, sp
 80083e6:	4628      	mov	r0, r5
 80083e8:	f00c fd0e 	bl	8014e08 <uxr_serialize_CREATE_CLIENT_Payload>
}
 80083ec:	b009      	add	sp, #36	; 0x24
 80083ee:	bd30      	pop	{r4, r5, pc}
 80083f0:	0801b599 	.word	0x0801b599

080083f4 <uxr_buffer_delete_session>:

void uxr_buffer_delete_session(uxrSessionInfo* info, ucdrBuffer* ub)
{
 80083f4:	b513      	push	{r0, r1, r4, lr}
    DELETE_Payload payload;
    payload.base.request_id = COMPOUND_LITERAL(RequestId){{0x00, UXR_REQUEST_LOGOUT}};
 80083f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    payload.base.object_id = DDS_XRCE_OBJECTID_CLIENT;
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <uxr_buffer_delete_session+0x30>)
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	f8ad 3006 	strh.w	r3, [sp, #6]
{
 8008406:	460c      	mov	r4, r1

    info->last_request_id = UXR_REQUEST_LOGOUT;
 8008408:	2302      	movs	r3, #2
 800840a:	80c3      	strh	r3, [r0, #6]

    (void) uxr_buffer_submessage_header(ub, SUBMESSAGE_ID_DELETE, DELETE_CLIENT_PAYLOAD_SIZE, 0);
 800840c:	2204      	movs	r2, #4
 800840e:	2300      	movs	r3, #0
 8008410:	2103      	movs	r1, #3
 8008412:	4620      	mov	r0, r4
 8008414:	f00c f9bc 	bl	8014790 <uxr_buffer_submessage_header>
    (void) uxr_serialize_DELETE_Payload(ub, &payload);
 8008418:	a901      	add	r1, sp, #4
 800841a:	4620      	mov	r0, r4
 800841c:	f00c fd03 	bl	8014e26 <uxr_serialize_DELETE_Payload>
}
 8008420:	b002      	add	sp, #8
 8008422:	bd10      	pop	{r4, pc}
 8008424:	0801b59f 	.word	0x0801b59f

08008428 <uxr_nanos>:
{
    return uxr_nanos() / 1000000;
}

int64_t uxr_nanos(void)
{
 8008428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800842a:	2001      	movs	r0, #1
 800842c:	4669      	mov	r1, sp
 800842e:	f7f9 fb5f 	bl	8001af0 <z_impl_clock_gettime>
    total_tick |= (int64_t) tick_count.xTimeOnEntering;
    return ( ( total_tick / (int64_t) portTICK_PERIOD_MS ) * 1000000 );
#else
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    return (((int64_t)ts.tv_sec) * 1000000000) + ts.tv_nsec;
 8008432:	4907      	ldr	r1, [pc, #28]	; (8008450 <uxr_nanos+0x28>)
 8008434:	9a00      	ldr	r2, [sp, #0]
 8008436:	9801      	ldr	r0, [sp, #4]
 8008438:	fba2 2301 	umull	r2, r3, r2, r1
 800843c:	fb01 3300 	mla	r3, r1, r0, r3
#endif
}
 8008440:	9802      	ldr	r0, [sp, #8]
 8008442:	4684      	mov	ip, r0
 8008444:	1810      	adds	r0, r2, r0
 8008446:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 800844a:	b005      	add	sp, #20
 800844c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008450:	3b9aca00 	.word	0x3b9aca00

08008454 <uxr_millis>:
{
 8008454:	b508      	push	{r3, lr}
    return uxr_nanos() / 1000000;
 8008456:	f7ff ffe7 	bl	8008428 <uxr_nanos>
 800845a:	4a02      	ldr	r2, [pc, #8]	; (8008464 <uxr_millis+0x10>)
 800845c:	2300      	movs	r3, #0
 800845e:	f7f8 ff0b 	bl	8001278 <__aeabi_ldivmod>
}
 8008462:	bd08      	pop	{r3, pc}
 8008464:	000f4240 	.word	0x000f4240

08008468 <rcl_take_response_with_info>:
rcl_ret_t
rcl_take_response_with_info(
  const rcl_client_t * client,
  rmw_service_info_t * request_header,
  void * ros_response)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Client taking service response");
 800846a:	4f2f      	ldr	r7, [pc, #188]	; (8008528 <rcl_take_response_with_info+0xc0>)
{
 800846c:	4615      	mov	r5, r2
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Client taking service response");
 800846e:	783a      	ldrb	r2, [r7, #0]
{
 8008470:	b085      	sub	sp, #20
 8008472:	4606      	mov	r6, r0
 8008474:	460c      	mov	r4, r1
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Client taking service response");
 8008476:	b922      	cbnz	r2, 8008482 <rcl_take_response_with_info+0x1a>
 8008478:	f00a fcd0 	bl	8012e1c <rcutils_logging_initialize>
 800847c:	b108      	cbz	r0, 8008482 <rcl_take_response_with_info+0x1a>
 800847e:	f7fe fd73 	bl	8006f68 <rcutils_reset_error>
 8008482:	482a      	ldr	r0, [pc, #168]	; (800852c <rcl_take_response_with_info+0xc4>)
 8008484:	210a      	movs	r1, #10
 8008486:	f7fe ffb5 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800848a:	b128      	cbz	r0, 8008498 <rcl_take_response_with_info+0x30>
 800848c:	4b28      	ldr	r3, [pc, #160]	; (8008530 <rcl_take_response_with_info+0xc8>)
 800848e:	4a27      	ldr	r2, [pc, #156]	; (800852c <rcl_take_response_with_info+0xc4>)
 8008490:	4828      	ldr	r0, [pc, #160]	; (8008534 <rcl_take_response_with_info+0xcc>)
 8008492:	210a      	movs	r1, #10
 8008494:	f7fe ffd8 	bl	8007448 <rcutils_log>
  if (!rcl_client_is_valid(client)) {
 8008498:	4630      	mov	r0, r6
 800849a:	f00c fdbb 	bl	8015014 <rcl_client_is_valid>
 800849e:	2800      	cmp	r0, #0
 80084a0:	d03c      	beq.n	800851c <rcl_take_response_with_info+0xb4>
    return RCL_RET_CLIENT_INVALID;  // error already set
  }

  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d03d      	beq.n	8008522 <rcl_take_response_with_info+0xba>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_response, RCL_RET_INVALID_ARGUMENT);
 80084a6:	2d00      	cmp	r5, #0
 80084a8:	d03b      	beq.n	8008522 <rcl_take_response_with_info+0xba>

  bool taken = false;
  request_header->source_timestamp = 0;
  request_header->received_timestamp = 0;
  if (rmw_take_response(
      client->impl->rmw_handle, request_header, ros_response, &taken) != RMW_RET_OK)
 80084aa:	6830      	ldr	r0, [r6, #0]
  bool taken = false;
 80084ac:	2300      	movs	r3, #0
  request_header->source_timestamp = 0;
 80084ae:	2200      	movs	r2, #0
  bool taken = false;
 80084b0:	f88d 300f 	strb.w	r3, [sp, #15]
  request_header->source_timestamp = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e9c4 2300 	strd	r2, r3, [r4]
  request_header->received_timestamp = 0;
 80084ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if (rmw_take_response(
 80084be:	4621      	mov	r1, r4
 80084c0:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80084c2:	f10d 030f 	add.w	r3, sp, #15
 80084c6:	462a      	mov	r2, r5
 80084c8:	f00d ffb0 	bl	801642c <rmw_take_response>
 80084cc:	4604      	mov	r4, r0
 80084ce:	bb18      	cbnz	r0, 8008518 <rcl_take_response_with_info+0xb0>
  {
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
  }
  RCUTILS_LOG_DEBUG_NAMED(
 80084d0:	783b      	ldrb	r3, [r7, #0]
 80084d2:	b923      	cbnz	r3, 80084de <rcl_take_response_with_info+0x76>
 80084d4:	f00a fca2 	bl	8012e1c <rcutils_logging_initialize>
 80084d8:	b108      	cbz	r0, 80084de <rcl_take_response_with_info+0x76>
 80084da:	f7fe fd45 	bl	8006f68 <rcutils_reset_error>
 80084de:	4813      	ldr	r0, [pc, #76]	; (800852c <rcl_take_response_with_info+0xc4>)
 80084e0:	210a      	movs	r1, #10
 80084e2:	f7fe ff87 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80084e6:	b168      	cbz	r0, 8008504 <rcl_take_response_with_info+0x9c>
 80084e8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80084ec:	4a12      	ldr	r2, [pc, #72]	; (8008538 <rcl_take_response_with_info+0xd0>)
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <rcl_take_response_with_info+0xd4>)
 80084f0:	4813      	ldr	r0, [pc, #76]	; (8008540 <rcl_take_response_with_info+0xd8>)
 80084f2:	2900      	cmp	r1, #0
 80084f4:	bf08      	it	eq
 80084f6:	4613      	moveq	r3, r2
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4a0c      	ldr	r2, [pc, #48]	; (800852c <rcl_take_response_with_info+0xc4>)
 80084fc:	4b11      	ldr	r3, [pc, #68]	; (8008544 <rcl_take_response_with_info+0xdc>)
 80084fe:	210a      	movs	r1, #10
 8008500:	f7fe ffa2 	bl	8007448 <rcutils_log>
    ROS_PACKAGE_NAME, "Client take response succeeded: %s", taken ? "true" : "false");
  if (!taken) {
 8008504:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return RCL_RET_CLIENT_TAKE_FAILED;
 8008508:	f240 13f5 	movw	r3, #501	; 0x1f5
 800850c:	2a00      	cmp	r2, #0
 800850e:	bf08      	it	eq
 8008510:	461c      	moveq	r4, r3
  }
  return RCL_RET_OK;
}
 8008512:	4620      	mov	r0, r4
 8008514:	b005      	add	sp, #20
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return RCL_RET_ERROR;
 8008518:	2401      	movs	r4, #1
 800851a:	e7fa      	b.n	8008512 <rcl_take_response_with_info+0xaa>
    return RCL_RET_CLIENT_INVALID;  // error already set
 800851c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8008520:	e7f7      	b.n	8008512 <rcl_take_response_with_info+0xaa>
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 8008522:	240b      	movs	r4, #11
 8008524:	e7f5      	b.n	8008512 <rcl_take_response_with_info+0xaa>
 8008526:	bf00      	nop
 8008528:	2000461a 	.word	0x2000461a
 800852c:	0801c072 	.word	0x0801c072
 8008530:	0801d6c9 	.word	0x0801d6c9
 8008534:	2000062c 	.word	0x2000062c
 8008538:	0801d6c3 	.word	0x0801d6c3
 800853c:	0801d6be 	.word	0x0801d6be
 8008540:	20000638 	.word	0x20000638
 8008544:	0801d6e8 	.word	0x0801d6e8

08008548 <rcl_get_zero_initialized_context>:
  // ensure assumption about static storage
  static_assert(
    sizeof(context.instance_id_storage) >= sizeof(atomic_uint_least64_t),
    "expected rcl_context_t's instance id storage to be >= size of atomic_uint_least64_t");
  // initialize atomic
  atomic_init((atomic_uint_least64_t *)(&context.instance_id_storage), 0);
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <rcl_get_zero_initialized_context+0x18>)
{
 800854a:	b510      	push	{r4, lr}
  atomic_init((atomic_uint_least64_t *)(&context.instance_id_storage), 0);
 800854c:	2100      	movs	r1, #0
{
 800854e:	4604      	mov	r4, r0
  atomic_init((atomic_uint_least64_t *)(&context.instance_id_storage), 0);
 8008550:	2000      	movs	r0, #0
 8008552:	e9c3 0102 	strd	r0, r1, [r3, #8]
  return context;
 8008556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800855c:	4620      	mov	r0, r4
 800855e:	bd10      	pop	{r4, pc}
 8008560:	20003d98 	.word	0x20003d98

08008564 <rcl_expand_topic_name>:
  const char * node_name,
  const char * node_namespace,
  const rcutils_string_map_t * substitutions,
  rcl_allocator_t allocator,
  char ** output_topic_name)
{
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	b08b      	sub	sp, #44	; 0x2c
 800856a:	4691      	mov	r9, r2
 800856c:	9106      	str	r1, [sp, #24]
 800856e:	9307      	str	r3, [sp, #28]
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_NODE_INVALID_NAMESPACE);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_UNKNOWN_SUBSTITUTION);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);

  // check arguments that could be null
  RCL_CHECK_ARGUMENT_FOR_NULL(input_topic_name, RCL_RET_INVALID_ARGUMENT);
 8008570:	4606      	mov	r6, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	f000 8108 	beq.w	8008788 <rcl_expand_topic_name+0x224>
  RCL_CHECK_ARGUMENT_FOR_NULL(node_name, RCL_RET_INVALID_ARGUMENT);
 8008578:	2900      	cmp	r1, #0
 800857a:	f000 8105 	beq.w	8008788 <rcl_expand_topic_name+0x224>
  RCL_CHECK_ARGUMENT_FOR_NULL(node_namespace, RCL_RET_INVALID_ARGUMENT);
 800857e:	2a00      	cmp	r2, #0
 8008580:	f000 8102 	beq.w	8008788 <rcl_expand_topic_name+0x224>
  RCL_CHECK_ARGUMENT_FOR_NULL(substitutions, RCL_RET_INVALID_ARGUMENT);
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 80fe 	beq.w	8008788 <rcl_expand_topic_name+0x224>
  RCL_CHECK_ARGUMENT_FOR_NULL(output_topic_name, RCL_RET_INVALID_ARGUMENT);
 800858c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 80fa 	beq.w	8008788 <rcl_expand_topic_name+0x224>
  // validate the input topic
  int validation_result;
  rcl_ret_t ret = rcl_validate_topic_name(input_topic_name, &validation_result, NULL);
 8008594:	2200      	movs	r2, #0
 8008596:	a909      	add	r1, sp, #36	; 0x24
 8008598:	f00d f84a 	bl	8015630 <rcl_validate_topic_name>
  if (ret != RCL_RET_OK) {
 800859c:	4604      	mov	r4, r0
 800859e:	b960      	cbnz	r0, 80085ba <rcl_expand_topic_name+0x56>
    // error message already set
    return ret;
  }
  if (validation_result != RCL_TOPIC_NAME_VALID) {
 80085a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 80f2 	bne.w	800878c <rcl_expand_topic_name+0x228>
    RCL_SET_ERROR_MSG("topic name is invalid");
    return RCL_RET_TOPIC_NAME_INVALID;
  }
  // validate the node name
  rmw_ret_t rmw_ret;
  rmw_ret = rmw_validate_node_name(node_name, &validation_result, NULL);
 80085a8:	4602      	mov	r2, r0
 80085aa:	a909      	add	r1, sp, #36	; 0x24
 80085ac:	9806      	ldr	r0, [sp, #24]
 80085ae:	f00d fe00 	bl	80161b2 <rmw_validate_node_name>
  if (rmw_ret != RMW_RET_OK) {
 80085b2:	b130      	cbz	r0, 80085c2 <rcl_expand_topic_name+0x5e>
  }
  // validate the namespace
  rmw_ret = rmw_validate_namespace(node_namespace, &validation_result, NULL);
  if (rmw_ret != RMW_RET_OK) {
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 80085b4:	f00c fd5b 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 80085b8:	4604      	mov	r4, r0
    }
  }
  // finally store the result in the out pointer and return
  *output_topic_name = local_output;
  return RCL_RET_OK;
}
 80085ba:	4620      	mov	r0, r4
 80085bc:	b00b      	add	sp, #44	; 0x2c
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (validation_result != RMW_NODE_NAME_VALID) {
 80085c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	f040 80e3 	bne.w	8008790 <rcl_expand_topic_name+0x22c>
  rmw_ret = rmw_validate_namespace(node_namespace, &validation_result, NULL);
 80085ca:	a909      	add	r1, sp, #36	; 0x24
 80085cc:	4648      	mov	r0, r9
 80085ce:	f00d fddf 	bl	8016190 <rmw_validate_namespace>
  if (rmw_ret != RMW_RET_OK) {
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d1ee      	bne.n	80085b4 <rcl_expand_topic_name+0x50>
  if (validation_result != RMW_NODE_NAME_VALID) {
 80085d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80085d8:	2c00      	cmp	r4, #0
 80085da:	f040 80db 	bne.w	8008794 <rcl_expand_topic_name+0x230>
  bool has_a_substitution = strchr(input_topic_name, '{') != NULL;
 80085de:	217b      	movs	r1, #123	; 0x7b
 80085e0:	4630      	mov	r0, r6
 80085e2:	f00f fab6 	bl	8017b52 <strchr>
  bool has_a_namespace_tilde = input_topic_name[0] == '~';
 80085e6:	7833      	ldrb	r3, [r6, #0]
  if (is_absolute && !has_a_substitution) {
 80085e8:	2b2f      	cmp	r3, #47	; 0x2f
  bool has_a_substitution = strchr(input_topic_name, '{') != NULL;
 80085ea:	4607      	mov	r7, r0
  if (is_absolute && !has_a_substitution) {
 80085ec:	d111      	bne.n	8008612 <rcl_expand_topic_name+0xae>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f040 80d8 	bne.w	80087a4 <rcl_expand_topic_name+0x240>
    *output_topic_name = rcutils_strdup(input_topic_name, allocator);
 80085f4:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 80085f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80085fc:	ab14      	add	r3, sp, #80	; 0x50
 80085fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008600:	4630      	mov	r0, r6
 8008602:	f00a fc6a 	bl	8012eda <rcutils_strdup>
 8008606:	9b19      	ldr	r3, [sp, #100]	; 0x64
      return RCL_RET_BAD_ALLOC;
 8008608:	2800      	cmp	r0, #0
    *output_topic_name = rcutils_strdup(input_topic_name, allocator);
 800860a:	6018      	str	r0, [r3, #0]
      return RCL_RET_BAD_ALLOC;
 800860c:	bf08      	it	eq
 800860e:	240a      	moveq	r4, #10
 8008610:	e7d3      	b.n	80085ba <rcl_expand_topic_name+0x56>
  if (has_a_namespace_tilde) {
 8008612:	2b7e      	cmp	r3, #126	; 0x7e
 8008614:	f040 80c4 	bne.w	80087a0 <rcl_expand_topic_name+0x23c>
    const char * fmt = (strlen(node_namespace) == 1) ? "%s%s%s" : "%s/%s%s";
 8008618:	4648      	mov	r0, r9
 800861a:	f7f7 fdd1 	bl	80001c0 <strlen>
 800861e:	4a63      	ldr	r2, [pc, #396]	; (80087ac <rcl_expand_topic_name+0x248>)
 8008620:	4b63      	ldr	r3, [pc, #396]	; (80087b0 <rcl_expand_topic_name+0x24c>)
 8008622:	2801      	cmp	r0, #1
 8008624:	bf18      	it	ne
 8008626:	4613      	movne	r3, r2
      rcutils_format_string(allocator, fmt, node_namespace, node_name, input_topic_name + 1);
 8008628:	1c72      	adds	r2, r6, #1
 800862a:	9205      	str	r2, [sp, #20]
 800862c:	9a06      	ldr	r2, [sp, #24]
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8008634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	ab14      	add	r3, sp, #80	; 0x50
 8008640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008642:	f00d fc96 	bl	8015f72 <rcutils_format_string_limit>
    if (!local_output) {
 8008646:	4605      	mov	r5, r0
 8008648:	2800      	cmp	r0, #0
 800864a:	f040 80a5 	bne.w	8008798 <rcl_expand_topic_name+0x234>
      *output_topic_name = NULL;
 800864e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008650:	2300      	movs	r3, #0
 8008652:	6013      	str	r3, [r2, #0]
        return RCL_RET_BAD_ALLOC;
 8008654:	240a      	movs	r4, #10
 8008656:	e7b0      	b.n	80085ba <rcl_expand_topic_name+0x56>
      char * next_closing_brace = strchr(current_output, '}');
 8008658:	217d      	movs	r1, #125	; 0x7d
 800865a:	4640      	mov	r0, r8
 800865c:	f00f fa79 	bl	8017b52 <strchr>
      size_t substitution_substr_len = next_closing_brace - next_opening_brace + 1;
 8008660:	eba0 0a07 	sub.w	sl, r0, r7
 8008664:	f10a 0b01 	add.w	fp, sl, #1
      if (strncmp(SUBSTITUION_NODE_NAME, next_opening_brace, substitution_substr_len) == 0) {
 8008668:	4852      	ldr	r0, [pc, #328]	; (80087b4 <rcl_expand_topic_name+0x250>)
 800866a:	465a      	mov	r2, fp
 800866c:	4639      	mov	r1, r7
 800866e:	f00f fb54 	bl	8017d1a <strncmp>
 8008672:	2800      	cmp	r0, #0
 8008674:	d041      	beq.n	80086fa <rcl_expand_topic_name+0x196>
        strncmp(SUBSTITUION_NAMESPACE, next_opening_brace, substitution_substr_len) == 0 ||
 8008676:	4850      	ldr	r0, [pc, #320]	; (80087b8 <rcl_expand_topic_name+0x254>)
 8008678:	465a      	mov	r2, fp
 800867a:	4639      	mov	r1, r7
 800867c:	f00f fb4d 	bl	8017d1a <strncmp>
      } else if (  // NOLINT
 8008680:	b9a8      	cbnz	r0, 80086ae <rcl_expand_topic_name+0x14a>
 8008682:	46ca      	mov	sl, r9
        rcutils_strndup(next_opening_brace, substitution_substr_len, allocator);
 8008684:	ab16      	add	r3, sp, #88	; 0x58
 8008686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800868a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800868e:	ab14      	add	r3, sp, #80	; 0x50
 8008690:	4638      	mov	r0, r7
 8008692:	cb0c      	ldmia	r3, {r2, r3}
 8008694:	4659      	mov	r1, fp
 8008696:	f00a fc05 	bl	8012ea4 <rcutils_strndup>
      if (!next_substitution) {
 800869a:	4607      	mov	r7, r0
 800869c:	2800      	cmp	r0, #0
 800869e:	d12f      	bne.n	8008700 <rcl_expand_topic_name+0x19c>
        *output_topic_name = NULL;
 80086a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
        allocator.deallocate(local_output, allocator.state);
 80086a2:	9918      	ldr	r1, [sp, #96]	; 0x60
        *output_topic_name = NULL;
 80086a4:	6018      	str	r0, [r3, #0]
        allocator.deallocate(local_output, allocator.state);
 80086a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086a8:	4628      	mov	r0, r5
 80086aa:	4798      	blx	r3
 80086ac:	e7d2      	b.n	8008654 <rcl_expand_topic_name+0xf0>
        strncmp(SUBSTITUION_NAMESPACE2, next_opening_brace, substitution_substr_len) == 0)
 80086ae:	4843      	ldr	r0, [pc, #268]	; (80087bc <rcl_expand_topic_name+0x258>)
 80086b0:	465a      	mov	r2, fp
 80086b2:	4639      	mov	r1, r7
 80086b4:	f00f fb31 	bl	8017d1a <strncmp>
        strncmp(SUBSTITUION_NAMESPACE, next_opening_brace, substitution_substr_len) == 0 ||
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d0e2      	beq.n	8008682 <rcl_expand_topic_name+0x11e>
        replacement = rcutils_string_map_getn(
 80086bc:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80086c0:	9807      	ldr	r0, [sp, #28]
 80086c2:	1c79      	adds	r1, r7, #1
 80086c4:	f00a fd2c 	bl	8013120 <rcutils_string_map_getn>
        if (!replacement) {
 80086c8:	4682      	mov	sl, r0
 80086ca:	2800      	cmp	r0, #0
 80086cc:	d1da      	bne.n	8008684 <rcl_expand_topic_name+0x120>
          *output_topic_name = NULL;
 80086ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086d0:	6018      	str	r0, [r3, #0]
            rcutils_strndup(next_opening_brace, substitution_substr_len, allocator);
 80086d2:	ab16      	add	r3, sp, #88	; 0x58
 80086d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80086d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80086dc:	ab14      	add	r3, sp, #80	; 0x50
 80086de:	cb0c      	ldmia	r3, {r2, r3}
 80086e0:	4659      	mov	r1, fp
 80086e2:	4638      	mov	r0, r7
 80086e4:	f00a fbde 	bl	8012ea4 <rcutils_strndup>
          allocator.deallocate(unmatched_substitution, allocator.state);
 80086e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086ec:	4798      	blx	r3
          allocator.deallocate(local_output, allocator.state);
 80086ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086f2:	4628      	mov	r0, r5
 80086f4:	4798      	blx	r3
          return RCL_RET_UNKNOWN_SUBSTITUTION;
 80086f6:	2469      	movs	r4, #105	; 0x69
 80086f8:	e75f      	b.n	80085ba <rcl_expand_topic_name+0x56>
 80086fa:	f8dd a018 	ldr.w	sl, [sp, #24]
 80086fe:	e7c1      	b.n	8008684 <rcl_expand_topic_name+0x120>
      local_output = rcutils_repl_str(current_output, next_substitution, replacement, &allocator);
 8008700:	4601      	mov	r1, r0
 8008702:	ab14      	add	r3, sp, #80	; 0x50
 8008704:	4652      	mov	r2, sl
 8008706:	4640      	mov	r0, r8
 8008708:	f00d fc6e 	bl	8015fe8 <rcutils_repl_str>
      allocator.deallocate(next_substitution, allocator.state);  // free no matter what
 800870c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800870e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      local_output = rcutils_repl_str(current_output, next_substitution, replacement, &allocator);
 8008710:	4680      	mov	r8, r0
      allocator.deallocate(next_substitution, allocator.state);  // free no matter what
 8008712:	4638      	mov	r0, r7
 8008714:	4798      	blx	r3
      allocator.deallocate(original_local_output, allocator.state);  // free no matter what
 8008716:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008718:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800871a:	4628      	mov	r0, r5
 800871c:	4798      	blx	r3
      if (!local_output) {
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	d094      	beq.n	800864e <rcl_expand_topic_name+0xea>
 8008724:	4645      	mov	r5, r8
    while ((next_opening_brace = strchr(current_output, '{')) != NULL) {
 8008726:	217b      	movs	r1, #123	; 0x7b
 8008728:	4640      	mov	r0, r8
 800872a:	f00f fa12 	bl	8017b52 <strchr>
 800872e:	4607      	mov	r7, r0
 8008730:	2800      	cmp	r0, #0
 8008732:	d191      	bne.n	8008658 <rcl_expand_topic_name+0xf4>
  if (
 8008734:	bb35      	cbnz	r5, 8008784 <rcl_expand_topic_name+0x220>
    (!local_output && input_topic_name[0] != '/'))
 8008736:	7833      	ldrb	r3, [r6, #0]
    (local_output && local_output[0] != '/') ||
 8008738:	2b2f      	cmp	r3, #47	; 0x2f
 800873a:	d020      	beq.n	800877e <rcl_expand_topic_name+0x21a>
 800873c:	462f      	mov	r7, r5
    const char * fmt = (strlen(node_namespace) == 1) ? "%s%s" : "%s/%s";
 800873e:	4648      	mov	r0, r9
 8008740:	f7f7 fd3e 	bl	80001c0 <strlen>
 8008744:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <rcl_expand_topic_name+0x25c>)
 8008746:	4b1f      	ldr	r3, [pc, #124]	; (80087c4 <rcl_expand_topic_name+0x260>)
    local_output = rcutils_format_string(
 8008748:	2f00      	cmp	r7, #0
 800874a:	bf18      	it	ne
 800874c:	463e      	movne	r6, r7
    const char * fmt = (strlen(node_namespace) == 1) ? "%s%s" : "%s/%s";
 800874e:	2801      	cmp	r0, #1
 8008750:	bf18      	it	ne
 8008752:	4613      	movne	r3, r2
    local_output = rcutils_format_string(
 8008754:	9302      	str	r3, [sp, #8]
 8008756:	e9cd 9603 	strd	r9, r6, [sp, #12]
 800875a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	ab14      	add	r3, sp, #80	; 0x50
 8008766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008768:	f00d fc03 	bl	8015f72 <rcutils_format_string_limit>
 800876c:	4605      	mov	r5, r0
    if (original_local_output) {
 800876e:	b11f      	cbz	r7, 8008778 <rcl_expand_topic_name+0x214>
      allocator.deallocate(original_local_output, allocator.state);
 8008770:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008774:	4638      	mov	r0, r7
 8008776:	4798      	blx	r3
    if (!local_output) {
 8008778:	2d00      	cmp	r5, #0
 800877a:	f43f af68 	beq.w	800864e <rcl_expand_topic_name+0xea>
  *output_topic_name = local_output;
 800877e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008780:	601d      	str	r5, [r3, #0]
  return RCL_RET_OK;
 8008782:	e71a      	b.n	80085ba <rcl_expand_topic_name+0x56>
    (local_output && local_output[0] != '/') ||
 8008784:	782b      	ldrb	r3, [r5, #0]
 8008786:	e7d7      	b.n	8008738 <rcl_expand_topic_name+0x1d4>
  RCL_CHECK_ARGUMENT_FOR_NULL(input_topic_name, RCL_RET_INVALID_ARGUMENT);
 8008788:	240b      	movs	r4, #11
 800878a:	e716      	b.n	80085ba <rcl_expand_topic_name+0x56>
    return RCL_RET_TOPIC_NAME_INVALID;
 800878c:	2467      	movs	r4, #103	; 0x67
 800878e:	e714      	b.n	80085ba <rcl_expand_topic_name+0x56>
    return RCL_RET_NODE_INVALID_NAME;
 8008790:	24c9      	movs	r4, #201	; 0xc9
 8008792:	e712      	b.n	80085ba <rcl_expand_topic_name+0x56>
    return RCL_RET_NODE_INVALID_NAMESPACE;
 8008794:	24ca      	movs	r4, #202	; 0xca
 8008796:	e710      	b.n	80085ba <rcl_expand_topic_name+0x56>
  if (has_a_substitution) {
 8008798:	2f00      	cmp	r7, #0
 800879a:	d0f3      	beq.n	8008784 <rcl_expand_topic_name+0x220>
 800879c:	46a8      	mov	r8, r5
 800879e:	e7c2      	b.n	8008726 <rcl_expand_topic_name+0x1c2>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d0cc      	beq.n	800873e <rcl_expand_topic_name+0x1da>
 80087a4:	46b0      	mov	r8, r6
 80087a6:	4625      	mov	r5, r4
 80087a8:	e7bd      	b.n	8008726 <rcl_expand_topic_name+0x1c2>
 80087aa:	bf00      	nop
 80087ac:	0801d77a 	.word	0x0801d77a
 80087b0:	0801d220 	.word	0x0801d220
 80087b4:	0801d788 	.word	0x0801d788
 80087b8:	0801d78f 	.word	0x0801d78f
 80087bc:	0801d794 	.word	0x0801d794
 80087c0:	0801d782 	.word	0x0801d782
 80087c4:	0801d77d 	.word	0x0801d77d

080087c8 <rcl_init>:
rcl_init(
  int argc,
  char const * const * argv,
  const rcl_init_options_t * options,
  rcl_context_t * context)
{
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  rcl_ret_t fail_ret = RCL_RET_ERROR;

  if (argc > 0) {
 80087cc:	1e07      	subs	r7, r0, #0
{
 80087ce:	b0a1      	sub	sp, #132	; 0x84
 80087d0:	460d      	mov	r5, r1
 80087d2:	4690      	mov	r8, r2
 80087d4:	461c      	mov	r4, r3
  if (argc > 0) {
 80087d6:	f340 8082 	ble.w	80088de <rcl_init+0x116>
    RCL_CHECK_ARGUMENT_FOR_NULL(argv, RCL_RET_INVALID_ARGUMENT);
 80087da:	b921      	cbnz	r1, 80087e6 <rcl_init+0x1e>
 80087dc:	260b      	movs	r6, #11

  return RCL_RET_OK;
fail:
  __cleanup_context(context);
  return fail_ret;
}
 80087de:	4630      	mov	r0, r6
 80087e0:	b021      	add	sp, #132	; 0x84
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int i = 0; i < argc; ++i) {
 80087e6:	2300      	movs	r3, #0
      RCL_CHECK_ARGUMENT_FOR_NULL(argv[i], RCL_RET_INVALID_ARGUMENT);
 80087e8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	d0f5      	beq.n	80087dc <rcl_init+0x14>
    for (int i = 0; i < argc; ++i) {
 80087f0:	3301      	adds	r3, #1
 80087f2:	429f      	cmp	r7, r3
 80087f4:	d1f8      	bne.n	80087e8 <rcl_init+0x20>
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	d0ef      	beq.n	80087dc <rcl_init+0x14>
  RCL_CHECK_ARGUMENT_FOR_NULL(options->impl, RCL_RET_INVALID_ARGUMENT);
 80087fc:	f8d8 6000 	ldr.w	r6, [r8]
 8008800:	2e00      	cmp	r6, #0
 8008802:	d0eb      	beq.n	80087dc <rcl_init+0x14>
  rcl_allocator_t allocator = options->impl->allocator;
 8008804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008806:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 800880a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800880e:	6833      	ldr	r3, [r6, #0]
 8008810:	f8cc 3000 	str.w	r3, [ip]
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 8008814:	a81b      	add	r0, sp, #108	; 0x6c
 8008816:	f00a faa6 	bl	8012d66 <rcutils_allocator_is_valid>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0de      	beq.n	80087dc <rcl_init+0x14>
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 800881e:	2c00      	cmp	r4, #0
 8008820:	d0dc      	beq.n	80087dc <rcl_init+0x14>
  RCUTILS_LOG_DEBUG_NAMED(
 8008822:	4b73      	ldr	r3, [pc, #460]	; (80089f0 <rcl_init+0x228>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b923      	cbnz	r3, 8008832 <rcl_init+0x6a>
 8008828:	f00a faf8 	bl	8012e1c <rcutils_logging_initialize>
 800882c:	b108      	cbz	r0, 8008832 <rcl_init+0x6a>
 800882e:	f7fe fb9b 	bl	8006f68 <rcutils_reset_error>
 8008832:	4870      	ldr	r0, [pc, #448]	; (80089f4 <rcl_init+0x22c>)
 8008834:	210a      	movs	r1, #10
 8008836:	f7fe fddd 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800883a:	b130      	cbz	r0, 800884a <rcl_init+0x82>
 800883c:	4b6e      	ldr	r3, [pc, #440]	; (80089f8 <rcl_init+0x230>)
 800883e:	4a6d      	ldr	r2, [pc, #436]	; (80089f4 <rcl_init+0x22c>)
 8008840:	486e      	ldr	r0, [pc, #440]	; (80089fc <rcl_init+0x234>)
 8008842:	9400      	str	r4, [sp, #0]
 8008844:	210a      	movs	r1, #10
 8008846:	f7fe fdff 	bl	8007448 <rcutils_log>
  if (NULL != context->impl) {
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f040 80cb 	bne.w	80089e8 <rcl_init+0x220>
  context->impl = allocator.zero_allocate(1, sizeof(rcl_context_impl_t), allocator.state);
 8008852:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008854:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008856:	2178      	movs	r1, #120	; 0x78
 8008858:	2001      	movs	r0, #1
 800885a:	4798      	blx	r3
 800885c:	4606      	mov	r6, r0
 800885e:	6020      	str	r0, [r4, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008860:	2800      	cmp	r0, #0
 8008862:	f000 80c3 	beq.w	80089ec <rcl_init+0x224>
  context->impl->rmw_context = rmw_get_zero_initialized_context();
 8008866:	a804      	add	r0, sp, #16
 8008868:	f00d fc73 	bl	8016152 <rmw_get_zero_initialized_context>
 800886c:	2250      	movs	r2, #80	; 0x50
 800886e:	a904      	add	r1, sp, #16
 8008870:	f106 0028 	add.w	r0, r6, #40	; 0x28
  context->impl->allocator = allocator;
 8008874:	ae1b      	add	r6, sp, #108	; 0x6c
  context->impl->rmw_context = rmw_get_zero_initialized_context();
 8008876:	f7f8 ff93 	bl	80017a0 <memcpy>
  context->impl->allocator = allocator;
 800887a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800887c:	f8d4 e000 	ldr.w	lr, [r4]
 8008880:	46f4      	mov	ip, lr
 8008882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008886:	6833      	ldr	r3, [r6, #0]
 8008888:	f8cc 3000 	str.w	r3, [ip]
  rcl_ret_t ret = rcl_init_options_copy(options, &(context->impl->init_options));
 800888c:	f10e 0114 	add.w	r1, lr, #20
 8008890:	4640      	mov	r0, r8
 8008892:	f000 f8b7 	bl	8008a04 <rcl_init_options_copy>
  if (RCL_RET_OK != ret) {
 8008896:	4606      	mov	r6, r0
 8008898:	2800      	cmp	r0, #0
 800889a:	d130      	bne.n	80088fe <rcl_init+0x136>
  context->impl->argc = argc;
 800889c:	f8d4 8000 	ldr.w	r8, [r4]
 80088a0:	463a      	mov	r2, r7
 80088a2:	17fb      	asrs	r3, r7, #31
 80088a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088a8:	e9c8 2306 	strd	r2, r3, [r8, #24]
  context->impl->argv = NULL;
 80088ac:	f8c8 0020 	str.w	r0, [r8, #32]
  if (0 != argc && argv != NULL) {
 80088b0:	b9c7      	cbnz	r7, 80088e4 <rcl_init+0x11c>

static inline uint64_t
rcutils_atomic_fetch_add_uint64_t(atomic_uint_least64_t * a_uint64_t, uint64_t arg)
{
  uint64_t result;
  rcutils_atomic_fetch_add(a_uint64_t, result, arg);
 80088b2:	2505      	movs	r5, #5
 80088b4:	2300      	movs	r3, #0
 80088b6:	4852      	ldr	r0, [pc, #328]	; (8008a00 <rcl_init+0x238>)
 80088b8:	9500      	str	r5, [sp, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f00d fa12 	bl	8015ce4 <__atomic_fetch_add_8>
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
  if (0 == next_instance_id) {
 80088c4:	ea56 0307 	orrs.w	r3, r6, r7
 80088c8:	d144      	bne.n	8008954 <rcl_init+0x18c>
    rcutils_atomic_store(&__rcl_next_unique_id, -1);
 80088ca:	484d      	ldr	r0, [pc, #308]	; (8008a00 <rcl_init+0x238>)
 80088cc:	9500      	str	r5, [sp, #0]
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d6:	f00d f9e6 	bl	8015ca6 <__atomic_store_8>
    fail_ret = RCL_RET_ERROR;
 80088da:	2601      	movs	r6, #1
 80088dc:	e00f      	b.n	80088fe <rcl_init+0x136>
    if (NULL != argv) {
 80088de:	2900      	cmp	r1, #0
 80088e0:	d089      	beq.n	80087f6 <rcl_init+0x2e>
 80088e2:	e77b      	b.n	80087dc <rcl_init+0x14>
  if (0 != argc && argv != NULL) {
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	d0e4      	beq.n	80088b2 <rcl_init+0xea>
    context->impl->argv = (char **)allocator.zero_allocate(argc, sizeof(char *), allocator.state);
 80088e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80088ea:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80088ec:	2104      	movs	r1, #4
 80088ee:	4638      	mov	r0, r7
 80088f0:	4798      	blx	r3
    RCL_CHECK_FOR_NULL_WITH_MSG(
 80088f2:	6823      	ldr	r3, [r4, #0]
    context->impl->argv = (char **)allocator.zero_allocate(argc, sizeof(char *), allocator.state);
 80088f4:	f8c8 0020 	str.w	r0, [r8, #32]
    RCL_CHECK_FOR_NULL_WITH_MSG(
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	bb43      	cbnz	r3, 800894e <rcl_init+0x186>
 80088fc:	260a      	movs	r6, #10
  __cleanup_context(context);
 80088fe:	4620      	mov	r0, r4
 8008900:	f00c fbdb 	bl	80150ba <__cleanup_context>
  return fail_ret;
 8008904:	e76b      	b.n	80087de <rcl_init+0x16>
      size_t argv_i_length = strlen(argv[i]);
 8008906:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800890a:	f7f7 fc59 	bl	80001c0 <strlen>
      context->impl->argv[i] = (char *)allocator.allocate(argv_i_length, allocator.state);
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8008912:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8008916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
      size_t argv_i_length = strlen(argv[i]);
 8008918:	4680      	mov	r8, r0
      context->impl->argv[i] = (char *)allocator.allocate(argv_i_length, allocator.state);
 800891a:	4798      	blx	r3
 800891c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
      RCL_CHECK_FOR_NULL_WITH_MSG(
 8008920:	6823      	ldr	r3, [r4, #0]
      context->impl->argv[i] = (char *)allocator.allocate(argv_i_length, allocator.state);
 8008922:	f84b 000a 	str.w	r0, [fp, sl]
      RCL_CHECK_FOR_NULL_WITH_MSG(
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	f853 000a 	ldr.w	r0, [r3, sl]
 800892c:	2800      	cmp	r0, #0
 800892e:	d0e5      	beq.n	80088fc <rcl_init+0x134>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8008930:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
 8008934:	4642      	mov	r2, r8
 8008936:	f7f8 ff33 	bl	80017a0 <memcpy>
    for (i = 0; i < argc; ++i) {
 800893a:	3601      	adds	r6, #1
 800893c:	f147 0700 	adc.w	r7, r7, #0
 8008940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008944:	4296      	cmp	r6, r2
 8008946:	eb77 0303 	sbcs.w	r3, r7, r3
 800894a:	dbdc      	blt.n	8008906 <rcl_init+0x13e>
 800894c:	e7b1      	b.n	80088b2 <rcl_init+0xea>
 800894e:	2600      	movs	r6, #0
 8008950:	2700      	movs	r7, #0
 8008952:	e7f5      	b.n	8008940 <rcl_init+0x178>
  rcutils_atomic_store((atomic_uint_least64_t *)(&context->instance_id_storage), next_instance_id);
 8008954:	9500      	str	r5, [sp, #0]
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	f104 0008 	add.w	r0, r4, #8
 800895e:	f00d f9a2 	bl	8015ca6 <__atomic_store_8>
  context->impl->init_options.impl->rmw_init_options.instance_id = next_instance_id;
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	695d      	ldr	r5, [r3, #20]
  if (RCL_DEFAULT_DOMAIN_ID == *domain_id) {
 8008966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008968:	3301      	adds	r3, #1
  context->impl->init_options.impl->rmw_init_options.instance_id = next_instance_id;
 800896a:	e9c5 6706 	strd	r6, r7, [r5, #24]
  if (RCL_DEFAULT_DOMAIN_ID == *domain_id) {
 800896e:	d10a      	bne.n	8008986 <rcl_init+0x1be>
    ret = rcl_get_default_domain_id(domain_id);
 8008970:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008974:	f002 fbaa 	bl	800b0cc <rcl_get_default_domain_id>
    if (RCL_RET_OK != ret) {
 8008978:	4606      	mov	r6, r0
 800897a:	2800      	cmp	r0, #0
 800897c:	d1bf      	bne.n	80088fe <rcl_init+0x136>
  if (RMW_DEFAULT_DOMAIN_ID == *domain_id) {
 800897e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008980:	3301      	adds	r3, #1
    *domain_id = 0u;
 8008982:	bf08      	it	eq
 8008984:	6268      	streq	r0, [r5, #36]	; 0x24
    &context->impl->init_options.impl->rmw_init_options.localhost_only;
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	6958      	ldr	r0, [r3, #20]
  if (RMW_LOCALHOST_ONLY_DEFAULT == *localhost_only) {
 800898a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800898e:	b323      	cbz	r3, 80089da <rcl_init+0x212>
    context->impl->init_options.impl->rmw_init_options.enclave,
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	695b      	ldr	r3, [r3, #20]
  ret = rcl_validate_enclave_name(
 8008994:	aa1a      	add	r2, sp, #104	; 0x68
 8008996:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008998:	a919      	add	r1, sp, #100	; 0x64
 800899a:	f00c fe38 	bl	801560e <rcl_validate_enclave_name>
  if (RCL_RET_OK != ret) {
 800899e:	4606      	mov	r6, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1ac      	bne.n	80088fe <rcl_init+0x136>
  if (RCL_ENCLAVE_NAME_VALID != validation_result) {
 80089a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d197      	bne.n	80088da <rcl_init+0x112>
    &context->impl->init_options.impl->rmw_init_options.security_options;
 80089aa:	6821      	ldr	r1, [r4, #0]
 80089ac:	694b      	ldr	r3, [r1, #20]
  ret = rcl_get_security_options_from_environment(
 80089ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80089b0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80089b4:	f000 fc08 	bl	80091c8 <rcl_get_security_options_from_environment>
  if (RCL_RET_OK != ret) {
 80089b8:	4606      	mov	r6, r0
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d19f      	bne.n	80088fe <rcl_init+0x136>
    &(context->impl->init_options.impl->rmw_init_options),
 80089be:	6821      	ldr	r1, [r4, #0]
 80089c0:	6948      	ldr	r0, [r1, #20]
  rmw_ret_t rmw_ret = rmw_init(
 80089c2:	3128      	adds	r1, #40	; 0x28
 80089c4:	3018      	adds	r0, #24
 80089c6:	f001 fd93 	bl	800a4f0 <rmw_init>
  if (RMW_RET_OK != rmw_ret) {
 80089ca:	4606      	mov	r6, r0
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f43f af06 	beq.w	80087de <rcl_init+0x16>
    fail_ret = rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 80089d2:	f00c fb4c 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 80089d6:	4606      	mov	r6, r0
    goto fail;
 80089d8:	e791      	b.n	80088fe <rcl_init+0x136>
    ret = rcl_get_localhost_only(localhost_only);
 80089da:	3030      	adds	r0, #48	; 0x30
 80089dc:	f000 f8b6 	bl	8008b4c <rcl_get_localhost_only>
    if (RCL_RET_OK != ret) {
 80089e0:	4606      	mov	r6, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0d4      	beq.n	8008990 <rcl_init+0x1c8>
 80089e6:	e78a      	b.n	80088fe <rcl_init+0x136>
    return RCL_RET_ALREADY_INIT;
 80089e8:	2664      	movs	r6, #100	; 0x64
 80089ea:	e6f8      	b.n	80087de <rcl_init+0x16>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80089ec:	260a      	movs	r6, #10
 80089ee:	e6f6      	b.n	80087de <rcl_init+0x16>
 80089f0:	2000461a 	.word	0x2000461a
 80089f4:	0801c072 	.word	0x0801c072
 80089f8:	0801d7a0 	.word	0x0801d7a0
 80089fc:	20000644 	.word	0x20000644
 8008a00:	20000000 	.word	0x20000000

08008a04 <rcl_init_options_copy>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_init_options_copy(const rcl_init_options_t * src, rcl_init_options_t * dst)
{
 8008a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a06:	460e      	mov	r6, r1
 8008a08:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ALREADY_INIT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_BAD_ALLOC);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(src, RCL_RET_INVALID_ARGUMENT);
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f000 808c 	beq.w	8008b2c <rcl_init_options_copy+0x128>
  RCL_CHECK_ARGUMENT_FOR_NULL(src->impl, RCL_RET_INVALID_ARGUMENT);
 8008a14:	6803      	ldr	r3, [r0, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f000 8088 	beq.w	8008b2c <rcl_init_options_copy+0x128>
  RCL_CHECK_ARGUMENT_FOR_NULL(dst, RCL_RET_INVALID_ARGUMENT);
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	f000 8085 	beq.w	8008b2c <rcl_init_options_copy+0x128>
  if (NULL != dst->impl) {
 8008a22:	680a      	ldr	r2, [r1, #0]
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	f040 8083 	bne.w	8008b30 <rcl_init_options_copy+0x12c>
    RCL_SET_ERROR_MSG("given dst (rcl_init_options_t) is already initialized");
    return RCL_RET_ALREADY_INIT;
  }

  // initialize dst (since we know it's in a zero initialized state)
  rcl_ret_t ret = rcl_init_options_init(dst, src->impl->allocator);
 8008a2a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 8008a2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008a32:	4630      	mov	r0, r6
 8008a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a36:	f00c fb98 	bl	801516a <rcl_init_options_init>
  if (RCL_RET_OK != ret) {
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	bb68      	cbnz	r0, 8008a9a <rcl_init_options_copy+0x96>
    return ret;  // error already set
  }

  // copy src information into dst
  dst->impl->allocator = src->impl->allocator;
 8008a3e:	683d      	ldr	r5, [r7, #0]
 8008a40:	f8d6 c000 	ldr.w	ip, [r6]
 8008a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a46:	4664      	mov	r4, ip
 8008a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	6023      	str	r3, [r4, #0]
  // first zero-initialize rmw init options
  rmw_ret_t rmw_ret = rmw_init_options_fini(&(dst->impl->rmw_init_options));
 8008a4e:	f10c 0018 	add.w	r0, ip, #24
 8008a52:	f001 fd23 	bl	800a49c <rmw_init_options_fini>
  if (RMW_RET_OK != rmw_ret) {
 8008a56:	4605      	mov	r5, r0
 8008a58:	b340      	cbz	r0, 8008aac <rcl_init_options_copy+0xa8>
    rmw_error_string_t error_string = rmw_get_error_string();
 8008a5a:	af10      	add	r7, sp, #64	; 0x40
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f7fe fa5f 	bl	8006f20 <rcutils_get_error_string>
    rmw_reset_error();
 8008a62:	f7fe fa81 	bl	8006f68 <rcutils_reset_error>
    ret = rcl_init_options_fini(dst);
 8008a66:	4630      	mov	r0, r6
 8008a68:	f00c fbd0 	bl	801520c <rcl_init_options_fini>
    if (RCL_RET_OK != ret) {
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	b1c0      	cbz	r0, 8008aa2 <rcl_init_options_copy+0x9e>
      RCUTILS_LOG_ERROR_NAMED(
 8008a70:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <rcl_init_options_copy+0x130>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b923      	cbnz	r3, 8008a80 <rcl_init_options_copy+0x7c>
 8008a76:	f00a f9d1 	bl	8012e1c <rcutils_logging_initialize>
 8008a7a:	b108      	cbz	r0, 8008a80 <rcl_init_options_copy+0x7c>
 8008a7c:	f7fe fa74 	bl	8006f68 <rcutils_reset_error>
 8008a80:	482d      	ldr	r0, [pc, #180]	; (8008b38 <rcl_init_options_copy+0x134>)
 8008a82:	2128      	movs	r1, #40	; 0x28
 8008a84:	f7fe fcb6 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008a88:	b138      	cbz	r0, 8008a9a <rcl_init_options_copy+0x96>
 8008a8a:	e9cd 5700 	strd	r5, r7, [sp]
 8008a8e:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <rcl_init_options_copy+0x138>)
 8008a90:	4a29      	ldr	r2, [pc, #164]	; (8008b38 <rcl_init_options_copy+0x134>)
 8008a92:	482b      	ldr	r0, [pc, #172]	; (8008b40 <rcl_init_options_copy+0x13c>)
 8008a94:	2128      	movs	r1, #40	; 0x28
 8008a96:	f7fe fcd7 	bl	8007448 <rcutils_log>
    RCL_SET_ERROR_MSG(error_string.str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
  }

  return RCL_RET_OK;
}
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f20d 4d44 	addw	sp, sp, #1092	; 0x444
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f00c fae3 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	e7f6      	b.n	8008a9a <rcl_init_options_copy+0x96>
  dst->impl->rmw_init_options = rmw_get_zero_initialized_init_options();
 8008aac:	a802      	add	r0, sp, #8
 8008aae:	ac02      	add	r4, sp, #8
 8008ab0:	6835      	ldr	r5, [r6, #0]
 8008ab2:	f00d fb56 	bl	8016162 <rmw_get_zero_initialized_init_options>
 8008ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ab8:	3518      	adds	r5, #24
 8008aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ac8:	e885 0003 	stmia.w	r5, {r0, r1}
    rmw_init_options_copy(&(src->impl->rmw_init_options), &(dst->impl->rmw_init_options));
 8008acc:	6831      	ldr	r1, [r6, #0]
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	3118      	adds	r1, #24
 8008ad2:	3018      	adds	r0, #24
 8008ad4:	f001 fcb2 	bl	800a43c <rmw_init_options_copy>
  if (RMW_RET_OK != rmw_ret) {
 8008ad8:	4604      	mov	r4, r0
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d0dd      	beq.n	8008a9a <rcl_init_options_copy+0x96>
    rmw_error_string_t error_string = rmw_get_error_string();
 8008ade:	af10      	add	r7, sp, #64	; 0x40
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7fe fa1d 	bl	8006f20 <rcutils_get_error_string>
    rmw_reset_error();
 8008ae6:	f7fe fa3f 	bl	8006f68 <rcutils_reset_error>
    ret = rcl_init_options_fini(dst);
 8008aea:	4630      	mov	r0, r6
 8008aec:	f00c fb8e 	bl	801520c <rcl_init_options_fini>
    if (RCL_RET_OK != ret) {
 8008af0:	4605      	mov	r5, r0
 8008af2:	b1b0      	cbz	r0, 8008b22 <rcl_init_options_copy+0x11e>
      RCUTILS_LOG_ERROR_NAMED(
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <rcl_init_options_copy+0x130>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	b923      	cbnz	r3, 8008b04 <rcl_init_options_copy+0x100>
 8008afa:	f00a f98f 	bl	8012e1c <rcutils_logging_initialize>
 8008afe:	b108      	cbz	r0, 8008b04 <rcl_init_options_copy+0x100>
 8008b00:	f7fe fa32 	bl	8006f68 <rcutils_reset_error>
 8008b04:	480c      	ldr	r0, [pc, #48]	; (8008b38 <rcl_init_options_copy+0x134>)
 8008b06:	2128      	movs	r1, #40	; 0x28
 8008b08:	f7fe fc74 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008b0c:	b138      	cbz	r0, 8008b1e <rcl_init_options_copy+0x11a>
 8008b0e:	e9cd 4700 	strd	r4, r7, [sp]
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <rcl_init_options_copy+0x140>)
 8008b14:	4a08      	ldr	r2, [pc, #32]	; (8008b38 <rcl_init_options_copy+0x134>)
 8008b16:	480c      	ldr	r0, [pc, #48]	; (8008b48 <rcl_init_options_copy+0x144>)
 8008b18:	2128      	movs	r1, #40	; 0x28
 8008b1a:	f7fe fc95 	bl	8007448 <rcutils_log>
 8008b1e:	462c      	mov	r4, r5
 8008b20:	e7bb      	b.n	8008a9a <rcl_init_options_copy+0x96>
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8008b22:	4620      	mov	r0, r4
 8008b24:	f00c faa3 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8008b28:	4605      	mov	r5, r0
 8008b2a:	e7f8      	b.n	8008b1e <rcl_init_options_copy+0x11a>
  RCL_CHECK_ARGUMENT_FOR_NULL(src, RCL_RET_INVALID_ARGUMENT);
 8008b2c:	240b      	movs	r4, #11
 8008b2e:	e7b4      	b.n	8008a9a <rcl_init_options_copy+0x96>
    return RCL_RET_ALREADY_INIT;
 8008b30:	2464      	movs	r4, #100	; 0x64
 8008b32:	e7b2      	b.n	8008a9a <rcl_init_options_copy+0x96>
 8008b34:	2000461a 	.word	0x2000461a
 8008b38:	0801c072 	.word	0x0801c072
 8008b3c:	0801d836 	.word	0x0801d836
 8008b40:	20000650 	.word	0x20000650
 8008b44:	0801d8b3 	.word	0x0801d8b3
 8008b48:	2000065c 	.word	0x2000065c

08008b4c <rcl_get_localhost_only>:

const char * const RCL_LOCALHOST_ENV_VAR = "ROS_LOCALHOST_ONLY";

rcl_ret_t
rcl_get_localhost_only(rmw_localhost_only_t * localhost_only)
{
 8008b4c:	b513      	push	{r0, r1, r4, lr}
  const char * ros_local_host_env_val = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9301      	str	r3, [sp, #4]
  const char * get_env_error_str = NULL;

  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);
  RCL_CHECK_ARGUMENT_FOR_NULL(localhost_only, RCL_RET_INVALID_ARGUMENT);
 8008b52:	4604      	mov	r4, r0
 8008b54:	b188      	cbz	r0, 8008b7a <rcl_get_localhost_only+0x2e>

  get_env_error_str = rcutils_get_env(RCL_LOCALHOST_ENV_VAR, &ros_local_host_env_val);
 8008b56:	480b      	ldr	r0, [pc, #44]	; (8008b84 <rcl_get_localhost_only+0x38>)
 8008b58:	a901      	add	r1, sp, #4
 8008b5a:	f001 fb5f 	bl	800a21c <rcutils_get_env>
  if (NULL != get_env_error_str) {
 8008b5e:	b970      	cbnz	r0, 8008b7e <rcl_get_localhost_only+0x32>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(RCL_LOCALHOST_ENV_VAR) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
  }
  *localhost_only = (ros_local_host_env_val != NULL &&
 8008b60:	9801      	ldr	r0, [sp, #4]
    strcmp(
      ros_local_host_env_val,
      "1") == 0) ? RMW_LOCALHOST_ONLY_ENABLED : RMW_LOCALHOST_ONLY_DISABLED;
 8008b62:	b118      	cbz	r0, 8008b6c <rcl_get_localhost_only+0x20>
    strcmp(
 8008b64:	4908      	ldr	r1, [pc, #32]	; (8008b88 <rcl_get_localhost_only+0x3c>)
 8008b66:	f7f7 fb9f 	bl	80002a8 <strcmp>
  *localhost_only = (ros_local_host_env_val != NULL &&
 8008b6a:	b120      	cbz	r0, 8008b76 <rcl_get_localhost_only+0x2a>
      "1") == 0) ? RMW_LOCALHOST_ONLY_ENABLED : RMW_LOCALHOST_ONLY_DISABLED;
 8008b6c:	2302      	movs	r3, #2
  *localhost_only = (ros_local_host_env_val != NULL &&
 8008b6e:	7023      	strb	r3, [r4, #0]
  return RCL_RET_OK;
 8008b70:	2000      	movs	r0, #0
}
 8008b72:	b002      	add	sp, #8
 8008b74:	bd10      	pop	{r4, pc}
      "1") == 0) ? RMW_LOCALHOST_ONLY_ENABLED : RMW_LOCALHOST_ONLY_DISABLED;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e7f9      	b.n	8008b6e <rcl_get_localhost_only+0x22>
  RCL_CHECK_ARGUMENT_FOR_NULL(localhost_only, RCL_RET_INVALID_ARGUMENT);
 8008b7a:	200b      	movs	r0, #11
 8008b7c:	e7f9      	b.n	8008b72 <rcl_get_localhost_only+0x26>
    return RCL_RET_ERROR;
 8008b7e:	2001      	movs	r0, #1
 8008b80:	e7f7      	b.n	8008b72 <rcl_get_localhost_only+0x26>
 8008b82:	bf00      	nop
 8008b84:	0801d99b 	.word	0x0801d99b
 8008b88:	0801bfa5 	.word	0x0801bfa5

08008b8c <rcl_create_node_logger_name>:
 */
const char * rcl_create_node_logger_name(
  const char * node_name,
  const char * node_namespace,
  const rcl_allocator_t * allocator)
{
 8008b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b8e:	4606      	mov	r6, r0
 8008b90:	b087      	sub	sp, #28
  // If the namespace is the root namespace ("/"), the logger name is just the node name.
  if (strlen(node_namespace) == 1) {
 8008b92:	4608      	mov	r0, r1
{
 8008b94:	460d      	mov	r5, r1
 8008b96:	4614      	mov	r4, r2
  if (strlen(node_namespace) == 1) {
 8008b98:	f7f7 fb12 	bl	80001c0 <strlen>
 8008b9c:	2801      	cmp	r0, #1
 8008b9e:	d10c      	bne.n	8008bba <rcl_create_node_logger_name+0x2e>
    return rcutils_strdup(node_name, *allocator);
 8008ba0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8008ba4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008ba8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8008bac:	4630      	mov	r0, r6
 8008bae:	f00a f994 	bl	8012eda <rcutils_strdup>
 8008bb2:	4605      	mov	r5, r0
  // Join the namespace and node name to create the logger name.
  char * node_logger_name = rcutils_format_string(
    *allocator, "%s%s%s", ns_with_separators, RCUTILS_LOGGING_SEPARATOR_STRING, node_name);
  allocator->deallocate((char *)ns_with_separators, allocator->state);
  return node_logger_name;
}
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	b007      	add	sp, #28
 8008bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  const char * ns_with_separators = rcutils_repl_str(
 8008bba:	4f0f      	ldr	r7, [pc, #60]	; (8008bf8 <rcl_create_node_logger_name+0x6c>)
 8008bbc:	490f      	ldr	r1, [pc, #60]	; (8008bfc <rcl_create_node_logger_name+0x70>)
 8008bbe:	1c68      	adds	r0, r5, #1
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	f00d fa10 	bl	8015fe8 <rcutils_repl_str>
  if (NULL == ns_with_separators) {
 8008bc8:	4605      	mov	r5, r0
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d0f2      	beq.n	8008bb4 <rcl_create_node_logger_name+0x28>
  char * node_logger_name = rcutils_format_string(
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <rcl_create_node_logger_name+0x74>)
 8008bd0:	9302      	str	r3, [sp, #8]
 8008bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	9003      	str	r0, [sp, #12]
 8008bdc:	e9cd 7604 	strd	r7, r6, [sp, #16]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008be6:	f00d f9c4 	bl	8015f72 <rcutils_format_string_limit>
  allocator->deallocate((char *)ns_with_separators, allocator->state);
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	6921      	ldr	r1, [r4, #16]
  char * node_logger_name = rcutils_format_string(
 8008bee:	4606      	mov	r6, r0
  allocator->deallocate((char *)ns_with_separators, allocator->state);
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	4798      	blx	r3
  return node_logger_name;
 8008bf4:	4635      	mov	r5, r6
 8008bf6:	e7dd      	b.n	8008bb4 <rcl_create_node_logger_name+0x28>
 8008bf8:	0801dcbb 	.word	0x0801dcbb
 8008bfc:	0801d9ae 	.word	0x0801d9ae
 8008c00:	0801d220 	.word	0x0801d220

08008c04 <rcl_get_zero_initialized_node>:
{
  static rcl_node_t null_node = {
    .context = 0,
    .impl = 0
  };
  return null_node;
 8008c04:	4a03      	ldr	r2, [pc, #12]	; (8008c14 <rcl_get_zero_initialized_node+0x10>)
{
 8008c06:	4603      	mov	r3, r0
  return null_node;
 8008c08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c0c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	4770      	bx	lr
 8008c14:	0801bafc 	.word	0x0801bafc

08008c18 <rcl_node_init>:
  rcl_node_t * node,
  const char * name,
  const char * namespace_,
  rcl_context_t * context,
  const rcl_node_options_t * options)
{
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	f6ad 0d6c 	subw	sp, sp, #2156	; 0x86c
 8008c20:	4604      	mov	r4, r0
 8008c22:	f8dd 8890 	ldr.w	r8, [sp, #2192]	; 0x890
 8008c26:	4699      	mov	r9, r3
  size_t domain_id = 0;
  rmw_localhost_only_t localhost_only = RMW_LOCALHOST_ONLY_DEFAULT;
  const rmw_guard_condition_t * rmw_graph_guard_condition = NULL;
  rcl_guard_condition_options_t graph_guard_condition_options =
    rcl_guard_condition_get_default_options();
 8008c28:	a815      	add	r0, sp, #84	; 0x54
  size_t domain_id = 0;
 8008c2a:	2300      	movs	r3, #0
{
 8008c2c:	468b      	mov	fp, r1
 8008c2e:	4616      	mov	r6, r2
  size_t domain_id = 0;
 8008c30:	9313      	str	r3, [sp, #76]	; 0x4c
    rcl_guard_condition_get_default_options();
 8008c32:	f002 fa87 	bl	800b144 <rcl_guard_condition_get_default_options>
  rcl_ret_t ret;
  rcl_ret_t fail_ret = RCL_RET_ERROR;
  char * remapped_node_name = NULL;

  // Check options and allocator first, so allocator can be used for errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d105      	bne.n	8008c48 <rcl_node_init+0x30>
 8008c3c:	250b      	movs	r5, #11
  }
  if (NULL != remapped_node_name) {
    allocator->deallocate(remapped_node_name, allocator->state);
  }
  return ret;
}
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f60d 0d6c 	addw	sp, sp, #2156	; 0x86c
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const rcl_allocator_t * allocator = &options->allocator;
 8008c48:	f108 0704 	add.w	r7, r8, #4
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f00a f88a 	bl	8012d66 <rcutils_allocator_is_valid>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0f2      	beq.n	8008c3c <rcl_node_init+0x24>
  RCL_CHECK_ARGUMENT_FOR_NULL(name, RCL_RET_INVALID_ARGUMENT);
 8008c56:	f1bb 0f00 	cmp.w	fp, #0
 8008c5a:	d0ef      	beq.n	8008c3c <rcl_node_init+0x24>
  RCL_CHECK_ARGUMENT_FOR_NULL(namespace_, RCL_RET_INVALID_ARGUMENT);
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	d0ed      	beq.n	8008c3c <rcl_node_init+0x24>
  RCL_CHECK_ARGUMENT_FOR_NULL(node, RCL_RET_INVALID_ARGUMENT);
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	d0eb      	beq.n	8008c3c <rcl_node_init+0x24>
  RCUTILS_LOG_DEBUG_NAMED(
 8008c64:	4b98      	ldr	r3, [pc, #608]	; (8008ec8 <rcl_node_init+0x2b0>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b923      	cbnz	r3, 8008c74 <rcl_node_init+0x5c>
 8008c6a:	f00a f8d7 	bl	8012e1c <rcutils_logging_initialize>
 8008c6e:	b108      	cbz	r0, 8008c74 <rcl_node_init+0x5c>
 8008c70:	f7fe f97a 	bl	8006f68 <rcutils_reset_error>
 8008c74:	4895      	ldr	r0, [pc, #596]	; (8008ecc <rcl_node_init+0x2b4>)
 8008c76:	210a      	movs	r1, #10
 8008c78:	f7fe fbbc 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008c7c:	b138      	cbz	r0, 8008c8e <rcl_node_init+0x76>
 8008c7e:	e9cd b600 	strd	fp, r6, [sp]
 8008c82:	4b93      	ldr	r3, [pc, #588]	; (8008ed0 <rcl_node_init+0x2b8>)
 8008c84:	4a91      	ldr	r2, [pc, #580]	; (8008ecc <rcl_node_init+0x2b4>)
 8008c86:	4893      	ldr	r0, [pc, #588]	; (8008ed4 <rcl_node_init+0x2bc>)
 8008c88:	210a      	movs	r1, #10
 8008c8a:	f7fe fbdd 	bl	8007448 <rcutils_log>
  if (node->impl) {
 8008c8e:	6865      	ldr	r5, [r4, #4]
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	f040 818c 	bne.w	8008fae <rcl_node_init+0x396>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	d0cf      	beq.n	8008c3c <rcl_node_init+0x24>
  if (!rcl_context_is_valid(context)) {
 8008c9c:	4648      	mov	r0, r9
 8008c9e:	f00c fa02 	bl	80150a6 <rcl_context_is_valid>
 8008ca2:	4682      	mov	sl, r0
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f000 8184 	beq.w	8008fb2 <rcl_node_init+0x39a>
  ret = rmw_validate_node_name(name, &validation_result, NULL);
 8008caa:	462a      	mov	r2, r5
 8008cac:	a914      	add	r1, sp, #80	; 0x50
 8008cae:	4658      	mov	r0, fp
  int validation_result = 0;
 8008cb0:	9514      	str	r5, [sp, #80]	; 0x50
  ret = rmw_validate_node_name(name, &validation_result, NULL);
 8008cb2:	f00d fa7e 	bl	80161b2 <rmw_validate_node_name>
  if (ret != RMW_RET_OK) {
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d1c0      	bne.n	8008c3e <rcl_node_init+0x26>
  if (validation_result != RMW_NODE_NAME_VALID) {
 8008cbc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008cbe:	b125      	cbz	r5, 8008cca <rcl_node_init+0xb2>
    const char * msg = rmw_node_name_validation_result_string(validation_result);
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f001 fb65 	bl	800a390 <rmw_node_name_validation_result_string>
    return RCL_RET_NODE_INVALID_NAME;
 8008cc6:	25c9      	movs	r5, #201	; 0xc9
 8008cc8:	e7b9      	b.n	8008c3e <rcl_node_init+0x26>
  size_t namespace_length = strlen(namespace_);
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7f7 fa78 	bl	80001c0 <strlen>
  if (namespace_length == 0) {
 8008cd0:	b1a0      	cbz	r0, 8008cfc <rcl_node_init+0xe4>
  if (namespace_length > 0 && namespace_[0] != '/') {
 8008cd2:	7833      	ldrb	r3, [r6, #0]
 8008cd4:	2b2f      	cmp	r3, #47	; 0x2f
 8008cd6:	d101      	bne.n	8008cdc <rcl_node_init+0xc4>
  bool should_free_local_namespace_ = false;
 8008cd8:	46aa      	mov	sl, r5
 8008cda:	e011      	b.n	8008d00 <rcl_node_init+0xe8>
    local_namespace_ = rcutils_format_string(*allocator, "/%s", namespace_);
 8008cdc:	4b7e      	ldr	r3, [pc, #504]	; (8008ed8 <rcl_node_init+0x2c0>)
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ce4:	9603      	str	r6, [sp, #12]
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008cf0:	f00d f93f 	bl	8015f72 <rcutils_format_string_limit>
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	b918      	cbnz	r0, 8008d00 <rcl_node_init+0xe8>
 8008cf8:	250a      	movs	r5, #10
 8008cfa:	e7a0      	b.n	8008c3e <rcl_node_init+0x26>
    local_namespace_ = "/";
 8008cfc:	4e77      	ldr	r6, [pc, #476]	; (8008edc <rcl_node_init+0x2c4>)
  bool should_free_local_namespace_ = false;
 8008cfe:	4682      	mov	sl, r0
  validation_result = 0;
 8008d00:	2200      	movs	r2, #0
  ret = rmw_validate_namespace(local_namespace_, &validation_result, NULL);
 8008d02:	a914      	add	r1, sp, #80	; 0x50
 8008d04:	4630      	mov	r0, r6
  validation_result = 0;
 8008d06:	9214      	str	r2, [sp, #80]	; 0x50
  ret = rmw_validate_namespace(local_namespace_, &validation_result, NULL);
 8008d08:	f00d fa42 	bl	8016190 <rmw_validate_namespace>
  if (ret != RMW_RET_OK) {
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	b928      	cbnz	r0, 8008d1c <rcl_node_init+0x104>
  if (validation_result != RMW_NAMESPACE_VALID) {
 8008d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d12:	b16b      	cbz	r3, 8008d30 <rcl_node_init+0x118>
    const char * msg = rmw_namespace_validation_result_string(validation_result);
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 faf3 	bl	800a300 <rmw_namespace_validation_result_string>
    ret = RCL_RET_NODE_INVALID_NAMESPACE;
 8008d1a:	25ca      	movs	r5, #202	; 0xca
  if (should_free_local_namespace_) {
 8008d1c:	f1ba 0f00 	cmp.w	sl, #0
 8008d20:	d08d      	beq.n	8008c3e <rcl_node_init+0x26>
    allocator->deallocate((char *)local_namespace_, allocator->state);
 8008d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d26:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	4798      	blx	r3
    local_namespace_ = NULL;
 8008d2e:	e786      	b.n	8008c3e <rcl_node_init+0x26>
  node->impl = (rcl_node_impl_t *)allocator->allocate(sizeof(rcl_node_impl_t), allocator->state);
 8008d30:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008d34:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	2030      	movs	r0, #48	; 0x30
 8008d3c:	4790      	blx	r2
 8008d3e:	4605      	mov	r5, r0
 8008d40:	6060      	str	r0, [r4, #4]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f000 8131 	beq.w	8008faa <rcl_node_init+0x392>
  node->impl->rmw_node_handle = NULL;
 8008d48:	9b07      	ldr	r3, [sp, #28]
  node->impl->graph_guard_condition = NULL;
 8008d4a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  node->impl->fq_name = NULL;
 8008d4e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  node->impl->options = rcl_node_get_default_options();
 8008d52:	a80a      	add	r0, sp, #40	; 0x28
 8008d54:	f000 f93c 	bl	8008fd0 <rcl_node_get_default_options>
 8008d58:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8008d5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d62:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8008d66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ret = rcl_node_options_copy(options, &(node->impl->options));
 8008d6a:	6861      	ldr	r1, [r4, #4]
  node->context = context;
 8008d6c:	f8c4 9000 	str.w	r9, [r4]
  ret = rcl_node_options_copy(options, &(node->impl->options));
 8008d70:	4640      	mov	r0, r8
 8008d72:	f00c faa3 	bl	80152bc <rcl_node_options_copy>
  if (RCL_RET_OK != ret) {
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f040 80be 	bne.w	8008ef8 <rcl_node_init+0x2e0>
  if ('/' == local_namespace_[strlen(local_namespace_) - 1]) {
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7f7 fa1f 	bl	80001c0 <strlen>
 8008d82:	4430      	add	r0, r6
 8008d84:	6865      	ldr	r5, [r4, #4]
 8008d86:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008d8a:	2b2f      	cmp	r3, #47	; 0x2f
    node->impl->fq_name = rcutils_format_string(*allocator, "%s%s", local_namespace_, name);
 8008d8c:	bf0c      	ite	eq
 8008d8e:	4b54      	ldreq	r3, [pc, #336]	; (8008ee0 <rcl_node_init+0x2c8>)
    node->impl->fq_name = rcutils_format_string(*allocator, "%s/%s", local_namespace_, name);
 8008d90:	4b54      	ldrne	r3, [pc, #336]	; (8008ee4 <rcl_node_init+0x2cc>)
 8008d92:	9302      	str	r3, [sp, #8]
    node->impl->fq_name = rcutils_format_string(*allocator, "%s%s", local_namespace_, name);
 8008d94:	e9cd 6b03 	strd	r6, fp, [sp, #12]
    node->impl->fq_name = rcutils_format_string(*allocator, "%s/%s", local_namespace_, name);
 8008d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008da6:	f00d f8e4 	bl	8015f72 <rcutils_format_string_limit>
  node->impl->logger_name = rcl_create_node_logger_name(name, local_namespace_, allocator);
 8008daa:	463a      	mov	r2, r7
    node->impl->fq_name = rcutils_format_string(*allocator, "%s/%s", local_namespace_, name);
 8008dac:	62e8      	str	r0, [r5, #44]	; 0x2c
  node->impl->logger_name = rcl_create_node_logger_name(name, local_namespace_, allocator);
 8008dae:	4631      	mov	r1, r6
 8008db0:	4658      	mov	r0, fp
 8008db2:	6865      	ldr	r5, [r4, #4]
 8008db4:	f7ff feea 	bl	8008b8c <rcl_create_node_logger_name>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008db8:	6863      	ldr	r3, [r4, #4]
  node->impl->logger_name = rcl_create_node_logger_name(name, local_namespace_, allocator);
 8008dba:	62a8      	str	r0, [r5, #40]	; 0x28
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	f000 809a 	beq.w	8008ef8 <rcl_node_init+0x2e0>
  domain_id = node->impl->options.domain_id;
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (RCL_DEFAULT_DOMAIN_ID == domain_id) {
 8008dc8:	3301      	adds	r3, #1
 8008dca:	d109      	bne.n	8008de0 <rcl_node_init+0x1c8>
    if (RCL_RET_OK != rcl_get_default_domain_id(&domain_id)) {
 8008dcc:	a813      	add	r0, sp, #76	; 0x4c
 8008dce:	f002 f97d 	bl	800b0cc <rcl_get_default_domain_id>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	f040 8090 	bne.w	8008ef8 <rcl_node_init+0x2e0>
  if (RMW_DEFAULT_DOMAIN_ID == domain_id) {
 8008dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dda:	3301      	adds	r3, #1
    domain_id = 0u;
 8008ddc:	bf08      	it	eq
 8008dde:	9013      	streq	r0, [sp, #76]	; 0x4c
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Using domain ID of '%zu'", domain_id);
 8008de0:	4b39      	ldr	r3, [pc, #228]	; (8008ec8 <rcl_node_init+0x2b0>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	b923      	cbnz	r3, 8008df0 <rcl_node_init+0x1d8>
 8008de6:	f00a f819 	bl	8012e1c <rcutils_logging_initialize>
 8008dea:	b108      	cbz	r0, 8008df0 <rcl_node_init+0x1d8>
 8008dec:	f7fe f8bc 	bl	8006f68 <rcutils_reset_error>
 8008df0:	4836      	ldr	r0, [pc, #216]	; (8008ecc <rcl_node_init+0x2b4>)
 8008df2:	210a      	movs	r1, #10
 8008df4:	f7fe fafe 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008df8:	b138      	cbz	r0, 8008e0a <rcl_node_init+0x1f2>
 8008dfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	4a33      	ldr	r2, [pc, #204]	; (8008ecc <rcl_node_init+0x2b4>)
 8008e00:	4b39      	ldr	r3, [pc, #228]	; (8008ee8 <rcl_node_init+0x2d0>)
 8008e02:	483a      	ldr	r0, [pc, #232]	; (8008eec <rcl_node_init+0x2d4>)
 8008e04:	210a      	movs	r1, #10
 8008e06:	f7fe fb1f 	bl	8007448 <rcutils_log>
    &(node->context->impl->rmw_context),
 8008e0a:	6822      	ldr	r2, [r4, #0]
  node->impl->actual_domain_id = domain_id;
 8008e0c:	6865      	ldr	r5, [r4, #4]
  node->impl->rmw_node_handle = rmw_create_node(
 8008e0e:	6810      	ldr	r0, [r2, #0]
  localhost_only = context->impl->init_options.impl->rmw_init_options.localhost_only;
 8008e10:	f8d9 2000 	ldr.w	r2, [r9]
  node->impl->actual_domain_id = domain_id;
 8008e14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  localhost_only = context->impl->init_options.impl->rmw_init_options.localhost_only;
 8008e16:	6952      	ldr	r2, [r2, #20]
  node->impl->actual_domain_id = domain_id;
 8008e18:	61eb      	str	r3, [r5, #28]
  node->impl->rmw_node_handle = rmw_create_node(
 8008e1a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008e1e:	1e51      	subs	r1, r2, #1
 8008e20:	424a      	negs	r2, r1
 8008e22:	414a      	adcs	r2, r1
 8008e24:	9200      	str	r2, [sp, #0]
 8008e26:	4659      	mov	r1, fp
 8008e28:	4632      	mov	r2, r6
 8008e2a:	3028      	adds	r0, #40	; 0x28
 8008e2c:	f00d fa39 	bl	80162a2 <rmw_create_node>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008e30:	6863      	ldr	r3, [r4, #4]
  node->impl->rmw_node_handle = rmw_create_node(
 8008e32:	6228      	str	r0, [r5, #32]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008e34:	6a18      	ldr	r0, [r3, #32]
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d05e      	beq.n	8008ef8 <rcl_node_init+0x2e0>
  rmw_graph_guard_condition = rmw_node_get_graph_guard_condition(node->impl->rmw_node_handle);
 8008e3a:	f00d fa4d 	bl	80162d8 <rmw_node_get_graph_guard_condition>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008e3e:	4607      	mov	r7, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d059      	beq.n	8008ef8 <rcl_node_init+0x2e0>
  node->impl->graph_guard_condition = (rcl_guard_condition_t *)allocator->allocate(
 8008e44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e48:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008e4c:	6865      	ldr	r5, [r4, #4]
 8008e4e:	2008      	movs	r0, #8
 8008e50:	4798      	blx	r3
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008e52:	6863      	ldr	r3, [r4, #4]
  node->impl->graph_guard_condition = (rcl_guard_condition_t *)allocator->allocate(
 8008e54:	6268      	str	r0, [r5, #36]	; 0x24
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008e56:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8008e58:	2d00      	cmp	r5, #0
 8008e5a:	d04d      	beq.n	8008ef8 <rcl_node_init+0x2e0>
  *node->impl->graph_guard_condition = rcl_get_zero_initialized_guard_condition();
 8008e5c:	f10d 0b20 	add.w	fp, sp, #32
 8008e60:	4658      	mov	r0, fp
 8008e62:	f002 f965 	bl	800b130 <rcl_get_zero_initialized_guard_condition>
 8008e66:	e89b 0003 	ldmia.w	fp, {r0, r1}
  graph_guard_condition_options.allocator = *allocator;
 8008e6a:	f108 0c04 	add.w	ip, r8, #4
  *node->impl->graph_guard_condition = rcl_get_zero_initialized_guard_condition();
 8008e6e:	e885 0003 	stmia.w	r5, {r0, r1}
  graph_guard_condition_options.allocator = *allocator;
 8008e72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008e76:	ad15      	add	r5, sp, #84	; 0x54
 8008e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e7e:	602b      	str	r3, [r5, #0]
  ret = rcl_guard_condition_init_from_rmw(
 8008e80:	ab16      	add	r3, sp, #88	; 0x58
 8008e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e84:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8008e88:	6865      	ldr	r5, [r4, #4]
 8008e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e8c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008e8e:	464a      	mov	r2, r9
 8008e90:	4639      	mov	r1, r7
 8008e92:	f00e f89d 	bl	8016fd0 <rcl_guard_condition_init_from_rmw>
  if (ret != RCL_RET_OK) {
 8008e96:	4605      	mov	r5, r0
 8008e98:	bb70      	cbnz	r0, 8008ef8 <rcl_node_init+0x2e0>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Node initialized");
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	; (8008ec8 <rcl_node_init+0x2b0>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b923      	cbnz	r3, 8008eaa <rcl_node_init+0x292>
 8008ea0:	f009 ffbc 	bl	8012e1c <rcutils_logging_initialize>
 8008ea4:	b108      	cbz	r0, 8008eaa <rcl_node_init+0x292>
 8008ea6:	f7fe f85f 	bl	8006f68 <rcutils_reset_error>
 8008eaa:	4808      	ldr	r0, [pc, #32]	; (8008ecc <rcl_node_init+0x2b4>)
 8008eac:	210a      	movs	r1, #10
 8008eae:	f7fe faa1 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f43f af32 	beq.w	8008d1c <rcl_node_init+0x104>
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <rcl_node_init+0x2d8>)
 8008eba:	4a04      	ldr	r2, [pc, #16]	; (8008ecc <rcl_node_init+0x2b4>)
 8008ebc:	480d      	ldr	r0, [pc, #52]	; (8008ef4 <rcl_node_init+0x2dc>)
 8008ebe:	210a      	movs	r1, #10
 8008ec0:	f7fe fac2 	bl	8007448 <rcutils_log>
 8008ec4:	e72a      	b.n	8008d1c <rcl_node_init+0x104>
 8008ec6:	bf00      	nop
 8008ec8:	2000461a 	.word	0x2000461a
 8008ecc:	0801c072 	.word	0x0801c072
 8008ed0:	0801d9b0 	.word	0x0801d9b0
 8008ed4:	20000668 	.word	0x20000668
 8008ed8:	0801d784 	.word	0x0801d784
 8008edc:	0801d9ae 	.word	0x0801d9ae
 8008ee0:	0801d77d 	.word	0x0801d77d
 8008ee4:	0801d782 	.word	0x0801d782
 8008ee8:	0801d9d9 	.word	0x0801d9d9
 8008eec:	20000674 	.word	0x20000674
 8008ef0:	0801d9f2 	.word	0x0801d9f2
 8008ef4:	20000680 	.word	0x20000680
  if (node->impl) {
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d050      	beq.n	8008fa0 <rcl_node_init+0x388>
    if (node->impl->fq_name) {
 8008efe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008f00:	b120      	cbz	r0, 8008f0c <rcl_node_init+0x2f4>
      allocator->deallocate((char *)node->impl->fq_name, allocator->state);
 8008f02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f06:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008f0a:	4798      	blx	r3
    if (node->impl->rmw_node_handle) {
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	6a18      	ldr	r0, [r3, #32]
 8008f10:	b1d0      	cbz	r0, 8008f48 <rcl_node_init+0x330>
      ret = rmw_destroy_node(node->impl->rmw_node_handle);
 8008f12:	f001 fcc5 	bl	800a8a0 <rmw_destroy_node>
      if (ret != RMW_RET_OK) {
 8008f16:	b1b8      	cbz	r0, 8008f48 <rcl_node_init+0x330>
        RCUTILS_LOG_ERROR_NAMED(
 8008f18:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <rcl_node_init+0x3a0>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	b923      	cbnz	r3, 8008f28 <rcl_node_init+0x310>
 8008f1e:	f009 ff7d 	bl	8012e1c <rcutils_logging_initialize>
 8008f22:	b108      	cbz	r0, 8008f28 <rcl_node_init+0x310>
 8008f24:	f7fe f820 	bl	8006f68 <rcutils_reset_error>
 8008f28:	4824      	ldr	r0, [pc, #144]	; (8008fbc <rcl_node_init+0x3a4>)
 8008f2a:	2128      	movs	r1, #40	; 0x28
 8008f2c:	f7fe fa62 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008f30:	b150      	cbz	r0, 8008f48 <rcl_node_init+0x330>
 8008f32:	ad1a      	add	r5, sp, #104	; 0x68
 8008f34:	4628      	mov	r0, r5
 8008f36:	f7fd fff3 	bl	8006f20 <rcutils_get_error_string>
 8008f3a:	4b21      	ldr	r3, [pc, #132]	; (8008fc0 <rcl_node_init+0x3a8>)
 8008f3c:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <rcl_node_init+0x3a4>)
 8008f3e:	4821      	ldr	r0, [pc, #132]	; (8008fc4 <rcl_node_init+0x3ac>)
 8008f40:	9500      	str	r5, [sp, #0]
 8008f42:	2128      	movs	r1, #40	; 0x28
 8008f44:	f7fe fa80 	bl	8007448 <rcutils_log>
    if (node->impl->graph_guard_condition) {
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008f4c:	b310      	cbz	r0, 8008f94 <rcl_node_init+0x37c>
      ret = rcl_guard_condition_fini(node->impl->graph_guard_condition);
 8008f4e:	f00e f856 	bl	8016ffe <rcl_guard_condition_fini>
      if (ret != RCL_RET_OK) {
 8008f52:	b1c0      	cbz	r0, 8008f86 <rcl_node_init+0x36e>
        RCUTILS_LOG_ERROR_NAMED(
 8008f54:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <rcl_node_init+0x3a0>)
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	b923      	cbnz	r3, 8008f64 <rcl_node_init+0x34c>
 8008f5a:	f009 ff5f 	bl	8012e1c <rcutils_logging_initialize>
 8008f5e:	b108      	cbz	r0, 8008f64 <rcl_node_init+0x34c>
 8008f60:	f7fe f802 	bl	8006f68 <rcutils_reset_error>
 8008f64:	4815      	ldr	r0, [pc, #84]	; (8008fbc <rcl_node_init+0x3a4>)
 8008f66:	2128      	movs	r1, #40	; 0x28
 8008f68:	f7fe fa44 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8008f6c:	b158      	cbz	r0, 8008f86 <rcl_node_init+0x36e>
 8008f6e:	f50d 658d 	add.w	r5, sp, #1128	; 0x468
 8008f72:	4628      	mov	r0, r5
 8008f74:	f7fd ffd4 	bl	8006f20 <rcutils_get_error_string>
 8008f78:	4b13      	ldr	r3, [pc, #76]	; (8008fc8 <rcl_node_init+0x3b0>)
 8008f7a:	4a10      	ldr	r2, [pc, #64]	; (8008fbc <rcl_node_init+0x3a4>)
 8008f7c:	4813      	ldr	r0, [pc, #76]	; (8008fcc <rcl_node_init+0x3b4>)
 8008f7e:	9500      	str	r5, [sp, #0]
 8008f80:	2128      	movs	r1, #40	; 0x28
 8008f82:	f7fe fa61 	bl	8007448 <rcutils_log>
      allocator->deallocate(node->impl->graph_guard_condition, allocator->state);
 8008f86:	6862      	ldr	r2, [r4, #4]
 8008f88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f8c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008f90:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8008f92:	4798      	blx	r3
    allocator->deallocate(node->impl, allocator->state);
 8008f94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f98:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8008f9c:	6860      	ldr	r0, [r4, #4]
 8008f9e:	4798      	blx	r3
  *node = rcl_get_zero_initialized_node();
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7ff fe2f 	bl	8008c04 <rcl_get_zero_initialized_node>
  ret = fail_ret;
 8008fa6:	2501      	movs	r5, #1
 8008fa8:	e6b8      	b.n	8008d1c <rcl_node_init+0x104>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8008faa:	250a      	movs	r5, #10
 8008fac:	e6b6      	b.n	8008d1c <rcl_node_init+0x104>
    return RCL_RET_ALREADY_INIT;
 8008fae:	2564      	movs	r5, #100	; 0x64
 8008fb0:	e645      	b.n	8008c3e <rcl_node_init+0x26>
    return RCL_RET_NOT_INIT;
 8008fb2:	2565      	movs	r5, #101	; 0x65
 8008fb4:	e643      	b.n	8008c3e <rcl_node_init+0x26>
 8008fb6:	bf00      	nop
 8008fb8:	2000461a 	.word	0x2000461a
 8008fbc:	0801c072 	.word	0x0801c072
 8008fc0:	0801da03 	.word	0x0801da03
 8008fc4:	2000068c 	.word	0x2000068c
 8008fc8:	0801da31 	.word	0x0801da31
 8008fcc:	20000698 	.word	0x20000698

08008fd0 <rcl_node_get_default_options>:
#include "rcl/logging_rosout.h"
#endif // RCL_LOGGING_ENABLED

rcl_node_options_t
rcl_node_get_default_options()
{
 8008fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	4607      	mov	r7, r0
    .domain_id = RCL_NODE_OPTIONS_DEFAULT_DOMAIN_ID,
    .use_global_arguments = true,
    .enable_rosout = true,
  };
  // Must set the allocator after because it is not a compile time constant.
  default_options.allocator = rcl_get_default_allocator();
 8008fd6:	466d      	mov	r5, sp
 8008fd8:	4668      	mov	r0, sp
 8008fda:	f7fd feed 	bl	8006db8 <rcutils_get_default_allocator>
 8008fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fe0:	4c07      	ldr	r4, [pc, #28]	; (8009000 <rcl_node_get_default_options+0x30>)
 8008fe2:	1d26      	adds	r6, r4, #4
 8008fe4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008fe6:	682b      	ldr	r3, [r5, #0]
 8008fe8:	6033      	str	r3, [r6, #0]
#ifdef RCL_COMMAND_LINE_ENABLED
  default_options.arguments = rcl_get_zero_initialized_arguments();
#endif // RCL_COMMAND_LINE_ENABLED
  return default_options;
 8008fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fec:	463d      	mov	r5, r7
 8008fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ff0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008ff4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	b007      	add	sp, #28
 8008ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200006a4 	.word	0x200006a4

08009004 <dupenv>:
  return secure_root;
}

static const char *
dupenv(const char * name, const rcl_allocator_t * allocator, char ** value)
{
 8009004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const char * buffer = NULL;
 8009006:	2300      	movs	r3, #0
{
 8009008:	460d      	mov	r5, r1
  const char * error = rcutils_get_env(name, &buffer);
 800900a:	a903      	add	r1, sp, #12
{
 800900c:	4616      	mov	r6, r2
  const char * buffer = NULL;
 800900e:	9303      	str	r3, [sp, #12]
  const char * error = rcutils_get_env(name, &buffer);
 8009010:	f001 f904 	bl	800a21c <rcutils_get_env>
  if (NULL != error) {
 8009014:	4604      	mov	r4, r0
 8009016:	b998      	cbnz	r0, 8009040 <dupenv+0x3c>
    return error;
  }
  *value = NULL;
 8009018:	6030      	str	r0, [r6, #0]
  if (0 != strcmp("", buffer)) {
 800901a:	9903      	ldr	r1, [sp, #12]
 800901c:	480a      	ldr	r0, [pc, #40]	; (8009048 <dupenv+0x44>)
 800901e:	f7f7 f943 	bl	80002a8 <strcmp>
 8009022:	b168      	cbz	r0, 8009040 <dupenv+0x3c>
    *value = rcutils_strdup(buffer, *allocator);
 8009024:	e9d5 0103 	ldrd	r0, r1, [r5, #12]
 8009028:	e88d 0003 	stmia.w	sp, {r0, r1}
 800902c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8009030:	9803      	ldr	r0, [sp, #12]
 8009032:	f009 ff52 	bl	8012eda <rcutils_strdup>
    if (NULL == *value) {
      return "string duplication failed";
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <dupenv+0x48>)
    *value = rcutils_strdup(buffer, *allocator);
 8009038:	6030      	str	r0, [r6, #0]
      return "string duplication failed";
 800903a:	2800      	cmp	r0, #0
 800903c:	bf08      	it	eq
 800903e:	461c      	moveq	r4, r3
    }
  }
  return NULL;
}
 8009040:	4620      	mov	r0, r4
 8009042:	b004      	add	sp, #16
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	bf00      	nop
 8009048:	0801d00d 	.word	0x0801d00d
 800904c:	0801dac5 	.word	0x0801dac5

08009050 <rcl_security_enabled>:
{
 8009050:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const char * ros_security_enable = NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	9301      	str	r3, [sp, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(use_security, RCL_RET_INVALID_ARGUMENT);
 8009056:	4605      	mov	r5, r0
 8009058:	b180      	cbz	r0, 800907c <rcl_security_enabled+0x2c>
  get_env_error_str = rcutils_get_env(ROS_SECURITY_ENABLE_VAR_NAME, &ros_security_enable);
 800905a:	480a      	ldr	r0, [pc, #40]	; (8009084 <rcl_security_enabled+0x34>)
 800905c:	a901      	add	r1, sp, #4
 800905e:	f001 f8dd 	bl	800a21c <rcutils_get_env>
  if (NULL != get_env_error_str) {
 8009062:	4604      	mov	r4, r0
 8009064:	b960      	cbnz	r0, 8009080 <rcl_security_enabled+0x30>
  *use_security = (0 == strcmp(ros_security_enable, "true"));
 8009066:	4908      	ldr	r1, [pc, #32]	; (8009088 <rcl_security_enabled+0x38>)
 8009068:	9801      	ldr	r0, [sp, #4]
 800906a:	f7f7 f91d 	bl	80002a8 <strcmp>
 800906e:	fab0 f380 	clz	r3, r0
 8009072:	095b      	lsrs	r3, r3, #5
 8009074:	702b      	strb	r3, [r5, #0]
  return RCL_RET_OK;
 8009076:	4620      	mov	r0, r4
}
 8009078:	b003      	add	sp, #12
 800907a:	bd30      	pop	{r4, r5, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(use_security, RCL_RET_INVALID_ARGUMENT);
 800907c:	200b      	movs	r0, #11
 800907e:	e7fb      	b.n	8009078 <rcl_security_enabled+0x28>
    return RCL_RET_ERROR;
 8009080:	2001      	movs	r0, #1
 8009082:	e7f9      	b.n	8009078 <rcl_security_enabled+0x28>
 8009084:	0801dadf 	.word	0x0801dadf
 8009088:	0801d6be 	.word	0x0801d6be

0800908c <rcl_get_enforcement_policy>:
{
 800908c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const char * ros_enforce_security = NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	9301      	str	r3, [sp, #4]
  RCL_CHECK_ARGUMENT_FOR_NULL(policy, RCL_RET_INVALID_ARGUMENT);
 8009092:	4605      	mov	r5, r0
 8009094:	b180      	cbz	r0, 80090b8 <rcl_get_enforcement_policy+0x2c>
  get_env_error_str = rcutils_get_env(ROS_SECURITY_STRATEGY_VAR_NAME, &ros_enforce_security);
 8009096:	480a      	ldr	r0, [pc, #40]	; (80090c0 <rcl_get_enforcement_policy+0x34>)
 8009098:	a901      	add	r1, sp, #4
 800909a:	f001 f8bf 	bl	800a21c <rcutils_get_env>
  if (NULL != get_env_error_str) {
 800909e:	4604      	mov	r4, r0
 80090a0:	b960      	cbnz	r0, 80090bc <rcl_get_enforcement_policy+0x30>
  *policy = (0 == strcmp(ros_enforce_security, "Enforce")) ?
 80090a2:	4908      	ldr	r1, [pc, #32]	; (80090c4 <rcl_get_enforcement_policy+0x38>)
 80090a4:	9801      	ldr	r0, [sp, #4]
 80090a6:	f7f7 f8ff 	bl	80002a8 <strcmp>
    RMW_SECURITY_ENFORCEMENT_ENFORCE : RMW_SECURITY_ENFORCEMENT_PERMISSIVE;
 80090aa:	fab0 f380 	clz	r3, r0
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	702b      	strb	r3, [r5, #0]
  return RCL_RET_OK;
 80090b2:	4620      	mov	r0, r4
}
 80090b4:	b003      	add	sp, #12
 80090b6:	bd30      	pop	{r4, r5, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(policy, RCL_RET_INVALID_ARGUMENT);
 80090b8:	200b      	movs	r0, #11
 80090ba:	e7fb      	b.n	80090b4 <rcl_get_enforcement_policy+0x28>
    return RCL_RET_ERROR;
 80090bc:	2001      	movs	r0, #1
 80090be:	e7f9      	b.n	80090b4 <rcl_get_enforcement_policy+0x28>
 80090c0:	0801daf3 	.word	0x0801daf3
 80090c4:	0801db09 	.word	0x0801db09

080090c8 <exact_match_lookup>:
{
 80090c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  enclaves_dir = rcutils_join_path(ros_secure_keystore_env, "enclaves", *allocator);
 80090ca:	f102 0608 	add.w	r6, r2, #8
{
 80090ce:	460d      	mov	r5, r1
 80090d0:	4607      	mov	r7, r0
 80090d2:	4614      	mov	r4, r2
  enclaves_dir = rcutils_join_path(ros_secure_keystore_env, "enclaves", *allocator);
 80090d4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
{
 80090d8:	b085      	sub	sp, #20
  enclaves_dir = rcutils_join_path(ros_secure_keystore_env, "enclaves", *allocator);
 80090da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80090de:	4916      	ldr	r1, [pc, #88]	; (8009138 <exact_match_lookup+0x70>)
 80090e0:	4628      	mov	r0, r5
 80090e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80090e6:	f001 f863 	bl	800a1b0 <rcutils_join_path>
  if (0 == strcmp(name, "/")) {
 80090ea:	4914      	ldr	r1, [pc, #80]	; (800913c <exact_match_lookup+0x74>)
  enclaves_dir = rcutils_join_path(ros_secure_keystore_env, "enclaves", *allocator);
 80090ec:	4605      	mov	r5, r0
  if (0 == strcmp(name, "/")) {
 80090ee:	4638      	mov	r0, r7
 80090f0:	f7f7 f8da 	bl	80002a8 <strcmp>
 80090f4:	b1e8      	cbz	r0, 8009132 <exact_match_lookup+0x6a>
    relative_path = rcutils_to_native_path(name + 1, *allocator);
 80090f6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80090fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80090fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009102:	1c78      	adds	r0, r7, #1
 8009104:	f001 f876 	bl	800a1f4 <rcutils_to_native_path>
 8009108:	4607      	mov	r7, r0
    secure_root = rcutils_join_path(enclaves_dir, relative_path, *allocator);
 800910a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800910e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009112:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009116:	4639      	mov	r1, r7
 8009118:	4628      	mov	r0, r5
 800911a:	f001 f849 	bl	800a1b0 <rcutils_join_path>
    allocator->deallocate(relative_path, allocator->state);
 800911e:	6863      	ldr	r3, [r4, #4]
 8009120:	6921      	ldr	r1, [r4, #16]
    secure_root = rcutils_join_path(enclaves_dir, relative_path, *allocator);
 8009122:	4606      	mov	r6, r0
    allocator->deallocate(relative_path, allocator->state);
 8009124:	4638      	mov	r0, r7
 8009126:	4798      	blx	r3
    allocator->deallocate(enclaves_dir, allocator->state);
 8009128:	4628      	mov	r0, r5
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	6921      	ldr	r1, [r4, #16]
 800912e:	4798      	blx	r3
    secure_root = rcutils_join_path(enclaves_dir, relative_path, *allocator);
 8009130:	4635      	mov	r5, r6
}
 8009132:	4628      	mov	r0, r5
 8009134:	b005      	add	sp, #20
 8009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009138:	0801db11 	.word	0x0801db11
 800913c:	0801d9ae 	.word	0x0801d9ae

08009140 <rcl_get_secure_root>:

char * rcl_get_secure_root(
  const char * name,
  const rcl_allocator_t * allocator)
{
 8009140:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009142:	460d      	mov	r5, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(name, NULL);
 8009144:	4606      	mov	r6, r0
 8009146:	2400      	movs	r4, #0
 8009148:	b910      	cbnz	r0, 8009150 <rcl_get_secure_root+0x10>

leave_rcl_get_secure_root:
  allocator->deallocate(ros_secure_enclave_override_env, allocator->state);
  allocator->deallocate(ros_secure_keystore_env, allocator->state);
  return secure_root;
}
 800914a:	4620      	mov	r0, r4
 800914c:	b002      	add	sp, #8
 800914e:	bd70      	pop	{r4, r5, r6, pc}
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "allocator is invalid", return NULL);
 8009150:	4608      	mov	r0, r1
 8009152:	f009 fe08 	bl	8012d66 <rcutils_allocator_is_valid>
 8009156:	2800      	cmp	r0, #0
 8009158:	d0f7      	beq.n	800914a <rcl_get_secure_root+0xa>
    dupenv(ROS_SECURITY_KEYSTORE_VAR_NAME, allocator, &ros_secure_keystore_env);
 800915a:	4819      	ldr	r0, [pc, #100]	; (80091c0 <rcl_get_secure_root+0x80>)
 800915c:	466a      	mov	r2, sp
 800915e:	4629      	mov	r1, r5
  char * ros_secure_enclave_override_env = NULL;
 8009160:	e9cd 4400 	strd	r4, r4, [sp]
    dupenv(ROS_SECURITY_KEYSTORE_VAR_NAME, allocator, &ros_secure_keystore_env);
 8009164:	f7ff ff4e 	bl	8009004 <dupenv>
  if (NULL != error) {
 8009168:	2800      	cmp	r0, #0
 800916a:	d1ee      	bne.n	800914a <rcl_get_secure_root+0xa>
  if (NULL == ros_secure_keystore_env) {
 800916c:	9c00      	ldr	r4, [sp, #0]
 800916e:	2c00      	cmp	r4, #0
 8009170:	d0eb      	beq.n	800914a <rcl_get_secure_root+0xa>
  error = dupenv(ROS_SECURITY_ENCLAVE_OVERRIDE, allocator, &ros_secure_enclave_override_env);
 8009172:	4814      	ldr	r0, [pc, #80]	; (80091c4 <rcl_get_secure_root+0x84>)
 8009174:	aa01      	add	r2, sp, #4
 8009176:	4629      	mov	r1, r5
 8009178:	f7ff ff44 	bl	8009004 <dupenv>
  if (NULL != error) {
 800917c:	b148      	cbz	r0, 8009192 <rcl_get_secure_root+0x52>
  char * secure_root = NULL;
 800917e:	2400      	movs	r4, #0
  allocator->deallocate(ros_secure_enclave_override_env, allocator->state);
 8009180:	686b      	ldr	r3, [r5, #4]
 8009182:	6929      	ldr	r1, [r5, #16]
 8009184:	9801      	ldr	r0, [sp, #4]
 8009186:	4798      	blx	r3
  allocator->deallocate(ros_secure_keystore_env, allocator->state);
 8009188:	686b      	ldr	r3, [r5, #4]
 800918a:	6929      	ldr	r1, [r5, #16]
 800918c:	9800      	ldr	r0, [sp, #0]
 800918e:	4798      	blx	r3
  return secure_root;
 8009190:	e7db      	b.n	800914a <rcl_get_secure_root+0xa>
  if (NULL != ros_secure_enclave_override_env) {
 8009192:	e9dd 1000 	ldrd	r1, r0, [sp]
    secure_root = exact_match_lookup(
 8009196:	462a      	mov	r2, r5
  if (NULL != ros_secure_enclave_override_env) {
 8009198:	b178      	cbz	r0, 80091ba <rcl_get_secure_root+0x7a>
    secure_root = exact_match_lookup(
 800919a:	f7ff ff95 	bl	80090c8 <exact_match_lookup>
 800919e:	4604      	mov	r4, r0
  if (NULL == secure_root) {
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0ec      	beq.n	800917e <rcl_get_secure_root+0x3e>
  if (!rcutils_is_directory(secure_root)) {
 80091a4:	f00c feae 	bl	8015f04 <rcutils_is_directory>
 80091a8:	4606      	mov	r6, r0
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d1e8      	bne.n	8009180 <rcl_get_secure_root+0x40>
    allocator->deallocate(secure_root, allocator->state);
 80091ae:	4620      	mov	r0, r4
 80091b0:	686b      	ldr	r3, [r5, #4]
 80091b2:	6929      	ldr	r1, [r5, #16]
 80091b4:	4798      	blx	r3
    secure_root = NULL;
 80091b6:	4634      	mov	r4, r6
 80091b8:	e7e2      	b.n	8009180 <rcl_get_secure_root+0x40>
    secure_root = exact_match_lookup(
 80091ba:	4630      	mov	r0, r6
 80091bc:	e7ed      	b.n	800919a <rcl_get_secure_root+0x5a>
 80091be:	bf00      	nop
 80091c0:	0801db1a 	.word	0x0801db1a
 80091c4:	0801db30 	.word	0x0801db30

080091c8 <rcl_get_security_options_from_environment>:
{
 80091c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  bool use_security = false;
 80091cc:	2300      	movs	r3, #0
{
 80091ce:	4606      	mov	r6, r0
  rcl_ret_t ret = rcl_security_enabled(&use_security);
 80091d0:	f10d 000f 	add.w	r0, sp, #15
{
 80091d4:	4688      	mov	r8, r1
 80091d6:	4615      	mov	r5, r2
  bool use_security = false;
 80091d8:	f88d 300f 	strb.w	r3, [sp, #15]
  rcl_ret_t ret = rcl_security_enabled(&use_security);
 80091dc:	f7ff ff38 	bl	8009050 <rcl_security_enabled>
  if (RCL_RET_OK != ret) {
 80091e0:	4604      	mov	r4, r0
 80091e2:	b9f0      	cbnz	r0, 8009222 <rcl_get_security_options_from_environment+0x5a>
  RCUTILS_LOG_DEBUG_NAMED(
 80091e4:	4f24      	ldr	r7, [pc, #144]	; (8009278 <rcl_get_security_options_from_environment+0xb0>)
 80091e6:	783b      	ldrb	r3, [r7, #0]
 80091e8:	b923      	cbnz	r3, 80091f4 <rcl_get_security_options_from_environment+0x2c>
 80091ea:	f009 fe17 	bl	8012e1c <rcutils_logging_initialize>
 80091ee:	b108      	cbz	r0, 80091f4 <rcl_get_security_options_from_environment+0x2c>
 80091f0:	f7fd feba 	bl	8006f68 <rcutils_reset_error>
 80091f4:	4821      	ldr	r0, [pc, #132]	; (800927c <rcl_get_security_options_from_environment+0xb4>)
 80091f6:	210a      	movs	r1, #10
 80091f8:	f7fe f8fc 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80091fc:	b168      	cbz	r0, 800921a <rcl_get_security_options_from_environment+0x52>
 80091fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8009202:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <rcl_get_security_options_from_environment+0xb8>)
 8009204:	4b1f      	ldr	r3, [pc, #124]	; (8009284 <rcl_get_security_options_from_environment+0xbc>)
 8009206:	4820      	ldr	r0, [pc, #128]	; (8009288 <rcl_get_security_options_from_environment+0xc0>)
 8009208:	2900      	cmp	r1, #0
 800920a:	bf08      	it	eq
 800920c:	4613      	moveq	r3, r2
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4a1a      	ldr	r2, [pc, #104]	; (800927c <rcl_get_security_options_from_environment+0xb4>)
 8009212:	4b1e      	ldr	r3, [pc, #120]	; (800928c <rcl_get_security_options_from_environment+0xc4>)
 8009214:	210a      	movs	r1, #10
 8009216:	f7fe f917 	bl	8007448 <rcutils_log>
  if (!use_security) {
 800921a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800921e:	b923      	cbnz	r3, 800922a <rcl_get_security_options_from_environment+0x62>
    security_options->enforce_security = RMW_SECURITY_ENFORCEMENT_PERMISSIVE;
 8009220:	702b      	strb	r3, [r5, #0]
}
 8009222:	4620      	mov	r0, r4
 8009224:	b004      	add	sp, #16
 8009226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ret = rcl_get_enforcement_policy(&security_options->enforce_security);
 800922a:	4628      	mov	r0, r5
 800922c:	f7ff ff2e 	bl	800908c <rcl_get_enforcement_policy>
  if (RCL_RET_OK != ret) {
 8009230:	4604      	mov	r4, r0
 8009232:	2800      	cmp	r0, #0
 8009234:	d1f5      	bne.n	8009222 <rcl_get_security_options_from_environment+0x5a>
  char * secure_root = rcl_get_secure_root(name, allocator);
 8009236:	4630      	mov	r0, r6
 8009238:	4641      	mov	r1, r8
 800923a:	f7ff ff81 	bl	8009140 <rcl_get_secure_root>
  if (secure_root) {
 800923e:	4606      	mov	r6, r0
 8009240:	b1a0      	cbz	r0, 800926c <rcl_get_security_options_from_environment+0xa4>
    RCUTILS_LOG_INFO_NAMED(ROS_PACKAGE_NAME, "Found security directory: %s", secure_root);
 8009242:	783b      	ldrb	r3, [r7, #0]
 8009244:	b923      	cbnz	r3, 8009250 <rcl_get_security_options_from_environment+0x88>
 8009246:	f009 fde9 	bl	8012e1c <rcutils_logging_initialize>
 800924a:	b108      	cbz	r0, 8009250 <rcl_get_security_options_from_environment+0x88>
 800924c:	f7fd fe8c 	bl	8006f68 <rcutils_reset_error>
 8009250:	480a      	ldr	r0, [pc, #40]	; (800927c <rcl_get_security_options_from_environment+0xb4>)
 8009252:	2114      	movs	r1, #20
 8009254:	f7fe f8ce 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009258:	b130      	cbz	r0, 8009268 <rcl_get_security_options_from_environment+0xa0>
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <rcl_get_security_options_from_environment+0xc8>)
 800925c:	4a07      	ldr	r2, [pc, #28]	; (800927c <rcl_get_security_options_from_environment+0xb4>)
 800925e:	480d      	ldr	r0, [pc, #52]	; (8009294 <rcl_get_security_options_from_environment+0xcc>)
 8009260:	9600      	str	r6, [sp, #0]
 8009262:	2114      	movs	r1, #20
 8009264:	f7fe f8f0 	bl	8007448 <rcutils_log>
    security_options->security_root_path = secure_root;
 8009268:	606e      	str	r6, [r5, #4]
 800926a:	e7da      	b.n	8009222 <rcl_get_security_options_from_environment+0x5a>
    if (RMW_SECURITY_ENFORCEMENT_ENFORCE == security_options->enforce_security) {
 800926c:	782c      	ldrb	r4, [r5, #0]
 800926e:	1e63      	subs	r3, r4, #1
 8009270:	425c      	negs	r4, r3
 8009272:	415c      	adcs	r4, r3
 8009274:	e7d5      	b.n	8009222 <rcl_get_security_options_from_environment+0x5a>
 8009276:	bf00      	nop
 8009278:	2000461a 	.word	0x2000461a
 800927c:	0801c072 	.word	0x0801c072
 8009280:	0801d6c3 	.word	0x0801d6c3
 8009284:	0801d6be 	.word	0x0801d6be
 8009288:	200006c0 	.word	0x200006c0
 800928c:	0801db4e 	.word	0x0801db4e
 8009290:	0801db61 	.word	0x0801db61
 8009294:	200006cc 	.word	0x200006cc

08009298 <rcl_take_request_with_info>:
rcl_ret_t
rcl_take_request_with_info(
  const rcl_service_t * service,
  rmw_service_info_t * request_header,
  void * ros_request)
{
 8009298:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Service server taking service request");
 800929a:	4f2f      	ldr	r7, [pc, #188]	; (8009358 <rcl_take_request_with_info+0xc0>)
{
 800929c:	4616      	mov	r6, r2
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Service server taking service request");
 800929e:	783a      	ldrb	r2, [r7, #0]
{
 80092a0:	b085      	sub	sp, #20
 80092a2:	4604      	mov	r4, r0
 80092a4:	460d      	mov	r5, r1
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Service server taking service request");
 80092a6:	b922      	cbnz	r2, 80092b2 <rcl_take_request_with_info+0x1a>
 80092a8:	f009 fdb8 	bl	8012e1c <rcutils_logging_initialize>
 80092ac:	b108      	cbz	r0, 80092b2 <rcl_take_request_with_info+0x1a>
 80092ae:	f7fd fe5b 	bl	8006f68 <rcutils_reset_error>
 80092b2:	482a      	ldr	r0, [pc, #168]	; (800935c <rcl_take_request_with_info+0xc4>)
 80092b4:	210a      	movs	r1, #10
 80092b6:	f7fe f89d 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80092ba:	b128      	cbz	r0, 80092c8 <rcl_take_request_with_info+0x30>
 80092bc:	4b28      	ldr	r3, [pc, #160]	; (8009360 <rcl_take_request_with_info+0xc8>)
 80092be:	4a27      	ldr	r2, [pc, #156]	; (800935c <rcl_take_request_with_info+0xc4>)
 80092c0:	4828      	ldr	r0, [pc, #160]	; (8009364 <rcl_take_request_with_info+0xcc>)
 80092c2:	210a      	movs	r1, #10
 80092c4:	f7fe f8c0 	bl	8007448 <rcutils_log>
  if (!rcl_service_is_valid(service)) {
 80092c8:	4620      	mov	r0, r4
 80092ca:	f00c f810 	bl	80152ee <rcl_service_is_valid>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d03c      	beq.n	800934c <rcl_take_request_with_info+0xb4>
    return RCL_RET_SERVICE_INVALID;  // error already set
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	d03d      	beq.n	8009352 <rcl_take_request_with_info+0xba>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_request, RCL_RET_INVALID_ARGUMENT);
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d03b      	beq.n	8009352 <rcl_take_request_with_info+0xba>
  const rcl_service_options_t * options = rcl_service_get_options(service);
 80092da:	4620      	mov	r0, r4
 80092dc:	f00c f80f 	bl	80152fe <rcl_service_get_options>
  RCL_CHECK_FOR_NULL_WITH_MSG(options, "Failed to get service options", return RCL_RET_ERROR);
 80092e0:	b170      	cbz	r0, 8009300 <rcl_take_request_with_info+0x68>

  bool taken = false;
  rmw_ret_t ret = rmw_take_request(
    service->impl->rmw_handle, request_header, ros_request, &taken);
 80092e2:	6820      	ldr	r0, [r4, #0]
  bool taken = false;
 80092e4:	2300      	movs	r3, #0
 80092e6:	f88d 300f 	strb.w	r3, [sp, #15]
  rmw_ret_t ret = rmw_take_request(
 80092ea:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80092ec:	f10d 030f 	add.w	r3, sp, #15
 80092f0:	4632      	mov	r2, r6
 80092f2:	4629      	mov	r1, r5
 80092f4:	f00c fff5 	bl	80162e2 <rmw_take_request>
  if (RMW_RET_OK != ret) {
 80092f8:	4604      	mov	r4, r0
 80092fa:	b128      	cbz	r0, 8009308 <rcl_take_request_with_info+0x70>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    if (RMW_RET_BAD_ALLOC == ret) {
 80092fc:	280a      	cmp	r0, #10
 80092fe:	d000      	beq.n	8009302 <rcl_take_request_with_info+0x6a>
      return RCL_RET_BAD_ALLOC;
    }
    return RCL_RET_ERROR;
 8009300:	2401      	movs	r4, #1
    ROS_PACKAGE_NAME, "Service take request succeeded: %s", taken ? "true" : "false");
  if (!taken) {
    return RCL_RET_SERVICE_TAKE_FAILED;
  }
  return RCL_RET_OK;
}
 8009302:	4620      	mov	r0, r4
 8009304:	b005      	add	sp, #20
 8009306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  RCUTILS_LOG_DEBUG_NAMED(
 8009308:	783b      	ldrb	r3, [r7, #0]
 800930a:	b923      	cbnz	r3, 8009316 <rcl_take_request_with_info+0x7e>
 800930c:	f009 fd86 	bl	8012e1c <rcutils_logging_initialize>
 8009310:	b108      	cbz	r0, 8009316 <rcl_take_request_with_info+0x7e>
 8009312:	f7fd fe29 	bl	8006f68 <rcutils_reset_error>
 8009316:	4811      	ldr	r0, [pc, #68]	; (800935c <rcl_take_request_with_info+0xc4>)
 8009318:	210a      	movs	r1, #10
 800931a:	f7fe f86b 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800931e:	b168      	cbz	r0, 800933c <rcl_take_request_with_info+0xa4>
 8009320:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8009324:	4a10      	ldr	r2, [pc, #64]	; (8009368 <rcl_take_request_with_info+0xd0>)
 8009326:	4b11      	ldr	r3, [pc, #68]	; (800936c <rcl_take_request_with_info+0xd4>)
 8009328:	4811      	ldr	r0, [pc, #68]	; (8009370 <rcl_take_request_with_info+0xd8>)
 800932a:	2900      	cmp	r1, #0
 800932c:	bf08      	it	eq
 800932e:	4613      	moveq	r3, r2
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4a0a      	ldr	r2, [pc, #40]	; (800935c <rcl_take_request_with_info+0xc4>)
 8009334:	4b0f      	ldr	r3, [pc, #60]	; (8009374 <rcl_take_request_with_info+0xdc>)
 8009336:	210a      	movs	r1, #10
 8009338:	f7fe f886 	bl	8007448 <rcutils_log>
  if (!taken) {
 800933c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return RCL_RET_SERVICE_TAKE_FAILED;
 8009340:	f240 2359 	movw	r3, #601	; 0x259
 8009344:	2a00      	cmp	r2, #0
 8009346:	bf08      	it	eq
 8009348:	461c      	moveq	r4, r3
 800934a:	e7da      	b.n	8009302 <rcl_take_request_with_info+0x6a>
    return RCL_RET_SERVICE_INVALID;  // error already set
 800934c:	f44f 7416 	mov.w	r4, #600	; 0x258
 8009350:	e7d7      	b.n	8009302 <rcl_take_request_with_info+0x6a>
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 8009352:	240b      	movs	r4, #11
 8009354:	e7d5      	b.n	8009302 <rcl_take_request_with_info+0x6a>
 8009356:	bf00      	nop
 8009358:	2000461a 	.word	0x2000461a
 800935c:	0801c072 	.word	0x0801c072
 8009360:	0801dcd1 	.word	0x0801dcd1
 8009364:	200006d8 	.word	0x200006d8
 8009368:	0801d6c3 	.word	0x0801d6c3
 800936c:	0801d6be 	.word	0x0801d6be
 8009370:	200006e4 	.word	0x200006e4
 8009374:	0801dcf7 	.word	0x0801dcf7

08009378 <rcl_send_response>:
rcl_send_response(
  const rcl_service_t * service,
  rmw_request_id_t * request_header,
  void * ros_response)
{
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Sending service response");
 8009378:	4b18      	ldr	r3, [pc, #96]	; (80093dc <rcl_send_response+0x64>)
 800937a:	781b      	ldrb	r3, [r3, #0]
{
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	460d      	mov	r5, r1
 8009382:	4616      	mov	r6, r2
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Sending service response");
 8009384:	b923      	cbnz	r3, 8009390 <rcl_send_response+0x18>
 8009386:	f009 fd49 	bl	8012e1c <rcutils_logging_initialize>
 800938a:	b108      	cbz	r0, 8009390 <rcl_send_response+0x18>
 800938c:	f7fd fdec 	bl	8006f68 <rcutils_reset_error>
 8009390:	4813      	ldr	r0, [pc, #76]	; (80093e0 <rcl_send_response+0x68>)
 8009392:	210a      	movs	r1, #10
 8009394:	f7fe f82e 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009398:	b128      	cbz	r0, 80093a6 <rcl_send_response+0x2e>
 800939a:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <rcl_send_response+0x6c>)
 800939c:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <rcl_send_response+0x68>)
 800939e:	4812      	ldr	r0, [pc, #72]	; (80093e8 <rcl_send_response+0x70>)
 80093a0:	210a      	movs	r1, #10
 80093a2:	f7fe f851 	bl	8007448 <rcutils_log>
  if (!rcl_service_is_valid(service)) {
 80093a6:	4620      	mov	r0, r4
 80093a8:	f00b ffa1 	bl	80152ee <rcl_service_is_valid>
 80093ac:	b178      	cbz	r0, 80093ce <rcl_send_response+0x56>
    return RCL_RET_SERVICE_INVALID;  // error already set
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 80093ae:	b18d      	cbz	r5, 80093d4 <rcl_send_response+0x5c>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_response, RCL_RET_INVALID_ARGUMENT);
 80093b0:	b186      	cbz	r6, 80093d4 <rcl_send_response+0x5c>
  const rcl_service_options_t * options = rcl_service_get_options(service);
 80093b2:	4620      	mov	r0, r4
 80093b4:	f00b ffa3 	bl	80152fe <rcl_service_get_options>
  RCL_CHECK_FOR_NULL_WITH_MSG(options, "Failed to get service options", return RCL_RET_ERROR);
 80093b8:	b170      	cbz	r0, 80093d8 <rcl_send_response+0x60>

  if (rmw_send_response(
      service->impl->rmw_handle, request_header, ros_response) != RMW_RET_OK)
 80093ba:	6823      	ldr	r3, [r4, #0]
  if (rmw_send_response(
 80093bc:	4632      	mov	r2, r6
 80093be:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80093c0:	4629      	mov	r1, r5
 80093c2:	f00c ffe7 	bl	8016394 <rmw_send_response>
 80093c6:	3800      	subs	r0, #0
 80093c8:	bf18      	it	ne
 80093ca:	2001      	movne	r0, #1
  {
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return RCL_RET_ERROR;
  }
  return RCL_RET_OK;
}
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
    return RCL_RET_SERVICE_INVALID;  // error already set
 80093ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80093d2:	e7fb      	b.n	80093cc <rcl_send_response+0x54>
  RCL_CHECK_ARGUMENT_FOR_NULL(request_header, RCL_RET_INVALID_ARGUMENT);
 80093d4:	200b      	movs	r0, #11
 80093d6:	e7f9      	b.n	80093cc <rcl_send_response+0x54>
  RCL_CHECK_FOR_NULL_WITH_MSG(options, "Failed to get service options", return RCL_RET_ERROR);
 80093d8:	2001      	movs	r0, #1
 80093da:	e7f7      	b.n	80093cc <rcl_send_response+0x54>
 80093dc:	2000461a 	.word	0x2000461a
 80093e0:	0801c072 	.word	0x0801c072
 80093e4:	0801dd1a 	.word	0x0801dd1a
 80093e8:	200006f0 	.word	0x200006f0

080093ec <rcl_get_zero_initialized_subscription>:
rcl_subscription_t
rcl_get_zero_initialized_subscription()
{
  static rcl_subscription_t null_subscription = {0};
  return null_subscription;
}
 80093ec:	4b01      	ldr	r3, [pc, #4]	; (80093f4 <rcl_get_zero_initialized_subscription+0x8>)
 80093ee:	6818      	ldr	r0, [r3, #0]
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	0801bb04 	.word	0x0801bb04

080093f8 <rcl_subscription_init>:
  const rcl_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rcl_subscription_options_t * options
)
{
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 8009400:	4605      	mov	r5, r0
 8009402:	f8dd 4468 	ldr.w	r4, [sp, #1128]	; 0x468
 8009406:	4688      	mov	r8, r1
 8009408:	4693      	mov	fp, r2
 800940a:	469a      	mov	sl, r3
  rcl_ret_t fail_ret = RCL_RET_ERROR;

  // Check options and allocator first, so the allocator can be used in errors.
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 800940c:	b92c      	cbnz	r4, 800941a <rcl_subscription_init+0x22>
 800940e:	270b      	movs	r7, #11
  }
  if (NULL != remapped_topic_name) {
    allocator->deallocate(remapped_topic_name, allocator->state);
  }
  return ret;
}
 8009410:	4638      	mov	r0, r7
 8009412:	f20d 4d44 	addw	sp, sp, #1092	; 0x444
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rcl_allocator_t * allocator = (rcl_allocator_t *)&options->allocator;
 800941a:	f104 0750 	add.w	r7, r4, #80	; 0x50
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 800941e:	4638      	mov	r0, r7
 8009420:	f009 fca1 	bl	8012d66 <rcutils_allocator_is_valid>
 8009424:	2800      	cmp	r0, #0
 8009426:	d0f2      	beq.n	800940e <rcl_subscription_init+0x16>
  RCL_CHECK_ARGUMENT_FOR_NULL(subscription, RCL_RET_INVALID_ARGUMENT);
 8009428:	2d00      	cmp	r5, #0
 800942a:	d0f0      	beq.n	800940e <rcl_subscription_init+0x16>
  if (!rcl_node_is_valid(node)) {
 800942c:	4640      	mov	r0, r8
 800942e:	f00b ff19 	bl	8015264 <rcl_node_is_valid>
 8009432:	2800      	cmp	r0, #0
 8009434:	f000 8127 	beq.w	8009686 <rcl_subscription_init+0x28e>
  RCL_CHECK_ARGUMENT_FOR_NULL(type_support, RCL_RET_INVALID_ARGUMENT);
 8009438:	f1bb 0f00 	cmp.w	fp, #0
 800943c:	d0e7      	beq.n	800940e <rcl_subscription_init+0x16>
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 800943e:	f1ba 0f00 	cmp.w	sl, #0
 8009442:	d0e4      	beq.n	800940e <rcl_subscription_init+0x16>
  RCUTILS_LOG_DEBUG_NAMED(
 8009444:	4b92      	ldr	r3, [pc, #584]	; (8009690 <rcl_subscription_init+0x298>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b923      	cbnz	r3, 8009454 <rcl_subscription_init+0x5c>
 800944a:	f009 fce7 	bl	8012e1c <rcutils_logging_initialize>
 800944e:	b108      	cbz	r0, 8009454 <rcl_subscription_init+0x5c>
 8009450:	f7fd fd8a 	bl	8006f68 <rcutils_reset_error>
 8009454:	488f      	ldr	r0, [pc, #572]	; (8009694 <rcl_subscription_init+0x29c>)
 8009456:	210a      	movs	r1, #10
 8009458:	f7fd ffcc 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800945c:	b138      	cbz	r0, 800946e <rcl_subscription_init+0x76>
 800945e:	4b8e      	ldr	r3, [pc, #568]	; (8009698 <rcl_subscription_init+0x2a0>)
 8009460:	4a8c      	ldr	r2, [pc, #560]	; (8009694 <rcl_subscription_init+0x29c>)
 8009462:	488e      	ldr	r0, [pc, #568]	; (800969c <rcl_subscription_init+0x2a4>)
 8009464:	f8cd a000 	str.w	sl, [sp]
 8009468:	210a      	movs	r1, #10
 800946a:	f7fd ffed 	bl	8007448 <rcutils_log>
  if (subscription->impl) {
 800946e:	682e      	ldr	r6, [r5, #0]
 8009470:	2e00      	cmp	r6, #0
 8009472:	f040 810a 	bne.w	800968a <rcl_subscription_init+0x292>
  rcutils_allocator_t rcutils_allocator = *allocator;  // implicit conversion to rcutils version
 8009476:	46be      	mov	lr, r7
 8009478:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800947c:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8009480:	46cc      	mov	ip, r9
 8009482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009486:	f8de 3000 	ldr.w	r3, [lr]
 800948a:	f8cc 3000 	str.w	r3, [ip]
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 800948e:	f7fe f9bd 	bl	800780c <rcutils_get_zero_initialized_string_map>
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 8009492:	ab0d      	add	r3, sp, #52	; 0x34
  rcutils_string_map_t substitutions_map = rcutils_get_zero_initialized_string_map();
 8009494:	9009      	str	r0, [sp, #36]	; 0x24
  rcutils_ret_t rcutils_ret = rcutils_string_map_init(&substitutions_map, 0, rcutils_allocator);
 8009496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800949a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800949e:	4631      	mov	r1, r6
 80094a0:	e899 000c 	ldmia.w	r9, {r2, r3}
 80094a4:	a809      	add	r0, sp, #36	; 0x24
 80094a6:	f009 fdc5 	bl	8013034 <rcutils_string_map_init>
  if (rcutils_ret != RCUTILS_RET_OK) {
 80094aa:	b120      	cbz	r0, 80094b6 <rcl_subscription_init+0xbe>
    if (RCUTILS_RET_BAD_ALLOC == rcutils_ret) {
 80094ac:	280a      	cmp	r0, #10
      return RCL_RET_BAD_ALLOC;
 80094ae:	bf0c      	ite	eq
 80094b0:	270a      	moveq	r7, #10
    return RCL_RET_ERROR;
 80094b2:	2701      	movne	r7, #1
 80094b4:	e7ac      	b.n	8009410 <rcl_subscription_init+0x18>
  rcl_ret_t ret = rcl_get_default_topic_name_substitutions(&substitutions_map);
 80094b6:	a809      	add	r0, sp, #36	; 0x24
 80094b8:	f00b fe50 	bl	801515c <rcl_get_default_topic_name_substitutions>
  if (ret != RCL_RET_OK) {
 80094bc:	4681      	mov	r9, r0
 80094be:	b300      	cbz	r0, 8009502 <rcl_subscription_init+0x10a>
    rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 80094c0:	a809      	add	r0, sp, #36	; 0x24
 80094c2:	f009 fe08 	bl	80130d6 <rcutils_string_map_fini>
    if (rcutils_ret != RCUTILS_RET_OK) {
 80094c6:	4604      	mov	r4, r0
 80094c8:	b1c0      	cbz	r0, 80094fc <rcl_subscription_init+0x104>
      RCUTILS_LOG_ERROR_NAMED(
 80094ca:	4b71      	ldr	r3, [pc, #452]	; (8009690 <rcl_subscription_init+0x298>)
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b923      	cbnz	r3, 80094da <rcl_subscription_init+0xe2>
 80094d0:	f009 fca4 	bl	8012e1c <rcutils_logging_initialize>
 80094d4:	b108      	cbz	r0, 80094da <rcl_subscription_init+0xe2>
 80094d6:	f7fd fd47 	bl	8006f68 <rcutils_reset_error>
 80094da:	486e      	ldr	r0, [pc, #440]	; (8009694 <rcl_subscription_init+0x29c>)
 80094dc:	2128      	movs	r1, #40	; 0x28
 80094de:	f7fd ff89 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80094e2:	b158      	cbz	r0, 80094fc <rcl_subscription_init+0x104>
 80094e4:	ad10      	add	r5, sp, #64	; 0x40
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7fd fd1a 	bl	8006f20 <rcutils_get_error_string>
 80094ec:	e9cd 4500 	strd	r4, r5, [sp]
 80094f0:	4b6b      	ldr	r3, [pc, #428]	; (80096a0 <rcl_subscription_init+0x2a8>)
 80094f2:	4a68      	ldr	r2, [pc, #416]	; (8009694 <rcl_subscription_init+0x29c>)
 80094f4:	486b      	ldr	r0, [pc, #428]	; (80096a4 <rcl_subscription_init+0x2ac>)
 80094f6:	2128      	movs	r1, #40	; 0x28
 80094f8:	f7fd ffa6 	bl	8007448 <rcutils_log>
    if (RCL_RET_BAD_ALLOC == ret) {
 80094fc:	f1b9 0f0a 	cmp.w	r9, #10
 8009500:	e7d5      	b.n	80094ae <rcl_subscription_init+0xb6>
  ret = rcl_expand_topic_name(
 8009502:	4640      	mov	r0, r8
  char * expanded_topic_name = NULL;
 8009504:	960a      	str	r6, [sp, #40]	; 0x28
  ret = rcl_expand_topic_name(
 8009506:	f00b feb8 	bl	801527a <rcl_node_get_name>
 800950a:	9007      	str	r0, [sp, #28]
 800950c:	4640      	mov	r0, r8
 800950e:	f00b febd 	bl	801528c <rcl_node_get_namespace>
  char * expanded_topic_name = NULL;
 8009512:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  ret = rcl_expand_topic_name(
 8009516:	f8cd 9014 	str.w	r9, [sp, #20]
 800951a:	4686      	mov	lr, r0
 800951c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800951e:	46ec      	mov	ip, sp
 8009520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	f8cc 3000 	str.w	r3, [ip]
 800952a:	9907      	ldr	r1, [sp, #28]
 800952c:	ab09      	add	r3, sp, #36	; 0x24
 800952e:	4672      	mov	r2, lr
 8009530:	4650      	mov	r0, sl
 8009532:	f7ff f817 	bl	8008564 <rcl_expand_topic_name>
 8009536:	4607      	mov	r7, r0
  rcutils_ret = rcutils_string_map_fini(&substitutions_map);
 8009538:	a809      	add	r0, sp, #36	; 0x24
 800953a:	f009 fdcc 	bl	80130d6 <rcutils_string_map_fini>
  if (rcutils_ret != RCUTILS_RET_OK) {
 800953e:	b928      	cbnz	r0, 800954c <rcl_subscription_init+0x154>
  if (ret != RCL_RET_OK) {
 8009540:	b137      	cbz	r7, 8009550 <rcl_subscription_init+0x158>
    if (ret == RCL_RET_TOPIC_NAME_INVALID || ret == RCL_RET_UNKNOWN_SUBSTITUTION) {
 8009542:	2f67      	cmp	r7, #103	; 0x67
 8009544:	d077      	beq.n	8009636 <rcl_subscription_init+0x23e>
 8009546:	2f69      	cmp	r7, #105	; 0x69
 8009548:	f000 8099 	beq.w	800967e <rcl_subscription_init+0x286>
  ret = fail_ret;
 800954c:	2701      	movs	r7, #1
 800954e:	e072      	b.n	8009636 <rcl_subscription_init+0x23e>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Expanded topic name '%s'", expanded_topic_name);
 8009550:	4b4f      	ldr	r3, [pc, #316]	; (8009690 <rcl_subscription_init+0x298>)
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	469a      	mov	sl, r3
 8009556:	b922      	cbnz	r2, 8009562 <rcl_subscription_init+0x16a>
 8009558:	f009 fc60 	bl	8012e1c <rcutils_logging_initialize>
 800955c:	b108      	cbz	r0, 8009562 <rcl_subscription_init+0x16a>
 800955e:	f7fd fd03 	bl	8006f68 <rcutils_reset_error>
 8009562:	484c      	ldr	r0, [pc, #304]	; (8009694 <rcl_subscription_init+0x29c>)
 8009564:	210a      	movs	r1, #10
 8009566:	f7fd ff45 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800956a:	b140      	cbz	r0, 800957e <rcl_subscription_init+0x186>
 800956c:	f8d9 3000 	ldr.w	r3, [r9]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4a48      	ldr	r2, [pc, #288]	; (8009694 <rcl_subscription_init+0x29c>)
 8009574:	4b4c      	ldr	r3, [pc, #304]	; (80096a8 <rcl_subscription_init+0x2b0>)
 8009576:	484d      	ldr	r0, [pc, #308]	; (80096ac <rcl_subscription_init+0x2b4>)
 8009578:	210a      	movs	r1, #10
 800957a:	f7fd ff65 	bl	8007448 <rcutils_log>
  const rcl_node_options_t * node_options = rcl_node_get_options(node);
 800957e:	4640      	mov	r0, r8
 8009580:	f00b fe8d 	bl	801529e <rcl_node_get_options>
  if (NULL == node_options) {
 8009584:	2800      	cmp	r0, #0
 8009586:	d0e1      	beq.n	800954c <rcl_subscription_init+0x154>
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 8009588:	f8d9 0000 	ldr.w	r0, [r9]
 800958c:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800958e:	f7f6 fe17 	bl	80001c0 <strlen>
 8009592:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009594:	3001      	adds	r0, #1
 8009596:	47b0      	blx	r6
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 8009598:	f8d9 7000 	ldr.w	r7, [r9]
  remapped_topic_name = (char *)allocator->allocate(strlen(expanded_topic_name) + 1, allocator->state);
 800959c:	4606      	mov	r6, r0
  memcpy(remapped_topic_name, expanded_topic_name, strlen(expanded_topic_name) + 1);
 800959e:	4638      	mov	r0, r7
 80095a0:	f7f6 fe0e 	bl	80001c0 <strlen>
 80095a4:	4639      	mov	r1, r7
 80095a6:	1c42      	adds	r2, r0, #1
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7f8 f8f9 	bl	80017a0 <memcpy>
  rmw_ret_t rmw_ret = rmw_validate_full_topic_name(remapped_topic_name, &validation_result, NULL);
 80095ae:	2200      	movs	r2, #0
 80095b0:	a910      	add	r1, sp, #64	; 0x40
 80095b2:	4630      	mov	r0, r6
 80095b4:	f009 fdcc 	bl	8013150 <rmw_validate_full_topic_name>
  if (rmw_ret != RMW_RET_OK) {
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d1c7      	bne.n	800954c <rcl_subscription_init+0x154>
  if (validation_result != RMW_TOPIC_VALID) {
 80095bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d15d      	bne.n	800967e <rcl_subscription_init+0x286>
  subscription->impl = (rcl_subscription_impl_t *)allocator->allocate(
 80095c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80095c4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80095c6:	20c8      	movs	r0, #200	; 0xc8
 80095c8:	4798      	blx	r3
 80095ca:	6028      	str	r0, [r5, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d058      	beq.n	8009682 <rcl_subscription_init+0x28a>
    rcl_node_get_rmw_handle(node),
 80095d0:	4640      	mov	r0, r8
 80095d2:	f00b fe6b 	bl	80152ac <rcl_node_get_rmw_handle>
  subscription->impl->rmw_handle = rmw_create_subscription(
 80095d6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80095da:	682f      	ldr	r7, [r5, #0]
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	4659      	mov	r1, fp
 80095e0:	4623      	mov	r3, r4
 80095e2:	4632      	mov	r2, r6
 80095e4:	f001 f9c2 	bl	800a96c <rmw_create_subscription>
  if (!subscription->impl->rmw_handle) {
 80095e8:	6829      	ldr	r1, [r5, #0]
  subscription->impl->rmw_handle = rmw_create_subscription(
 80095ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
  if (!subscription->impl->rmw_handle) {
 80095ee:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 80095f2:	b370      	cbz	r0, 8009652 <rcl_subscription_init+0x25a>
  rmw_ret = rmw_subscription_get_actual_qos(
 80095f4:	3170      	adds	r1, #112	; 0x70
 80095f6:	f00c ff86 	bl	8016506 <rmw_subscription_get_actual_qos>
  if (RMW_RET_OK != rmw_ret) {
 80095fa:	4607      	mov	r7, r0
 80095fc:	bb48      	cbnz	r0, 8009652 <rcl_subscription_init+0x25a>
  subscription->impl->actual_qos.avoid_ros_namespace_conventions =
 80095fe:	6828      	ldr	r0, [r5, #0]
 8009600:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8009604:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
  subscription->impl->options = *options;
 8009608:	2270      	movs	r2, #112	; 0x70
 800960a:	4621      	mov	r1, r4
 800960c:	f7f8 f8c8 	bl	80017a0 <memcpy>
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription initialized");
 8009610:	f89a 3000 	ldrb.w	r3, [sl]
 8009614:	b923      	cbnz	r3, 8009620 <rcl_subscription_init+0x228>
 8009616:	f009 fc01 	bl	8012e1c <rcutils_logging_initialize>
 800961a:	b108      	cbz	r0, 8009620 <rcl_subscription_init+0x228>
 800961c:	f7fd fca4 	bl	8006f68 <rcutils_reset_error>
 8009620:	481c      	ldr	r0, [pc, #112]	; (8009694 <rcl_subscription_init+0x29c>)
 8009622:	210a      	movs	r1, #10
 8009624:	f7fd fee6 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009628:	b128      	cbz	r0, 8009636 <rcl_subscription_init+0x23e>
 800962a:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <rcl_subscription_init+0x2b8>)
 800962c:	4a19      	ldr	r2, [pc, #100]	; (8009694 <rcl_subscription_init+0x29c>)
 800962e:	4821      	ldr	r0, [pc, #132]	; (80096b4 <rcl_subscription_init+0x2bc>)
 8009630:	210a      	movs	r1, #10
 8009632:	f7fd ff09 	bl	8007448 <rcutils_log>
  if (NULL != expanded_topic_name) {
 8009636:	f8d9 0000 	ldr.w	r0, [r9]
 800963a:	b110      	cbz	r0, 8009642 <rcl_subscription_init+0x24a>
    allocator->deallocate(expanded_topic_name, allocator->state);
 800963c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800963e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009640:	4798      	blx	r3
  if (NULL != remapped_topic_name) {
 8009642:	2e00      	cmp	r6, #0
 8009644:	f43f aee4 	beq.w	8009410 <rcl_subscription_init+0x18>
    allocator->deallocate(remapped_topic_name, allocator->state);
 8009648:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800964a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800964c:	4630      	mov	r0, r6
 800964e:	4798      	blx	r3
 8009650:	e6de      	b.n	8009410 <rcl_subscription_init+0x18>
  if (subscription->impl) {
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f43f af79 	beq.w	800954c <rcl_subscription_init+0x154>
    if (subscription->impl->rmw_handle) {
 800965a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800965e:	b13b      	cbz	r3, 8009670 <rcl_subscription_init+0x278>
      rmw_ret_t rmw_fail_ret = rmw_destroy_subscription(
 8009660:	4640      	mov	r0, r8
 8009662:	f00b fe23 	bl	80152ac <rcl_node_get_rmw_handle>
 8009666:	682b      	ldr	r3, [r5, #0]
 8009668:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800966c:	f00c ff4d 	bl	801650a <rmw_destroy_subscription>
    allocator->deallocate(subscription->impl, allocator->state);
 8009670:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009672:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8009674:	6828      	ldr	r0, [r5, #0]
 8009676:	4798      	blx	r3
    subscription->impl = NULL;
 8009678:	2300      	movs	r3, #0
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	e766      	b.n	800954c <rcl_subscription_init+0x154>
    ret = RCL_RET_TOPIC_NAME_INVALID;
 800967e:	2767      	movs	r7, #103	; 0x67
 8009680:	e7d9      	b.n	8009636 <rcl_subscription_init+0x23e>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8009682:	270a      	movs	r7, #10
 8009684:	e7d7      	b.n	8009636 <rcl_subscription_init+0x23e>
    return RCL_RET_NODE_INVALID;  // error already set
 8009686:	27c8      	movs	r7, #200	; 0xc8
 8009688:	e6c2      	b.n	8009410 <rcl_subscription_init+0x18>
    return RCL_RET_ALREADY_INIT;
 800968a:	2764      	movs	r7, #100	; 0x64
 800968c:	e6c0      	b.n	8009410 <rcl_subscription_init+0x18>
 800968e:	bf00      	nop
 8009690:	2000461a 	.word	0x2000461a
 8009694:	0801c072 	.word	0x0801c072
 8009698:	0801ddb4 	.word	0x0801ddb4
 800969c:	200006fc 	.word	0x200006fc
 80096a0:	0801c0a1 	.word	0x0801c0a1
 80096a4:	20000708 	.word	0x20000708
 80096a8:	0801c0da 	.word	0x0801c0da
 80096ac:	20000714 	.word	0x20000714
 80096b0:	0801dde2 	.word	0x0801dde2
 80096b4:	20000720 	.word	0x20000720

080096b8 <rcl_subscription_get_default_options>:
  return result;
}

rcl_subscription_options_t
rcl_subscription_get_default_options()
{
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_subscription_options_t default_options;
  // Must set these after declaration because they are not a compile time constants.
  default_options.qos = rmw_qos_profile_default;
 80096ba:	4f12      	ldr	r7, [pc, #72]	; (8009704 <rcl_subscription_get_default_options+0x4c>)
 80096bc:	4912      	ldr	r1, [pc, #72]	; (8009708 <rcl_subscription_get_default_options+0x50>)
{
 80096be:	b089      	sub	sp, #36	; 0x24
 80096c0:	4606      	mov	r6, r0
  default_options.qos = rmw_qos_profile_default;
 80096c2:	2250      	movs	r2, #80	; 0x50
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7f8 f86b 	bl	80017a0 <memcpy>
  default_options.allocator = rcl_get_default_allocator();
 80096ca:	ac02      	add	r4, sp, #8
 80096cc:	a802      	add	r0, sp, #8
 80096ce:	f7fd fb73 	bl	8006db8 <rcutils_get_default_allocator>
 80096d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096d4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80096d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	602b      	str	r3, [r5, #0]
  default_options.rmw_subscription_options = rmw_get_default_subscription_options();
 80096de:	466c      	mov	r4, sp
 80096e0:	4620      	mov	r0, r4
 80096e2:	f00c fd51 	bl	8016188 <rmw_get_default_subscription_options>
 80096e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80096ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80096ee:	e883 0003 	stmia.w	r3, {r0, r1}
  return default_options;
 80096f2:	2270      	movs	r2, #112	; 0x70
 80096f4:	4639      	mov	r1, r7
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7f8 f852 	bl	80017a0 <memcpy>
}
 80096fc:	4630      	mov	r0, r6
 80096fe:	b009      	add	sp, #36	; 0x24
 8009700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009702:	bf00      	nop
 8009704:	20003da8 	.word	0x20003da8
 8009708:	0801b678 	.word	0x0801b678

0800970c <rcl_take>:
  const rcl_subscription_t * subscription,
  void * ros_message,
  rmw_message_info_t * message_info,
  rmw_subscription_allocation_t * allocation
)
{
 800970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009710:	4699      	mov	r9, r3
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription taking message");
 8009712:	4b37      	ldr	r3, [pc, #220]	; (80097f0 <rcl_take+0xe4>)
{
 8009714:	4616      	mov	r6, r2
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription taking message");
 8009716:	781a      	ldrb	r2, [r3, #0]
{
 8009718:	b09c      	sub	sp, #112	; 0x70
 800971a:	4680      	mov	r8, r0
 800971c:	460f      	mov	r7, r1
 800971e:	469a      	mov	sl, r3
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Subscription taking message");
 8009720:	b922      	cbnz	r2, 800972c <rcl_take+0x20>
 8009722:	f009 fb7b 	bl	8012e1c <rcutils_logging_initialize>
 8009726:	b108      	cbz	r0, 800972c <rcl_take+0x20>
 8009728:	f7fd fc1e 	bl	8006f68 <rcutils_reset_error>
 800972c:	4831      	ldr	r0, [pc, #196]	; (80097f4 <rcl_take+0xe8>)
 800972e:	210a      	movs	r1, #10
 8009730:	f7fd fe60 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009734:	b128      	cbz	r0, 8009742 <rcl_take+0x36>
 8009736:	4b30      	ldr	r3, [pc, #192]	; (80097f8 <rcl_take+0xec>)
 8009738:	4a2e      	ldr	r2, [pc, #184]	; (80097f4 <rcl_take+0xe8>)
 800973a:	4830      	ldr	r0, [pc, #192]	; (80097fc <rcl_take+0xf0>)
 800973c:	210a      	movs	r1, #10
 800973e:	f7fd fe83 	bl	8007448 <rcutils_log>
  if (!rcl_subscription_is_valid(subscription)) {
 8009742:	4640      	mov	r0, r8
 8009744:	f00b fe07 	bl	8015356 <rcl_subscription_is_valid>
 8009748:	2800      	cmp	r0, #0
 800974a:	d04b      	beq.n	80097e4 <rcl_take+0xd8>
    return RCL_RET_SUBSCRIPTION_INVALID;  // error message already set
  }
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 800974c:	2f00      	cmp	r7, #0
 800974e:	d04c      	beq.n	80097ea <rcl_take+0xde>

  // If message_info is NULL, use a place holder which can be discarded.
  rmw_message_info_t dummy_message_info;
  rmw_message_info_t * message_info_local = message_info ? message_info : &dummy_message_info;
 8009750:	b906      	cbnz	r6, 8009754 <rcl_take+0x48>
 8009752:	ae10      	add	r6, sp, #64	; 0x40
  *message_info_local = rmw_get_zero_initialized_message_info();
 8009754:	a802      	add	r0, sp, #8
 8009756:	ac02      	add	r4, sp, #8
 8009758:	f000 fd78 	bl	800a24c <rmw_get_zero_initialized_message_info>
 800975c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800975e:	4635      	mov	r5, r6
 8009760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009766:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800976a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  // Call rmw_take_with_info.
  bool taken = false;
  rmw_ret_t ret = rmw_take_with_info(
    subscription->impl->rmw_handle, ros_message, &taken, message_info_local, allocation);
 800976e:	f8d8 0000 	ldr.w	r0, [r8]
  rmw_ret_t ret = rmw_take_with_info(
 8009772:	f8cd 9000 	str.w	r9, [sp]
  bool taken = false;
 8009776:	2300      	movs	r3, #0
 8009778:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
  rmw_ret_t ret = rmw_take_with_info(
 800977c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8009780:	4633      	mov	r3, r6
 8009782:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8009786:	4639      	mov	r1, r7
 8009788:	f00c ff09 	bl	801659e <rmw_take_with_info>
  if (ret != RMW_RET_OK) {
 800978c:	4604      	mov	r4, r0
 800978e:	b130      	cbz	r0, 800979e <rcl_take+0x92>
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(ret);
 8009790:	f00b fc6d 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8009794:	4604      	mov	r4, r0
    ROS_PACKAGE_NAME, "Subscription take succeeded: %s", taken ? "true" : "false");
  if (!taken) {
    return RCL_RET_SUBSCRIPTION_TAKE_FAILED;
  }
  return RCL_RET_OK;
}
 8009796:	4620      	mov	r0, r4
 8009798:	b01c      	add	sp, #112	; 0x70
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  RCUTILS_LOG_DEBUG_NAMED(
 800979e:	f89a 3000 	ldrb.w	r3, [sl]
 80097a2:	b923      	cbnz	r3, 80097ae <rcl_take+0xa2>
 80097a4:	f009 fb3a 	bl	8012e1c <rcutils_logging_initialize>
 80097a8:	b108      	cbz	r0, 80097ae <rcl_take+0xa2>
 80097aa:	f7fd fbdd 	bl	8006f68 <rcutils_reset_error>
 80097ae:	4811      	ldr	r0, [pc, #68]	; (80097f4 <rcl_take+0xe8>)
 80097b0:	210a      	movs	r1, #10
 80097b2:	f7fd fe1f 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 80097b6:	b168      	cbz	r0, 80097d4 <rcl_take+0xc8>
 80097b8:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 80097bc:	4a10      	ldr	r2, [pc, #64]	; (8009800 <rcl_take+0xf4>)
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <rcl_take+0xf8>)
 80097c0:	4811      	ldr	r0, [pc, #68]	; (8009808 <rcl_take+0xfc>)
 80097c2:	2900      	cmp	r1, #0
 80097c4:	bf08      	it	eq
 80097c6:	4613      	moveq	r3, r2
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	4a0a      	ldr	r2, [pc, #40]	; (80097f4 <rcl_take+0xe8>)
 80097cc:	4b0f      	ldr	r3, [pc, #60]	; (800980c <rcl_take+0x100>)
 80097ce:	210a      	movs	r1, #10
 80097d0:	f7fd fe3a 	bl	8007448 <rcutils_log>
  if (!taken) {
 80097d4:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
    return RCL_RET_SUBSCRIPTION_TAKE_FAILED;
 80097d8:	f240 1391 	movw	r3, #401	; 0x191
 80097dc:	2a00      	cmp	r2, #0
 80097de:	bf08      	it	eq
 80097e0:	461c      	moveq	r4, r3
 80097e2:	e7d8      	b.n	8009796 <rcl_take+0x8a>
    return RCL_RET_SUBSCRIPTION_INVALID;  // error message already set
 80097e4:	f44f 74c8 	mov.w	r4, #400	; 0x190
 80097e8:	e7d5      	b.n	8009796 <rcl_take+0x8a>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 80097ea:	240b      	movs	r4, #11
 80097ec:	e7d3      	b.n	8009796 <rcl_take+0x8a>
 80097ee:	bf00      	nop
 80097f0:	2000461a 	.word	0x2000461a
 80097f4:	0801c072 	.word	0x0801c072
 80097f8:	0801ddfb 	.word	0x0801ddfb
 80097fc:	2000072c 	.word	0x2000072c
 8009800:	0801d6c3 	.word	0x0801d6c3
 8009804:	0801d6be 	.word	0x0801d6be
 8009808:	20000738 	.word	0x20000738
 800980c:	0801de17 	.word	0x0801de17

08009810 <rcl_ros_clock_init>:

rcl_ret_t
rcl_ros_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	468c      	mov	ip, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8009814:	4605      	mov	r5, r0
 8009816:	b300      	cbz	r0, 800985a <rcl_ros_clock_init+0x4a>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 8009818:	b1f9      	cbz	r1, 800985a <rcl_ros_clock_init+0x4a>
  clock->type = RCL_CLOCK_UNINITIALIZED;
 800981a:	2400      	movs	r4, #0
 800981c:	7004      	strb	r4, [r0, #0]
  clock->allocator = *allocator;
 800981e:	460f      	mov	r7, r1
  clock->num_jump_callbacks = 0u;
 8009820:	e9c0 4401 	strd	r4, r4, [r0, #4]
  clock->data = NULL;
 8009824:	e9c0 4403 	strd	r4, r4, [r0, #12]
  clock->allocator = *allocator;
 8009828:	f100 0614 	add.w	r6, r0, #20
 800982c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800982e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6033      	str	r3, [r6, #0]
  rcl_init_generic_clock(clock, allocator);
  clock->data = allocator->allocate(sizeof(rcl_ros_clock_storage_t), allocator->state);
 8009834:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8009838:	f8dc 3000 	ldr.w	r3, [ip]
 800983c:	2010      	movs	r0, #16
 800983e:	4798      	blx	r3
 8009840:	6128      	str	r0, [r5, #16]
  if (NULL == clock->data) {
 8009842:	b160      	cbz	r0, 800985e <rcl_ros_clock_init+0x4e>
    return RCL_RET_BAD_ALLOC;
  }

  rcl_ros_clock_storage_t * storage = (rcl_ros_clock_storage_t *)clock->data;
  // 0 is a special value meaning time has not been set
  atomic_init(&(storage->current_time), 0);
 8009844:	2300      	movs	r3, #0
 8009846:	2200      	movs	r2, #0
 8009848:	e9c0 2300 	strd	r2, r3, [r0]
  storage->active = false;
  clock->get_now = rcl_get_ros_time;
 800984c:	4b05      	ldr	r3, [pc, #20]	; (8009864 <rcl_ros_clock_init+0x54>)
  storage->active = false;
 800984e:	7204      	strb	r4, [r0, #8]
  clock->get_now = rcl_get_ros_time;
 8009850:	60eb      	str	r3, [r5, #12]
  clock->type = RCL_ROS_TIME;
 8009852:	2301      	movs	r3, #1
 8009854:	702b      	strb	r3, [r5, #0]
  return RCL_RET_OK;
 8009856:	4620      	mov	r0, r4
}
 8009858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 800985a:	200b      	movs	r0, #11
 800985c:	e7fc      	b.n	8009858 <rcl_ros_clock_init+0x48>
    return RCL_RET_BAD_ALLOC;
 800985e:	200a      	movs	r0, #10
 8009860:	e7fa      	b.n	8009858 <rcl_ros_clock_init+0x48>
 8009862:	bf00      	nop
 8009864:	08015387 	.word	0x08015387

08009868 <rcl_steady_clock_init>:

rcl_ret_t
rcl_steady_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 8009868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986a:	460c      	mov	r4, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 800986c:	4605      	mov	r5, r0
 800986e:	b188      	cbz	r0, 8009894 <rcl_steady_clock_init+0x2c>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 8009870:	b181      	cbz	r1, 8009894 <rcl_steady_clock_init+0x2c>
  clock->type = RCL_CLOCK_UNINITIALIZED;
 8009872:	2600      	movs	r6, #0
 8009874:	7006      	strb	r6, [r0, #0]
  clock->num_jump_callbacks = 0u;
 8009876:	e9c0 6601 	strd	r6, r6, [r0, #4]
  clock->data = NULL;
 800987a:	6106      	str	r6, [r0, #16]
  clock->allocator = *allocator;
 800987c:	f100 0714 	add.w	r7, r0, #20
 8009880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009882:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	603b      	str	r3, [r7, #0]
  rcl_init_generic_clock(clock, allocator);
  clock->get_now = rcl_get_steady_time;
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <rcl_steady_clock_init+0x30>)
 800988a:	60eb      	str	r3, [r5, #12]
  clock->type = RCL_STEADY_TIME;
 800988c:	2303      	movs	r3, #3
 800988e:	702b      	strb	r3, [r5, #0]
  return RCL_RET_OK;
 8009890:	4630      	mov	r0, r6
}
 8009892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8009894:	200b      	movs	r0, #11
 8009896:	e7fc      	b.n	8009892 <rcl_steady_clock_init+0x2a>
 8009898:	08015381 	.word	0x08015381

0800989c <rcl_system_clock_init>:

rcl_ret_t
rcl_system_clock_init(
  rcl_clock_t * clock,
  rcl_allocator_t * allocator)
{
 800989c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989e:	460c      	mov	r4, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80098a0:	4605      	mov	r5, r0
 80098a2:	b188      	cbz	r0, 80098c8 <rcl_system_clock_init+0x2c>
  RCL_CHECK_ARGUMENT_FOR_NULL(allocator, RCL_RET_INVALID_ARGUMENT);
 80098a4:	b181      	cbz	r1, 80098c8 <rcl_system_clock_init+0x2c>
  clock->type = RCL_CLOCK_UNINITIALIZED;
 80098a6:	2600      	movs	r6, #0
 80098a8:	7006      	strb	r6, [r0, #0]
  clock->num_jump_callbacks = 0u;
 80098aa:	e9c0 6601 	strd	r6, r6, [r0, #4]
  clock->data = NULL;
 80098ae:	6106      	str	r6, [r0, #16]
  clock->allocator = *allocator;
 80098b0:	f100 0714 	add.w	r7, r0, #20
 80098b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	603b      	str	r3, [r7, #0]
  rcl_init_generic_clock(clock, allocator);
  clock->get_now = rcl_get_system_time;
 80098bc:	4b03      	ldr	r3, [pc, #12]	; (80098cc <rcl_system_clock_init+0x30>)
 80098be:	60eb      	str	r3, [r5, #12]
  clock->type = RCL_SYSTEM_TIME;
 80098c0:	2302      	movs	r3, #2
 80098c2:	702b      	strb	r3, [r5, #0]
  return RCL_RET_OK;
 80098c4:	4630      	mov	r0, r6
}
 80098c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80098c8:	200b      	movs	r0, #11
 80098ca:	e7fc      	b.n	80098c6 <rcl_system_clock_init+0x2a>
 80098cc:	0801537b 	.word	0x0801537b

080098d0 <_rcl_timer_time_jump>:

void _rcl_timer_time_jump(
  const struct rcl_time_jump_t * time_jump,
  bool before_jump,
  void * user_data)
{
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	4606      	mov	r6, r0
 80098d6:	b086      	sub	sp, #24
 80098d8:	4614      	mov	r4, r2
  rcl_timer_t * timer = (rcl_timer_t *)user_data;

  if (before_jump) {
 80098da:	2900      	cmp	r1, #0
 80098dc:	d035      	beq.n	800994a <_rcl_timer_time_jump+0x7a>
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 80098de:	7803      	ldrb	r3, [r0, #0]
 80098e0:	3b02      	subs	r3, #2
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d818      	bhi.n	8009918 <_rcl_timer_time_jump+0x48>
      RCL_ROS_TIME_DEACTIVATED == time_jump->clock_change)
    {
      rcl_time_point_value_t now;
      if (RCL_RET_OK != rcl_clock_get_now(timer->impl->clock, &now)) {
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	f00b fd8b 	bl	8015406 <rcl_clock_get_now>
 80098f0:	b1a8      	cbz	r0, 800991e <_rcl_timer_time_jump+0x4e>
        RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to get current time in jump callback");
 80098f2:	4b61      	ldr	r3, [pc, #388]	; (8009a78 <_rcl_timer_time_jump+0x1a8>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	b923      	cbnz	r3, 8009902 <_rcl_timer_time_jump+0x32>
 80098f8:	f009 fa90 	bl	8012e1c <rcutils_logging_initialize>
 80098fc:	b108      	cbz	r0, 8009902 <_rcl_timer_time_jump+0x32>
 80098fe:	f7fd fb33 	bl	8006f68 <rcutils_reset_error>
 8009902:	485e      	ldr	r0, [pc, #376]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009904:	2128      	movs	r1, #40	; 0x28
 8009906:	f7fd fd75 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800990a:	b128      	cbz	r0, 8009918 <_rcl_timer_time_jump+0x48>
 800990c:	4b5c      	ldr	r3, [pc, #368]	; (8009a80 <_rcl_timer_time_jump+0x1b0>)
 800990e:	4a5b      	ldr	r2, [pc, #364]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009910:	485c      	ldr	r0, [pc, #368]	; (8009a84 <_rcl_timer_time_jump+0x1b4>)
 8009912:	2128      	movs	r1, #40	; 0x28
      rcutils_atomic_store(&timer->impl->time_credit, next_call_time - now);
    }
  } else {
    rcl_time_point_value_t now;
    if (RCL_RET_OK != rcl_clock_get_now(timer->impl->clock, &now)) {
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to get current time in jump callback");
 8009914:	f7fd fd98 	bl	8007448 <rcutils_log>
      rcutils_atomic_store(&timer->impl->next_call_time, now + period);
      rcutils_atomic_store(&timer->impl->last_call_time, now);
      return;
    }
  }
}
 8009918:	b006      	add	sp, #24
 800991a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (0 == now) {
 800991e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	d0f8      	beq.n	8009918 <_rcl_timer_time_jump+0x48>
  rcutils_atomic_load(a_int64_t, result);
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	2105      	movs	r1, #5
 800992a:	3028      	adds	r0, #40	; 0x28
 800992c:	f00c f9af 	bl	8015c8e <__atomic_load_8>
      rcutils_atomic_store(&timer->impl->time_credit, next_call_time - now);
 8009930:	2305      	movs	r3, #5
 8009932:	9a04      	ldr	r2, [sp, #16]
 8009934:	6824      	ldr	r4, [r4, #0]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	9b05      	ldr	r3, [sp, #20]
 800993a:	1a82      	subs	r2, r0, r2
 800993c:	eb61 0303 	sbc.w	r3, r1, r3
 8009940:	f104 0030 	add.w	r0, r4, #48	; 0x30
      rcutils_atomic_store(&timer->impl->last_call_time, now);
 8009944:	f00c f9af 	bl	8015ca6 <__atomic_store_8>
      return;
 8009948:	e7e6      	b.n	8009918 <_rcl_timer_time_jump+0x48>
    if (RCL_RET_OK != rcl_clock_get_now(timer->impl->clock, &now)) {
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	a904      	add	r1, sp, #16
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	f00b fd59 	bl	8015406 <rcl_clock_get_now>
 8009954:	b190      	cbz	r0, 800997c <_rcl_timer_time_jump+0xac>
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to get current time in jump callback");
 8009956:	4b48      	ldr	r3, [pc, #288]	; (8009a78 <_rcl_timer_time_jump+0x1a8>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	b923      	cbnz	r3, 8009966 <_rcl_timer_time_jump+0x96>
 800995c:	f009 fa5e 	bl	8012e1c <rcutils_logging_initialize>
 8009960:	b108      	cbz	r0, 8009966 <_rcl_timer_time_jump+0x96>
 8009962:	f7fd fb01 	bl	8006f68 <rcutils_reset_error>
 8009966:	4845      	ldr	r0, [pc, #276]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009968:	2128      	movs	r1, #40	; 0x28
 800996a:	f7fd fd43 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800996e:	2800      	cmp	r0, #0
 8009970:	d0d2      	beq.n	8009918 <_rcl_timer_time_jump+0x48>
 8009972:	4b43      	ldr	r3, [pc, #268]	; (8009a80 <_rcl_timer_time_jump+0x1b0>)
 8009974:	4a41      	ldr	r2, [pc, #260]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009976:	4844      	ldr	r0, [pc, #272]	; (8009a88 <_rcl_timer_time_jump+0x1b8>)
 8009978:	2128      	movs	r1, #40	; 0x28
 800997a:	e7cb      	b.n	8009914 <_rcl_timer_time_jump+0x44>
 800997c:	6820      	ldr	r0, [r4, #0]
 800997e:	2105      	movs	r1, #5
 8009980:	3020      	adds	r0, #32
 8009982:	f00c f984 	bl	8015c8e <__atomic_load_8>
 8009986:	4602      	mov	r2, r0
 8009988:	6820      	ldr	r0, [r4, #0]
 800998a:	460b      	mov	r3, r1
 800998c:	3028      	adds	r0, #40	; 0x28
 800998e:	2105      	movs	r1, #5
 8009990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009994:	f00c f97b 	bl	8015c8e <__atomic_load_8>
 8009998:	4680      	mov	r8, r0
  rcutils_atomic_load(a_uint64_t, result);
 800999a:	6820      	ldr	r0, [r4, #0]
  rcutils_atomic_load(a_int64_t, result);
 800999c:	4689      	mov	r9, r1
  rcutils_atomic_load(a_uint64_t, result);
 800999e:	3018      	adds	r0, #24
 80099a0:	2105      	movs	r1, #5
 80099a2:	f00c f974 	bl	8015c8e <__atomic_load_8>
 80099a6:	468a      	mov	sl, r1
    if (RCL_ROS_TIME_ACTIVATED == time_jump->clock_change ||
 80099a8:	7831      	ldrb	r1, [r6, #0]
 80099aa:	3902      	subs	r1, #2
 80099ac:	2901      	cmp	r1, #1
 80099ae:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80099b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b6:	4605      	mov	r5, r0
 80099b8:	d829      	bhi.n	8009a0e <_rcl_timer_time_jump+0x13e>
      if (0 == now) {
 80099ba:	ea56 0307 	orrs.w	r3, r6, r7
 80099be:	d0ab      	beq.n	8009918 <_rcl_timer_time_jump+0x48>
  rcutils_atomic_exchange(a_int64_t, result, desired);
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	f04f 0805 	mov.w	r8, #5
 80099c6:	2300      	movs	r3, #0
 80099c8:	f8cd 8000 	str.w	r8, [sp]
 80099cc:	2200      	movs	r2, #0
 80099ce:	3030      	adds	r0, #48	; 0x30
 80099d0:	f00c f976 	bl	8015cc0 <__atomic_exchange_8>
 80099d4:	4606      	mov	r6, r0
 80099d6:	460f      	mov	r7, r1
      if (time_credit) {
 80099d8:	ea56 0307 	orrs.w	r3, r6, r7
 80099dc:	d09c      	beq.n	8009918 <_rcl_timer_time_jump+0x48>
        rcutils_atomic_store(&timer->impl->next_call_time, now - time_credit + period);
 80099de:	9a04      	ldr	r2, [sp, #16]
 80099e0:	9b05      	ldr	r3, [sp, #20]
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	f8cd 8000 	str.w	r8, [sp]
 80099e8:	18aa      	adds	r2, r5, r2
 80099ea:	eb4a 0303 	adc.w	r3, sl, r3
 80099ee:	1b92      	subs	r2, r2, r6
 80099f0:	eb63 0301 	sbc.w	r3, r3, r1
 80099f4:	3028      	adds	r0, #40	; 0x28
 80099f6:	f00c f956 	bl	8015ca6 <__atomic_store_8>
        rcutils_atomic_store(&timer->impl->last_call_time, now - time_credit);
 80099fa:	9a04      	ldr	r2, [sp, #16]
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	f8cd 8000 	str.w	r8, [sp]
 8009a04:	1b92      	subs	r2, r2, r6
 8009a06:	eb63 0307 	sbc.w	r3, r3, r7
      rcutils_atomic_store(&timer->impl->last_call_time, now);
 8009a0a:	3020      	adds	r0, #32
 8009a0c:	e79a      	b.n	8009944 <_rcl_timer_time_jump+0x74>
    } else if (next_call_time <= now) {
 8009a0e:	4546      	cmp	r6, r8
 8009a10:	eb77 0109 	sbcs.w	r1, r7, r9
 8009a14:	db1a      	blt.n	8009a4c <_rcl_timer_time_jump+0x17c>
      if (RCL_RET_OK != rcl_trigger_guard_condition(&timer->impl->guard_condition)) {
 8009a16:	6820      	ldr	r0, [r4, #0]
 8009a18:	3008      	adds	r0, #8
 8009a1a:	f00d fb10 	bl	801703e <rcl_trigger_guard_condition>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f af7a 	beq.w	8009918 <_rcl_timer_time_jump+0x48>
        RCUTILS_LOG_ERROR_NAMED(
 8009a24:	4b14      	ldr	r3, [pc, #80]	; (8009a78 <_rcl_timer_time_jump+0x1a8>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	b923      	cbnz	r3, 8009a34 <_rcl_timer_time_jump+0x164>
 8009a2a:	f009 f9f7 	bl	8012e1c <rcutils_logging_initialize>
 8009a2e:	b108      	cbz	r0, 8009a34 <_rcl_timer_time_jump+0x164>
 8009a30:	f7fd fa9a 	bl	8006f68 <rcutils_reset_error>
 8009a34:	4811      	ldr	r0, [pc, #68]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009a36:	2128      	movs	r1, #40	; 0x28
 8009a38:	f7fd fcdc 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	f43f af6b 	beq.w	8009918 <_rcl_timer_time_jump+0x48>
 8009a42:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <_rcl_timer_time_jump+0x1bc>)
 8009a44:	4a0d      	ldr	r2, [pc, #52]	; (8009a7c <_rcl_timer_time_jump+0x1ac>)
 8009a46:	4812      	ldr	r0, [pc, #72]	; (8009a90 <_rcl_timer_time_jump+0x1c0>)
 8009a48:	2128      	movs	r1, #40	; 0x28
 8009a4a:	e763      	b.n	8009914 <_rcl_timer_time_jump+0x44>
    } else if (now < last_call_time) {
 8009a4c:	4296      	cmp	r6, r2
 8009a4e:	eb77 0303 	sbcs.w	r3, r7, r3
 8009a52:	f6bf af61 	bge.w	8009918 <_rcl_timer_time_jump+0x48>
      rcutils_atomic_store(&timer->impl->next_call_time, now + period);
 8009a56:	6820      	ldr	r0, [r4, #0]
 8009a58:	1972      	adds	r2, r6, r5
 8009a5a:	f04f 0805 	mov.w	r8, #5
 8009a5e:	eb47 030a 	adc.w	r3, r7, sl
 8009a62:	3028      	adds	r0, #40	; 0x28
 8009a64:	f8cd 8000 	str.w	r8, [sp]
 8009a68:	f00c f91d 	bl	8015ca6 <__atomic_store_8>
      rcutils_atomic_store(&timer->impl->last_call_time, now);
 8009a6c:	6820      	ldr	r0, [r4, #0]
 8009a6e:	f8cd 8000 	str.w	r8, [sp]
 8009a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a76:	e7c8      	b.n	8009a0a <_rcl_timer_time_jump+0x13a>
 8009a78:	2000461a 	.word	0x2000461a
 8009a7c:	0801c072 	.word	0x0801c072
 8009a80:	0801deaf 	.word	0x0801deaf
 8009a84:	20000744 	.word	0x20000744
 8009a88:	20000750 	.word	0x20000750
 8009a8c:	0801dedb 	.word	0x0801dedb
 8009a90:	2000075c 	.word	0x2000075c

08009a94 <rcl_get_zero_initialized_timer>:
}
 8009a94:	4b01      	ldr	r3, [pc, #4]	; (8009a9c <rcl_get_zero_initialized_timer+0x8>)
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	0801bb08 	.word	0x0801bb08

08009aa0 <rcl_timer_init>:
  rcl_clock_t * clock,
  rcl_context_t * context,
  int64_t period,
  const rcl_timer_callback_t callback,
  rcl_allocator_t allocator)
{
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	b0ad      	sub	sp, #180	; 0xb4
 8009aa6:	4606      	mov	r6, r0
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8009aa8:	a839      	add	r0, sp, #228	; 0xe4
{
 8009aaa:	e9dd 8936 	ldrd	r8, r9, [sp, #216]	; 0xd8
 8009aae:	460d      	mov	r5, r1
 8009ab0:	4692      	mov	sl, r2
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8009ab2:	f009 f958 	bl	8012d66 <rcutils_allocator_is_valid>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	f000 80e5 	beq.w	8009c86 <rcl_timer_init+0x1e6>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8009abc:	2e00      	cmp	r6, #0
 8009abe:	f000 80e2 	beq.w	8009c86 <rcl_timer_init+0x1e6>
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8009ac2:	2d00      	cmp	r5, #0
 8009ac4:	f000 80df 	beq.w	8009c86 <rcl_timer_init+0x1e6>
  if (period < 0) {
 8009ac8:	f1b8 0f00 	cmp.w	r8, #0
 8009acc:	f179 0300 	sbcs.w	r3, r9, #0
 8009ad0:	f2c0 80d9 	blt.w	8009c86 <rcl_timer_init+0x1e6>
    RCL_SET_ERROR_MSG("timer period must be non-negative");
    return RCL_RET_INVALID_ARGUMENT;
  }
  RCUTILS_LOG_DEBUG_NAMED(
 8009ad4:	4f6e      	ldr	r7, [pc, #440]	; (8009c90 <rcl_timer_init+0x1f0>)
 8009ad6:	783b      	ldrb	r3, [r7, #0]
 8009ad8:	b923      	cbnz	r3, 8009ae4 <rcl_timer_init+0x44>
 8009ada:	f009 f99f 	bl	8012e1c <rcutils_logging_initialize>
 8009ade:	b108      	cbz	r0, 8009ae4 <rcl_timer_init+0x44>
 8009ae0:	f7fd fa42 	bl	8006f68 <rcutils_reset_error>
 8009ae4:	486b      	ldr	r0, [pc, #428]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009ae6:	210a      	movs	r1, #10
 8009ae8:	f7fd fc84 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009aec:	b138      	cbz	r0, 8009afe <rcl_timer_init+0x5e>
 8009aee:	e9cd 8900 	strd	r8, r9, [sp]
 8009af2:	4b69      	ldr	r3, [pc, #420]	; (8009c98 <rcl_timer_init+0x1f8>)
 8009af4:	4a67      	ldr	r2, [pc, #412]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009af6:	4869      	ldr	r0, [pc, #420]	; (8009c9c <rcl_timer_init+0x1fc>)
 8009af8:	210a      	movs	r1, #10
 8009afa:	f7fd fca5 	bl	8007448 <rcutils_log>
    ROS_PACKAGE_NAME, "Initializing timer with period: %" PRIu64 "ns", period);
  if (timer->impl) {
 8009afe:	6833      	ldr	r3, [r6, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 80c2 	bne.w	8009c8a <rcl_timer_init+0x1ea>
    RCL_SET_ERROR_MSG("timer already initialized, or memory was uninitialized");
    return RCL_RET_ALREADY_INIT;
  }
  rcl_time_point_value_t now;
  rcl_ret_t now_ret = rcl_clock_get_now(clock, &now);
 8009b06:	a90a      	add	r1, sp, #40	; 0x28
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f00b fc7c 	bl	8015406 <rcl_clock_get_now>
  if (now_ret != RCL_RET_OK) {
 8009b0e:	4604      	mov	r4, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d152      	bne.n	8009bba <rcl_timer_init+0x11a>
    return now_ret;  // rcl error state should already be set.
  }
  rcl_timer_impl_t impl;
  impl.clock = clock;
  impl.context = context;
  impl.guard_condition = rcl_get_zero_initialized_guard_condition();
 8009b14:	ac08      	add	r4, sp, #32
 8009b16:	4620      	mov	r0, r4
  impl.context = context;
 8009b18:	e9cd 5a18 	strd	r5, sl, [sp, #96]	; 0x60
  impl.guard_condition = rcl_get_zero_initialized_guard_condition();
 8009b1c:	f001 fb08 	bl	800b130 <rcl_get_zero_initialized_guard_condition>
 8009b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b24:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  rcl_guard_condition_options_t options = rcl_guard_condition_get_default_options();
 8009b28:	ac0d      	add	r4, sp, #52	; 0x34
  impl.guard_condition = rcl_get_zero_initialized_guard_condition();
 8009b2a:	e88b 0003 	stmia.w	fp, {r0, r1}
  rcl_guard_condition_options_t options = rcl_guard_condition_get_default_options();
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f001 fb08 	bl	800b144 <rcl_guard_condition_get_default_options>
  rcl_ret_t ret = rcl_guard_condition_init(&(impl.guard_condition), context, options);
 8009b34:	ab0f      	add	r3, sp, #60	; 0x3c
 8009b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009b3e:	4651      	mov	r1, sl
 8009b40:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009b44:	4658      	mov	r0, fp
 8009b46:	f00d fa2c 	bl	8016fa2 <rcl_guard_condition_init>
  if (RCL_RET_OK != ret) {
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d134      	bne.n	8009bba <rcl_timer_init+0x11a>
    return ret;
  }
  if (RCL_ROS_TIME == impl.clock->type) {
 8009b50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d134      	bne.n	8009bc2 <rcl_timer_init+0x122>
    rcl_jump_threshold_t threshold;
    threshold.on_clock_change = true;
 8009b58:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    threshold.min_forward.nanoseconds = 1;
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    threshold.min_backward.nanoseconds = -1;
 8009b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    ret = rcl_clock_add_jump_callback(clock, threshold, _rcl_timer_time_jump, timer);
 8009b70:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <rcl_timer_init+0x200>)
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9605      	str	r6, [sp, #20]
 8009b76:	ab14      	add	r3, sp, #80	; 0x50
 8009b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b7a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b7e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009b82:	4628      	mov	r0, r5
 8009b84:	f00b fc4b 	bl	801541e <rcl_clock_add_jump_callback>
    if (RCL_RET_OK != ret) {
 8009b88:	4682      	mov	sl, r0
 8009b8a:	b1d0      	cbz	r0, 8009bc2 <rcl_timer_init+0x122>
      if (RCL_RET_OK != rcl_guard_condition_fini(&(impl.guard_condition))) {
 8009b8c:	4658      	mov	r0, fp
 8009b8e:	f00d fa36 	bl	8016ffe <rcl_guard_condition_fini>
 8009b92:	b188      	cbz	r0, 8009bb8 <rcl_timer_init+0x118>
        // Should be impossible
        RCUTILS_LOG_ERROR_NAMED(
 8009b94:	783b      	ldrb	r3, [r7, #0]
 8009b96:	b923      	cbnz	r3, 8009ba2 <rcl_timer_init+0x102>
 8009b98:	f009 f940 	bl	8012e1c <rcutils_logging_initialize>
 8009b9c:	b108      	cbz	r0, 8009ba2 <rcl_timer_init+0x102>
 8009b9e:	f7fd f9e3 	bl	8006f68 <rcutils_reset_error>
 8009ba2:	483c      	ldr	r0, [pc, #240]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009ba4:	2128      	movs	r1, #40	; 0x28
 8009ba6:	f7fd fc25 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009baa:	b128      	cbz	r0, 8009bb8 <rcl_timer_init+0x118>
 8009bac:	4b3d      	ldr	r3, [pc, #244]	; (8009ca4 <rcl_timer_init+0x204>)
 8009bae:	4a39      	ldr	r2, [pc, #228]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009bb0:	483d      	ldr	r0, [pc, #244]	; (8009ca8 <rcl_timer_init+0x208>)
 8009bb2:	2128      	movs	r1, #40	; 0x28
 8009bb4:	f7fd fc48 	bl	8007448 <rcutils_log>
          ROS_PACKAGE_NAME, "Failed to fini guard condition after failing to add jump callback");
      }
      return ret;
 8009bb8:	4654      	mov	r4, sl
    return RCL_RET_BAD_ALLOC;
  }
  *timer->impl = impl;
  TRACEPOINT(rcl_timer_init, (const void *)timer, period);
  return RCL_RET_OK;
}
 8009bba:	4620      	mov	r0, r4
 8009bbc:	b02d      	add	sp, #180	; 0xb4
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  atomic_init(&impl.callback, (uintptr_t)callback);
 8009bc2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8009bc4:	931c      	str	r3, [sp, #112]	; 0x70
  atomic_init(&impl.time_credit, 0);
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
  atomic_init(&impl.period, period);
 8009bca:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  atomic_init(&impl.time_credit, 0);
 8009bce:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  atomic_init(&impl.last_call_time, now);
 8009bd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
  atomic_init(&impl.next_call_time, now + period);
 8009bd6:	eb12 0108 	adds.w	r1, r2, r8
  atomic_init(&impl.last_call_time, now);
 8009bda:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  atomic_init(&impl.next_call_time, now + period);
 8009bde:	eb43 0309 	adc.w	r3, r3, r9
 8009be2:	9106      	str	r1, [sp, #24]
 8009be4:	9307      	str	r3, [sp, #28]
 8009be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  impl.allocator = allocator;
 8009bea:	f10d 0ce4 	add.w	ip, sp, #228	; 0xe4
  atomic_init(&impl.next_call_time, now + period);
 8009bee:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  atomic_init(&impl.canceled, false);
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
  impl.allocator = allocator;
 8009bf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bfc:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8009c00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c04:	f8dc 3000 	ldr.w	r3, [ip]
 8009c08:	f8ce 3000 	str.w	r3, [lr]
  timer->impl = (rcl_timer_impl_t *)allocator.allocate(sizeof(rcl_timer_impl_t), allocator.state);
 8009c0c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8009c0e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8009c10:	2050      	movs	r0, #80	; 0x50
 8009c12:	4798      	blx	r3
 8009c14:	6030      	str	r0, [r6, #0]
  if (NULL == timer->impl) {
 8009c16:	bb88      	cbnz	r0, 8009c7c <rcl_timer_init+0x1dc>
    if (RCL_RET_OK != rcl_guard_condition_fini(&(impl.guard_condition))) {
 8009c18:	a81a      	add	r0, sp, #104	; 0x68
 8009c1a:	f00d f9f0 	bl	8016ffe <rcl_guard_condition_fini>
 8009c1e:	b188      	cbz	r0, 8009c44 <rcl_timer_init+0x1a4>
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to fini guard condition after bad alloc");
 8009c20:	783b      	ldrb	r3, [r7, #0]
 8009c22:	b923      	cbnz	r3, 8009c2e <rcl_timer_init+0x18e>
 8009c24:	f009 f8fa 	bl	8012e1c <rcutils_logging_initialize>
 8009c28:	b108      	cbz	r0, 8009c2e <rcl_timer_init+0x18e>
 8009c2a:	f7fd f99d 	bl	8006f68 <rcutils_reset_error>
 8009c2e:	4819      	ldr	r0, [pc, #100]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009c30:	2128      	movs	r1, #40	; 0x28
 8009c32:	f7fd fbdf 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009c36:	b128      	cbz	r0, 8009c44 <rcl_timer_init+0x1a4>
 8009c38:	4b1c      	ldr	r3, [pc, #112]	; (8009cac <rcl_timer_init+0x20c>)
 8009c3a:	4a16      	ldr	r2, [pc, #88]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009c3c:	481c      	ldr	r0, [pc, #112]	; (8009cb0 <rcl_timer_init+0x210>)
 8009c3e:	2128      	movs	r1, #40	; 0x28
 8009c40:	f7fd fc02 	bl	8007448 <rcutils_log>
    if (RCL_RET_OK != rcl_clock_remove_jump_callback(clock, _rcl_timer_time_jump, timer)) {
 8009c44:	4916      	ldr	r1, [pc, #88]	; (8009ca0 <rcl_timer_init+0x200>)
 8009c46:	4632      	mov	r2, r6
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f00b fc3e 	bl	80154ca <rcl_clock_remove_jump_callback>
 8009c4e:	b908      	cbnz	r0, 8009c54 <rcl_timer_init+0x1b4>
    return RCL_RET_BAD_ALLOC;
 8009c50:	240a      	movs	r4, #10
 8009c52:	e7b2      	b.n	8009bba <rcl_timer_init+0x11a>
      RCUTILS_LOG_ERROR_NAMED(ROS_PACKAGE_NAME, "Failed to remove callback after bad alloc");
 8009c54:	783b      	ldrb	r3, [r7, #0]
 8009c56:	b923      	cbnz	r3, 8009c62 <rcl_timer_init+0x1c2>
 8009c58:	f009 f8e0 	bl	8012e1c <rcutils_logging_initialize>
 8009c5c:	b108      	cbz	r0, 8009c62 <rcl_timer_init+0x1c2>
 8009c5e:	f7fd f983 	bl	8006f68 <rcutils_reset_error>
 8009c62:	480c      	ldr	r0, [pc, #48]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009c64:	2128      	movs	r1, #40	; 0x28
 8009c66:	f7fd fbc5 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0f0      	beq.n	8009c50 <rcl_timer_init+0x1b0>
 8009c6e:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <rcl_timer_init+0x214>)
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <rcl_timer_init+0x1f4>)
 8009c72:	4811      	ldr	r0, [pc, #68]	; (8009cb8 <rcl_timer_init+0x218>)
 8009c74:	2128      	movs	r1, #40	; 0x28
 8009c76:	f7fd fbe7 	bl	8007448 <rcutils_log>
 8009c7a:	e7e9      	b.n	8009c50 <rcl_timer_init+0x1b0>
  *timer->impl = impl;
 8009c7c:	2250      	movs	r2, #80	; 0x50
 8009c7e:	a918      	add	r1, sp, #96	; 0x60
 8009c80:	f7f7 fd8e 	bl	80017a0 <memcpy>
  return RCL_RET_OK;
 8009c84:	e799      	b.n	8009bba <rcl_timer_init+0x11a>
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8009c86:	240b      	movs	r4, #11
 8009c88:	e797      	b.n	8009bba <rcl_timer_init+0x11a>
    return RCL_RET_ALREADY_INIT;
 8009c8a:	2464      	movs	r4, #100	; 0x64
 8009c8c:	e795      	b.n	8009bba <rcl_timer_init+0x11a>
 8009c8e:	bf00      	nop
 8009c90:	2000461a 	.word	0x2000461a
 8009c94:	0801c072 	.word	0x0801c072
 8009c98:	0801df12 	.word	0x0801df12
 8009c9c:	20000768 	.word	0x20000768
 8009ca0:	080098d1 	.word	0x080098d1
 8009ca4:	0801df39 	.word	0x0801df39
 8009ca8:	20000774 	.word	0x20000774
 8009cac:	0801df7b 	.word	0x0801df7b
 8009cb0:	20000780 	.word	0x20000780
 8009cb4:	0801dfaa 	.word	0x0801dfaa
 8009cb8:	2000078c 	.word	0x2000078c

08009cbc <rcl_timer_call>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_timer_call(rcl_timer_t * timer)
{
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Calling timer");
 8009cc0:	4b4a      	ldr	r3, [pc, #296]	; (8009dec <rcl_timer_call+0x130>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
{
 8009cc4:	b089      	sub	sp, #36	; 0x24
 8009cc6:	4606      	mov	r6, r0
  RCUTILS_LOG_DEBUG_NAMED(ROS_PACKAGE_NAME, "Calling timer");
 8009cc8:	b923      	cbnz	r3, 8009cd4 <rcl_timer_call+0x18>
 8009cca:	f009 f8a7 	bl	8012e1c <rcutils_logging_initialize>
 8009cce:	b108      	cbz	r0, 8009cd4 <rcl_timer_call+0x18>
 8009cd0:	f7fd f94a 	bl	8006f68 <rcutils_reset_error>
 8009cd4:	4846      	ldr	r0, [pc, #280]	; (8009df0 <rcl_timer_call+0x134>)
 8009cd6:	210a      	movs	r1, #10
 8009cd8:	f7fd fb8c 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 8009cdc:	b128      	cbz	r0, 8009cea <rcl_timer_call+0x2e>
 8009cde:	4b45      	ldr	r3, [pc, #276]	; (8009df4 <rcl_timer_call+0x138>)
 8009ce0:	4a43      	ldr	r2, [pc, #268]	; (8009df0 <rcl_timer_call+0x134>)
 8009ce2:	4845      	ldr	r0, [pc, #276]	; (8009df8 <rcl_timer_call+0x13c>)
 8009ce4:	210a      	movs	r1, #10
 8009ce6:	f7fd fbaf 	bl	8007448 <rcutils_log>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8009cea:	2e00      	cmp	r6, #0
 8009cec:	d077      	beq.n	8009dde <rcl_timer_call+0x122>
  rcutils_atomic_load(a_bool, result);
 8009cee:	6833      	ldr	r3, [r6, #0]
 8009cf0:	f3bf 8f5b 	dmb	ish
 8009cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009cf8:	f3bf 8f5b 	dmb	ish
  if (rcutils_atomic_load_bool(&timer->impl->canceled)) {
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d170      	bne.n	8009de2 <rcl_timer_call+0x126>
    RCL_SET_ERROR_MSG("timer is canceled");
    return RCL_RET_TIMER_CANCELED;
  }
  rcl_time_point_value_t now;
  rcl_ret_t now_ret = rcl_clock_get_now(timer->impl->clock, &now);
 8009d00:	6833      	ldr	r3, [r6, #0]
 8009d02:	a906      	add	r1, sp, #24
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f00b fb7e 	bl	8015406 <rcl_clock_get_now>
  if (now_ret != RCL_RET_OK) {
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d15f      	bne.n	8009dd0 <rcl_timer_call+0x114>
    return now_ret;  // rcl error state should already be set.
  }
  if (now < 0) {
 8009d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	f173 0100 	sbcs.w	r1, r3, #0
 8009d1a:	db65      	blt.n	8009de8 <rcl_timer_call+0x12c>
  rcutils_atomic_exchange(a_int64_t, result, desired);
 8009d1c:	6830      	ldr	r0, [r6, #0]
 8009d1e:	f04f 0805 	mov.w	r8, #5
 8009d22:	f8cd 8000 	str.w	r8, [sp]
 8009d26:	3020      	adds	r0, #32
 8009d28:	f00b ffca 	bl	8015cc0 <__atomic_exchange_8>
  rcutils_atomic_load(a_uintptr_t, result);
 8009d2c:	6833      	ldr	r3, [r6, #0]
  rcutils_atomic_exchange(a_int64_t, result, desired);
 8009d2e:	9103      	str	r1, [sp, #12]
  rcutils_atomic_load(a_uintptr_t, result);
 8009d30:	f3bf 8f5b 	dmb	ish
  rcutils_atomic_exchange(a_int64_t, result, desired);
 8009d34:	4682      	mov	sl, r0
  rcutils_atomic_load(a_uintptr_t, result);
 8009d36:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8009d3a:	f3bf 8f5b 	dmb	ish
  rcutils_atomic_load(a_int64_t, result);
 8009d3e:	6830      	ldr	r0, [r6, #0]
 8009d40:	4641      	mov	r1, r8
 8009d42:	3028      	adds	r0, #40	; 0x28
 8009d44:	f00b ffa3 	bl	8015c8e <__atomic_load_8>
 8009d48:	9005      	str	r0, [sp, #20]
  rcutils_atomic_load(a_uint64_t, result);
 8009d4a:	6830      	ldr	r0, [r6, #0]
  rcutils_atomic_load(a_int64_t, result);
 8009d4c:	9104      	str	r1, [sp, #16]
  rcutils_atomic_load(a_uint64_t, result);
 8009d4e:	3018      	adds	r0, #24
 8009d50:	4641      	mov	r1, r8
 8009d52:	f00b ff9c 	bl	8015c8e <__atomic_load_8>
  int64_t next_call_time = rcutils_atomic_load_int64_t(&timer->impl->next_call_time);
  int64_t period = rcutils_atomic_load_uint64_t(&timer->impl->period);
  // always move the next call time by exactly period forward
  // don't use now as the base to avoid extending each cycle by the time
  // between the timer being ready and the callback being triggered
  next_call_time += period;
 8009d56:	9b05      	ldr	r3, [sp, #20]
 8009d58:	9a04      	ldr	r2, [sp, #16]
 8009d5a:	181c      	adds	r4, r3, r0
 8009d5c:	eb42 0501 	adc.w	r5, r2, r1
  // in case the timer has missed at least once cycle
  if (next_call_time < now) {
 8009d60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d64:	4294      	cmp	r4, r2
 8009d66:	4689      	mov	r9, r1
 8009d68:	eb75 0103 	sbcs.w	r1, r5, r3
 8009d6c:	4680      	mov	r8, r0
 8009d6e:	da1b      	bge.n	8009da8 <rcl_timer_call+0xec>
    if (0 == period) {
 8009d70:	ea58 0109 	orrs.w	r1, r8, r9
 8009d74:	d030      	beq.n	8009dd8 <rcl_timer_call+0x11c>
      next_call_time = now;
    } else {
      // move the next call time forward by as many periods as necessary
      int64_t now_ahead = now - next_call_time;
      // rounding up without overflow
      int64_t periods_ahead = 1 + (now_ahead - 1) / period;
 8009d76:	f112 30ff 	adds.w	r0, r2, #4294967295	; 0xffffffff
 8009d7a:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
 8009d7e:	1b00      	subs	r0, r0, r4
 8009d80:	464b      	mov	r3, r9
 8009d82:	eb61 0105 	sbc.w	r1, r1, r5
 8009d86:	4642      	mov	r2, r8
 8009d88:	f7f7 fa76 	bl	8001278 <__aeabi_ldivmod>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	f141 0100 	adc.w	r1, r1, #0
      next_call_time += periods_ahead * period;
 8009d92:	fb00 9009 	mla	r0, r0, r9, r9
 8009d96:	fb08 0001 	mla	r0, r8, r1, r0
 8009d9a:	fba3 8908 	umull	r8, r9, r3, r8
 8009d9e:	4481      	add	r9, r0
 8009da0:	eb14 0408 	adds.w	r4, r4, r8
 8009da4:	eb45 0509 	adc.w	r5, r5, r9
    }
  }
  rcutils_atomic_store(&timer->impl->next_call_time, next_call_time);
 8009da8:	6830      	ldr	r0, [r6, #0]
 8009daa:	2305      	movs	r3, #5
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	3028      	adds	r0, #40	; 0x28
 8009db4:	f00b ff77 	bl	8015ca6 <__atomic_store_8>

  if (typed_callback != NULL) {
 8009db8:	f1bb 0f00 	cmp.w	fp, #0
 8009dbc:	d008      	beq.n	8009dd0 <rcl_timer_call+0x114>
    int64_t since_last_call = now - previous_ns;
 8009dbe:	9a06      	ldr	r2, [sp, #24]
    typed_callback(timer, since_last_call);
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	9903      	ldr	r1, [sp, #12]
 8009dc4:	ebb2 020a 	subs.w	r2, r2, sl
 8009dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8009dcc:	4630      	mov	r0, r6
 8009dce:	47d8      	blx	fp
  }
  return RCL_RET_OK;
}
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	b009      	add	sp, #36	; 0x24
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	4614      	mov	r4, r2
 8009dda:	461d      	mov	r5, r3
 8009ddc:	e7e4      	b.n	8009da8 <rcl_timer_call+0xec>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8009dde:	270b      	movs	r7, #11
 8009de0:	e7f6      	b.n	8009dd0 <rcl_timer_call+0x114>
    return RCL_RET_TIMER_CANCELED;
 8009de2:	f240 3721 	movw	r7, #801	; 0x321
 8009de6:	e7f3      	b.n	8009dd0 <rcl_timer_call+0x114>
    return RCL_RET_ERROR;
 8009de8:	2701      	movs	r7, #1
 8009dea:	e7f1      	b.n	8009dd0 <rcl_timer_call+0x114>
 8009dec:	2000461a 	.word	0x2000461a
 8009df0:	0801c072 	.word	0x0801c072
 8009df4:	0801dfd4 	.word	0x0801dfd4
 8009df8:	20000798 	.word	0x20000798

08009dfc <rcl_validate_enclave_name_with_size>:
rcl_validate_enclave_name_with_size(
  const char * enclave,
  size_t enclave_length,
  int * validation_result,
  size_t * invalid_index)
{
 8009dfc:	b570      	push	{r4, r5, r6, lr}
 8009dfe:	460e      	mov	r6, r1
 8009e00:	b0c2      	sub	sp, #264	; 0x108
 8009e02:	4614      	mov	r4, r2
 8009e04:	461d      	mov	r5, r3
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(enclave, RCL_RET_INVALID_ARGUMENT);
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d03c      	beq.n	8009e84 <rcl_validate_enclave_name_with_size+0x88>
  RCL_CHECK_ARGUMENT_FOR_NULL(validation_result, RCL_RET_INVALID_ARGUMENT);
 8009e0a:	2a00      	cmp	r2, #0
 8009e0c:	d03a      	beq.n	8009e84 <rcl_validate_enclave_name_with_size+0x88>

  int tmp_validation_result;
  size_t tmp_invalid_index;
  rmw_ret_t ret = rmw_validate_namespace_with_size(
 8009e0e:	466a      	mov	r2, sp
 8009e10:	ab01      	add	r3, sp, #4
 8009e12:	f000 fa2b 	bl	800a26c <rmw_validate_namespace_with_size>
    enclave, enclave_length, &tmp_validation_result, &tmp_invalid_index);
  if (ret != RMW_RET_OK) {
 8009e16:	4602      	mov	r2, r0
 8009e18:	b128      	cbz	r0, 8009e26 <rcl_validate_enclave_name_with_size+0x2a>
    return rcl_convert_rmw_ret_to_rcl_ret(ret);
 8009e1a:	f00b f928 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8009e1e:	4602      	mov	r2, r0
  }

  // everything was ok, set result to valid namespace, avoid setting invalid_index, and return
  *validation_result = RCL_ENCLAVE_NAME_VALID;
  return RCL_RET_OK;
}
 8009e20:	4610      	mov	r0, r2
 8009e22:	b042      	add	sp, #264	; 0x108
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
  if (tmp_validation_result != RMW_NAMESPACE_VALID &&
 8009e26:	9b00      	ldr	r3, [sp, #0]
 8009e28:	b323      	cbz	r3, 8009e74 <rcl_validate_enclave_name_with_size+0x78>
 8009e2a:	2b07      	cmp	r3, #7
 8009e2c:	d020      	beq.n	8009e70 <rcl_validate_enclave_name_with_size+0x74>
    switch (tmp_validation_result) {
 8009e2e:	1e59      	subs	r1, r3, #1
 8009e30:	2905      	cmp	r1, #5
 8009e32:	d815      	bhi.n	8009e60 <rcl_validate_enclave_name_with_size+0x64>
 8009e34:	e8df f001 	tbb	[pc, r1]
 8009e38:	0e0c0a03 	.word	0x0e0c0a03
 8009e3c:	1210      	.short	0x1210
        *validation_result = RCL_ENCLAVE_NAME_INVALID_IS_EMPTY_STRING;
 8009e3e:	2301      	movs	r3, #1
        *validation_result = RCL_ENCLAVE_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8009e40:	6023      	str	r3, [r4, #0]
    if (invalid_index) {
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	d0ec      	beq.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
      *invalid_index = tmp_invalid_index;
 8009e46:	9b01      	ldr	r3, [sp, #4]
        *invalid_index = RCL_ENCLAVE_NAME_MAX_LENGTH - 1;
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	e7e9      	b.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
        *validation_result = RCL_ENCLAVE_NAME_INVALID_NOT_ABSOLUTE;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	e7f7      	b.n	8009e40 <rcl_validate_enclave_name_with_size+0x44>
        *validation_result = RCL_ENCLAVE_NAME_INVALID_ENDS_WITH_FORWARD_SLASH;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e7f5      	b.n	8009e40 <rcl_validate_enclave_name_with_size+0x44>
        *validation_result = RCL_ENCLAVE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 8009e54:	2304      	movs	r3, #4
 8009e56:	e7f3      	b.n	8009e40 <rcl_validate_enclave_name_with_size+0x44>
        *validation_result = RCL_ENCLAVE_NAME_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 8009e58:	2305      	movs	r3, #5
 8009e5a:	e7f1      	b.n	8009e40 <rcl_validate_enclave_name_with_size+0x44>
        *validation_result = RCL_ENCLAVE_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8009e5c:	2306      	movs	r3, #6
 8009e5e:	e7ef      	b.n	8009e40 <rcl_validate_enclave_name_with_size+0x44>
          int ret = rcutils_snprintf(
 8009e60:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <rcl_validate_enclave_name_with_size+0x8c>)
 8009e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e66:	a802      	add	r0, sp, #8
 8009e68:	f009 f80f 	bl	8012e8a <rcutils_snprintf>
        return RCL_RET_ERROR;
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	e7d7      	b.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
    if (RCL_ENCLAVE_NAME_MAX_LENGTH >= enclave_length) {
 8009e70:	2eff      	cmp	r6, #255	; 0xff
 8009e72:	d802      	bhi.n	8009e7a <rcl_validate_enclave_name_with_size+0x7e>
      *validation_result = RCL_ENCLAVE_NAME_VALID;
 8009e74:	2300      	movs	r3, #0
 8009e76:	6023      	str	r3, [r4, #0]
 8009e78:	e7d2      	b.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
      *validation_result = RCL_ENCLAVE_NAME_INVALID_TOO_LONG;
 8009e7a:	6023      	str	r3, [r4, #0]
      if (invalid_index) {
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	d0cf      	beq.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
        *invalid_index = RCL_ENCLAVE_NAME_MAX_LENGTH - 1;
 8009e80:	23fe      	movs	r3, #254	; 0xfe
 8009e82:	e7e1      	b.n	8009e48 <rcl_validate_enclave_name_with_size+0x4c>
  RCL_CHECK_ARGUMENT_FOR_NULL(enclave, RCL_RET_INVALID_ARGUMENT);
 8009e84:	220b      	movs	r2, #11
 8009e86:	e7cb      	b.n	8009e20 <rcl_validate_enclave_name_with_size+0x24>
 8009e88:	0801e067 	.word	0x0801e067

08009e8c <rcl_validate_topic_name_with_size>:
rcl_validate_topic_name_with_size(
  const char * topic_name,
  size_t topic_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 8009e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8009e90:	4605      	mov	r5, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f000 809c 	beq.w	8009fd0 <rcl_validate_topic_name_with_size+0x144>
  RCL_CHECK_ARGUMENT_FOR_NULL(validation_result, RCL_RET_INVALID_ARGUMENT);
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	f000 8099 	beq.w	8009fd0 <rcl_validate_topic_name_with_size+0x144>

  if (topic_name_length == 0) {
 8009e9e:	b941      	cbnz	r1, 8009eb2 <rcl_validate_topic_name_with_size+0x26>
    *validation_result = RCL_TOPIC_NAME_INVALID_IS_EMPTY_STRING;
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 8009ea4:	b90b      	cbnz	r3, 8009eaa <rcl_validate_topic_name_with_size+0x1e>
        i > 0 &&
        (i - 1 == opening_curly_brace_index))
      {
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_STARTS_WITH_NUMBER;
        if (invalid_index) {
          *invalid_index = i;
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e001      	b.n	8009eae <rcl_validate_topic_name_with_size+0x22>
      *invalid_index = 0;
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6018      	str	r0, [r3, #0]
    }
  }
  // everything was ok, set result to valid topic, avoid setting invalid_index, and return
  *validation_result = RCL_TOPIC_NAME_VALID;
  return RCL_RET_OK;
}
 8009eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isdigit(topic_name[0]) != 0) {
 8009eb2:	f890 8000 	ldrb.w	r8, [r0]
 8009eb6:	4f47      	ldr	r7, [pc, #284]	; (8009fd4 <rcl_validate_topic_name_with_size+0x148>)
 8009eb8:	f818 0007 	ldrb.w	r0, [r8, r7]
 8009ebc:	f010 0004 	ands.w	r0, r0, #4
 8009ec0:	d001      	beq.n	8009ec6 <rcl_validate_topic_name_with_size+0x3a>
    *validation_result = RCL_TOPIC_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	e7ed      	b.n	8009ea2 <rcl_validate_topic_name_with_size+0x16>
  if (topic_name[topic_name_length - 1] == '/') {
 8009ec6:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009eca:	f815 400e 	ldrb.w	r4, [r5, lr]
 8009ece:	2c2f      	cmp	r4, #47	; 0x2f
 8009ed0:	d106      	bne.n	8009ee0 <rcl_validate_topic_name_with_size+0x54>
    *validation_result = RCL_TOPIC_NAME_INVALID_ENDS_WITH_FORWARD_SLASH;
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0e5      	beq.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
      *invalid_index = topic_name_length - 1;
 8009eda:	f8c3 e000 	str.w	lr, [r3]
 8009ede:	e7e6      	b.n	8009eae <rcl_validate_topic_name_with_size+0x22>
  size_t opening_curly_brace_index = 0;
 8009ee0:	4684      	mov	ip, r0
  for (size_t i = 0; i < topic_name_length; ++i) {
 8009ee2:	4604      	mov	r4, r0
    if (rcutils_isalnum_no_locale(topic_name[i])) {
 8009ee4:	5d2e      	ldrb	r6, [r5, r4]
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
 8009ee6:	f1a6 0930 	sub.w	r9, r6, #48	; 0x30
 8009eea:	f1b9 0f09 	cmp.w	r9, #9
 8009eee:	d914      	bls.n	8009f1a <rcl_validate_topic_name_with_size+0x8e>
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 8009ef0:	f026 0920 	bic.w	r9, r6, #32
 8009ef4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8009ef8:	f1b9 0f19 	cmp.w	r9, #25
 8009efc:	d90d      	bls.n	8009f1a <rcl_validate_topic_name_with_size+0x8e>
    } else if (topic_name[i] == '_') {
 8009efe:	2e5f      	cmp	r6, #95	; 0x5f
 8009f00:	d11b      	bne.n	8009f3a <rcl_validate_topic_name_with_size+0xae>
  for (size_t i = 0; i < topic_name_length; ++i) {
 8009f02:	3401      	adds	r4, #1
 8009f04:	42a1      	cmp	r1, r4
 8009f06:	d1ed      	bne.n	8009ee4 <rcl_validate_topic_name_with_size+0x58>
  if (in_open_curly_brace) {
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d039      	beq.n	8009f80 <rcl_validate_topic_name_with_size+0xf4>
    *validation_result = RCL_TOPIC_NAME_INVALID_UNMATCHED_CURLY_BRACE;
 8009f0c:	2105      	movs	r1, #5
 8009f0e:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0c8      	beq.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
      *invalid_index = opening_curly_brace_index;
 8009f14:	f8c3 c000 	str.w	ip, [r3]
 8009f18:	e7c5      	b.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
      if (
 8009f1a:	5dbe      	ldrb	r6, [r7, r6]
 8009f1c:	0776      	lsls	r6, r6, #29
 8009f1e:	d5f0      	bpl.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        isdigit(topic_name[i]) != 0 &&
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d0ee      	beq.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        in_open_curly_brace &&
 8009f24:	2c00      	cmp	r4, #0
 8009f26:	d0ec      	beq.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        i > 0 &&
 8009f28:	1e66      	subs	r6, r4, #1
 8009f2a:	45b4      	cmp	ip, r6
 8009f2c:	d1e9      	bne.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_STARTS_WITH_NUMBER;
 8009f2e:	2109      	movs	r1, #9
 8009f30:	6011      	str	r1, [r2, #0]
        if (invalid_index) {
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0b7      	beq.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
          *invalid_index = i;
 8009f36:	601c      	str	r4, [r3, #0]
 8009f38:	e7b5      	b.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
    } else if (topic_name[i] == '/') {
 8009f3a:	2e2f      	cmp	r6, #47	; 0x2f
 8009f3c:	d103      	bne.n	8009f46 <rcl_validate_topic_name_with_size+0xba>
      if (in_open_curly_brace) {
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d0df      	beq.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        *validation_result = RCL_TOPIC_NAME_INVALID_SUBSTITUTION_CONTAINS_UNALLOWED_CHARACTERS;
 8009f42:	2108      	movs	r1, #8
 8009f44:	e7f4      	b.n	8009f30 <rcl_validate_topic_name_with_size+0xa4>
    } else if (topic_name[i] == '~') {
 8009f46:	2e7e      	cmp	r6, #126	; 0x7e
 8009f48:	d103      	bne.n	8009f52 <rcl_validate_topic_name_with_size+0xc6>
      if (i != 0) {
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	d0d9      	beq.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
        *validation_result = RCL_TOPIC_NAME_INVALID_MISPLACED_TILDE;
 8009f4e:	2106      	movs	r1, #6
 8009f50:	e7ee      	b.n	8009f30 <rcl_validate_topic_name_with_size+0xa4>
    } else if (topic_name[i] == '{') {
 8009f52:	2e7b      	cmp	r6, #123	; 0x7b
 8009f54:	d104      	bne.n	8009f60 <rcl_validate_topic_name_with_size+0xd4>
      if (in_open_curly_brace) {
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d1f3      	bne.n	8009f42 <rcl_validate_topic_name_with_size+0xb6>
 8009f5a:	46a4      	mov	ip, r4
      in_open_curly_brace = true;
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	e7d0      	b.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
    } else if (topic_name[i] == '}') {
 8009f60:	2e7d      	cmp	r6, #125	; 0x7d
 8009f62:	d106      	bne.n	8009f72 <rcl_validate_topic_name_with_size+0xe6>
      if (!in_open_curly_brace) {
 8009f64:	b950      	cbnz	r0, 8009f7c <rcl_validate_topic_name_with_size+0xf0>
        *validation_result = RCL_TOPIC_NAME_INVALID_UNMATCHED_CURLY_BRACE;
 8009f66:	2105      	movs	r1, #5
 8009f68:	6011      	str	r1, [r2, #0]
        if (invalid_index) {
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d09b      	beq.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
          *invalid_index = i;
 8009f6e:	601c      	str	r4, [r3, #0]
 8009f70:	e79d      	b.n	8009eae <rcl_validate_topic_name_with_size+0x22>
        *validation_result = RCL_TOPIC_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 8009f72:	2800      	cmp	r0, #0
 8009f74:	bf14      	ite	ne
 8009f76:	2108      	movne	r1, #8
 8009f78:	2103      	moveq	r1, #3
 8009f7a:	e7d9      	b.n	8009f30 <rcl_validate_topic_name_with_size+0xa4>
      in_open_curly_brace = false;
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e7c0      	b.n	8009f02 <rcl_validate_topic_name_with_size+0x76>
      if (isdigit(topic_name[i + 1]) != 0) {
 8009f80:	1c6c      	adds	r4, r5, #1
    if (i == topic_name_length - 1) {
 8009f82:	4586      	cmp	lr, r0
 8009f84:	d01e      	beq.n	8009fc4 <rcl_validate_topic_name_with_size+0x138>
    if (topic_name[i] == '/') {
 8009f86:	5c2e      	ldrb	r6, [r5, r0]
 8009f88:	2e2f      	cmp	r6, #47	; 0x2f
 8009f8a:	d10f      	bne.n	8009fac <rcl_validate_topic_name_with_size+0x120>
      if (isdigit(topic_name[i + 1]) != 0) {
 8009f8c:	f814 c000 	ldrb.w	ip, [r4, r0]
 8009f90:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8009f94:	f01c 0f04 	tst.w	ip, #4
 8009f98:	f100 0601 	add.w	r6, r0, #1
 8009f9c:	d012      	beq.n	8009fc4 <rcl_validate_topic_name_with_size+0x138>
        *validation_result = RCL_TOPIC_NAME_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 8009f9e:	2104      	movs	r1, #4
 8009fa0:	6011      	str	r1, [r2, #0]
        if (invalid_index) {
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f43f af7f 	beq.w	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
          *invalid_index = i + 1;
 8009fa8:	601e      	str	r6, [r3, #0]
 8009faa:	e77c      	b.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
    } else if (i == 1 && topic_name[0] == '~') {
 8009fac:	2801      	cmp	r0, #1
 8009fae:	d109      	bne.n	8009fc4 <rcl_validate_topic_name_with_size+0x138>
 8009fb0:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 8009fb4:	d106      	bne.n	8009fc4 <rcl_validate_topic_name_with_size+0x138>
      *validation_result = RCL_TOPIC_NAME_INVALID_TILDE_NOT_FOLLOWED_BY_FORWARD_SLASH;
 8009fb6:	2107      	movs	r1, #7
 8009fb8:	6011      	str	r1, [r2, #0]
      if (invalid_index) {
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f43f af73 	beq.w	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
        *invalid_index = 1;
 8009fc0:	6018      	str	r0, [r3, #0]
 8009fc2:	e770      	b.n	8009ea6 <rcl_validate_topic_name_with_size+0x1a>
  for (size_t i = 0; i < topic_name_length; ++i) {
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	4281      	cmp	r1, r0
 8009fc8:	d1db      	bne.n	8009f82 <rcl_validate_topic_name_with_size+0xf6>
  *validation_result = RCL_TOPIC_NAME_VALID;
 8009fca:	2000      	movs	r0, #0
 8009fcc:	6010      	str	r0, [r2, #0]
  return RCL_RET_OK;
 8009fce:	e76e      	b.n	8009eae <rcl_validate_topic_name_with_size+0x22>
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8009fd0:	200b      	movs	r0, #11
 8009fd2:	e76c      	b.n	8009eae <rcl_validate_topic_name_with_size+0x22>
 8009fd4:	0801bb81 	.word	0x0801bb81

08009fd8 <rcl_get_zero_initialized_wait_set>:
{
 8009fd8:	b570      	push	{r4, r5, r6, lr}
  return null_wait_set;
 8009fda:	4d06      	ldr	r5, [pc, #24]	; (8009ff4 <rcl_get_zero_initialized_wait_set+0x1c>)
{
 8009fdc:	4606      	mov	r6, r0
  return null_wait_set;
 8009fde:	4604      	mov	r4, r0
 8009fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	6023      	str	r3, [r4, #0]
}
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	0801bb0c 	.word	0x0801bb0c

08009ff8 <__wait_set_clean_up>:
{
 8009ff8:	b530      	push	{r4, r5, lr}
 8009ffa:	b085      	sub	sp, #20
  rcl_ret_t ret = rcl_wait_set_resize(wait_set, 0, 0, 0, 0, 0, 0);
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	4619      	mov	r1, r3
{
 800a008:	4604      	mov	r4, r0
  rcl_ret_t ret = rcl_wait_set_resize(wait_set, 0, 0, 0, 0, 0, 0);
 800a00a:	f00b fbd4 	bl	80157b6 <rcl_wait_set_resize>
  assert(RCL_RET_OK == ret);  // Defensive, shouldn't fail with size 0.
 800a00e:	4605      	mov	r5, r0
 800a010:	b128      	cbz	r0, 800a01e <__wait_set_clean_up+0x26>
 800a012:	4b07      	ldr	r3, [pc, #28]	; (800a030 <__wait_set_clean_up+0x38>)
 800a014:	4a07      	ldr	r2, [pc, #28]	; (800a034 <__wait_set_clean_up+0x3c>)
 800a016:	4808      	ldr	r0, [pc, #32]	; (800a038 <__wait_set_clean_up+0x40>)
 800a018:	215f      	movs	r1, #95	; 0x5f
 800a01a:	f001 f967 	bl	800b2ec <__assert_func>
  if (wait_set->impl) {
 800a01e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a020:	b118      	cbz	r0, 800a02a <__wait_set_clean_up+0x32>
    wait_set->impl->allocator.deallocate(wait_set->impl, wait_set->impl->allocator.state);
 800a022:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a024:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800a026:	4798      	blx	r3
    wait_set->impl = NULL;
 800a028:	6325      	str	r5, [r4, #48]	; 0x30
}
 800a02a:	b005      	add	sp, #20
 800a02c:	bd30      	pop	{r4, r5, pc}
 800a02e:	bf00      	nop
 800a030:	0801e0c5 	.word	0x0801e0c5
 800a034:	0801e2c4 	.word	0x0801e2c4
 800a038:	0801e0d7 	.word	0x0801e0d7

0800a03c <rcl_wait_set_init>:
{
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	4698      	mov	r8, r3
  RCUTILS_LOG_DEBUG_NAMED(
 800a042:	4b4b      	ldr	r3, [pc, #300]	; (800a170 <rcl_wait_set_init+0x134>)
{
 800a044:	b087      	sub	sp, #28
  RCUTILS_LOG_DEBUG_NAMED(
 800a046:	781b      	ldrb	r3, [r3, #0]
{
 800a048:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a04c:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800a050:	4605      	mov	r5, r0
 800a052:	460e      	mov	r6, r1
 800a054:	4617      	mov	r7, r2
  RCUTILS_LOG_DEBUG_NAMED(
 800a056:	b923      	cbnz	r3, 800a062 <rcl_wait_set_init+0x26>
 800a058:	f008 fee0 	bl	8012e1c <rcutils_logging_initialize>
 800a05c:	b108      	cbz	r0, 800a062 <rcl_wait_set_init+0x26>
 800a05e:	f7fc ff83 	bl	8006f68 <rcutils_reset_error>
 800a062:	4844      	ldr	r0, [pc, #272]	; (800a174 <rcl_wait_set_init+0x138>)
 800a064:	210a      	movs	r1, #10
 800a066:	f7fd f9c5 	bl	80073f4 <rcutils_logging_logger_is_enabled_for>
 800a06a:	b160      	cbz	r0, 800a086 <rcl_wait_set_init+0x4a>
 800a06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a06e:	4a41      	ldr	r2, [pc, #260]	; (800a174 <rcl_wait_set_init+0x138>)
 800a070:	4841      	ldr	r0, [pc, #260]	; (800a178 <rcl_wait_set_init+0x13c>)
 800a072:	f8cd b010 	str.w	fp, [sp, #16]
 800a076:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800a07a:	e9cd 6700 	strd	r6, r7, [sp]
 800a07e:	4b3f      	ldr	r3, [pc, #252]	; (800a17c <rcl_wait_set_init+0x140>)
 800a080:	210a      	movs	r1, #10
 800a082:	f7fd f9e1 	bl	8007448 <rcutils_log>
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 800a086:	a814      	add	r0, sp, #80	; 0x50
 800a088:	f008 fe6d 	bl	8012d66 <rcutils_allocator_is_valid>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d068      	beq.n	800a162 <rcl_wait_set_init+0x126>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 800a090:	2d00      	cmp	r5, #0
 800a092:	d066      	beq.n	800a162 <rcl_wait_set_init+0x126>
  if (rcl_wait_set_is_valid(wait_set)) {
 800a094:	4628      	mov	r0, r5
 800a096:	f00b fadc 	bl	8015652 <rcl_wait_set_is_valid>
 800a09a:	4682      	mov	sl, r0
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d15e      	bne.n	800a15e <rcl_wait_set_init+0x122>
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 800a0a0:	f1b9 0f00 	cmp.w	r9, #0
 800a0a4:	d05d      	beq.n	800a162 <rcl_wait_set_init+0x126>
  if (!rcl_context_is_valid(context)) {
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f00a fffd 	bl	80150a6 <rcl_context_is_valid>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d05a      	beq.n	800a166 <rcl_wait_set_init+0x12a>
  wait_set->impl = (rcl_wait_set_impl_t *)allocator.allocate(
 800a0b0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0b4:	205c      	movs	r0, #92	; 0x5c
 800a0b6:	4790      	blx	r2
 800a0b8:	6328      	str	r0, [r5, #48]	; 0x30
  RCL_CHECK_FOR_NULL_WITH_MSG(
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d055      	beq.n	800a16a <rcl_wait_set_init+0x12e>
__ssp_bos_icheck3(memset, void *, int)
 800a0be:	225c      	movs	r2, #92	; 0x5c
 800a0c0:	4651      	mov	r1, sl
 800a0c2:	f00d fbd7 	bl	8017874 <memset>
  wait_set->impl->allocator = allocator;
 800a0c6:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 800a0ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  wait_set->impl->rmw_subscriptions.subscribers = NULL;
 800a0ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  wait_set->impl->allocator = allocator;
 800a0d0:	f104 0e48 	add.w	lr, r4, #72	; 0x48
  wait_set->impl->rmw_subscriptions.subscriber_count = 0;
 800a0d4:	e9c4 aa01 	strd	sl, sl, [r4, #4]
  wait_set->impl->rmw_guard_conditions.guard_condition_count = 0;
 800a0d8:	e9c4 aa04 	strd	sl, sl, [r4, #16]
  wait_set->impl->rmw_clients.client_count = 0;
 800a0dc:	e9c4 aa07 	strd	sl, sl, [r4, #28]
  wait_set->impl->rmw_services.service_count = 0;
 800a0e0:	e9c4 aa0a 	strd	sl, sl, [r4, #40]	; 0x28
  wait_set->impl->rmw_events.event_count = 0;
 800a0e4:	e9c4 aa0d 	strd	sl, sl, [r4, #52]	; 0x34
  wait_set->impl->context = context;
 800a0e8:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
  wait_set->impl->allocator = allocator;
 800a0ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a0f0:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f4:	f8ce 3000 	str.w	r3, [lr]
  size_t num_conditions =
 800a0f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  wait_set->impl->rmw_wait_set = rmw_create_wait_set(&(context->impl->rmw_context), num_conditions);
 800a0fa:	f8d9 0000 	ldr.w	r0, [r9]
  size_t num_conditions =
 800a0fe:	eb0b 0103 	add.w	r1, fp, r3
 800a102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a104:	4419      	add	r1, r3
 800a106:	4439      	add	r1, r7
  wait_set->impl->rmw_wait_set = rmw_create_wait_set(&(context->impl->rmw_context), num_conditions);
 800a108:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800a10c:	3028      	adds	r0, #40	; 0x28
 800a10e:	f00c fa79 	bl	8016604 <rmw_create_wait_set>
  if (!wait_set->impl->rmw_wait_set) {
 800a112:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  wait_set->impl->rmw_wait_set = rmw_create_wait_set(&(context->impl->rmw_context), num_conditions);
 800a114:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (!wait_set->impl->rmw_wait_set) {
 800a116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a118:	b1fb      	cbz	r3, 800a15a <rcl_wait_set_init+0x11e>
  rcl_ret_t ret = rcl_wait_set_resize(
 800a11a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a11c:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	463a      	mov	r2, r7
 800a126:	4643      	mov	r3, r8
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	f00b fb43 	bl	80157b6 <rcl_wait_set_resize>
  if (RCL_RET_OK != ret) {
 800a130:	4604      	mov	r4, r0
 800a132:	b170      	cbz	r0, 800a152 <rcl_wait_set_init+0x116>
  if (rcl_wait_set_is_valid(wait_set)) {
 800a134:	4628      	mov	r0, r5
 800a136:	f00b fa8c 	bl	8015652 <rcl_wait_set_is_valid>
 800a13a:	b138      	cbz	r0, 800a14c <rcl_wait_set_init+0x110>
    rmw_ret_t ret = rmw_destroy_wait_set(wait_set->impl->rmw_wait_set);
 800a13c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a13e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a140:	f00c fa63 	bl	801660a <rmw_destroy_wait_set>
      fail_ret = RCL_RET_WAIT_SET_INVALID;
 800a144:	2800      	cmp	r0, #0
 800a146:	bf18      	it	ne
 800a148:	f44f 7461 	movne.w	r4, #900	; 0x384
  __wait_set_clean_up(wait_set);
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7ff ff53 	bl	8009ff8 <__wait_set_clean_up>
}
 800a152:	4620      	mov	r0, r4
 800a154:	b007      	add	sp, #28
 800a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  rcl_ret_t fail_ret = RCL_RET_ERROR;
 800a15a:	2401      	movs	r4, #1
 800a15c:	e7ea      	b.n	800a134 <rcl_wait_set_init+0xf8>
    return RCL_RET_ALREADY_INIT;
 800a15e:	2464      	movs	r4, #100	; 0x64
 800a160:	e7f7      	b.n	800a152 <rcl_wait_set_init+0x116>
  RCL_CHECK_ALLOCATOR_WITH_MSG(&allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 800a162:	240b      	movs	r4, #11
 800a164:	e7f5      	b.n	800a152 <rcl_wait_set_init+0x116>
    return RCL_RET_NOT_INIT;
 800a166:	2465      	movs	r4, #101	; 0x65
 800a168:	e7f3      	b.n	800a152 <rcl_wait_set_init+0x116>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 800a16a:	240a      	movs	r4, #10
 800a16c:	e7f1      	b.n	800a152 <rcl_wait_set_init+0x116>
 800a16e:	bf00      	nop
 800a170:	2000461a 	.word	0x2000461a
 800a174:	0801c072 	.word	0x0801c072
 800a178:	200007a4 	.word	0x200007a4
 800a17c:	0801e128 	.word	0x0801e128

0800a180 <get_memory_lock>:
{
  static bool memory_locks[FLAGS_LEN] = { 0 };
  uintptr_t a = (uintptr_t)(address);

  // Public domain hash function taken from http://burtleburtle.net/bob/hash/integer.html
  a = (a ^ 61) ^ (a >> 16);
 800a180:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
 800a184:	f080 003d 	eor.w	r0, r0, #61	; 0x3d
  a = a + (a << 3);
  a = a ^ (a >> 4);
  a = a * 0x27d4eb2d;
 800a188:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <get_memory_lock+0x28>)
  a = a + (a << 3);
 800a18a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  a = a ^ (a >> 4);
 800a18e:	ea80 1010 	eor.w	r0, r0, r0, lsr #4
  a = a * 0x27d4eb2d;
 800a192:	4358      	muls	r0, r3
  a = a ^ (a >> 15);

  a = a % FLAGS_LEN;
 800a194:	2217      	movs	r2, #23
  a = a ^ (a >> 15);
 800a196:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
  a = a % FLAGS_LEN;
 800a19a:	fbb0 f3f2 	udiv	r3, r0, r2
 800a19e:	fb02 0013 	mls	r0, r2, r3, r0
  return memory_locks + a;
}
 800a1a2:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <get_memory_lock+0x2c>)
 800a1a4:	4418      	add	r0, r3
 800a1a6:	4770      	bx	lr
 800a1a8:	27d4eb2d 	.word	0x27d4eb2d
 800a1ac:	20005174 	.word	0x20005174

0800a1b0 <rcutils_join_path>:
char *
rcutils_join_path(
  const char * left_hand_path,
  const char * right_hand_path,
  rcutils_allocator_t allocator)
{
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a1b4:	f10d 0c20 	add.w	ip, sp, #32
 800a1b8:	e88c 000c 	stmia.w	ip, {r2, r3}
  if (NULL == left_hand_path) {
 800a1bc:	b178      	cbz	r0, 800a1de <rcutils_join_path+0x2e>
    return NULL;
  }
  if (NULL == right_hand_path) {
 800a1be:	b199      	cbz	r1, 800a1e8 <rcutils_join_path+0x38>
    return NULL;
  }

  return rcutils_format_string(
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <rcutils_join_path+0x3c>)
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e9cd 0303 	strd	r0, r3, [sp, #12]
 800a1c8:	4b09      	ldr	r3, [pc, #36]	; (800a1f0 <rcutils_join_path+0x40>)
 800a1ca:	9302      	str	r3, [sp, #8]
 800a1cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800a1da:	f00b feca 	bl	8015f72 <rcutils_format_string_limit>
    allocator,
    "%s%s%s",
    left_hand_path, RCUTILS_PATH_DELIMITER, right_hand_path);
}
 800a1de:	b007      	add	sp, #28
 800a1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1e4:	b002      	add	sp, #8
 800a1e6:	4770      	bx	lr
    return NULL;
 800a1e8:	4608      	mov	r0, r1
 800a1ea:	e7f8      	b.n	800a1de <rcutils_join_path+0x2e>
 800a1ec:	0801d9ae 	.word	0x0801d9ae
 800a1f0:	0801d220 	.word	0x0801d220

0800a1f4 <rcutils_to_native_path>:

char *
rcutils_to_native_path(
  const char * path,
  rcutils_allocator_t allocator)
{
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	ac03      	add	r4, sp, #12
 800a1fa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (NULL == path) {
 800a1fe:	4603      	mov	r3, r0
 800a200:	b128      	cbz	r0, 800a20e <rcutils_to_native_path+0x1a>
    return NULL;
  }

  return rcutils_repl_str(path, "/", RCUTILS_PATH_DELIMITER, &allocator);
 800a202:	4a05      	ldr	r2, [pc, #20]	; (800a218 <rcutils_to_native_path+0x24>)
 800a204:	4623      	mov	r3, r4
 800a206:	4611      	mov	r1, r2
 800a208:	f00b feee 	bl	8015fe8 <rcutils_repl_str>
 800a20c:	4603      	mov	r3, r0
}
 800a20e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a212:	4618      	mov	r0, r3
 800a214:	b004      	add	sp, #16
 800a216:	4770      	bx	lr
 800a218:	0801d9ae 	.word	0x0801d9ae

0800a21c <rcutils_get_env>:
#pragma warning(disable : 4996)
#endif

const char *
rcutils_get_env(const char * env_name, const char ** env_value)
{
 800a21c:	b510      	push	{r4, lr}
 800a21e:	460c      	mov	r4, r1
  RCUTILS_CAN_RETURN_WITH_ERROR_OF("some string error");

  if (NULL == env_name) {
 800a220:	b148      	cbz	r0, 800a236 <rcutils_get_env+0x1a>
    return "argument env_name is null";
  }
  if (NULL == env_value) {
 800a222:	b151      	cbz	r1, 800a23a <rcutils_get_env+0x1e>
    return "argument env_value is null";
  }

  // TODO(Suyash458): getenv is deprecated on Windows; consider using getenv_s instead
  *env_value = getenv(env_name);
 800a224:	f001 f986 	bl	800b534 <getenv>

  if (NULL == *env_value) {
 800a228:	b110      	cbz	r0, 800a230 <rcutils_get_env+0x14>
  *env_value = getenv(env_name);
 800a22a:	6020      	str	r0, [r4, #0]
 800a22c:	2000      	movs	r0, #0
    *env_value = "";
  }
  return NULL;
}
 800a22e:	bd10      	pop	{r4, pc}
    *env_value = "";
 800a230:	4b03      	ldr	r3, [pc, #12]	; (800a240 <rcutils_get_env+0x24>)
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	e7fb      	b.n	800a22e <rcutils_get_env+0x12>
    return "argument env_name is null";
 800a236:	4803      	ldr	r0, [pc, #12]	; (800a244 <rcutils_get_env+0x28>)
 800a238:	e7f9      	b.n	800a22e <rcutils_get_env+0x12>
    return "argument env_value is null";
 800a23a:	4803      	ldr	r0, [pc, #12]	; (800a248 <rcutils_get_env+0x2c>)
 800a23c:	e7f7      	b.n	800a22e <rcutils_get_env+0x12>
 800a23e:	bf00      	nop
 800a240:	0801d00d 	.word	0x0801d00d
 800a244:	0801e2f3 	.word	0x0801e2f3
 800a248:	0801e30d 	.word	0x0801e30d

0800a24c <rmw_get_zero_initialized_message_info>:

RMW_PUBLIC
RMW_WARN_UNUSED
rmw_message_info_t
rmw_get_zero_initialized_message_info(void)
{
 800a24c:	b570      	push	{r4, r5, r6, lr}
  rmw_message_info_t zero_initialized_message_info = {0, 0, {NULL, {0}}, false};
 800a24e:	4d06      	ldr	r5, [pc, #24]	; (800a268 <rmw_get_zero_initialized_message_info+0x1c>)
{
 800a250:	4606      	mov	r6, r0
  rmw_message_info_t zero_initialized_message_info = {0, 0, {NULL, {0}}, false};
 800a252:	4604      	mov	r4, r0
 800a254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a25a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a25c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return zero_initialized_message_info;
}
 800a264:	4630      	mov	r0, r6
 800a266:	bd70      	pop	{r4, r5, r6, pc}
 800a268:	0801a0e8 	.word	0x0801a0e8

0800a26c <rmw_validate_namespace_with_size>:
rmw_validate_namespace_with_size(
  const char * namespace_,
  size_t namespace_length,
  int * validation_result,
  size_t * invalid_index)
{
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	460c      	mov	r4, r1
 800a270:	b0c2      	sub	sp, #264	; 0x108
 800a272:	4615      	mov	r5, r2
 800a274:	461e      	mov	r6, r3
  if (!namespace_) {
 800a276:	2800      	cmp	r0, #0
 800a278:	d03d      	beq.n	800a2f6 <rmw_validate_namespace_with_size+0x8a>
    return RMW_RET_INVALID_ARGUMENT;
  }
  if (!validation_result) {
 800a27a:	2a00      	cmp	r2, #0
 800a27c:	d03b      	beq.n	800a2f6 <rmw_validate_namespace_with_size+0x8a>
    return RMW_RET_INVALID_ARGUMENT;
  }

  // Special case for root namepsace
  if (namespace_length == 1 && namespace_[0] == '/') {
 800a27e:	2901      	cmp	r1, #1
 800a280:	d106      	bne.n	800a290 <rmw_validate_namespace_with_size+0x24>
 800a282:	7803      	ldrb	r3, [r0, #0]
 800a284:	2b2f      	cmp	r3, #47	; 0x2f
 800a286:	d103      	bne.n	800a290 <rmw_validate_namespace_with_size+0x24>
    // Ok to return here, it is valid and will not exceed RMW_NAMESPACE_MAX_LENGTH.
    *validation_result = RMW_NAMESPACE_VALID;
 800a288:	2000      	movs	r0, #0
 800a28a:	6028      	str	r0, [r5, #0]
  }

  // everything was ok, set result to valid namespace, avoid setting invalid_index, and return
  *validation_result = RMW_NAMESPACE_VALID;
  return RMW_RET_OK;
}
 800a28c:	b042      	add	sp, #264	; 0x108
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
  rmw_ret_t ret = rmw_validate_full_topic_name(namespace_, &t_validation_result, &t_invalid_index);
 800a290:	aa01      	add	r2, sp, #4
 800a292:	4669      	mov	r1, sp
 800a294:	f008 ff5c 	bl	8013150 <rmw_validate_full_topic_name>
  if (ret != RMW_RET_OK) {
 800a298:	2800      	cmp	r0, #0
 800a29a:	d1f7      	bne.n	800a28c <rmw_validate_namespace_with_size+0x20>
  if (t_validation_result != RMW_TOPIC_VALID && t_validation_result != RMW_TOPIC_INVALID_TOO_LONG) {
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	b313      	cbz	r3, 800a2e6 <rmw_validate_namespace_with_size+0x7a>
 800a2a0:	2b07      	cmp	r3, #7
 800a2a2:	d020      	beq.n	800a2e6 <rmw_validate_namespace_with_size+0x7a>
    switch (t_validation_result) {
 800a2a4:	1e59      	subs	r1, r3, #1
 800a2a6:	2905      	cmp	r1, #5
 800a2a8:	d815      	bhi.n	800a2d6 <rmw_validate_namespace_with_size+0x6a>
 800a2aa:	e8df f001 	tbb	[pc, r1]
 800a2ae:	0a03      	.short	0x0a03
 800a2b0:	12100e0c 	.word	0x12100e0c
        *validation_result = RMW_NAMESPACE_INVALID_IS_EMPTY_STRING;
 800a2b4:	2301      	movs	r3, #1
        *validation_result = RMW_NAMESPACE_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 800a2b6:	602b      	str	r3, [r5, #0]
    if (invalid_index) {
 800a2b8:	2e00      	cmp	r6, #0
 800a2ba:	d0e7      	beq.n	800a28c <rmw_validate_namespace_with_size+0x20>
      *invalid_index = t_invalid_index;
 800a2bc:	9b01      	ldr	r3, [sp, #4]
      *invalid_index = RMW_NAMESPACE_MAX_LENGTH - 1;
 800a2be:	6033      	str	r3, [r6, #0]
 800a2c0:	e7e4      	b.n	800a28c <rmw_validate_namespace_with_size+0x20>
        *validation_result = RMW_NAMESPACE_INVALID_NOT_ABSOLUTE;
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e7f7      	b.n	800a2b6 <rmw_validate_namespace_with_size+0x4a>
        *validation_result = RMW_NAMESPACE_INVALID_ENDS_WITH_FORWARD_SLASH;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e7f5      	b.n	800a2b6 <rmw_validate_namespace_with_size+0x4a>
        *validation_result = RMW_NAMESPACE_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	e7f3      	b.n	800a2b6 <rmw_validate_namespace_with_size+0x4a>
        *validation_result = RMW_NAMESPACE_INVALID_CONTAINS_REPEATED_FORWARD_SLASH;
 800a2ce:	2305      	movs	r3, #5
 800a2d0:	e7f1      	b.n	800a2b6 <rmw_validate_namespace_with_size+0x4a>
        *validation_result = RMW_NAMESPACE_INVALID_NAME_TOKEN_STARTS_WITH_NUMBER;
 800a2d2:	2306      	movs	r3, #6
 800a2d4:	e7ef      	b.n	800a2b6 <rmw_validate_namespace_with_size+0x4a>
          int ret = rcutils_snprintf(
 800a2d6:	4a09      	ldr	r2, [pc, #36]	; (800a2fc <rmw_validate_namespace_with_size+0x90>)
 800a2d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a2dc:	a802      	add	r0, sp, #8
 800a2de:	f008 fdd4 	bl	8012e8a <rcutils_snprintf>
        return RMW_RET_ERROR;
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	e7d2      	b.n	800a28c <rmw_validate_namespace_with_size+0x20>
  if (namespace_length > RMW_NAMESPACE_MAX_LENGTH) {
 800a2e6:	2cf5      	cmp	r4, #245	; 0xf5
 800a2e8:	d9ce      	bls.n	800a288 <rmw_validate_namespace_with_size+0x1c>
    *validation_result = RMW_NAMESPACE_INVALID_TOO_LONG;
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	602b      	str	r3, [r5, #0]
    if (invalid_index) {
 800a2ee:	2e00      	cmp	r6, #0
 800a2f0:	d0cc      	beq.n	800a28c <rmw_validate_namespace_with_size+0x20>
      *invalid_index = RMW_NAMESPACE_MAX_LENGTH - 1;
 800a2f2:	23f4      	movs	r3, #244	; 0xf4
 800a2f4:	e7e3      	b.n	800a2be <rmw_validate_namespace_with_size+0x52>
    return RMW_RET_INVALID_ARGUMENT;
 800a2f6:	200b      	movs	r0, #11
 800a2f8:	e7c8      	b.n	800a28c <rmw_validate_namespace_with_size+0x20>
 800a2fa:	bf00      	nop
 800a2fc:	0801e328 	.word	0x0801e328

0800a300 <rmw_namespace_validation_result_string>:

const char *
rmw_namespace_validation_result_string(int validation_result)
{
  switch (validation_result) {
 800a300:	2807      	cmp	r0, #7
 800a302:	bf9a      	itte	ls
 800a304:	4b02      	ldrls	r3, [pc, #8]	; (800a310 <rmw_namespace_validation_result_string+0x10>)
 800a306:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 800a30a:	4802      	ldrhi	r0, [pc, #8]	; (800a314 <rmw_namespace_validation_result_string+0x14>)
    case RMW_NAMESPACE_INVALID_TOO_LONG:
      return "namespace should not exceed '" RMW_STRINGIFY(RMW_NAMESPACE_MAX_NAME_LENGTH) "'";
    default:
      return "unknown result code for rmw namespace validation";
  }
}
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	0801bb40 	.word	0x0801bb40
 800a314:	0801e375 	.word	0x0801e375

0800a318 <rmw_validate_node_name_with_size>:
rmw_validate_node_name_with_size(
  const char * node_name,
  size_t node_name_length,
  int * validation_result,
  size_t * invalid_index)
{
 800a318:	b570      	push	{r4, r5, r6, lr}
  if (!node_name) {
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d033      	beq.n	800a386 <rmw_validate_node_name_with_size+0x6e>
    return RMW_RET_INVALID_ARGUMENT;
  }
  if (!validation_result) {
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d031      	beq.n	800a386 <rmw_validate_node_name_with_size+0x6e>
    return RMW_RET_INVALID_ARGUMENT;
  }
  if (node_name_length == 0) {
 800a322:	b939      	cbnz	r1, 800a334 <rmw_validate_node_name_with_size+0x1c>
    *validation_result = RMW_NODE_NAME_INVALID_IS_EMPTY_STRING;
 800a324:	2101      	movs	r1, #1
 800a326:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 800a328:	b90b      	cbnz	r3, 800a32e <rmw_validate_node_name_with_size+0x16>
      // if it is none of these, then it is an unallowed character in a node name
      *validation_result = RMW_NODE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
      if (invalid_index) {
        *invalid_index = i;
      }
      return RMW_RET_OK;
 800a32a:	2000      	movs	r0, #0
 800a32c:	e001      	b.n	800a332 <rmw_validate_node_name_with_size+0x1a>
      *invalid_index = 0;
 800a32e:	2000      	movs	r0, #0
 800a330:	6018      	str	r0, [r3, #0]
    return RMW_RET_OK;
  }
  // everything was ok, set result to valid node name, avoid setting invalid_index, and return
  *validation_result = RMW_NODE_NAME_VALID;
  return RMW_RET_OK;
}
 800a332:	bd70      	pop	{r4, r5, r6, pc}
  for (size_t i = 0; i < node_name_length; ++i) {
 800a334:	2400      	movs	r4, #0
    if (rcutils_isalnum_no_locale(node_name[i])) {
 800a336:	5d05      	ldrb	r5, [r0, r4]
  if (c >= 0x30 /*0*/ && c <= 0x39 /*9*/) {
 800a338:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 800a33c:	2e09      	cmp	r6, #9
 800a33e:	d90c      	bls.n	800a35a <rmw_validate_node_name_with_size+0x42>
  if (c >= 0x41 /*A*/ && c <= 0x5a /*Z*/) {
 800a340:	f025 0620 	bic.w	r6, r5, #32
 800a344:	3e41      	subs	r6, #65	; 0x41
 800a346:	2e19      	cmp	r6, #25
 800a348:	d907      	bls.n	800a35a <rmw_validate_node_name_with_size+0x42>
    } else if (node_name[i] == '_') {
 800a34a:	2d5f      	cmp	r5, #95	; 0x5f
 800a34c:	d005      	beq.n	800a35a <rmw_validate_node_name_with_size+0x42>
      *validation_result = RMW_NODE_NAME_INVALID_CONTAINS_UNALLOWED_CHARACTERS;
 800a34e:	2102      	movs	r1, #2
 800a350:	6011      	str	r1, [r2, #0]
      if (invalid_index) {
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0e9      	beq.n	800a32a <rmw_validate_node_name_with_size+0x12>
        *invalid_index = i;
 800a356:	601c      	str	r4, [r3, #0]
 800a358:	e7e7      	b.n	800a32a <rmw_validate_node_name_with_size+0x12>
  for (size_t i = 0; i < node_name_length; ++i) {
 800a35a:	3401      	adds	r4, #1
 800a35c:	42a1      	cmp	r1, r4
 800a35e:	d1ea      	bne.n	800a336 <rmw_validate_node_name_with_size+0x1e>
  if (isdigit(node_name[0]) != 0) {
 800a360:	7804      	ldrb	r4, [r0, #0]
 800a362:	480a      	ldr	r0, [pc, #40]	; (800a38c <rmw_validate_node_name_with_size+0x74>)
 800a364:	5c20      	ldrb	r0, [r4, r0]
 800a366:	f010 0004 	ands.w	r0, r0, #4
 800a36a:	d001      	beq.n	800a370 <rmw_validate_node_name_with_size+0x58>
    *validation_result = RMW_NODE_NAME_INVALID_STARTS_WITH_NUMBER;
 800a36c:	2103      	movs	r1, #3
 800a36e:	e7da      	b.n	800a326 <rmw_validate_node_name_with_size+0xe>
  if (node_name_length > RMW_NODE_NAME_MAX_NAME_LENGTH) {
 800a370:	29ff      	cmp	r1, #255	; 0xff
 800a372:	d906      	bls.n	800a382 <rmw_validate_node_name_with_size+0x6a>
    *validation_result = RMW_NODE_NAME_INVALID_TOO_LONG;
 800a374:	2104      	movs	r1, #4
 800a376:	6011      	str	r1, [r2, #0]
    if (invalid_index) {
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0d6      	beq.n	800a32a <rmw_validate_node_name_with_size+0x12>
      *invalid_index = RMW_NODE_NAME_MAX_NAME_LENGTH - 1;
 800a37c:	22fe      	movs	r2, #254	; 0xfe
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	e7d7      	b.n	800a332 <rmw_validate_node_name_with_size+0x1a>
  *validation_result = RMW_NODE_NAME_VALID;
 800a382:	6010      	str	r0, [r2, #0]
  return RMW_RET_OK;
 800a384:	e7d5      	b.n	800a332 <rmw_validate_node_name_with_size+0x1a>
    return RMW_RET_INVALID_ARGUMENT;
 800a386:	200b      	movs	r0, #11
 800a388:	e7d3      	b.n	800a332 <rmw_validate_node_name_with_size+0x1a>
 800a38a:	bf00      	nop
 800a38c:	0801bb81 	.word	0x0801bb81

0800a390 <rmw_node_name_validation_result_string>:

const char *
rmw_node_name_validation_result_string(int validation_result)
{
  switch (validation_result) {
 800a390:	2804      	cmp	r0, #4
 800a392:	bf9a      	itte	ls
 800a394:	4b02      	ldrls	r3, [pc, #8]	; (800a3a0 <rmw_node_name_validation_result_string+0x10>)
 800a396:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 800a39a:	4802      	ldrhi	r0, [pc, #8]	; (800a3a4 <rmw_node_name_validation_result_string+0x14>)
      return
        "node name length should not exceed '" RMW_STRINGIFY(RMW_NODE_NAME_MAX_NAME_LENGTH) "'";
    default:
      return "unknown result code for rmw node name validation";
  }
}
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	0801bb60 	.word	0x0801bb60
 800a3a4:	0801e515 	.word	0x0801e515

0800a3a8 <rmw_get_implementation_identifier>:
const char *
rmw_get_implementation_identifier()
{
  EPROS_PRINT_TRACE()
  return eprosima_microxrcedds_identifier;
}
 800a3a8:	4b01      	ldr	r3, [pc, #4]	; (800a3b0 <rmw_get_implementation_identifier+0x8>)
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	0801bb7c 	.word	0x0801bb7c

0800a3b4 <rmw_init_options_init>:
#endif


rmw_ret_t
rmw_init_options_init(rmw_init_options_t * init_options, rcutils_allocator_t allocator)
{
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	ac05      	add	r4, sp, #20
 800a3ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 800a3be:	4605      	mov	r5, r0
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d033      	beq.n	800a42c <rmw_init_options_init+0x78>
  RCUTILS_CHECK_ALLOCATOR(&allocator, return RMW_RET_INVALID_ARGUMENT);
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f008 fcce 	bl	8012d66 <rcutils_allocator_is_valid>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d02e      	beq.n	800a42c <rmw_init_options_init+0x78>

  if (NULL != init_options->implementation_identifier) {
 800a3ce:	68ab      	ldr	r3, [r5, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d12b      	bne.n	800a42c <rmw_init_options_init+0x78>
    RMW_SET_ERROR_MSG("expected zero-initialized init_options");
    return RMW_RET_INVALID_ARGUMENT;
  }

  init_options->instance_id = 0;
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e9c5 2300 	strd	r2, r3, [r5]
  init_options->implementation_identifier = eprosima_microxrcedds_identifier;
 800a3dc:	4b14      	ldr	r3, [pc, #80]	; (800a430 <rmw_init_options_init+0x7c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60ab      	str	r3, [r5, #8]
  init_options->allocator = allocator;
 800a3e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3e4:	f105 0620 	add.w	r6, r5, #32
 800a3e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	6033      	str	r3, [r6, #0]
  init_options->enclave = "/";
 800a3ee:	4b11      	ldr	r3, [pc, #68]	; (800a434 <rmw_init_options_init+0x80>)

  init_options->impl = allocator.allocate(sizeof(rmw_init_options_impl_t), allocator.state);
 800a3f0:	9909      	ldr	r1, [sp, #36]	; 0x24
  init_options->enclave = "/";
 800a3f2:	61eb      	str	r3, [r5, #28]
  init_options->impl = allocator.allocate(sizeof(rmw_init_options_impl_t), allocator.state);
 800a3f4:	2038      	movs	r0, #56	; 0x38
 800a3f6:	9b05      	ldr	r3, [sp, #20]
 800a3f8:	4798      	blx	r3
 800a3fa:	6368      	str	r0, [r5, #52]	; 0x34

#if defined(RMW_UXRCE_TRANSPORT_SERIAL) || defined(RMW_UXRCE_TRANSPORT_CUSTOM_SERIAL)
  if (strlen(RMW_UXRCE_DEFAULT_SERIAL_DEVICE) <= MAX_SERIAL_DEVICE) {
 800a3fc:	480e      	ldr	r0, [pc, #56]	; (800a438 <rmw_init_options_init+0x84>)
 800a3fe:	f7f5 fedf 	bl	80001c0 <strlen>
 800a402:	2832      	cmp	r0, #50	; 0x32
 800a404:	d812      	bhi.n	800a42c <rmw_init_options_init+0x78>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 800a406:	490c      	ldr	r1, [pc, #48]	; (800a438 <rmw_init_options_init+0x84>)
 800a408:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800a40a:	f002 fa49 	bl	800c8a0 <strcpy>
    RMW_SET_ERROR_MSG("default port configuration overflow");
    return RMW_RET_INVALID_ARGUMENT;
  }
#endif

  srand(uxr_nanos());
 800a40e:	f7fe f80b 	bl	8008428 <uxr_nanos>
 800a412:	f001 fd51 	bl	800beb8 <srand>

  do {
    init_options->impl->connection_params.client_key = rand();
 800a416:	f001 fd65 	bl	800bee4 <rand>
 800a41a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a41c:	6358      	str	r0, [r3, #52]	; 0x34
  } while (init_options->impl->connection_params.client_key == 0);
 800a41e:	2800      	cmp	r0, #0
 800a420:	d0f9      	beq.n	800a416 <rmw_init_options_init+0x62>

  return RMW_RET_OK;
 800a422:	2000      	movs	r0, #0
}
 800a424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a428:	b004      	add	sp, #16
 800a42a:	4770      	bx	lr
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 800a42c:	200b      	movs	r0, #11
 800a42e:	e7f9      	b.n	800a424 <rmw_init_options_init+0x70>
 800a430:	0801bb7c 	.word	0x0801bb7c
 800a434:	0801d9ae 	.word	0x0801d9ae
 800a438:	0801bfa5 	.word	0x0801bfa5

0800a43c <rmw_init_options_copy>:

rmw_ret_t
rmw_init_options_copy(const rmw_init_options_t * src, rmw_init_options_t * dst)
{
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	460e      	mov	r6, r1
  RMW_CHECK_ARGUMENT_FOR_NULL(src, RMW_RET_INVALID_ARGUMENT);
 800a440:	4604      	mov	r4, r0
 800a442:	b910      	cbnz	r0, 800a44a <rmw_init_options_copy+0xe>
 800a444:	250b      	movs	r5, #11
  memcpy(dst, src, sizeof(rmw_init_options_t));
  dst->impl = rmw_allocate(sizeof(rmw_init_options_impl_t));
  memcpy(dst->impl, src->impl, sizeof(rmw_init_options_impl_t));

  return RMW_RET_OK;
}
 800a446:	4628      	mov	r0, r5
 800a448:	bd70      	pop	{r4, r5, r6, pc}
  RMW_CHECK_ARGUMENT_FOR_NULL(dst, RMW_RET_INVALID_ARGUMENT);
 800a44a:	2900      	cmp	r1, #0
 800a44c:	d0fa      	beq.n	800a444 <rmw_init_options_copy+0x8>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <rmw_init_options_copy+0x5c>)
 800a450:	6880      	ldr	r0, [r0, #8]
 800a452:	6819      	ldr	r1, [r3, #0]
 800a454:	f7f5 ff28 	bl	80002a8 <strcmp>
 800a458:	4605      	mov	r5, r0
 800a45a:	b9d8      	cbnz	r0, 800a494 <rmw_init_options_copy+0x58>
  if (NULL != dst->implementation_identifier) {
 800a45c:	68b3      	ldr	r3, [r6, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1f0      	bne.n	800a444 <rmw_init_options_copy+0x8>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a462:	4623      	mov	r3, r4
 800a464:	4632      	mov	r2, r6
 800a466:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800a46a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a46e:	f842 0b04 	str.w	r0, [r2], #4
 800a472:	428b      	cmp	r3, r1
 800a474:	d1f9      	bne.n	800a46a <rmw_init_options_copy+0x2e>
  dst->impl = rmw_allocate(sizeof(rmw_init_options_impl_t));
 800a476:	2038      	movs	r0, #56	; 0x38
 800a478:	f00b fe46 	bl	8016108 <rmw_allocate>
 800a47c:	6370      	str	r0, [r6, #52]	; 0x34
 800a47e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a480:	4603      	mov	r3, r0
 800a482:	f102 0138 	add.w	r1, r2, #56	; 0x38
 800a486:	f852 0b04 	ldr.w	r0, [r2], #4
 800a48a:	f843 0b04 	str.w	r0, [r3], #4
 800a48e:	428a      	cmp	r2, r1
 800a490:	d1f9      	bne.n	800a486 <rmw_init_options_copy+0x4a>
 800a492:	e7d8      	b.n	800a446 <rmw_init_options_copy+0xa>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a494:	250c      	movs	r5, #12
 800a496:	e7d6      	b.n	800a446 <rmw_init_options_copy+0xa>
 800a498:	0801bb7c 	.word	0x0801bb7c

0800a49c <rmw_init_options_fini>:

rmw_ret_t
rmw_init_options_fini(rmw_init_options_t * init_options)
{
 800a49c:	b570      	push	{r4, r5, r6, lr}
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 800a49e:	4604      	mov	r4, r0
{
 800a4a0:	b08e      	sub	sp, #56	; 0x38
  RMW_CHECK_ARGUMENT_FOR_NULL(init_options, RMW_RET_INVALID_ARGUMENT);
 800a4a2:	b918      	cbnz	r0, 800a4ac <rmw_init_options_fini+0x10>
 800a4a4:	260b      	movs	r6, #11

  rmw_free(init_options->impl);

  *init_options = rmw_get_zero_initialized_init_options();
  return RMW_RET_OK;
}
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	b00e      	add	sp, #56	; 0x38
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
  RCUTILS_CHECK_ALLOCATOR(&(init_options->allocator), return RMW_RET_INVALID_ARGUMENT);
 800a4ac:	3020      	adds	r0, #32
 800a4ae:	f008 fc5a 	bl	8012d66 <rcutils_allocator_is_valid>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0f6      	beq.n	800a4a4 <rmw_init_options_fini+0x8>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a4b6:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <rmw_init_options_fini+0x50>)
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	6819      	ldr	r1, [r3, #0]
 800a4bc:	f7f5 fef4 	bl	80002a8 <strcmp>
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	b988      	cbnz	r0, 800a4e8 <rmw_init_options_fini+0x4c>
  rmw_free(init_options->impl);
 800a4c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a4c6:	f00b fe32 	bl	801612e <rmw_free>
  *init_options = rmw_get_zero_initialized_init_options();
 800a4ca:	466d      	mov	r5, sp
 800a4cc:	4668      	mov	r0, sp
 800a4ce:	f00b fe48 	bl	8016162 <rmw_get_zero_initialized_init_options>
 800a4d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a4e2:	e884 0003 	stmia.w	r4, {r0, r1}
  return RMW_RET_OK;
 800a4e6:	e7de      	b.n	800a4a6 <rmw_init_options_fini+0xa>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a4e8:	260c      	movs	r6, #12
 800a4ea:	e7dc      	b.n	800a4a6 <rmw_init_options_fini+0xa>
 800a4ec:	0801bb7c 	.word	0x0801bb7c

0800a4f0 <rmw_init>:

rmw_ret_t
rmw_init(const rmw_init_options_t * options, rmw_context_t * context)
{
 800a4f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a4f4:	460f      	mov	r7, r1
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(options, RMW_RET_INVALID_ARGUMENT);
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	f000 80c2 	beq.w	800a682 <rmw_init+0x192>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(context, RMW_RET_INVALID_ARGUMENT);
 800a4fe:	2900      	cmp	r1, #0
 800a500:	f000 80bf 	beq.w	800a682 <rmw_init+0x192>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(options->impl, RMW_RET_INVALID_ARGUMENT);
 800a504:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 80bb 	beq.w	800a682 <rmw_init+0x192>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a50c:	4b5f      	ldr	r3, [pc, #380]	; (800a68c <rmw_init+0x19c>)
 800a50e:	6880      	ldr	r0, [r0, #8]
 800a510:	f8d3 8000 	ldr.w	r8, [r3]
 800a514:	4641      	mov	r1, r8
 800a516:	f7f5 fec7 	bl	80002a8 <strcmp>
 800a51a:	4605      	mov	r5, r0
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 80b2 	bne.w	800a686 <rmw_init+0x196>
    options,
    options->implementation_identifier,
    eprosima_microxrcedds_identifier,
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION);
  context->instance_id = options->instance_id;
 800a522:	e9d6 2300 	ldrd	r2, r3, [r6]
  context->implementation_identifier = eprosima_microxrcedds_identifier;

  rmw_uxrce_init_session_memory(&session_memory, custom_sessions, RMW_UXRCE_MAX_SESSIONS);
 800a526:	485a      	ldr	r0, [pc, #360]	; (800a690 <rmw_init+0x1a0>)
 800a528:	495a      	ldr	r1, [pc, #360]	; (800a694 <rmw_init+0x1a4>)
  context->implementation_identifier = eprosima_microxrcedds_identifier;
 800a52a:	f8c7 8008 	str.w	r8, [r7, #8]
  context->instance_id = options->instance_id;
 800a52e:	e9c7 2300 	strd	r2, r3, [r7]
  rmw_uxrce_init_session_memory(&session_memory, custom_sessions, RMW_UXRCE_MAX_SESSIONS);
 800a532:	2201      	movs	r2, #1
 800a534:	f008 ff40 	bl	80133b8 <rmw_uxrce_init_session_memory>

  rmw_uxrce_mempool_item_t * memory_node = get_memory(&session_memory);
 800a538:	4855      	ldr	r0, [pc, #340]	; (800a690 <rmw_init+0x1a0>)
 800a53a:	f00b fe4b 	bl	80161d4 <get_memory>
  if (!memory_node) {
 800a53e:	b920      	cbnz	r0, 800a54a <rmw_init+0x5a>
    RMW_SET_ERROR_MSG("Not available session memory node");
    return RMW_RET_ERROR;
 800a540:	2501      	movs	r5, #1
    return RMW_RET_ERROR;
  }
#endif  // RMW_UXRCE_GRAPH

  return RMW_RET_OK;
}
 800a542:	4628      	mov	r0, r5
 800a544:	b002      	add	sp, #8
 800a546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  rmw_context_impl_t * context_impl = (rmw_context_impl_t *)memory_node->data;
 800a54a:	68c4      	ldr	r4, [r0, #12]
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 800a54c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800a54e:	f104 0010 	add.w	r0, r4, #16
 800a552:	f002 f9a5 	bl	800c8a0 <strcpy>
  context_impl->connection_params.client_key = options->impl->connection_params.client_key;
 800a556:	6b73      	ldr	r3, [r6, #52]	; 0x34
  rmw_uxrce_init_node_memory(&node_memory, custom_nodes, RMW_UXRCE_MAX_NODES);
 800a558:	494f      	ldr	r1, [pc, #316]	; (800a698 <rmw_init+0x1a8>)
  context_impl->connection_params.client_key = options->impl->connection_params.client_key;
 800a55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55c:	6463      	str	r3, [r4, #68]	; 0x44
  context_impl->id_participant = 0;
 800a55e:	f241 53a8 	movw	r3, #5544	; 0x15a8
  rmw_uxrce_init_node_memory(&node_memory, custom_nodes, RMW_UXRCE_MAX_NODES);
 800a562:	484e      	ldr	r0, [pc, #312]	; (800a69c <rmw_init+0x1ac>)
  context_impl->id_participant = 0;
 800a564:	50e5      	str	r5, [r4, r3]
  context_impl->id_publisher = 0;
 800a566:	f241 53ac 	movw	r3, #5548	; 0x15ac
  rmw_uxrce_init_node_memory(&node_memory, custom_nodes, RMW_UXRCE_MAX_NODES);
 800a56a:	2201      	movs	r2, #1
  context_impl->id_publisher = 0;
 800a56c:	50e5      	str	r5, [r4, r3]
  context_impl->id_subscriber = 0;
 800a56e:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800a572:	50e5      	str	r5, [r4, r3]
  context_impl->id_requester = 0;
 800a574:	f241 53b4 	movw	r3, #5556	; 0x15b4
 800a578:	50e5      	str	r5, [r4, r3]
  context_impl->graph_guard_condition.data = NULL;
 800a57a:	e9c4 85e2 	strd	r8, r5, [r4, #904]	; 0x388
  context->impl = context_impl;
 800a57e:	64bc      	str	r4, [r7, #72]	; 0x48
  rmw_uxrce_init_node_memory(&node_memory, custom_nodes, RMW_UXRCE_MAX_NODES);
 800a580:	f008 fefd 	bl	801337e <rmw_uxrce_init_node_memory>
  rmw_uxrce_init_subscription_memory(
 800a584:	4946      	ldr	r1, [pc, #280]	; (800a6a0 <rmw_init+0x1b0>)
 800a586:	4847      	ldr	r0, [pc, #284]	; (800a6a4 <rmw_init+0x1b4>)
 800a588:	2202      	movs	r2, #2
 800a58a:	f008 fed9 	bl	8013340 <rmw_uxrce_init_subscription_memory>
  rmw_uxrce_init_publisher_memory(&publisher_memory, custom_publishers, RMW_UXRCE_MAX_PUBLISHERS);
 800a58e:	4946      	ldr	r1, [pc, #280]	; (800a6a8 <rmw_init+0x1b8>)
 800a590:	4846      	ldr	r0, [pc, #280]	; (800a6ac <rmw_init+0x1bc>)
 800a592:	2203      	movs	r2, #3
 800a594:	f008 feb7 	bl	8013306 <rmw_uxrce_init_publisher_memory>
  rmw_uxrce_init_service_memory(&service_memory, custom_services, RMW_UXRCE_MAX_SERVICES);
 800a598:	4945      	ldr	r1, [pc, #276]	; (800a6b0 <rmw_init+0x1c0>)
 800a59a:	4846      	ldr	r0, [pc, #280]	; (800a6b4 <rmw_init+0x1c4>)
 800a59c:	462a      	mov	r2, r5
 800a59e:	f008 fe74 	bl	801328a <rmw_uxrce_init_service_memory>
  rmw_uxrce_init_client_memory(&client_memory, custom_clients, RMW_UXRCE_MAX_CLIENTS);
 800a5a2:	4945      	ldr	r1, [pc, #276]	; (800a6b8 <rmw_init+0x1c8>)
 800a5a4:	4845      	ldr	r0, [pc, #276]	; (800a6bc <rmw_init+0x1cc>)
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	f008 fe8e 	bl	80132c8 <rmw_uxrce_init_client_memory>
  rmw_uxrce_init_topic_memory(&topics_memory, custom_topics, RMW_UXRCE_MAX_TOPICS_INTERNAL);
 800a5ac:	4844      	ldr	r0, [pc, #272]	; (800a6c0 <rmw_init+0x1d0>)
 800a5ae:	4945      	ldr	r1, [pc, #276]	; (800a6c4 <rmw_init+0x1d4>)
 800a5b0:	2205      	movs	r2, #5
 800a5b2:	f008 ff20 	bl	80133f6 <rmw_uxrce_init_topic_memory>
  if (strlen(options->impl->connection_params.serial_device) > 0) {
 800a5b6:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a5b8:	f7f5 fe02 	bl	80001c0 <strlen>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d05e      	beq.n	800a67e <rmw_init+0x18e>
    pseudo_fd = atoi(options->impl->connection_params.serial_device);
 800a5c0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a5c2:	f00c ff74 	bl	80174ae <atoi>
 800a5c6:	4602      	mov	r2, r0
  if (!uxr_init_serial_transport(
 800a5c8:	f104 0848 	add.w	r8, r4, #72	; 0x48
 800a5cc:	2701      	movs	r7, #1
 800a5ce:	9700      	str	r7, [sp, #0]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f504 7132 	add.w	r1, r4, #712	; 0x2c8
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f000 fcb4 	bl	800af44 <uxr_init_serial_transport>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d0af      	beq.n	800a540 <rmw_init+0x50>
  uxr_init_session(
 800a5e0:	f504 7634 	add.w	r6, r4, #720	; 0x2d0
 800a5e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a5e6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f009 fd5f 	bl	80140ae <uxr_init_session>
  uxr_set_topic_callback(&context_impl->session, on_topic, (void *)(context_impl));
 800a5f0:	4935      	ldr	r1, [pc, #212]	; (800a6c8 <rmw_init+0x1d8>)
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f009 fd7a 	bl	80140ee <uxr_set_topic_callback>
  uxr_set_status_callback(&context_impl->session, on_status, NULL);
 800a5fa:	4934      	ldr	r1, [pc, #208]	; (800a6cc <rmw_init+0x1dc>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	f009 fd72 	bl	80140e8 <uxr_set_status_callback>
  uxr_set_request_callback(&context_impl->session, on_request, NULL);
 800a604:	4932      	ldr	r1, [pc, #200]	; (800a6d0 <rmw_init+0x1e0>)
 800a606:	2200      	movs	r2, #0
 800a608:	4630      	mov	r0, r6
 800a60a:	f009 fd73 	bl	80140f4 <uxr_set_request_callback>
  uxr_set_reply_callback(&context_impl->session, on_reply, NULL);
 800a60e:	4931      	ldr	r1, [pc, #196]	; (800a6d4 <rmw_init+0x1e4>)
 800a610:	2200      	movs	r2, #0
 800a612:	4630      	mov	r0, r6
 800a614:	f009 fd71 	bl	80140fa <uxr_set_reply_callback>
    context_impl->transport.comm.mtu * RMW_UXRCE_STREAM_HISTORY_INPUT, RMW_UXRCE_STREAM_HISTORY_INPUT);
 800a618:	f8b4 22c0 	ldrh.w	r2, [r4, #704]	; 0x2c0
  context_impl->reliable_input = uxr_create_input_reliable_stream(
 800a61c:	2304      	movs	r3, #4
 800a61e:	0092      	lsls	r2, r2, #2
 800a620:	f504 716a 	add.w	r1, r4, #936	; 0x3a8
 800a624:	4630      	mov	r0, r6
 800a626:	f7fd fe9b 	bl	8008360 <uxr_create_input_reliable_stream>
    context_impl->transport.comm.mtu * RMW_UXRCE_STREAM_HISTORY_OUTPUT, RMW_UXRCE_STREAM_HISTORY_OUTPUT);
 800a62a:	f8b4 22c0 	ldrh.w	r2, [r4, #704]	; 0x2c0
  context_impl->reliable_input = uxr_create_input_reliable_stream(
 800a62e:	f8c4 0394 	str.w	r0, [r4, #916]	; 0x394
    uxr_create_output_reliable_stream(
 800a632:	2304      	movs	r3, #4
 800a634:	0092      	lsls	r2, r2, #2
 800a636:	f604 31a8 	addw	r1, r4, #2984	; 0xba8
 800a63a:	4630      	mov	r0, r6
 800a63c:	f009 fdc6 	bl	80141cc <uxr_create_output_reliable_stream>
 800a640:	f8c4 0398 	str.w	r0, [r4, #920]	; 0x398
  context_impl->best_effort_input = uxr_create_input_best_effort_stream(&context_impl->session);
 800a644:	4630      	mov	r0, r6
 800a646:	f009 fde3 	bl	8014210 <uxr_create_input_best_effort_stream>
  context_impl->best_effort_output = uxr_create_output_best_effort_stream(
 800a64a:	f504 519d 	add.w	r1, r4, #5024	; 0x13a0
  context_impl->best_effort_input = uxr_create_input_best_effort_stream(&context_impl->session);
 800a64e:	f8c4 03a0 	str.w	r0, [r4, #928]	; 0x3a0
  context_impl->best_effort_output = uxr_create_output_best_effort_stream(
 800a652:	f8b4 22c0 	ldrh.w	r2, [r4, #704]	; 0x2c0
 800a656:	3108      	adds	r1, #8
 800a658:	4630      	mov	r0, r6
 800a65a:	f009 fda7 	bl	80141ac <uxr_create_output_best_effort_stream>
    &context_impl->reliable_output :
 800a65e:	f504 7366 	add.w	r3, r4, #920	; 0x398
  context_impl->best_effort_output = uxr_create_output_best_effort_stream(
 800a662:	f8c4 039c 	str.w	r0, [r4, #924]	; 0x39c
  context_impl->creation_destroy_stream = (RMW_UXRCE_ENTITY_CREATION_DESTROY_TIMEOUT > 0) ? 
 800a666:	f8c4 33a4 	str.w	r3, [r4, #932]	; 0x3a4
  if (!uxr_create_session(&context_impl->session)) {
 800a66a:	4630      	mov	r0, r6
 800a66c:	f009 fd75 	bl	801415a <uxr_create_session>
 800a670:	2800      	cmp	r0, #0
 800a672:	f47f af66 	bne.w	800a542 <rmw_init+0x52>
    CLOSE_TRANSPORT(&context_impl->transport);
 800a676:	4640      	mov	r0, r8
 800a678:	f00c fc2a 	bl	8016ed0 <uxr_close_serial_transport>
    return RMW_RET_ERROR;
 800a67c:	e760      	b.n	800a540 <rmw_init+0x50>
  int pseudo_fd = 0;
 800a67e:	462a      	mov	r2, r5
 800a680:	e7a2      	b.n	800a5c8 <rmw_init+0xd8>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(options, RMW_RET_INVALID_ARGUMENT);
 800a682:	250b      	movs	r5, #11
 800a684:	e75d      	b.n	800a542 <rmw_init+0x52>
  RMW_CHECK_TYPE_IDENTIFIERS_MATCH(
 800a686:	250c      	movs	r5, #12
 800a688:	e75b      	b.n	800a542 <rmw_init+0x52>
 800a68a:	bf00      	nop
 800a68c:	0801bb7c 	.word	0x0801bb7c
 800a690:	2000416c 	.word	0x2000416c
 800a694:	20001690 	.word	0x20001690
 800a698:	20004074 	.word	0x20004074
 800a69c:	20004130 	.word	0x20004130
 800a6a0:	20002c48 	.word	0x20002c48
 800a6a4:	20004180 	.word	0x20004180
 800a6a8:	20001430 	.word	0x20001430
 800a6ac:	20004144 	.word	0x20004144
 800a6b0:	20004090 	.word	0x20004090
 800a6b4:	20004158 	.word	0x20004158
 800a6b8:	20001430 	.word	0x20001430
 800a6bc:	20004060 	.word	0x20004060
 800a6c0:	20004194 	.word	0x20004194
 800a6c4:	20004090 	.word	0x20004090
 800a6c8:	0800b179 	.word	0x0800b179
 800a6cc:	0801706d 	.word	0x0801706d
 800a6d0:	0800b1e5 	.word	0x0800b1e5
 800a6d4:	0800b265 	.word	0x0800b265

0800a6d8 <rmw_context_fini>:
rmw_context_fini(rmw_context_t * context)
{
  // TODO(pablogs9): Should we manage not closed XRCE sessions?
  rmw_ret_t ret = RMW_RET_OK;

  rmw_uxrce_mempool_item_t * item = node_memory.allocateditems;
 800a6d8:	4b0f      	ldr	r3, [pc, #60]	; (800a718 <rmw_context_fini+0x40>)
{
 800a6da:	b570      	push	{r4, r5, r6, lr}
  rmw_uxrce_mempool_item_t * item = node_memory.allocateditems;
 800a6dc:	681d      	ldr	r5, [r3, #0]
{
 800a6de:	4604      	mov	r4, r0
  rmw_ret_t ret = RMW_RET_OK;
 800a6e0:	2600      	movs	r6, #0

  while (item != NULL) {
 800a6e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a6e4:	b96d      	cbnz	r5, 800a702 <rmw_context_fini+0x2a>
    if (custom_node->context == context->impl) {
      ret = rmw_destroy_node(custom_node->rmw_handle);
    }
  }

  uxr_delete_session(&context->impl->session);
 800a6e6:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800a6ea:	f009 fd39 	bl	8014160 <uxr_delete_session>
  rmw_uxrce_fini_session_memory(context->impl);
 800a6ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a6f0:	f7fd fa28 	bl	8007b44 <rmw_uxrce_fini_session_memory>

  CLOSE_TRANSPORT(&context->impl->transport);
 800a6f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a6f6:	3048      	adds	r0, #72	; 0x48
 800a6f8:	f00c fbea 	bl	8016ed0 <uxr_close_serial_transport>

  context->impl = NULL;
 800a6fc:	64a5      	str	r5, [r4, #72]	; 0x48

  return ret;
}
 800a6fe:	4630      	mov	r0, r6
 800a700:	bd70      	pop	{r4, r5, r6, pc}
    item = item->next;
 800a702:	e9d5 5302 	ldrd	r5, r3, [r5, #8]
    if (custom_node->context == context->impl) {
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	4282      	cmp	r2, r0
 800a70a:	d1ea      	bne.n	800a6e2 <rmw_context_fini+0xa>
      ret = rmw_destroy_node(custom_node->rmw_handle);
 800a70c:	6918      	ldr	r0, [r3, #16]
 800a70e:	f000 f8c7 	bl	800a8a0 <rmw_destroy_node>
 800a712:	4606      	mov	r6, r0
 800a714:	e7e5      	b.n	800a6e2 <rmw_context_fini+0xa>
 800a716:	bf00      	nop
 800a718:	20004130 	.word	0x20004130

0800a71c <create_topic>:
create_topic(
  struct rmw_uxrce_node_t * custom_node,
  const char * topic_name,
  const message_type_support_callbacks_t * message_type_support_callbacks,
  const rmw_qos_profile_t * qos_policies)
{
 800a71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a720:	4605      	mov	r5, r0
  rmw_uxrce_topic_t * custom_topic = NULL;
  rmw_uxrce_mempool_item_t * memory_node = get_memory(&topics_memory);
 800a722:	4822      	ldr	r0, [pc, #136]	; (800a7ac <create_topic+0x90>)
{
 800a724:	460f      	mov	r7, r1
 800a726:	4616      	mov	r6, r2
 800a728:	4698      	mov	r8, r3
  rmw_uxrce_mempool_item_t * memory_node = get_memory(&topics_memory);
 800a72a:	f00b fd53 	bl	80161d4 <get_memory>
  if (!memory_node) {
 800a72e:	4604      	mov	r4, r0
 800a730:	b1f8      	cbz	r0, 800a772 <create_topic+0x56>
    RMW_SET_ERROR_MSG("Not available memory node");
    goto fail;
  }

  custom_topic = (rmw_uxrce_topic_t *)memory_node->data;
 800a732:	68c4      	ldr	r4, [r0, #12]

  // Asociate to typesupport
  custom_topic->message_type_support_callbacks = message_type_support_callbacks;

  // Generate topic id
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 800a734:	696a      	ldr	r2, [r5, #20]
  custom_topic->message_type_support_callbacks = message_type_support_callbacks;
 800a736:	6166      	str	r6, [r4, #20]
  custom_topic->sync_with_agent = false;
 800a738:	2300      	movs	r3, #0
 800a73a:	7623      	strb	r3, [r4, #24]
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 800a73c:	f241 53aa 	movw	r3, #5546	; 0x15aa
  custom_topic->owner_node = custom_node;
 800a740:	61e5      	str	r5, [r4, #28]
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 800a742:	5ad0      	ldrh	r0, [r2, r3]

  // Generate request
  uint16_t topic_req = 0;
#ifdef RMW_UXRCE_TRANSPORT_USE_XML
  if (!build_topic_xml(
 800a744:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a7b0 <create_topic+0x94>
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 800a748:	1c41      	adds	r1, r0, #1
 800a74a:	52d1      	strh	r1, [r2, r3]
 800a74c:	2102      	movs	r1, #2
 800a74e:	f009 fad7 	bl	8013d00 <uxr_object_id>
  if (!build_topic_xml(
 800a752:	f44f 7316 	mov.w	r3, #600	; 0x258
  custom_topic->topic_id = uxr_object_id(custom_node->context->id_topic++, UXR_TOPIC_ID);
 800a756:	6120      	str	r0, [r4, #16]
  if (!build_topic_xml(
 800a758:	4631      	mov	r1, r6
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	4642      	mov	r2, r8
 800a75e:	464b      	mov	r3, r9
 800a760:	4638      	mov	r0, r7
 800a762:	f7fd fb0d 	bl	8007d80 <build_topic_xml>
 800a766:	4606      	mov	r6, r0
 800a768:	b938      	cbnz	r0, 800a77a <create_topic+0x5e>
      topic_name, message_type_support_callbacks,
      qos_policies, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer)))
  {
    RMW_SET_ERROR_MSG("failed to generate xml request for subscriber creation");
    rmw_uxrce_fini_topic_memory(custom_topic);
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7fd fa8c 	bl	8007c88 <rmw_uxrce_fini_topic_memory>
    custom_topic = NULL;
 800a770:	4634      	mov	r4, r6
    goto fail;
  }

fail:
  return custom_topic;
}
 800a772:	4620      	mov	r0, r4
 800a774:	b003      	add	sp, #12
 800a776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  topic_req = uxr_buffer_create_topic_xml(
 800a77a:	2304      	movs	r3, #4
    &custom_node->context->session,
 800a77c:	6968      	ldr	r0, [r5, #20]
  topic_req = uxr_buffer_create_topic_xml(
 800a77e:	e9cd 9300 	strd	r9, r3, [sp]
 800a782:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800a786:	69ab      	ldr	r3, [r5, #24]
 800a788:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800a78c:	6922      	ldr	r2, [r4, #16]
 800a78e:	f009 fa35 	bl	8013bfc <uxr_buffer_create_topic_xml>
 800a792:	4601      	mov	r1, r0
  custom_topic->sync_with_agent = run_xrce_session(custom_node->context, topic_req);
 800a794:	6968      	ldr	r0, [r5, #20]
 800a796:	f008 fe4c 	bl	8013432 <run_xrce_session>
 800a79a:	4605      	mov	r5, r0
 800a79c:	7620      	strb	r0, [r4, #24]
  if (!custom_topic->sync_with_agent) {
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	d1e7      	bne.n	800a772 <create_topic+0x56>
    rmw_uxrce_fini_topic_memory(custom_topic);
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f7fd fa70 	bl	8007c88 <rmw_uxrce_fini_topic_memory>
    custom_topic = NULL;
 800a7a8:	462c      	mov	r4, r5
  return custom_topic;
 800a7aa:	e7e2      	b.n	800a772 <create_topic+0x56>
 800a7ac:	20004194 	.word	0x20004194
 800a7b0:	20004e1c 	.word	0x20004e1c

0800a7b4 <create_node>:
#include "./utils.h"

rmw_node_t * create_node(
  const char * name, const char * namespace_, size_t domain_id,
  const rmw_context_t * context)
{
 800a7b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	4688      	mov	r8, r1
 800a7bc:	4691      	mov	r9, r2
  rmw_node_t * node_handle = NULL;

  if (!context) {
 800a7be:	461c      	mov	r4, r3
 800a7c0:	b923      	cbnz	r3, 800a7cc <create_node+0x18>
    RMW_SET_ERROR_MSG("context is null");
    return NULL;
 800a7c2:	2400      	movs	r4, #0
  if (node_handle != NULL) {
    rmw_uxrce_fini_node_memory(node_handle);
  }
  node_handle = NULL;
  return node_handle;
}
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	b003      	add	sp, #12
 800a7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  rmw_uxrce_mempool_item_t * memory_node = get_memory(&node_memory);
 800a7cc:	4832      	ldr	r0, [pc, #200]	; (800a898 <create_node+0xe4>)
 800a7ce:	f00b fd01 	bl	80161d4 <get_memory>
  if (!memory_node) {
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0f5      	beq.n	800a7c2 <create_node+0xe>
  rmw_uxrce_node_t * node_info = (rmw_uxrce_node_t *)memory_node->data;
 800a7d6:	68c5      	ldr	r5, [r0, #12]
  node_info->context = context->impl;
 800a7d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a7da:	616b      	str	r3, [r5, #20]
  node_handle = rmw_node_allocate();
 800a7dc:	f00b fcb4 	bl	8016148 <rmw_node_allocate>
  if (!node_handle) {
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d0ed      	beq.n	800a7c2 <create_node+0xe>
  node_info->rmw_handle = node_handle;
 800a7e6:	6128      	str	r0, [r5, #16]
  node_handle->implementation_identifier = rmw_get_implementation_identifier();
 800a7e8:	f7ff fdde 	bl	800a3a8 <rmw_get_implementation_identifier>
  node_handle->data = node_info;
 800a7ec:	e9c4 0500 	strd	r0, r5, [r4]
  node_handle->name = (const char *)(rmw_allocate(sizeof(char) * (strlen(name) + 1)));
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7f5 fce5 	bl	80001c0 <strlen>
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	f00b fc86 	bl	8016108 <rmw_allocate>
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	60a0      	str	r0, [r4, #8]
  if (!node_handle->name) {
 800a800:	b918      	cbnz	r0, 800a80a <create_node+0x56>
    rmw_uxrce_fini_node_memory(node_handle);
 800a802:	4620      	mov	r0, r4
 800a804:	f7fd f9a4 	bl	8007b50 <rmw_uxrce_fini_node_memory>
    return NULL;
 800a808:	e7db      	b.n	800a7c2 <create_node+0xe>
  memcpy((char *)node_handle->name, name, strlen(name) + 1);
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7f5 fcd8 	bl	80001c0 <strlen>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a810:	4631      	mov	r1, r6
 800a812:	1c42      	adds	r2, r0, #1
 800a814:	4638      	mov	r0, r7
 800a816:	f7f6 ffc3 	bl	80017a0 <memcpy>
  node_handle->namespace_ = rmw_allocate(sizeof(char) * (strlen(namespace_) + 1));
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7f5 fcd0 	bl	80001c0 <strlen>
 800a820:	3001      	adds	r0, #1
 800a822:	f00b fc71 	bl	8016108 <rmw_allocate>
 800a826:	4607      	mov	r7, r0
 800a828:	60e0      	str	r0, [r4, #12]
  if (!node_handle->namespace_) {
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0e9      	beq.n	800a802 <create_node+0x4e>
  memcpy((char *)node_handle->namespace_, namespace_, strlen(namespace_) + 1);
 800a82e:	4640      	mov	r0, r8
 800a830:	f7f5 fcc6 	bl	80001c0 <strlen>
 800a834:	4641      	mov	r1, r8
 800a836:	1c42      	adds	r2, r0, #1
 800a838:	4638      	mov	r0, r7
 800a83a:	f7f6 ffb1 	bl	80017a0 <memcpy>
    uxr_object_id(node_info->context->id_participant++, UXR_PARTICIPANT_ID);
 800a83e:	696a      	ldr	r2, [r5, #20]
  if (!build_participant_xml(domain_id, name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 800a840:	4f16      	ldr	r7, [pc, #88]	; (800a89c <create_node+0xe8>)
    uxr_object_id(node_info->context->id_participant++, UXR_PARTICIPANT_ID);
 800a842:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800a846:	5ad0      	ldrh	r0, [r2, r3]
 800a848:	1c41      	adds	r1, r0, #1
 800a84a:	52d1      	strh	r1, [r2, r3]
 800a84c:	2101      	movs	r1, #1
 800a84e:	f009 fa57 	bl	8013d00 <uxr_object_id>
  if (!build_participant_xml(domain_id, name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 800a852:	f44f 7316 	mov.w	r3, #600	; 0x258
    uxr_object_id(node_info->context->id_participant++, UXR_PARTICIPANT_ID);
 800a856:	61a8      	str	r0, [r5, #24]
  if (!build_participant_xml(domain_id, name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 800a858:	463a      	mov	r2, r7
 800a85a:	4631      	mov	r1, r6
 800a85c:	4648      	mov	r0, r9
 800a85e:	f7fd fa19 	bl	8007c94 <build_participant_xml>
 800a862:	2800      	cmp	r0, #0
 800a864:	d0ad      	beq.n	800a7c2 <create_node+0xe>
    uxr_buffer_create_participant_xml(
 800a866:	2304      	movs	r3, #4
    &node_info->context->session,
 800a868:	6968      	ldr	r0, [r5, #20]
    uxr_buffer_create_participant_xml(
 800a86a:	e9cd 7300 	strd	r7, r3, [sp]
 800a86e:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800a872:	69aa      	ldr	r2, [r5, #24]
 800a874:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800a878:	fa1f f389 	uxth.w	r3, r9
 800a87c:	f009 f9ab 	bl	8013bd6 <uxr_buffer_create_participant_xml>
 800a880:	4601      	mov	r1, r0
  if (!run_xrce_session(node_info->context, participant_req)) 
 800a882:	6968      	ldr	r0, [r5, #20]
 800a884:	f008 fdd5 	bl	8013432 <run_xrce_session>
 800a888:	4605      	mov	r5, r0
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d19a      	bne.n	800a7c4 <create_node+0x10>
    rmw_uxrce_fini_node_memory(node_handle);
 800a88e:	4620      	mov	r0, r4
 800a890:	f7fd f95e 	bl	8007b50 <rmw_uxrce_fini_node_memory>
    return NULL;
 800a894:	462c      	mov	r4, r5
 800a896:	e795      	b.n	800a7c4 <create_node+0x10>
 800a898:	20004130 	.word	0x20004130
 800a89c:	20004e1c 	.word	0x20004e1c

0800a8a0 <rmw_destroy_node>:
  }
  return rmw_node;
}

rmw_ret_t rmw_destroy_node(rmw_node_t * node)
{
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  EPROS_PRINT_TRACE()
  rmw_ret_t ret = RMW_RET_OK;
  if (!node) {
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	b910      	cbnz	r0, 800a8ac <rmw_destroy_node+0xc>
    RMW_SET_ERROR_MSG("node handle is null");
    return RMW_RET_ERROR;
 800a8a6:	2401      	movs	r4, #1
  }

  rmw_uxrce_fini_node_memory(node);

  return ret;
}
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 800a8ac:	6800      	ldr	r0, [r0, #0]
 800a8ae:	f008 fde4 	bl	801347a <is_uxrce_rmw_identifier_valid>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0f7      	beq.n	800a8a6 <rmw_destroy_node+0x6>
  if (!node->data) {
 800a8b6:	686e      	ldr	r6, [r5, #4]
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	d0f4      	beq.n	800a8a6 <rmw_destroy_node+0x6>
  item = publisher_memory.allocateditems;
 800a8bc:	4b27      	ldr	r3, [pc, #156]	; (800a95c <rmw_destroy_node+0xbc>)
 800a8be:	681f      	ldr	r7, [r3, #0]
  rmw_ret_t ret = RMW_RET_OK;
 800a8c0:	2400      	movs	r4, #0
  while (item != NULL) {
 800a8c2:	b9df      	cbnz	r7, 800a8fc <rmw_destroy_node+0x5c>
  item = subscription_memory.allocateditems;
 800a8c4:	4b26      	ldr	r3, [pc, #152]	; (800a960 <rmw_destroy_node+0xc0>)
 800a8c6:	681f      	ldr	r7, [r3, #0]
  while (item != NULL) {
 800a8c8:	bb27      	cbnz	r7, 800a914 <rmw_destroy_node+0x74>
  item = service_memory.allocateditems;
 800a8ca:	4b26      	ldr	r3, [pc, #152]	; (800a964 <rmw_destroy_node+0xc4>)
 800a8cc:	681f      	ldr	r7, [r3, #0]
  while (item != NULL) {
 800a8ce:	bb6f      	cbnz	r7, 800a92c <rmw_destroy_node+0x8c>
  item = client_memory.allocateditems;
 800a8d0:	4b25      	ldr	r3, [pc, #148]	; (800a968 <rmw_destroy_node+0xc8>)
 800a8d2:	681f      	ldr	r7, [r3, #0]
  while (item != NULL) {
 800a8d4:	bbb7      	cbnz	r7, 800a944 <rmw_destroy_node+0xa4>
  uint16_t delete_participant = uxr_buffer_delete_entity(
 800a8d6:	e9d6 0205 	ldrd	r0, r2, [r6, #20]
 800a8da:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 800a8de:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800a8e2:	f009 f91b 	bl	8013b1c <uxr_buffer_delete_entity>
 800a8e6:	4601      	mov	r1, r0
  if (!run_xrce_session(custom_node->context, delete_participant))
 800a8e8:	6970      	ldr	r0, [r6, #20]
 800a8ea:	f008 fda2 	bl	8013432 <run_xrce_session>
    ret = RMW_RET_ERROR;
 800a8ee:	2800      	cmp	r0, #0
  rmw_uxrce_fini_node_memory(node);
 800a8f0:	4628      	mov	r0, r5
    ret = RMW_RET_ERROR;
 800a8f2:	bf08      	it	eq
 800a8f4:	2401      	moveq	r4, #1
  rmw_uxrce_fini_node_memory(node);
 800a8f6:	f7fd f92b 	bl	8007b50 <rmw_uxrce_fini_node_memory>
  return ret;
 800a8fa:	e7d5      	b.n	800a8a8 <rmw_destroy_node+0x8>
    item = item->next;
 800a8fc:	e9d7 7302 	ldrd	r7, r3, [r7, #8]
    if (custom_publisher->owner_node == custom_node) {
 800a900:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a904:	4296      	cmp	r6, r2
 800a906:	d1dc      	bne.n	800a8c2 <rmw_destroy_node+0x22>
      ret = rmw_destroy_publisher(node, custom_publisher->rmw_handle);
 800a908:	6919      	ldr	r1, [r3, #16]
 800a90a:	4628      	mov	r0, r5
 800a90c:	f008 fc74 	bl	80131f8 <rmw_destroy_publisher>
 800a910:	4604      	mov	r4, r0
 800a912:	e7d6      	b.n	800a8c2 <rmw_destroy_node+0x22>
    item = item->next;
 800a914:	e9d7 7302 	ldrd	r7, r3, [r7, #8]
    if (custom_subscription->owner_node == custom_node) {
 800a918:	f8d3 284c 	ldr.w	r2, [r3, #2124]	; 0x84c
 800a91c:	4296      	cmp	r6, r2
 800a91e:	d1d3      	bne.n	800a8c8 <rmw_destroy_node+0x28>
      ret = rmw_destroy_subscription(node, custom_subscription->rmw_handle);
 800a920:	6919      	ldr	r1, [r3, #16]
 800a922:	4628      	mov	r0, r5
 800a924:	f00b fdf1 	bl	801650a <rmw_destroy_subscription>
 800a928:	4604      	mov	r4, r0
 800a92a:	e7cd      	b.n	800a8c8 <rmw_destroy_node+0x28>
    item = item->next;
 800a92c:	e9d7 7302 	ldrd	r7, r3, [r7, #8]
    if (custom_service->owner_node == custom_node) {
 800a930:	f8d3 2a60 	ldr.w	r2, [r3, #2656]	; 0xa60
 800a934:	4296      	cmp	r6, r2
 800a936:	d1ca      	bne.n	800a8ce <rmw_destroy_node+0x2e>
      ret = rmw_destroy_service(node, custom_service->rmw_handle);
 800a938:	6919      	ldr	r1, [r3, #16]
 800a93a:	4628      	mov	r0, r5
 800a93c:	f00b fdb6 	bl	80164ac <rmw_destroy_service>
 800a940:	4604      	mov	r4, r0
 800a942:	e7c4      	b.n	800a8ce <rmw_destroy_node+0x2e>
    item = item->next;
 800a944:	e9d7 7302 	ldrd	r7, r3, [r7, #8]
    if (custom_client->owner_node == custom_node) {
 800a948:	f8d3 2a54 	ldr.w	r2, [r3, #2644]	; 0xa54
 800a94c:	4296      	cmp	r6, r2
 800a94e:	d1c1      	bne.n	800a8d4 <rmw_destroy_node+0x34>
      ret = rmw_destroy_client(node, custom_client->rmw_handle);
 800a950:	6919      	ldr	r1, [r3, #16]
 800a952:	4628      	mov	r0, r5
 800a954:	f00b fc61 	bl	801621a <rmw_destroy_client>
 800a958:	4604      	mov	r4, r0
 800a95a:	e7bb      	b.n	800a8d4 <rmw_destroy_node+0x34>
 800a95c:	20004144 	.word	0x20004144
 800a960:	20004180 	.word	0x20004180
 800a964:	20004158 	.word	0x20004158
 800a968:	20004060 	.word	0x20004060

0800a96c <rmw_create_subscription>:
  const rmw_node_t * node,
  const rosidl_message_type_support_t * type_support,
  const char * topic_name,
  const rmw_qos_profile_t * qos_policies,
  const rmw_subscription_options_t * subscription_options)
{
 800a96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a970:	4689      	mov	r9, r1
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	4617      	mov	r7, r2
 800a976:	4698      	mov	r8, r3
  (void) subscription_options;

  EPROS_PRINT_TRACE()
  rmw_subscription_t * rmw_subscription = NULL;
  if (!node) {
 800a978:	4604      	mov	r4, r0
 800a97a:	b908      	cbnz	r0, 800a980 <rmw_create_subscription+0x14>
  return rmw_subscription;

fail:
  rmw_uxrce_fini_subscription_memory(rmw_subscription);
  rmw_subscription = NULL;
  return rmw_subscription;
 800a97c:	2500      	movs	r5, #0
 800a97e:	e0d3      	b.n	800ab28 <rmw_create_subscription+0x1bc>
  } else if (!type_support) {
 800a980:	2900      	cmp	r1, #0
 800a982:	d0fb      	beq.n	800a97c <rmw_create_subscription+0x10>
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 800a984:	6800      	ldr	r0, [r0, #0]
 800a986:	f008 fd78 	bl	801347a <is_uxrce_rmw_identifier_valid>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0f6      	beq.n	800a97c <rmw_create_subscription+0x10>
  } else if (!topic_name || strlen(topic_name) == 0) {
 800a98e:	2f00      	cmp	r7, #0
 800a990:	d0f4      	beq.n	800a97c <rmw_create_subscription+0x10>
 800a992:	4638      	mov	r0, r7
 800a994:	f7f5 fc14 	bl	80001c0 <strlen>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d0ef      	beq.n	800a97c <rmw_create_subscription+0x10>
  } else if (!qos_policies) {
 800a99c:	f1b8 0f00 	cmp.w	r8, #0
 800a9a0:	d0ec      	beq.n	800a97c <rmw_create_subscription+0x10>
    rmw_subscription = (rmw_subscription_t *)rmw_allocate(
 800a9a2:	2018      	movs	r0, #24
 800a9a4:	f00b fbb0 	bl	8016108 <rmw_allocate>
    rmw_subscription->data = NULL;
 800a9a8:	f04f 0a00 	mov.w	sl, #0
 800a9ac:	f8c0 a004 	str.w	sl, [r0, #4]
    rmw_subscription = (rmw_subscription_t *)rmw_allocate(
 800a9b0:	4605      	mov	r5, r0
    rmw_subscription->implementation_identifier = rmw_get_implementation_identifier();
 800a9b2:	f7ff fcf9 	bl	800a3a8 <rmw_get_implementation_identifier>
 800a9b6:	6028      	str	r0, [r5, #0]
      (const char *)(rmw_allocate(sizeof(char) * (strlen(topic_name) + 1)));
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f7f5 fc01 	bl	80001c0 <strlen>
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f00b fba2 	bl	8016108 <rmw_allocate>
    rmw_subscription->topic_name =
 800a9c4:	60a8      	str	r0, [r5, #8]
    if (!rmw_subscription->topic_name) {
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	d066      	beq.n	800aa98 <rmw_create_subscription+0x12c>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f001 ff68 	bl	800c8a0 <strcpy>
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&subscription_memory);
 800a9d0:	4857      	ldr	r0, [pc, #348]	; (800ab30 <rmw_create_subscription+0x1c4>)
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 800a9d2:	6866      	ldr	r6, [r4, #4]
    rmw_uxrce_mempool_item_t * memory_node = get_memory(&subscription_memory);
 800a9d4:	f00b fbfe 	bl	80161d4 <get_memory>
    if (!memory_node) {
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d05d      	beq.n	800aa98 <rmw_create_subscription+0x12c>
    rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)memory_node->data;
 800a9dc:	68c4      	ldr	r4, [r0, #12]
    custom_subscription->rmw_handle = rmw_subscription;
 800a9de:	6125      	str	r5, [r4, #16]
    custom_subscription->owner_node = custom_node;
 800a9e0:	f8c4 684c 	str.w	r6, [r4, #2124]	; 0x84c
      rmw_get_implementation_identifier();
 800a9e4:	f7ff fce0 	bl	800a3a8 <rmw_get_implementation_identifier>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a9e8:	4641      	mov	r1, r8
    custom_subscription->subscription_gid.implementation_identifier =
 800a9ea:	61e0      	str	r0, [r4, #28]
    custom_subscription->micro_buffer_in_use = false;
 800a9ec:	f884 a842 	strb.w	sl, [r4, #2114]	; 0x842
 800a9f0:	2250      	movs	r2, #80	; 0x50
 800a9f2:	f504 6005 	add.w	r0, r4, #2128	; 0x850
 800a9f6:	f7f6 fed3 	bl	80017a0 <memcpy>
    type_support_xrce = get_message_typesupport_handle(
 800a9fa:	494e      	ldr	r1, [pc, #312]	; (800ab34 <rmw_create_subscription+0x1c8>)
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	f7fd fa6f 	bl	8007ee0 <get_message_typesupport_handle>
    if (NULL == type_support_xrce) {
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d048      	beq.n	800aa98 <rmw_create_subscription+0x12c>
      (const message_type_support_callbacks_t *)type_support_xrce->data;
 800aa06:	f8d0 9004 	ldr.w	r9, [r0, #4]
    custom_subscription->type_support_callbacks =
 800aa0a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    if (custom_subscription->type_support_callbacks == NULL) {
 800aa0e:	f1b9 0f00 	cmp.w	r9, #0
 800aa12:	d041      	beq.n	800aa98 <rmw_create_subscription+0x12c>
__ssp_bos_icheck3(memset, void *, int)
 800aa14:	2218      	movs	r2, #24
 800aa16:	4651      	mov	r1, sl
 800aa18:	f104 0020 	add.w	r0, r4, #32
 800aa1c:	f00c ff2a 	bl	8017874 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800aa20:	6963      	ldr	r3, [r4, #20]
 800aa22:	6223      	str	r3, [r4, #32]
    custom_subscription->topic = create_topic(
 800aa24:	464a      	mov	r2, r9
 800aa26:	4643      	mov	r3, r8
 800aa28:	4639      	mov	r1, r7
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	f7ff fe76 	bl	800a71c <create_topic>
 800aa30:	f8c4 0848 	str.w	r0, [r4, #2120]	; 0x848
    if (custom_subscription->topic == NULL) {
 800aa34:	b380      	cbz	r0, 800aa98 <rmw_create_subscription+0x12c>
      custom_node->context->id_subscriber++,
 800aa36:	6972      	ldr	r2, [r6, #20]
    if (!build_subscriber_xml(subscriber_name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 800aa38:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800ab38 <rmw_create_subscription+0x1cc>
      custom_node->context->id_subscriber++,
 800aa3c:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800aa40:	5ad0      	ldrh	r0, [r2, r3]
    custom_subscription->subscriber_id = uxr_object_id(
 800aa42:	1c41      	adds	r1, r0, #1
 800aa44:	52d1      	strh	r1, [r2, r3]
 800aa46:	2104      	movs	r1, #4
 800aa48:	f009 f95a 	bl	8013d00 <uxr_object_id>
 800aa4c:	4623      	mov	r3, r4
    generate_name(&custom_subscription->subscriber_id, subscriber_name, sizeof(subscriber_name));
 800aa4e:	2214      	movs	r2, #20
    custom_subscription->subscriber_id = uxr_object_id(
 800aa50:	f843 0f14 	str.w	r0, [r3, #20]!
    generate_name(&custom_subscription->subscriber_id, subscriber_name, sizeof(subscriber_name));
 800aa54:	eb0d 0102 	add.w	r1, sp, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fd f92b 	bl	8007cb4 <generate_name>
    if (!build_subscriber_xml(subscriber_name, rmw_uxrce_xml_buffer, sizeof(rmw_uxrce_xml_buffer))) {
 800aa5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa62:	4649      	mov	r1, r9
 800aa64:	a805      	add	r0, sp, #20
 800aa66:	f008 fd04 	bl	8013472 <build_subscriber_xml>
 800aa6a:	b1a8      	cbz	r0, 800aa98 <rmw_create_subscription+0x12c>
    subscriber_req = uxr_buffer_create_subscriber_xml(
 800aa6c:	f04f 0a04 	mov.w	sl, #4
      &custom_node->context->session,
 800aa70:	6970      	ldr	r0, [r6, #20]
    subscriber_req = uxr_buffer_create_subscriber_xml(
 800aa72:	e9cd 9a00 	strd	r9, sl, [sp]
 800aa76:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800aa7a:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800aa7e:	69b3      	ldr	r3, [r6, #24]
 800aa80:	6962      	ldr	r2, [r4, #20]
 800aa82:	f009 f8ef 	bl	8013c64 <uxr_buffer_create_subscriber_xml>
 800aa86:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, subscriber_req))
 800aa88:	6970      	ldr	r0, [r6, #20]
 800aa8a:	f008 fcd2 	bl	8013432 <run_xrce_session>
 800aa8e:	b938      	cbnz	r0, 800aaa0 <rmw_create_subscription+0x134>
      put_memory(&subscription_memory, &custom_subscription->mem);
 800aa90:	4827      	ldr	r0, [pc, #156]	; (800ab30 <rmw_create_subscription+0x1c4>)
 800aa92:	4621      	mov	r1, r4
 800aa94:	f00b fbae 	bl	80161f4 <put_memory>
  rmw_uxrce_fini_subscription_memory(rmw_subscription);
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7fd f89b 	bl	8007bd4 <rmw_uxrce_fini_subscription_memory>
 800aa9e:	e76d      	b.n	800a97c <rmw_create_subscription+0x10>
      custom_node->context->id_datareader++,
 800aaa0:	6972      	ldr	r2, [r6, #20]
 800aaa2:	f241 53b2 	movw	r3, #5554	; 0x15b2
 800aaa6:	5ad0      	ldrh	r0, [r2, r3]
    custom_subscription->datareader_id = uxr_object_id(
 800aaa8:	1c41      	adds	r1, r0, #1
 800aaaa:	52d1      	strh	r1, [r2, r3]
 800aaac:	2106      	movs	r1, #6
 800aaae:	f009 f927 	bl	8013d00 <uxr_object_id>
    if (!build_datareader_xml(
 800aab2:	f44f 7316 	mov.w	r3, #600	; 0x258
    custom_subscription->datareader_id = uxr_object_id(
 800aab6:	61a0      	str	r0, [r4, #24]
    if (!build_datareader_xml(
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aabc:	464b      	mov	r3, r9
 800aabe:	4642      	mov	r2, r8
 800aac0:	4638      	mov	r0, r7
 800aac2:	f7fd f9ff 	bl	8007ec4 <build_datareader_xml>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d0e6      	beq.n	800aa98 <rmw_create_subscription+0x12c>
      &custom_node->context->session,
 800aaca:	6970      	ldr	r0, [r6, #20]
    datareader_req = uxr_buffer_create_datareader_xml(
 800aacc:	e9cd 9a00 	strd	r9, sl, [sp]
 800aad0:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800aad4:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 800aad8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 800aadc:	f009 f8f6 	bl	8013ccc <uxr_buffer_create_datareader_xml>
 800aae0:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, datareader_req))
 800aae2:	6970      	ldr	r0, [r6, #20]
 800aae4:	f008 fca5 	bl	8013432 <run_xrce_session>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d0d1      	beq.n	800aa90 <rmw_create_subscription+0x124>
    rmw_subscription->data = custom_subscription;
 800aaec:	606c      	str	r4, [r5, #4]
    delivery_control.max_bytes_per_second = UXR_MAX_BYTES_PER_SECOND_UNLIMITED;
 800aaee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    custom_subscription->stream_id =
 800aaf8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800aafc:	6970      	ldr	r0, [r6, #20]
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	bf0c      	ite	eq
 800ab02:	f8d0 33a0 	ldreq.w	r3, [r0, #928]	; 0x3a0
 800ab06:	f8d0 3394 	ldrne.w	r3, [r0, #916]	; 0x394
 800ab0a:	f8c4 38a0 	str.w	r3, [r4, #2208]	; 0x8a0
    custom_subscription->subscription_request = uxr_buffer_request_data(
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 800ab16:	f8d4 38a0 	ldr.w	r3, [r4, #2208]	; 0x8a0
 800ab1a:	69a2      	ldr	r2, [r4, #24]
 800ab1c:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 800ab20:	f00c f8d6 	bl	8016cd0 <uxr_buffer_request_data>
 800ab24:	f8a4 0844 	strh.w	r0, [r4, #2116]	; 0x844
}
 800ab28:	4628      	mov	r0, r5
 800ab2a:	b00a      	add	sp, #40	; 0x28
 800ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab30:	20004180 	.word	0x20004180
 800ab34:	0801d1e7 	.word	0x0801d1e7
 800ab38:	20004e1c 	.word	0x20004e1c

0800ab3c <on_full_input_buffer>:

    return first_unknown;
}

bool on_full_input_buffer(ucdrBuffer* ub, void* args)
{
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	460d      	mov	r5, r1

static inline uint16_t uxr_get_reliable_buffer_history_position(
        uxrReliableStream const * stream,
        uint8_t const * current_position)
{
    return (uint16_t)((size_t)(current_position - stream->buffer) / (stream->size / stream->history));
 800ab42:	6804      	ldr	r4, [r0, #0]
 800ab44:	6809      	ldr	r1, [r1, #0]
 800ab46:	686b      	ldr	r3, [r5, #4]
 800ab48:	1a64      	subs	r4, r4, r1
 800ab4a:	8929      	ldrh	r1, [r5, #8]
 800ab4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab50:	fbb4 f4f3 	udiv	r4, r4, r3
    uxrInputReliableStream* stream = (uxrInputReliableStream*) args;

    uint16_t history_position = (uint16_t)(1 + uxr_get_reliable_buffer_history_position(&stream->base, ub->init));
 800ab54:	3401      	adds	r4, #1
 800ab56:	b2a4      	uxth	r4, r4
    uint8_t * buffer = uxr_get_reliable_buffer(&stream->base, history_position);
 800ab58:	4621      	mov	r1, r4
{
 800ab5a:	4606      	mov	r6, r0
    uint8_t * buffer = uxr_get_reliable_buffer(&stream->base, history_position);
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f00b fe4b 	bl	80167f8 <uxr_get_reliable_buffer>
 800ab62:	4607      	mov	r7, r0
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, history_position);
 800ab64:	4628      	mov	r0, r5
 800ab66:	f00b fe56 	bl	8016816 <uxr_get_reliable_buffer_size>

    if (stream->cleanup_flag)
 800ab6a:	7d2b      	ldrb	r3, [r5, #20]
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, history_position);
 800ab6c:	4680      	mov	r8, r0
    if (stream->cleanup_flag)
 800ab6e:	b123      	cbz	r3, 800ab7a <on_full_input_buffer+0x3e>
    {
        uxr_set_reliable_buffer_size(&stream->base, history_position, 0);
 800ab70:	2200      	movs	r2, #0
 800ab72:	4621      	mov	r1, r4
 800ab74:	4628      	mov	r0, r5
 800ab76:	f00b fe5a 	bl	801682e <uxr_set_reliable_buffer_size>
    }

    ucdr_init_buffer_origin(
 800ab7a:	6933      	ldr	r3, [r6, #16]
 800ab7c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab80:	1d39      	adds	r1, r7, #4
 800ab82:	4630      	mov	r0, r6
 800ab84:	f008 ff3c 	bl	8013a00 <ucdr_init_buffer_origin>
        ub,
        buffer + SUBHEADER_SIZE,
        (uint32_t)(buffer_size - SUBHEADER_SIZE),
        ub->offset);
    ucdr_set_on_full_buffer_callback(ub, on_full_input_buffer, stream);
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4903      	ldr	r1, [pc, #12]	; (800ab98 <on_full_input_buffer+0x5c>)
 800ab8c:	462a      	mov	r2, r5
 800ab8e:	f008 ff18 	bl	80139c2 <ucdr_set_on_full_buffer_callback>

    return false;
}
 800ab92:	2000      	movs	r0, #0
 800ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab98:	0800ab3d 	.word	0x0800ab3d

0800ab9c <uxr_next_input_reliable_buffer_available>:
{
 800ab9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	4604      	mov	r4, r0
 800aba2:	4688      	mov	r8, r1
    uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 800aba4:	8980      	ldrh	r0, [r0, #12]
 800aba6:	2101      	movs	r1, #1
{
 800aba8:	4691      	mov	r9, r2
    uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 800abaa:	f00c f973 	bl	8016e94 <uxr_seq_num_add>
    size_t length = uxr_get_reliable_buffer_size(&stream->base, next);
 800abae:	4601      	mov	r1, r0
    uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 800abb0:	4605      	mov	r5, r0
    size_t length = uxr_get_reliable_buffer_size(&stream->base, next);
 800abb2:	4620      	mov	r0, r4
 800abb4:	f00b fe2f 	bl	8016816 <uxr_get_reliable_buffer_size>
    if(available_to_read)
 800abb8:	4607      	mov	r7, r0
 800abba:	b3a8      	cbz	r0, 800ac28 <uxr_next_input_reliable_buffer_available+0x8c>
    uint8_t* internal_buffer = uxr_get_reliable_buffer(&stream->base, next);
 800abbc:	4629      	mov	r1, r5
 800abbe:	4620      	mov	r0, r4
 800abc0:	f00b fe1a 	bl	80167f8 <uxr_get_reliable_buffer>
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(internal_buffer);
 800abc4:	6923      	ldr	r3, [r4, #16]
    uint8_t* internal_buffer = uxr_get_reliable_buffer(&stream->base, next);
 800abc6:	4682      	mov	sl, r0
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(internal_buffer);
 800abc8:	4798      	blx	r3
        if(NO_FRAGMENTED == fragmentation_info)
 800abca:	4606      	mov	r6, r0
 800abcc:	b978      	cbnz	r0, 800abee <uxr_next_input_reliable_buffer_available+0x52>
            ucdr_init_buffer(ub, internal_buffer, (uint32_t)length);
 800abce:	463a      	mov	r2, r7
 800abd0:	4651      	mov	r1, sl
 800abd2:	4640      	mov	r0, r8
 800abd4:	f008 ff1b 	bl	8013a0e <ucdr_init_buffer>
            uxr_set_reliable_buffer_size(&stream->base, next, 0);
 800abd8:	4632      	mov	r2, r6
 800abda:	4629      	mov	r1, r5
 800abdc:	4620      	mov	r0, r4
 800abde:	f00b fe26 	bl	801682e <uxr_set_reliable_buffer_size>
    bool available_to_read = (0 != length);
 800abe2:	2601      	movs	r6, #1
            stream->last_handled = next;
 800abe4:	81a5      	strh	r5, [r4, #12]
}
 800abe6:	4630      	mov	r0, r6
 800abe8:	b002      	add	sp, #8
 800abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            available_to_read = check_last_fragment(stream, &last);
 800abee:	f10d 0106 	add.w	r1, sp, #6
 800abf2:	4620      	mov	r0, r4
 800abf4:	f00b fe28 	bl	8016848 <check_last_fragment>
            if(available_to_read)
 800abf8:	4606      	mov	r6, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d0f3      	beq.n	800abe6 <uxr_next_input_reliable_buffer_available+0x4a>
                uxr_set_reliable_buffer_size(&stream->base, next, 0);
 800abfe:	2200      	movs	r2, #0
 800ac00:	4629      	mov	r1, r5
 800ac02:	4620      	mov	r0, r4
 800ac04:	f00b fe13 	bl	801682e <uxr_set_reliable_buffer_size>
                ucdr_init_buffer(ub, internal_buffer + fragment_offset, (uint32_t)(length - fragment_offset));
 800ac08:	eba7 0209 	sub.w	r2, r7, r9
 800ac0c:	eb0a 0109 	add.w	r1, sl, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	f008 fefc 	bl	8013a0e <ucdr_init_buffer>
                ucdr_set_on_full_buffer_callback(ub, on_full_input_buffer, stream);
 800ac16:	4905      	ldr	r1, [pc, #20]	; (800ac2c <uxr_next_input_reliable_buffer_available+0x90>)
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	f008 fed1 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
                stream->last_handled = last;
 800ac20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	e7de      	b.n	800abe6 <uxr_next_input_reliable_buffer_available+0x4a>
    bool available_to_read = (0 != length);
 800ac28:	4606      	mov	r6, r0
 800ac2a:	e7dc      	b.n	800abe6 <uxr_next_input_reliable_buffer_available+0x4a>
 800ac2c:	0800ab3d 	.word	0x0800ab3d

0800ac30 <on_full_output_buffer>:

//==================================================================
//                             PRIVATE
//==================================================================
bool on_full_output_buffer(ucdrBuffer* ub, void* args)
{
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	6803      	ldr	r3, [r0, #0]
 800ac34:	460c      	mov	r4, r1
 800ac36:	6809      	ldr	r1, [r1, #0]
 800ac38:	8922      	ldrh	r2, [r4, #8]
 800ac3a:	1a5b      	subs	r3, r3, r1
 800ac3c:	6861      	ldr	r1, [r4, #4]
 800ac3e:	fbb1 f1f2 	udiv	r1, r1, r2
 800ac42:	fbb3 f3f1 	udiv	r3, r3, r1
    uxrOutputReliableStream* stream = (uxrOutputReliableStream*) args;

    uint16_t history_position = (uint16_t)(1 + uxr_get_reliable_buffer_history_position(&stream->base, ub->init));
 800ac46:	3301      	adds	r3, #1
{
 800ac48:	4605      	mov	r5, r0
    uint16_t history_position = (uint16_t)(1 + uxr_get_reliable_buffer_history_position(&stream->base, ub->init));
 800ac4a:	b299      	uxth	r1, r3
    uint8_t* buffer = uxr_get_reliable_buffer(&stream->base, history_position);
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f00b ff17 	bl	8016a80 <uxr_get_reliable_buffer>
 800ac52:	4606      	mov	r6, r0
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, history_position);
 800ac54:	4620      	mov	r0, r4
 800ac56:	f00b ff22 	bl	8016a9e <uxr_get_reliable_buffer_size>

    ucdr_init_buffer_origin(
        ub,
        buffer + stream->offset + SUBHEADER_SIZE,
 800ac5a:	7b21      	ldrb	r1, [r4, #12]
    ucdr_init_buffer_origin(
 800ac5c:	692b      	ldr	r3, [r5, #16]
        (uint32_t)(buffer_size - stream->offset - SUBHEADER_SIZE),
 800ac5e:	1a42      	subs	r2, r0, r1
        buffer + stream->offset + SUBHEADER_SIZE,
 800ac60:	3104      	adds	r1, #4
    ucdr_init_buffer_origin(
 800ac62:	4431      	add	r1, r6
 800ac64:	4628      	mov	r0, r5
 800ac66:	3a04      	subs	r2, #4
 800ac68:	f008 feca 	bl	8013a00 <ucdr_init_buffer_origin>
        ub->offset);
    ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer, stream);
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	4903      	ldr	r1, [pc, #12]	; (800ac7c <on_full_output_buffer+0x4c>)
 800ac70:	4622      	mov	r2, r4
 800ac72:	f008 fea6 	bl	80139c2 <ucdr_set_on_full_buffer_callback>

    return false;
}
 800ac76:	2000      	movs	r0, #0
 800ac78:	bd70      	pop	{r4, r5, r6, pc}
 800ac7a:	bf00      	nop
 800ac7c:	0800ac31 	.word	0x0800ac31

0800ac80 <uxr_prepare_reliable_buffer_to_write>:
{
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uxrSeqNum seq_num = stream->last_written;
 800ac84:	89c5      	ldrh	r5, [r0, #14]
    return stream->size / stream->history - INTERNAL_RELIABLE_BUFFER_OFFSET;
 800ac86:	f8b0 a008 	ldrh.w	sl, [r0, #8]
{
 800ac8a:	b091      	sub	sp, #68	; 0x44
 800ac8c:	468b      	mov	fp, r1
    uint8_t * buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800ac8e:	4629      	mov	r1, r5
{
 800ac90:	4604      	mov	r4, r0
 800ac92:	4691      	mov	r9, r2
 800ac94:	6842      	ldr	r2, [r0, #4]
 800ac96:	fbb2 f3fa 	udiv	r3, r2, sl
 800ac9a:	f1a3 0804 	sub.w	r8, r3, #4
 800ac9e:	9305      	str	r3, [sp, #20]
    uint8_t * buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800aca0:	f00b feee 	bl	8016a80 <uxr_get_reliable_buffer>
 800aca4:	9003      	str	r0, [sp, #12]
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 800aca6:	4620      	mov	r0, r4
 800aca8:	f00b fef9 	bl	8016a9e <uxr_get_reliable_buffer_size>
    if(buffer_size + length <= buffer_capacity)
 800acac:	eb00 060b 	add.w	r6, r0, fp
 800acb0:	4546      	cmp	r6, r8
    size_t buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 800acb2:	4607      	mov	r7, r0
    if(buffer_size + length <= buffer_capacity)
 800acb4:	d81b      	bhi.n	800acee <uxr_prepare_reliable_buffer_to_write+0x6e>
        uxrSeqNum last_available = uxr_seq_num_add(stream->last_acknown, stream->base.history);
 800acb6:	4651      	mov	r1, sl
 800acb8:	8a60      	ldrh	r0, [r4, #18]
 800acba:	f00c f8eb 	bl	8016e94 <uxr_seq_num_add>
 800acbe:	4601      	mov	r1, r0
        available_to_write = (0 >= uxr_seq_num_cmp(seq_num, last_available));
 800acc0:	4628      	mov	r0, r5
 800acc2:	f00c f8ed 	bl	8016ea0 <uxr_seq_num_cmp>
        if(available_to_write)
 800acc6:	2800      	cmp	r0, #0
 800acc8:	dd03      	ble.n	800acd2 <uxr_prepare_reliable_buffer_to_write+0x52>
        available_to_write = (0 >= uxr_seq_num_cmp(seq_num, last_available));
 800acca:	2000      	movs	r0, #0
}
 800accc:	b011      	add	sp, #68	; 0x44
 800acce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uxr_set_reliable_buffer_size(&stream->base, seq_num, final_buffer_size);
 800acd2:	4632      	mov	r2, r6
 800acd4:	4629      	mov	r1, r5
 800acd6:	4620      	mov	r0, r4
 800acd8:	f00b feed 	bl	8016ab6 <uxr_set_reliable_buffer_size>
            ucdr_init_buffer_origin_offset(ub, buffer, (uint32_t)final_buffer_size, 0u, (uint32_t)buffer_size);
 800acdc:	9903      	ldr	r1, [sp, #12]
 800acde:	9700      	str	r7, [sp, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	4632      	mov	r2, r6
 800ace4:	4648      	mov	r0, r9
 800ace6:	f008 fe82 	bl	80139ee <ucdr_init_buffer_origin_offset>
        available_to_write = necessary_blocks <= remaining_blocks;
 800acea:	2001      	movs	r0, #1
 800acec:	e7ee      	b.n	800accc <uxr_prepare_reliable_buffer_to_write+0x4c>
    else if(stream->offset + length <= buffer_capacity)
 800acee:	7b23      	ldrb	r3, [r4, #12]
 800acf0:	445b      	add	r3, fp
 800acf2:	4543      	cmp	r3, r8
 800acf4:	d823      	bhi.n	800ad3e <uxr_prepare_reliable_buffer_to_write+0xbe>
        seq_num = uxr_seq_num_add(stream->last_written, 1);
 800acf6:	2101      	movs	r1, #1
 800acf8:	4628      	mov	r0, r5
 800acfa:	f00c f8cb 	bl	8016e94 <uxr_seq_num_add>
        uxrSeqNum last_available = uxr_seq_num_add(stream->last_acknown, stream->base.history);
 800acfe:	8921      	ldrh	r1, [r4, #8]
        seq_num = uxr_seq_num_add(stream->last_written, 1);
 800ad00:	4605      	mov	r5, r0
        uxrSeqNum last_available = uxr_seq_num_add(stream->last_acknown, stream->base.history);
 800ad02:	8a60      	ldrh	r0, [r4, #18]
 800ad04:	f00c f8c6 	bl	8016e94 <uxr_seq_num_add>
 800ad08:	4601      	mov	r1, r0
        available_to_write = (0 >= uxr_seq_num_cmp(seq_num, last_available));
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f00c f8c8 	bl	8016ea0 <uxr_seq_num_cmp>
        if(available_to_write)
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dcda      	bgt.n	800acca <uxr_prepare_reliable_buffer_to_write+0x4a>
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800ad14:	4629      	mov	r1, r5
 800ad16:	4620      	mov	r0, r4
 800ad18:	f00b feb2 	bl	8016a80 <uxr_get_reliable_buffer>
            size_t final_buffer_size = stream->offset + length;
 800ad1c:	7b22      	ldrb	r2, [r4, #12]
 800ad1e:	4493      	add	fp, r2
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800ad20:	4606      	mov	r6, r0
            uxr_set_reliable_buffer_size(&stream->base, seq_num, final_buffer_size);
 800ad22:	465a      	mov	r2, fp
 800ad24:	4620      	mov	r0, r4
 800ad26:	f00b fec6 	bl	8016ab6 <uxr_set_reliable_buffer_size>
            ucdr_init_buffer_origin_offset(ub, buffer, (uint32_t)final_buffer_size, 0u, stream->offset);
 800ad2a:	7b23      	ldrb	r3, [r4, #12]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	465a      	mov	r2, fp
 800ad30:	2300      	movs	r3, #0
 800ad32:	4631      	mov	r1, r6
 800ad34:	4648      	mov	r0, r9
 800ad36:	f008 fe5a 	bl	80139ee <ucdr_init_buffer_origin_offset>
            stream->last_written = seq_num;
 800ad3a:	81e5      	strh	r5, [r4, #14]
 800ad3c:	e7d5      	b.n	800acea <uxr_prepare_reliable_buffer_to_write+0x6a>
        if(buffer_size + (size_t)SUBHEADER_SIZE >= buffer_capacity)
 800ad3e:	1d03      	adds	r3, r0, #4
 800ad40:	4543      	cmp	r3, r8
 800ad42:	d30d      	bcc.n	800ad60 <uxr_prepare_reliable_buffer_to_write+0xe0>
            seq_num = uxr_seq_num_add(seq_num, 1);
 800ad44:	2101      	movs	r1, #1
 800ad46:	4628      	mov	r0, r5
 800ad48:	f00c f8a4 	bl	8016e94 <uxr_seq_num_add>
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800ad4c:	4601      	mov	r1, r0
            seq_num = uxr_seq_num_add(seq_num, 1);
 800ad4e:	4605      	mov	r5, r0
            buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 800ad50:	4620      	mov	r0, r4
 800ad52:	f00b fe95 	bl	8016a80 <uxr_get_reliable_buffer>
 800ad56:	9003      	str	r0, [sp, #12]
            buffer_size = uxr_get_reliable_buffer_size(&stream->base, seq_num);
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f00b fea0 	bl	8016a9e <uxr_get_reliable_buffer_size>
 800ad5e:	4607      	mov	r7, r0
        size_t used_blocks = uxr_seq_num_sub(seq_num, stream->last_acknown);
 800ad60:	8a61      	ldrh	r1, [r4, #18]
 800ad62:	4628      	mov	r0, r5
 800ad64:	f00c f899 	bl	8016e9a <uxr_seq_num_sub>
        used_blocks = (used_blocks == 0) ? 0 : used_blocks - 1;
 800ad68:	b100      	cbz	r0, 800ad6c <uxr_prepare_reliable_buffer_to_write+0xec>
 800ad6a:	3801      	subs	r0, #1
        size_t remaining_blocks = stream->base.history - used_blocks;
 800ad6c:	8923      	ldrh	r3, [r4, #8]
 800ad6e:	1a18      	subs	r0, r3, r0
        uint16_t available_block_size = (uint16_t)(buffer_capacity - (uint16_t)(stream->offset + SUBHEADER_SIZE));
 800ad70:	7b23      	ldrb	r3, [r4, #12]
 800ad72:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800ad76:	33fc      	adds	r3, #252	; 0xfc
 800ad78:	fa13 f388 	uxtah	r3, r3, r8
 800ad7c:	f1a8 0104 	sub.w	r1, r8, #4
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	b289      	uxth	r1, r1
 800ad84:	9302      	str	r3, [sp, #8]
        uint16_t first_fragment_size = (uint16_t)(buffer_capacity - (uint16_t)(buffer_size + SUBHEADER_SIZE));
 800ad86:	b2be      	uxth	r6, r7
        uint16_t remaining_size = (uint16_t)(length - first_fragment_size);
 800ad88:	ebab 0b01 	sub.w	fp, fp, r1
        if (0 == (remaining_size % available_block_size))
 800ad8c:	9a02      	ldr	r2, [sp, #8]
        uint16_t first_fragment_size = (uint16_t)(buffer_capacity - (uint16_t)(buffer_size + SUBHEADER_SIZE));
 800ad8e:	eba1 0a06 	sub.w	sl, r1, r6
        uint16_t remaining_size = (uint16_t)(length - first_fragment_size);
 800ad92:	445e      	add	r6, fp
 800ad94:	b2b6      	uxth	r6, r6
        uint16_t first_fragment_size = (uint16_t)(buffer_capacity - (uint16_t)(buffer_size + SUBHEADER_SIZE));
 800ad96:	fa1f fa8a 	uxth.w	sl, sl
        if (0 == (remaining_size % available_block_size))
 800ad9a:	fbb6 f3f3 	udiv	r3, r6, r3
 800ad9e:	fb02 6613 	mls	r6, r2, r3, r6
 800ada2:	b2b6      	uxth	r6, r6
 800ada4:	f1ba 0200 	subs.w	r2, sl, #0
 800ada8:	bf18      	it	ne
 800adaa:	2201      	movne	r2, #1
 800adac:	b21b      	sxth	r3, r3
 800adae:	b94e      	cbnz	r6, 800adc4 <uxr_prepare_reliable_buffer_to_write+0x144>
            necessary_blocks = (uint16_t)((0 < first_fragment_size) + (remaining_size / available_block_size));
 800adb0:	4413      	add	r3, r2
            last_fragment_size = available_block_size;
 800adb2:	9e02      	ldr	r6, [sp, #8]
            necessary_blocks = (uint16_t)((0 < first_fragment_size) + (remaining_size / available_block_size));
 800adb4:	b29b      	uxth	r3, r3
        if(available_to_write)
 800adb6:	4283      	cmp	r3, r0
 800adb8:	d887      	bhi.n	800acca <uxr_prepare_reliable_buffer_to_write+0x4a>
 800adba:	2200      	movs	r2, #0
            for(uint16_t i = 0; i < necessary_blocks - 1; i++)
 800adbc:	3b01      	subs	r3, #1
 800adbe:	9204      	str	r2, [sp, #16]
 800adc0:	9306      	str	r3, [sp, #24]
 800adc2:	e017      	b.n	800adf4 <uxr_prepare_reliable_buffer_to_write+0x174>
            necessary_blocks = (uint16_t)((0 < first_fragment_size) + (remaining_size / available_block_size) + 1);
 800adc4:	3201      	adds	r2, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	b29b      	uxth	r3, r3
 800adca:	e7f4      	b.n	800adb6 <uxr_prepare_reliable_buffer_to_write+0x136>
                ucdr_init_buffer_origin_offset(
 800adcc:	f008 fe0f 	bl	80139ee <ucdr_init_buffer_origin_offset>
                uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, fragment_size, 0);
 800add0:	2300      	movs	r3, #0
 800add2:	4652      	mov	r2, sl
 800add4:	210d      	movs	r1, #13
 800add6:	a808      	add	r0, sp, #32
 800add8:	f009 fcda 	bl	8014790 <uxr_buffer_submessage_header>
                uxr_set_reliable_buffer_size(&stream->base, seq_num, buffer_capacity);
 800addc:	4629      	mov	r1, r5
 800adde:	4642      	mov	r2, r8
 800ade0:	4620      	mov	r0, r4
 800ade2:	f00b fe68 	bl	8016ab6 <uxr_set_reliable_buffer_size>
                seq_num = uxr_seq_num_add(seq_num, 1);
 800ade6:	4628      	mov	r0, r5
 800ade8:	2101      	movs	r1, #1
 800adea:	f00c f853 	bl	8016e94 <uxr_seq_num_add>
                fragment_size = available_block_size;
 800adee:	f8dd a008 	ldr.w	sl, [sp, #8]
                seq_num = uxr_seq_num_add(seq_num, 1);
 800adf2:	4605      	mov	r5, r0
            for(uint16_t i = 0; i < necessary_blocks - 1; i++)
 800adf4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800adf8:	9307      	str	r3, [sp, #28]
 800adfa:	4629      	mov	r1, r5
 800adfc:	4620      	mov	r0, r4
 800adfe:	f00b fe3f 	bl	8016a80 <uxr_get_reliable_buffer>
 800ae02:	4683      	mov	fp, r0
 800ae04:	4620      	mov	r0, r4
 800ae06:	f00b fe4a 	bl	8016a9e <uxr_get_reliable_buffer_size>
 800ae0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	9b04      	ldr	r3, [sp, #16]
                ucdr_init_buffer_origin_offset(
 800ae12:	9000      	str	r0, [sp, #0]
            for(uint16_t i = 0; i < necessary_blocks - 1; i++)
 800ae14:	f103 0301 	add.w	r3, r3, #1
 800ae18:	9304      	str	r3, [sp, #16]
                ucdr_init_buffer_origin_offset(
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	f04f 0300 	mov.w	r3, #0
 800ae20:	4659      	mov	r1, fp
 800ae22:	a808      	add	r0, sp, #32
            for(uint16_t i = 0; i < necessary_blocks - 1; i++)
 800ae24:	dbd2      	blt.n	800adcc <uxr_prepare_reliable_buffer_to_write+0x14c>
            ucdr_init_buffer_origin_offset(
 800ae26:	f008 fde2 	bl	80139ee <ucdr_init_buffer_origin_offset>
            uxr_buffer_submessage_header(&temp_ub, SUBMESSAGE_ID_FRAGMENT, last_fragment_size, FLAG_LAST_FRAGMENT);
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	210d      	movs	r1, #13
 800ae30:	a808      	add	r0, sp, #32
 800ae32:	f009 fcad 	bl	8014790 <uxr_buffer_submessage_header>
            uxr_set_reliable_buffer_size(&stream->base, seq_num, stream->offset + (size_t)(SUBHEADER_SIZE) + last_fragment_size);
 800ae36:	7b22      	ldrb	r2, [r4, #12]
 800ae38:	3204      	adds	r2, #4
 800ae3a:	4432      	add	r2, r6
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f00b fe39 	bl	8016ab6 <uxr_set_reliable_buffer_size>
                (uint32_t)(buffer_capacity - buffer_size - SUBHEADER_SIZE));
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	f1a3 0208 	sub.w	r2, r3, #8
            ucdr_init_buffer(
 800ae4a:	9b03      	ldr	r3, [sp, #12]
                buffer + buffer_size + SUBHEADER_SIZE,
 800ae4c:	1d39      	adds	r1, r7, #4
            ucdr_init_buffer(
 800ae4e:	440b      	add	r3, r1
 800ae50:	1bd2      	subs	r2, r2, r7
 800ae52:	4619      	mov	r1, r3
 800ae54:	4648      	mov	r0, r9
 800ae56:	f008 fdda 	bl	8013a0e <ucdr_init_buffer>
            ucdr_set_on_full_buffer_callback(ub, on_full_output_buffer, stream);
 800ae5a:	4903      	ldr	r1, [pc, #12]	; (800ae68 <uxr_prepare_reliable_buffer_to_write+0x1e8>)
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4648      	mov	r0, r9
 800ae60:	f008 fdaf 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
 800ae64:	e769      	b.n	800ad3a <uxr_prepare_reliable_buffer_to_write+0xba>
 800ae66:	bf00      	nop
 800ae68:	0800ac31 	.word	0x0800ac31

0800ae6c <get_serial_error>:
}

static uint8_t get_serial_error(void)
{
    return error_code;
}
 800ae6c:	4b01      	ldr	r3, [pc, #4]	; (800ae74 <get_serial_error+0x8>)
 800ae6e:	7818      	ldrb	r0, [r3, #0]
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	2000518b 	.word	0x2000518b

0800ae78 <recv_serial_msg>:
{
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        bytes_read = uxr_read_serial_msg(&transport->serial_io,
 800ae7c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800aefc <recv_serial_msg+0x84>
{
 800ae80:	b089      	sub	sp, #36	; 0x24
 800ae82:	4604      	mov	r4, r0
 800ae84:	468b      	mov	fp, r1
 800ae86:	4617      	mov	r7, r2
 800ae88:	461d      	mov	r5, r3
    bool rv = false;
 800ae8a:	f04f 0800 	mov.w	r8, #0
        bytes_read = uxr_read_serial_msg(&transport->serial_io,
 800ae8e:	f500 7900 	add.w	r9, r0, #512	; 0x200
        int64_t time_init = uxr_millis();
 800ae92:	f7fd fadf 	bl	8008454 <uxr_millis>
        bytes_read = uxr_read_serial_msg(&transport->serial_io,
 800ae96:	f10d 031f 	add.w	r3, sp, #31
 800ae9a:	e9cd 5302 	strd	r5, r3, [sp, #8]
 800ae9e:	f10d 031e 	add.w	r3, sp, #30
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	f8d4 227c 	ldr.w	r2, [r4, #636]	; 0x27c
 800aeae:	4623      	mov	r3, r4
        int64_t time_init = uxr_millis();
 800aeb0:	4606      	mov	r6, r0
        bytes_read = uxr_read_serial_msg(&transport->serial_io,
 800aeb2:	4651      	mov	r1, sl
 800aeb4:	4648      	mov	r0, r9
 800aeb6:	f00c f9f2 	bl	801729e <uxr_read_serial_msg>
        if ((0 < bytes_read) && (remote_addr == transport->remote_addr))
 800aeba:	4603      	mov	r3, r0
 800aebc:	b1b8      	cbz	r0, 800aeee <recv_serial_msg+0x76>
 800aebe:	f894 1264 	ldrb.w	r1, [r4, #612]	; 0x264
 800aec2:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800aec6:	4291      	cmp	r1, r2
 800aec8:	d111      	bne.n	800aeee <recv_serial_msg+0x76>
            *len = bytes_read;
 800aeca:	6038      	str	r0, [r7, #0]
            rv = true;
 800aecc:	f04f 0801 	mov.w	r8, #1
            *buf = transport->buffer;
 800aed0:	f8cb 4000 	str.w	r4, [fp]
            rv = true;
 800aed4:	9305      	str	r3, [sp, #20]
        timeout -= (int)(uxr_millis() - time_init);
 800aed6:	f7fd fabd 	bl	8008454 <uxr_millis>
    while ((0 == bytes_read) && (0 < timeout));
 800aeda:	9b05      	ldr	r3, [sp, #20]
        timeout -= (int)(uxr_millis() - time_init);
 800aedc:	1a36      	subs	r6, r6, r0
 800aede:	4435      	add	r5, r6
    while ((0 == bytes_read) && (0 < timeout));
 800aee0:	b90b      	cbnz	r3, 800aee6 <recv_serial_msg+0x6e>
 800aee2:	2d00      	cmp	r5, #0
 800aee4:	dcd5      	bgt.n	800ae92 <recv_serial_msg+0x1a>
}
 800aee6:	4640      	mov	r0, r8
 800aee8:	b009      	add	sp, #36	; 0x24
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            error_code = errcode;
 800aeee:	4902      	ldr	r1, [pc, #8]	; (800aef8 <recv_serial_msg+0x80>)
 800aef0:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800aef4:	700a      	strb	r2, [r1, #0]
 800aef6:	e7ed      	b.n	800aed4 <recv_serial_msg+0x5c>
 800aef8:	2000518b 	.word	0x2000518b
 800aefc:	0800b079 	.word	0x0800b079

0800af00 <send_serial_msg>:
{
 800af00:	b510      	push	{r4, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	4614      	mov	r4, r2
    size_t bytes_written = uxr_write_serial_msg(&transport->serial_io,
 800af06:	f10d 0217 	add.w	r2, sp, #23
 800af0a:	9202      	str	r2, [sp, #8]
 800af0c:	f890 2264 	ldrb.w	r2, [r0, #612]	; 0x264
 800af10:	e9cd 4200 	strd	r4, r2, [sp]
{
 800af14:	460b      	mov	r3, r1
    size_t bytes_written = uxr_write_serial_msg(&transport->serial_io,
 800af16:	f8d0 227c 	ldr.w	r2, [r0, #636]	; 0x27c
 800af1a:	4908      	ldr	r1, [pc, #32]	; (800af3c <send_serial_msg+0x3c>)
 800af1c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800af20:	f00c f932 	bl	8017188 <uxr_write_serial_msg>
    if ((0 < bytes_written) && (bytes_written == len))
 800af24:	b108      	cbz	r0, 800af2a <send_serial_msg+0x2a>
 800af26:	4284      	cmp	r4, r0
 800af28:	d006      	beq.n	800af38 <send_serial_msg+0x38>
        error_code = errcode;
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <send_serial_msg+0x40>)
 800af2c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800af30:	701a      	strb	r2, [r3, #0]
    bool rv = false;
 800af32:	2000      	movs	r0, #0
}
 800af34:	b006      	add	sp, #24
 800af36:	bd10      	pop	{r4, pc}
        rv = true;
 800af38:	2001      	movs	r0, #1
 800af3a:	e7fb      	b.n	800af34 <send_serial_msg+0x34>
 800af3c:	08016ee7 	.word	0x08016ee7
 800af40:	2000518b 	.word	0x2000518b

0800af44 <uxr_init_serial_transport>:
bool uxr_init_serial_transport(uxrSerialTransport* transport,
                               struct uxrSerialPlatform* platfrom,
                               const int fd,
                               uint8_t remote_addr,
                               uint8_t local_addr)
{
 800af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af48:	f89d 8018 	ldrb.w	r8, [sp, #24]
 800af4c:	460f      	mov	r7, r1
 800af4e:	461e      	mov	r6, r3
 800af50:	4611      	mov	r1, r2
 800af52:	4604      	mov	r4, r0
    bool rv = false;
    if (uxr_init_serial_platform(platfrom, fd, remote_addr, local_addr))
 800af54:	4643      	mov	r3, r8
 800af56:	4632      	mov	r2, r6
 800af58:	4638      	mov	r0, r7
 800af5a:	f000 f859 	bl	800b010 <uxr_init_serial_platform>
 800af5e:	4605      	mov	r5, r0
 800af60:	b1b8      	cbz	r0, 800af92 <uxr_init_serial_transport+0x4e>
    {
        /* Setup platform. */
        transport->platform = platfrom;
 800af62:	f8c4 727c 	str.w	r7, [r4, #636]	; 0x27c

        /* Setup address. */
        transport->remote_addr = remote_addr;
 800af66:	f884 6264 	strb.w	r6, [r4, #612]	; 0x264

        /* Init SerialIO. */
        uxr_init_serial_io(&transport->serial_io, local_addr);
 800af6a:	4641      	mov	r1, r8
 800af6c:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800af70:	f00c f905 	bl	801717e <uxr_init_serial_io>

        /* Setup interface. */
        transport->comm.instance = (void*)transport;
        transport->comm.send_msg = send_serial_msg;
 800af74:	4b08      	ldr	r3, [pc, #32]	; (800af98 <uxr_init_serial_transport+0x54>)
 800af76:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
        transport->comm.recv_msg = recv_serial_msg;
 800af7a:	4b08      	ldr	r3, [pc, #32]	; (800af9c <uxr_init_serial_transport+0x58>)
 800af7c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
        transport->comm.comm_error = get_serial_error;
 800af80:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <uxr_init_serial_transport+0x5c>)
 800af82:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
        transport->comm.mtu = UXR_CONFIG_SERIAL_TRANSPORT_MTU;
 800af86:	f44f 7300 	mov.w	r3, #512	; 0x200
        transport->comm.instance = (void*)transport;
 800af8a:	f8c4 4268 	str.w	r4, [r4, #616]	; 0x268
        transport->comm.mtu = UXR_CONFIG_SERIAL_TRANSPORT_MTU;
 800af8e:	f8a4 3278 	strh.w	r3, [r4, #632]	; 0x278

        rv = true;
    }
    return rv;
}
 800af92:	4628      	mov	r0, r5
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	0800af01 	.word	0x0800af01
 800af9c:	0800ae79 	.word	0x0800ae79
 800afa0:	0800ae6d 	.word	0x0800ae6d

0800afa4 <uart_fifo_callback>:
char uart_in_buffer[RING_BUF_SIZE];
char uart_out_buffer[RING_BUF_SIZE];

struct ring_buf out_ringbuf, in_ringbuf;

static void uart_fifo_callback(struct device *dev){ 
 800afa4:	b530      	push	{r4, r5, lr}
 *
 * @return Ring buffer free space (in 32-bit words or bytes).
 */
static inline uint32_t ring_buf_space_get(struct ring_buf *buf)
{
	return buf->size - (buf->tail - buf->head);
 800afa6:	4d19      	ldr	r5, [pc, #100]	; (800b00c <uart_fifo_callback+0x68>)
 800afa8:	b091      	sub	sp, #68	; 0x44
 800afaa:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
 800afac:	68a3      	ldr	r3, [r4, #8]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	b143      	cbz	r3, 800afc4 <uart_fifo_callback+0x20>
		return api->irq_update(dev);
 800afb2:	4620      	mov	r0, r4
 800afb4:	4798      	blx	r3
    while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
 800afb6:	b128      	cbz	r0, 800afc4 <uart_fifo_callback+0x20>
	if (api->irq_is_pending)	{
 800afb8:	68a3      	ldr	r3, [r4, #8]
 800afba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbc:	b113      	cbz	r3, 800afc4 <uart_fifo_callback+0x20>
		return api->irq_is_pending(dev);
 800afbe:	4620      	mov	r0, r4
 800afc0:	4798      	blx	r3
 800afc2:	b908      	cbnz	r0, 800afc8 <uart_fifo_callback+0x24>
                ring_buf_put(&in_ringbuf, buffer, recv_len);
            }

        }
    }
}
 800afc4:	b011      	add	sp, #68	; 0x44
 800afc6:	bd30      	pop	{r4, r5, pc}
	if (api->irq_rx_ready) {
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0ed      	beq.n	800afac <uart_fifo_callback+0x8>
		return api->irq_rx_ready(dev);
 800afd0:	4620      	mov	r0, r4
 800afd2:	4798      	blx	r3
        if (uart_irq_rx_ready(dev)) {
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d0e9      	beq.n	800afac <uart_fifo_callback+0x8>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	692a      	ldr	r2, [r5, #16]
 800afdc:	441a      	add	r2, r3
 800afde:	686b      	ldr	r3, [r5, #4]
 800afe0:	1ad2      	subs	r2, r2, r3
            size_t len = MIN(ring_buf_space_get(&in_ringbuf), sizeof(buffer));
 800afe2:	2a3f      	cmp	r2, #63	; 0x3f
 800afe4:	d80d      	bhi.n	800b002 <uart_fifo_callback+0x5e>
            if (len > 0){
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	d0e0      	beq.n	800afac <uart_fifo_callback+0x8>
	if (api->fifo_read) {
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	b153      	cbz	r3, 800b006 <uart_fifo_callback+0x62>
		return api->fifo_read(dev, rx_data, size);
 800aff0:	4669      	mov	r1, sp
 800aff2:	4620      	mov	r0, r4
 800aff4:	4798      	blx	r3
 800aff6:	4602      	mov	r2, r0
                ring_buf_put(&in_ringbuf, buffer, recv_len);
 800aff8:	4669      	mov	r1, sp
 800affa:	4628      	mov	r0, r5
 800affc:	f007 f947 	bl	801228e <ring_buf_put>
 800b000:	e7d4      	b.n	800afac <uart_fifo_callback+0x8>
            size_t len = MIN(ring_buf_space_get(&in_ringbuf), sizeof(buffer));
 800b002:	2240      	movs	r2, #64	; 0x40
 800b004:	e7f1      	b.n	800afea <uart_fifo_callback+0x46>
	return 0;
 800b006:	461a      	mov	r2, r3
 800b008:	e7f6      	b.n	800aff8 <uart_fifo_callback+0x54>
 800b00a:	bf00      	nop
 800b00c:	200041a8 	.word	0x200041a8

0800b010 <uxr_init_serial_platform>:

bool uxr_init_serial_platform(struct uxrSerialPlatform* platform, int fd, uint8_t remote_addr, uint8_t local_addr){  
 800b010:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    char uart_descriptor[8]; 
    sprintf(uart_descriptor,"UART_%d", fd);
 800b012:	2208      	movs	r2, #8
 800b014:	9100      	str	r1, [sp, #0]
 800b016:	4b14      	ldr	r3, [pc, #80]	; (800b068 <uxr_init_serial_platform+0x58>)
bool uxr_init_serial_platform(struct uxrSerialPlatform* platform, int fd, uint8_t remote_addr, uint8_t local_addr){  
 800b018:	4604      	mov	r4, r0
    sprintf(uart_descriptor,"UART_%d", fd);
 800b01a:	2100      	movs	r1, #0
 800b01c:	eb0d 0002 	add.w	r0, sp, r2
 800b020:	f00c fcb3 	bl	801798a <__sprintf_chk>
 800b024:	a802      	add	r0, sp, #8
 800b026:	f7f9 fd53 	bl	8004ad0 <z_impl_device_get_binding>
    platform->uart_dev = device_get_binding(uart_descriptor);
 800b02a:	6020      	str	r0, [r4, #0]
    if (!platform->uart_dev) {
 800b02c:	b1c8      	cbz	r0, 800b062 <uxr_init_serial_platform+0x52>
	memset(buf, 0, sizeof(struct ring_buf));
 800b02e:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <uxr_init_serial_platform+0x5c>)
 800b030:	2220      	movs	r2, #32
 800b032:	4618      	mov	r0, r3
 800b034:	2100      	movs	r1, #0
 800b036:	f00c fc1d 	bl	8017874 <memset>
	buf->size = size;
 800b03a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b03e:	6102      	str	r2, [r0, #16]
	buf->buf.buf32 = (uint32_t *)data;
 800b040:	4a0b      	ldr	r2, [pc, #44]	; (800b070 <uxr_init_serial_platform+0x60>)
 800b042:	6142      	str	r2, [r0, #20]
		buf->mask = size - 1U;
 800b044:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b048:	6182      	str	r2, [r0, #24]
        return false;
    }

    ring_buf_init(&in_ringbuf, sizeof(uart_in_buffer), uart_out_buffer);

    uart_irq_callback_set(platform->uart_dev, uart_fifo_callback);
 800b04a:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
 800b04c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
 800b04e:	b123      	cbz	r3, 800b05a <uxr_init_serial_platform+0x4a>
 800b050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b052:	b113      	cbz	r3, 800b05a <uxr_init_serial_platform+0x4a>
		api->irq_callback_set(dev, cb, user_data);
 800b054:	4907      	ldr	r1, [pc, #28]	; (800b074 <uxr_init_serial_platform+0x64>)
 800b056:	2200      	movs	r2, #0
 800b058:	4798      	blx	r3

    /* Enable rx interrupts */
    uart_irq_rx_enable(platform->uart_dev);
 800b05a:	6820      	ldr	r0, [r4, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
 800b05c:	f00b ff3c 	bl	8016ed8 <z_impl_uart_irq_rx_enable>

    return true;
 800b060:	2001      	movs	r0, #1
}
 800b062:	b004      	add	sp, #16
 800b064:	bd10      	pop	{r4, pc}
 800b066:	bf00      	nop
 800b068:	0801e5f8 	.word	0x0801e5f8
 800b06c:	200041a8 	.word	0x200041a8
 800b070:	2000518c 	.word	0x2000518c
 800b074:	0800afa5 	.word	0x0800afa5

0800b078 <uxr_read_serial_data_platform>:
    }
    
    return len;
}

size_t uxr_read_serial_data_platform(uxrSerialPlatform* platform, uint8_t* buf, size_t len, int timeout, uint8_t* errcode){ 
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return (buf->head == buf->tail);
 800b07c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800b0c8 <uxr_read_serial_data_platform+0x50>
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	4616      	mov	r6, r2
 800b086:	461f      	mov	r7, r3
    size_t read = 0;
    int spent_time = 0;
 800b088:	f04f 0800 	mov.w	r8, #0

    while(ring_buf_is_empty(&in_ringbuf) && spent_time < timeout){
 800b08c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b090:	429a      	cmp	r2, r3
 800b092:	d101      	bne.n	800b098 <uxr_read_serial_data_platform+0x20>
 800b094:	45b8      	cmp	r8, r7
 800b096:	db10      	blt.n	800b0ba <uxr_read_serial_data_platform+0x42>
        usleep(1000);
        spent_time++;
    }

    uart_irq_rx_disable(platform->uart_dev);
 800b098:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_disable) {
 800b09a:	6883      	ldr	r3, [r0, #8]
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	b103      	cbz	r3, 800b0a2 <uxr_read_serial_data_platform+0x2a>
		api->irq_rx_disable(dev);
 800b0a0:	4798      	blx	r3
    read = ring_buf_get(&in_ringbuf, buf, len);
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4632      	mov	r2, r6
 800b0a6:	4808      	ldr	r0, [pc, #32]	; (800b0c8 <uxr_read_serial_data_platform+0x50>)
 800b0a8:	f007 f95b 	bl	8012362 <ring_buf_get>
 800b0ac:	4605      	mov	r5, r0
    uart_irq_rx_enable(platform->uart_dev);
 800b0ae:	6820      	ldr	r0, [r4, #0]
 800b0b0:	f00b ff12 	bl	8016ed8 <z_impl_uart_irq_rx_enable>

    return read;
 }
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        usleep(1000);
 800b0ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b0be:	f007 fa0e 	bl	80124de <usleep>
        spent_time++;
 800b0c2:	f108 0801 	add.w	r8, r8, #1
 800b0c6:	e7e1      	b.n	800b08c <uxr_read_serial_data_platform+0x14>
 800b0c8:	200041a8 	.word	0x200041a8

0800b0cc <rcl_get_default_domain_id>:

const char * const RCL_DOMAIN_ID_ENV_VAR = "ROS_DOMAIN_ID";

rcl_ret_t
rcl_get_default_domain_id(size_t * domain_id)
{
 800b0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  const char * ros_domain_id = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	9300      	str	r3, [sp, #0]
  const char * get_env_error_str = NULL;

  RCL_CHECK_ARGUMENT_FOR_NULL(domain_id, RCL_RET_INVALID_ARGUMENT);
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	b328      	cbz	r0, 800b122 <rcl_get_default_domain_id+0x56>

  get_env_error_str = rcutils_get_env(RCL_DOMAIN_ID_ENV_VAR, &ros_domain_id);
 800b0d6:	4814      	ldr	r0, [pc, #80]	; (800b128 <rcl_get_default_domain_id+0x5c>)
 800b0d8:	4669      	mov	r1, sp
 800b0da:	f7ff f89f 	bl	800a21c <rcutils_get_env>
  if (NULL != get_env_error_str) {
 800b0de:	4604      	mov	r4, r0
 800b0e0:	b9e8      	cbnz	r0, 800b11e <rcl_get_default_domain_id+0x52>
    RCL_SET_ERROR_MSG_WITH_FORMAT_STRING(
      "Error getting env var '" RCUTILS_STRINGIFY(RCL_DOMAIN_ID_ENV_VAR) "': %s\n",
      get_env_error_str);
    return RCL_RET_ERROR;
  }
  if (ros_domain_id && strcmp(ros_domain_id, "") != 0) {
 800b0e2:	9800      	ldr	r0, [sp, #0]
 800b0e4:	b910      	cbnz	r0, 800b0ec <rcl_get_default_domain_id+0x20>
      RCL_SET_ERROR_MSG("ROS_DOMAIN_ID is out of range");
      return RCL_RET_ERROR;
    }
    *domain_id = (size_t)number;
  }
  return RCL_RET_OK;
 800b0e6:	2000      	movs	r0, #0
}
 800b0e8:	b003      	add	sp, #12
 800b0ea:	bd30      	pop	{r4, r5, pc}
  if (ros_domain_id && strcmp(ros_domain_id, "") != 0) {
 800b0ec:	490f      	ldr	r1, [pc, #60]	; (800b12c <rcl_get_default_domain_id+0x60>)
 800b0ee:	f7f5 f8db 	bl	80002a8 <strcmp>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d0f7      	beq.n	800b0e6 <rcl_get_default_domain_id+0x1a>
    unsigned long number = strtoul(ros_domain_id, &end, 0);  // NOLINT(runtime/int)
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	9800      	ldr	r0, [sp, #0]
    char * end = NULL;
 800b0fa:	9401      	str	r4, [sp, #4]
    unsigned long number = strtoul(ros_domain_id, &end, 0);  // NOLINT(runtime/int)
 800b0fc:	a901      	add	r1, sp, #4
 800b0fe:	f001 fdb1 	bl	800cc64 <strtoul>
    if (number == 0UL && *end != '\0') {
 800b102:	4604      	mov	r4, r0
 800b104:	b920      	cbnz	r0, 800b110 <rcl_get_default_domain_id+0x44>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b943      	cbnz	r3, 800b11e <rcl_get_default_domain_id+0x52>
    *domain_id = (size_t)number;
 800b10c:	602c      	str	r4, [r5, #0]
 800b10e:	e7ea      	b.n	800b0e6 <rcl_get_default_domain_id+0x1a>
    if ((number == ULONG_MAX && errno == ERANGE) || number > SIZE_MAX) {
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d1fb      	bne.n	800b10c <rcl_get_default_domain_id+0x40>
 800b114:	f007 f9e1 	bl	80124da <__errno>
 800b118:	6803      	ldr	r3, [r0, #0]
 800b11a:	2b22      	cmp	r3, #34	; 0x22
 800b11c:	d1f6      	bne.n	800b10c <rcl_get_default_domain_id+0x40>
    return RCL_RET_ERROR;
 800b11e:	2001      	movs	r0, #1
 800b120:	e7e2      	b.n	800b0e8 <rcl_get_default_domain_id+0x1c>
  RCL_CHECK_ARGUMENT_FOR_NULL(domain_id, RCL_RET_INVALID_ARGUMENT);
 800b122:	200b      	movs	r0, #11
 800b124:	e7e0      	b.n	800b0e8 <rcl_get_default_domain_id+0x1c>
 800b126:	bf00      	nop
 800b128:	0801e600 	.word	0x0801e600
 800b12c:	0801d00d 	.word	0x0801d00d

0800b130 <rcl_get_zero_initialized_guard_condition>:
{
  static rcl_guard_condition_t null_guard_condition = {
    .context = 0,
    .impl = 0
  };
  return null_guard_condition;
 800b130:	4a03      	ldr	r2, [pc, #12]	; (800b140 <rcl_get_zero_initialized_guard_condition+0x10>)
{
 800b132:	4603      	mov	r3, r0
  return null_guard_condition;
 800b134:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b138:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	4770      	bx	lr
 800b140:	0801bb74 	.word	0x0801bb74

0800b144 <rcl_guard_condition_get_default_options>:
  return result;
}

rcl_guard_condition_options_t
rcl_guard_condition_get_default_options()
{
 800b144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b146:	b087      	sub	sp, #28
 800b148:	4607      	mov	r7, r0
  // !!! MAKE SURE THAT CHANGES TO THESE DEFAULTS ARE REFLECTED IN THE HEADER DOC STRING
  static rcl_guard_condition_options_t default_options;
  default_options.allocator = rcl_get_default_allocator();
 800b14a:	466c      	mov	r4, sp
 800b14c:	4668      	mov	r0, sp
 800b14e:	f7fb fe33 	bl	8006db8 <rcutils_get_default_allocator>
 800b152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b154:	4d07      	ldr	r5, [pc, #28]	; (800b174 <rcl_guard_condition_get_default_options+0x30>)
 800b156:	462e      	mov	r6, r5
 800b158:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b15a:	f8d4 c000 	ldr.w	ip, [r4]
 800b15e:	f8c6 c000 	str.w	ip, [r6]
  return default_options;
 800b162:	462c      	mov	r4, r5
 800b164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b166:	463e      	mov	r6, r7
 800b168:	c60f      	stmia	r6!, {r0, r1, r2, r3}
}
 800b16a:	4638      	mov	r0, r7
  return default_options;
 800b16c:	f8c6 c000 	str.w	ip, [r6]
}
 800b170:	b007      	add	sp, #28
 800b172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b174:	200041c8 	.word	0x200041c8

0800b178 <on_topic>:
  uint16_t request_id,
  uxrStreamId stream_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 800b178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b17a:	e9cd 3100 	strd	r3, r1, [sp]

#else
  (void)args;
#endif  // RMW_UXRCE_GRAPH

  rmw_uxrce_mempool_item_t * subscription_item = subscription_memory.allocateditems;
 800b17e:	4b18      	ldr	r3, [pc, #96]	; (800b1e0 <on_topic+0x68>)
{
 800b180:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  rmw_uxrce_mempool_item_t * subscription_item = subscription_memory.allocateditems;
 800b184:	681b      	ldr	r3, [r3, #0]
  while (subscription_item != NULL) {
    rmw_uxrce_subscription_t * custom_subscription =
      (rmw_uxrce_subscription_t *)subscription_item->data;
    if ((custom_subscription->datareader_id.id == object_id.id) &&
 800b186:	b288      	uxth	r0, r1
      (custom_subscription->datareader_id.type == object_id.type))
 800b188:	f3c1 4107 	ubfx	r1, r1, #16, #8
  while (subscription_item != NULL) {
 800b18c:	b323      	cbz	r3, 800b1d8 <on_topic+0x60>
    rmw_uxrce_subscription_t * custom_subscription =
 800b18e:	68dc      	ldr	r4, [r3, #12]
    if ((custom_subscription->datareader_id.id == object_id.id) &&
 800b190:	8b25      	ldrh	r5, [r4, #24]
 800b192:	4285      	cmp	r5, r0
 800b194:	d122      	bne.n	800b1dc <on_topic+0x64>
 800b196:	7ea5      	ldrb	r5, [r4, #26]
 800b198:	428d      	cmp	r5, r1
 800b19a:	d11f      	bne.n	800b1dc <on_topic+0x64>
    {
      custom_subscription->micro_buffer_lenght[custom_subscription->history_write_index] = length;
 800b19c:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
      ucdr_deserialize_array_uint8_t(
 800b1a0:	9806      	ldr	r0, [sp, #24]
      custom_subscription->micro_buffer_lenght[custom_subscription->history_write_index] = length;
 800b1a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
        ub,
        custom_subscription->micro_buffer[custom_subscription->history_write_index], length);
 800b1a6:	eb04 21c1 	add.w	r1, r4, r1, lsl #11
      custom_subscription->micro_buffer_lenght[custom_subscription->history_write_index] = length;
 800b1aa:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
      ucdr_deserialize_array_uint8_t(
 800b1ae:	313c      	adds	r1, #60	; 0x3c
 800b1b0:	f00b fabe 	bl	8016730 <ucdr_deserialize_array_uint8_t>

      // TODO(pablogs9): Circular overlapping buffer implemented: use qos
      if (custom_subscription->micro_buffer_in_use &&
 800b1b4:	f894 3842 	ldrb.w	r3, [r4, #2114]	; 0x842
 800b1b8:	b143      	cbz	r3, 800b1cc <on_topic+0x54>
 800b1ba:	f894 3841 	ldrb.w	r3, [r4, #2113]	; 0x841
 800b1be:	f894 2840 	ldrb.w	r2, [r4, #2112]	; 0x840
 800b1c2:	429a      	cmp	r2, r3
        custom_subscription->history_write_index == custom_subscription->history_read_index)
      {
        custom_subscription->history_read_index = (custom_subscription->history_read_index + 1) %
 800b1c4:	bf04      	itt	eq
 800b1c6:	2300      	moveq	r3, #0
 800b1c8:	f884 3841 	strbeq.w	r3, [r4, #2113]	; 0x841
          RMW_UXRCE_MAX_HISTORY;
      }

      custom_subscription->history_write_index = (custom_subscription->history_write_index + 1) %
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f884 3840 	strb.w	r3, [r4, #2112]	; 0x840
        RMW_UXRCE_MAX_HISTORY;
      custom_subscription->micro_buffer_in_use = true;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	f884 3842 	strb.w	r3, [r4, #2114]	; 0x842

      break;
    }
    subscription_item = subscription_item->next;
  }
}
 800b1d8:	b003      	add	sp, #12
 800b1da:	bd30      	pop	{r4, r5, pc}
    subscription_item = subscription_item->next;
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	e7d5      	b.n	800b18c <on_topic+0x14>
 800b1e0:	20004180 	.word	0x20004180

0800b1e4 <on_request>:
  uint16_t request_id,
  SampleIdentity * sample_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 800b1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1e6:	461d      	mov	r5, r3
  (void)session;
  (void)object_id;
  (void)args;

  rmw_uxrce_mempool_item_t * service_item = service_memory.allocateditems;
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <on_request+0x7c>)
{
 800b1ea:	9101      	str	r1, [sp, #4]
 800b1ec:	4610      	mov	r0, r2
  rmw_uxrce_mempool_item_t * service_item = service_memory.allocateditems;
 800b1ee:	6819      	ldr	r1, [r3, #0]
{
 800b1f0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  while (service_item != NULL) {
 800b1f4:	b381      	cbz	r1, 800b258 <on_request+0x74>
    rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service_item->data;
 800b1f6:	68cc      	ldr	r4, [r1, #12]
    if (custom_service->request_id == request_id) {
 800b1f8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800b1fa:	4283      	cmp	r3, r0
 800b1fc:	d12e      	bne.n	800b25c <on_request+0x78>
      custom_service->micro_buffer_lenght[custom_service->history_write_index] = length;
 800b1fe:	f894 1858 	ldrb.w	r1, [r4, #2136]	; 0x858
      ucdr_deserialize_array_uint8_t(
 800b202:	9806      	ldr	r0, [sp, #24]
      custom_service->micro_buffer_lenght[custom_service->history_write_index] = length;
 800b204:	eb04 0381 	add.w	r3, r4, r1, lsl #2
        ub,
        custom_service->micro_buffer[custom_service->history_write_index], length);
 800b208:	eb04 21c1 	add.w	r1, r4, r1, lsl #11
      custom_service->micro_buffer_lenght[custom_service->history_write_index] = length;
 800b20c:	f8c3 2854 	str.w	r2, [r3, #2132]	; 0x854
      ucdr_deserialize_array_uint8_t(
 800b210:	3154      	adds	r1, #84	; 0x54
 800b212:	f00b fa8d 	bl	8016730 <ucdr_deserialize_array_uint8_t>
      memcpy(
 800b216:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
 800b21a:	2318      	movs	r3, #24
 800b21c:	fb03 4202 	mla	r2, r3, r2, r4
 800b220:	323c      	adds	r2, #60	; 0x3c
 800b222:	462b      	mov	r3, r5
 800b224:	f105 0118 	add.w	r1, r5, #24
 800b228:	f853 0b04 	ldr.w	r0, [r3], #4
 800b22c:	f842 0b04 	str.w	r0, [r2], #4
 800b230:	428b      	cmp	r3, r1
 800b232:	d1f9      	bne.n	800b228 <on_request+0x44>
        &custom_service->sample_id[custom_service->history_write_index],
        sample_id, sizeof(SampleIdentity));

      // TODO(pablogs9): Circular overlapping buffer implemented: use qos
      if (custom_service->micro_buffer_in_use &&
 800b234:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
 800b238:	b143      	cbz	r3, 800b24c <on_request+0x68>
 800b23a:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 800b23e:	f894 2858 	ldrb.w	r2, [r4, #2136]	; 0x858
 800b242:	429a      	cmp	r2, r3
        custom_service->history_write_index == custom_service->history_read_index)
      {
        custom_service->history_read_index = (custom_service->history_read_index + 1) %
 800b244:	bf04      	itt	eq
 800b246:	2300      	moveq	r3, #0
 800b248:	f884 3859 	strbeq.w	r3, [r4, #2137]	; 0x859
          RMW_UXRCE_MAX_HISTORY;
      }

      custom_service->history_write_index = (custom_service->history_write_index + 1) %
 800b24c:	2300      	movs	r3, #0
 800b24e:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
        RMW_UXRCE_MAX_HISTORY;
      custom_service->micro_buffer_in_use = true;
 800b252:	2301      	movs	r3, #1
 800b254:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a

      break;
    }
    service_item = service_item->next;
  }
}
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
    service_item = service_item->next;
 800b25c:	6889      	ldr	r1, [r1, #8]
 800b25e:	e7c9      	b.n	800b1f4 <on_request+0x10>
 800b260:	20004158 	.word	0x20004158

0800b264 <on_reply>:
  uint16_t request_id,
  uint16_t reply_id,
  struct ucdrBuffer * ub,
  uint16_t length,
  void * args)
{
 800b264:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 800b266:	461e      	mov	r6, r3
  (void)session;
  (void)object_id;
  (void)args;

  rmw_uxrce_mempool_item_t * client_item = client_memory.allocateditems;
 800b268:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <on_reply+0x6c>)
{
 800b26a:	9101      	str	r1, [sp, #4]
 800b26c:	4610      	mov	r0, r2
  rmw_uxrce_mempool_item_t * client_item = client_memory.allocateditems;
 800b26e:	6819      	ldr	r1, [r3, #0]
{
 800b270:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  while (client_item != NULL) {
 800b274:	b339      	cbz	r1, 800b2c6 <on_reply+0x62>
    rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client_item->data;
 800b276:	68cc      	ldr	r4, [r1, #12]
    if (custom_client->request_id == request_id) {
 800b278:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800b27a:	4283      	cmp	r3, r0
 800b27c:	d125      	bne.n	800b2ca <on_reply+0x66>
      custom_client->micro_buffer_lenght[custom_client->history_write_index] = length;
 800b27e:	f894 184c 	ldrb.w	r1, [r4, #2124]	; 0x84c
      ucdr_deserialize_array_uint8_t(
 800b282:	9806      	ldr	r0, [sp, #24]
      custom_client->micro_buffer_lenght[custom_client->history_write_index] = length;
 800b284:	f201 2312 	addw	r3, r1, #530	; 0x212
        ub,
        custom_client->micro_buffer[custom_client->history_write_index], length);
 800b288:	eb04 21c1 	add.w	r1, r4, r1, lsl #11
      custom_client->micro_buffer_lenght[custom_client->history_write_index] = length;
 800b28c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
      ucdr_deserialize_array_uint8_t(
 800b290:	3148      	adds	r1, #72	; 0x48
 800b292:	f00b fa4d 	bl	8016730 <ucdr_deserialize_array_uint8_t>
      custom_client->reply_id[custom_client->history_write_index] = reply_id;
 800b296:	f894 284c 	ldrb.w	r2, [r4, #2124]	; 0x84c

      // TODO(pablogs9): Circular overlapping buffer implemented: use qos
      if (custom_client->micro_buffer_in_use &&
 800b29a:	f894 384e 	ldrb.w	r3, [r4, #2126]	; 0x84e
      custom_client->reply_id[custom_client->history_write_index] = reply_id;
 800b29e:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800b2a2:	b2b6      	uxth	r6, r6
 800b2a4:	2700      	movs	r7, #0
 800b2a6:	e9c1 6710 	strd	r6, r7, [r1, #64]	; 0x40
      if (custom_client->micro_buffer_in_use &&
 800b2aa:	b133      	cbz	r3, 800b2ba <on_reply+0x56>
 800b2ac:	f894 384d 	ldrb.w	r3, [r4, #2125]	; 0x84d
 800b2b0:	4293      	cmp	r3, r2
        custom_client->history_write_index == custom_client->history_read_index)
      {
        custom_client->history_read_index = (custom_client->history_read_index + 1) %
 800b2b2:	bf04      	itt	eq
 800b2b4:	2300      	moveq	r3, #0
 800b2b6:	f884 384d 	strbeq.w	r3, [r4, #2125]	; 0x84d
          RMW_UXRCE_MAX_HISTORY;
      }

      custom_client->history_write_index = (custom_client->history_write_index + 1) %
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f884 384c 	strb.w	r3, [r4, #2124]	; 0x84c
        RMW_UXRCE_MAX_HISTORY;
      custom_client->micro_buffer_in_use = true;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e

      break;
    }
    client_item = client_item->next;
  }
}
 800b2c6:	b002      	add	sp, #8
 800b2c8:	bdd0      	pop	{r4, r6, r7, pc}
    client_item = client_item->next;
 800b2ca:	6889      	ldr	r1, [r1, #8]
 800b2cc:	e7d2      	b.n	800b274 <on_reply+0x10>
 800b2ce:	bf00      	nop
 800b2d0:	20004060 	.word	0x20004060

0800b2d4 <uxr_update_crc>:
/*******************************************************************************
 * Public function definitions.
 *******************************************************************************/
void uxr_update_crc(uint16_t* crc, const uint8_t data)
{
    *crc = (*crc >> 8) ^ crc16_table[(*crc ^ data) & 0xFF];
 800b2d4:	8802      	ldrh	r2, [r0, #0]
 800b2d6:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <uxr_update_crc+0x14>)
 800b2d8:	4051      	eors	r1, r2
 800b2da:	b2c9      	uxtb	r1, r1
 800b2dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b2e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 800b2e4:	8003      	strh	r3, [r0, #0]
}
 800b2e6:	4770      	bx	lr
 800b2e8:	0801bcf6 	.word	0x0801bcf6

0800b2ec <__assert_func>:
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af04      	add	r7, sp, #16
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <__assert_func+0x44>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68d8      	ldr	r0, [r3, #12]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <__assert_func+0x1e>
 800b306:	4a0b      	ldr	r2, [pc, #44]	; (800b334 <__assert_func+0x48>)
 800b308:	e000      	b.n	800b30c <__assert_func+0x20>
 800b30a:	4a0b      	ldr	r2, [pc, #44]	; (800b338 <__assert_func+0x4c>)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <__assert_func+0x2a>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	e000      	b.n	800b318 <__assert_func+0x2c>
 800b316:	4b08      	ldr	r3, [pc, #32]	; (800b338 <__assert_func+0x4c>)
 800b318:	9302      	str	r3, [sp, #8]
 800b31a:	9201      	str	r2, [sp, #4]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	4905      	ldr	r1, [pc, #20]	; (800b33c <__assert_func+0x50>)
 800b326:	f000 f8d1 	bl	800b4cc <fiprintf>
 800b32a:	f00d fc8d 	bl	8018c48 <abort>
 800b32e:	bf00      	nop
 800b330:	20000820 	.word	0x20000820
 800b334:	0801a120 	.word	0x0801a120
 800b338:	0801a130 	.word	0x0801a130
 800b33c:	0801a134 	.word	0x0801a134

0800b340 <calloc>:
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
 800b34a:	4b06      	ldr	r3, [pc, #24]	; (800b364 <calloc+0x24>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4618      	mov	r0, r3
 800b354:	f00c f8b9 	bl	80174ca <_calloc_r>
 800b358:	4603      	mov	r3, r0
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	20000820 	.word	0x20000820

0800b368 <fileno>:
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <fileno+0x50>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	60bb      	str	r3, [r7, #8]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d006      	beq.n	800b38a <fileno+0x22>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <fileno+0x22>
 800b384:	68b8      	ldr	r0, [r7, #8]
 800b386:	f000 f86f 	bl	800b468 <__sinit>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <fileno+0x36>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	e006      	b.n	800b3ac <fileno+0x44>
 800b39e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	4b04      	ldr	r3, [pc, #16]	; (800b3b8 <fileno+0x50>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2209      	movs	r2, #9
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000820 	.word	0x20000820

0800b3bc <std>:
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	601a      	str	r2, [r3, #0]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	605a      	str	r2, [r3, #4]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	609a      	str	r2, [r3, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	b21a      	sxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	819a      	strh	r2, [r3, #12]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	661a      	str	r2, [r3, #96]	; 0x60
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	b21a      	sxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	81da      	strh	r2, [r3, #14]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	611a      	str	r2, [r3, #16]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	615a      	str	r2, [r3, #20]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	619a      	str	r2, [r3, #24]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3358      	adds	r3, #88	; 0x58
 800b406:	2208      	movs	r2, #8
 800b408:	2100      	movs	r1, #0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f00c fa32 	bl	8017874 <memset>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	61da      	str	r2, [r3, #28]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4a07      	ldr	r2, [pc, #28]	; (800b438 <std+0x7c>)
 800b41a:	621a      	str	r2, [r3, #32]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a07      	ldr	r2, [pc, #28]	; (800b43c <std+0x80>)
 800b420:	625a      	str	r2, [r3, #36]	; 0x24
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4a06      	ldr	r2, [pc, #24]	; (800b440 <std+0x84>)
 800b426:	629a      	str	r2, [r3, #40]	; 0x28
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4a06      	ldr	r2, [pc, #24]	; (800b444 <std+0x88>)
 800b42c:	62da      	str	r2, [r3, #44]	; 0x2c
 800b42e:	bf00      	nop
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	080179e3 	.word	0x080179e3
 800b43c:	08017a27 	.word	0x08017a27
 800b440:	08017a7d 	.word	0x08017a7d
 800b444:	08017acb 	.word	0x08017acb

0800b448 <_cleanup_r>:
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	4b04      	ldr	r3, [pc, #16]	; (800b464 <_cleanup_r+0x1c>)
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f00c f8c2 	bl	80175e0 <_fwalk_reent>
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	0801904d 	.word	0x0801904d

0800b468 <__sinit>:
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	2b00      	cmp	r3, #0
 800b476:	d123      	bne.n	800b4c0 <__sinit+0x58>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a13      	ldr	r2, [pc, #76]	; (800b4c8 <__sinit+0x60>)
 800b47c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2203      	movs	r2, #3
 800b48a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f00c f877 	bl	8017592 <stdin_init>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f00c f87f 	bl	80175ac <stdout_init>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f00c f887 	bl	80175c6 <stderr_init>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	639a      	str	r2, [r3, #56]	; 0x38
 800b4be:	e000      	b.n	800b4c2 <__sinit+0x5a>
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	0800b449 	.word	0x0800b449

0800b4cc <fiprintf>:
 800b4cc:	b40e      	push	{r1, r2, r3}
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	f107 0320 	add.w	r3, r7, #32
 800b4da:	60bb      	str	r3, [r7, #8]
 800b4dc:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <fiprintf+0x30>)
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	f003 f863 	bl	800e5b0 <_vfiprintf_r>
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4f8:	b003      	add	sp, #12
 800b4fa:	4770      	bx	lr
 800b4fc:	20000820 	.word	0x20000820

0800b500 <fprintf>:
 800b500:	b40e      	push	{r1, r2, r3}
 800b502:	b580      	push	{r7, lr}
 800b504:	b085      	sub	sp, #20
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	f107 0320 	add.w	r3, r7, #32
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	4b07      	ldr	r3, [pc, #28]	; (800b530 <fprintf+0x30>)
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	69fa      	ldr	r2, [r7, #28]
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	f003 fed5 	bl	800f2c8 <_vfprintf_r>
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b52c:	b003      	add	sp, #12
 800b52e:	4770      	bx	lr
 800b530:	20000820 	.word	0x20000820

0800b534 <getenv>:
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <getenv+0x24>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f107 020c 	add.w	r2, r7, #12
 800b544:	6879      	ldr	r1, [r7, #4]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f808 	bl	800b55c <_findenv_r>
 800b54c:	4603      	mov	r3, r0
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	20000820 	.word	0x20000820

0800b55c <_findenv_r>:
 800b55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460d      	mov	r5, r1
 800b566:	603a      	str	r2, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f00d fc70 	bl	8018e4e <__env_lock>
 800b56e:	4b27      	ldr	r3, [pc, #156]	; (800b60c <_findenv_r+0xb0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d104      	bne.n	800b582 <_findenv_r+0x26>
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f00d fc71 	bl	8018e60 <__env_unlock>
 800b57e:	2300      	movs	r3, #0
 800b580:	e03f      	b.n	800b602 <_findenv_r+0xa6>
 800b582:	60fd      	str	r5, [r7, #12]
 800b584:	e002      	b.n	800b58c <_findenv_r+0x30>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3301      	adds	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <_findenv_r+0x40>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b3d      	cmp	r3, #61	; 0x3d
 800b59a:	d1f4      	bne.n	800b586 <_findenv_r+0x2a>
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	2b3d      	cmp	r3, #61	; 0x3d
 800b5a2:	d02a      	beq.n	800b5fa <_findenv_r+0x9e>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	1b5e      	subs	r6, r3, r5
 800b5a8:	4b18      	ldr	r3, [pc, #96]	; (800b60c <_findenv_r+0xb0>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681c      	ldr	r4, [r3, #0]
 800b5ae:	e021      	b.n	800b5f4 <_findenv_r+0x98>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f00c fbaf 	bl	8017d1a <strncmp>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d117      	bne.n	800b5f2 <_findenv_r+0x96>
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4413      	add	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b3d      	cmp	r3, #61	; 0x3d
 800b5d0:	d10f      	bne.n	800b5f2 <_findenv_r+0x96>
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	; (800b60c <_findenv_r+0xb0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	1ae3      	subs	r3, r4, r3
 800b5da:	109b      	asrs	r3, r3, #2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f00d fc3c 	bl	8018e60 <__env_unlock>
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	e007      	b.n	800b602 <_findenv_r+0xa6>
 800b5f2:	3404      	adds	r4, #4
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1da      	bne.n	800b5b0 <_findenv_r+0x54>
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f00d fc30 	bl	8018e60 <__env_unlock>
 800b600:	2300      	movs	r3, #0
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	2000081c 	.word	0x2000081c

0800b610 <malloc>:
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <malloc+0x20>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 f930 	bl	800b884 <_malloc_r>
 800b624:	4603      	mov	r3, r0
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20000820 	.word	0x20000820

0800b634 <free>:
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	4b04      	ldr	r3, [pc, #16]	; (800b650 <free+0x1c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6879      	ldr	r1, [r7, #4]
 800b642:	4618      	mov	r0, r3
 800b644:	f005 fca2 	bl	8010f8c <_free_r>
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20000820 	.word	0x20000820

0800b654 <malloc_extend_top>:
 800b654:	b580      	push	{r7, lr}
 800b656:	b08e      	sub	sp, #56	; 0x38
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	2300      	movs	r3, #0
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
 800b662:	4b82      	ldr	r3, [pc, #520]	; (800b86c <malloc_extend_top+0x218>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	623b      	str	r3, [r7, #32]
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f023 0303 	bic.w	r3, r3, #3
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	6a3a      	ldr	r2, [r7, #32]
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	4b7d      	ldr	r3, [pc, #500]	; (800b870 <malloc_extend_top+0x21c>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	4413      	add	r3, r2
 800b682:	3310      	adds	r3, #16
 800b684:	62bb      	str	r3, [r7, #40]	; 0x28
 800b686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	4b79      	ldr	r3, [pc, #484]	; (800b874 <malloc_extend_top+0x220>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b694:	d007      	beq.n	800b6a6 <malloc_extend_top+0x52>
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	4413      	add	r3, r2
 800b69c:	1e5a      	subs	r2, r3, #1
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	425b      	negs	r3, r3
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 ff8a 	bl	800c5c4 <_sbrk_r>
 800b6b0:	6378      	str	r0, [r7, #52]	; 0x34
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6b8:	f000 80d3 	beq.w	800b862 <malloc_extend_top+0x20e>
 800b6bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d204      	bcs.n	800b6ce <malloc_extend_top+0x7a>
 800b6c4:	4a69      	ldr	r2, [pc, #420]	; (800b86c <malloc_extend_top+0x218>)
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	f040 80ca 	bne.w	800b862 <malloc_extend_top+0x20e>
 800b6ce:	4b6a      	ldr	r3, [pc, #424]	; (800b878 <malloc_extend_top+0x224>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	4413      	add	r3, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b67      	ldr	r3, [pc, #412]	; (800b878 <malloc_extend_top+0x224>)
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d110      	bne.n	800b708 <malloc_extend_top+0xb4>
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	1e5a      	subs	r2, r3, #1
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <malloc_extend_top+0xb4>
 800b6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]
 800b6fa:	4b5c      	ldr	r3, [pc, #368]	; (800b86c <malloc_extend_top+0x218>)
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	f042 0201 	orr.w	r2, r2, #1
 800b704:	605a      	str	r2, [r3, #4]
 800b706:	e093      	b.n	800b830 <malloc_extend_top+0x1dc>
 800b708:	4b5a      	ldr	r3, [pc, #360]	; (800b874 <malloc_extend_top+0x220>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b710:	d103      	bne.n	800b71a <malloc_extend_top+0xc6>
 800b712:	4a58      	ldr	r2, [pc, #352]	; (800b874 <malloc_extend_top+0x220>)
 800b714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b716:	6013      	str	r3, [r2, #0]
 800b718:	e007      	b.n	800b72a <malloc_extend_top+0xd6>
 800b71a:	4b57      	ldr	r3, [pc, #348]	; (800b878 <malloc_extend_top+0x224>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	1acb      	subs	r3, r1, r3
 800b724:	4413      	add	r3, r2
 800b726:	4a54      	ldr	r2, [pc, #336]	; (800b878 <malloc_extend_top+0x224>)
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	3308      	adds	r3, #8
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d008      	beq.n	800b74c <malloc_extend_top+0xf8>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f1c3 0308 	rsb	r3, r3, #8
 800b740:	633b      	str	r3, [r7, #48]	; 0x30
 800b742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	4413      	add	r3, r2
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
 800b74a:	e001      	b.n	800b750 <malloc_extend_top+0xfc>
 800b74c:	2300      	movs	r3, #0
 800b74e:	633b      	str	r3, [r7, #48]	; 0x30
 800b750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	4413      	add	r3, r2
 800b756:	461a      	mov	r2, r3
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	4013      	ands	r3, r2
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b764:	4413      	add	r3, r2
 800b766:	633b      	str	r3, [r7, #48]	; 0x30
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	4013      	ands	r3, r2
 800b770:	633b      	str	r3, [r7, #48]	; 0x30
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 ff24 	bl	800c5c4 <_sbrk_r>
 800b77c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b784:	d10f      	bne.n	800b7a6 <malloc_extend_top+0x152>
 800b786:	2300      	movs	r3, #0
 800b788:	633b      	str	r3, [r7, #48]	; 0x30
 800b78a:	2301      	movs	r3, #1
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
 800b78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	4413      	add	r3, r2
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d004      	beq.n	800b7a6 <malloc_extend_top+0x152>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3b08      	subs	r3, #8
 800b7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7a2:	4413      	add	r3, r2
 800b7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a6:	4b34      	ldr	r3, [pc, #208]	; (800b878 <malloc_extend_top+0x224>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ae:	4413      	add	r3, r2
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4b31      	ldr	r3, [pc, #196]	; (800b878 <malloc_extend_top+0x224>)
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	4a2d      	ldr	r2, [pc, #180]	; (800b86c <malloc_extend_top+0x218>)
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ba:	6093      	str	r3, [r2, #8]
 800b7bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c6:	4413      	add	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	4b28      	ldr	r3, [pc, #160]	; (800b86c <malloc_extend_top+0x218>)
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	605a      	str	r2, [r3, #4]
 800b7d6:	4a25      	ldr	r2, [pc, #148]	; (800b86c <malloc_extend_top+0x218>)
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d028      	beq.n	800b830 <malloc_extend_top+0x1dc>
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	2b0f      	cmp	r3, #15
 800b7e2:	d804      	bhi.n	800b7ee <malloc_extend_top+0x19a>
 800b7e4:	4b21      	ldr	r3, [pc, #132]	; (800b86c <malloc_extend_top+0x218>)
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	605a      	str	r2, [r3, #4]
 800b7ec:	e03a      	b.n	800b864 <malloc_extend_top+0x210>
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	3b0c      	subs	r3, #12
 800b7f2:	f023 0307 	bic.w	r3, r3, #7
 800b7f6:	61fb      	str	r3, [r7, #28]
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	f003 0201 	and.w	r2, r3, #1
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	431a      	orrs	r2, r3
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	605a      	str	r2, [r3, #4]
 800b808:	6a3a      	ldr	r2, [r7, #32]
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	4413      	add	r3, r2
 800b80e:	2205      	movs	r2, #5
 800b810:	605a      	str	r2, [r3, #4]
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	3304      	adds	r3, #4
 800b816:	6a3a      	ldr	r2, [r7, #32]
 800b818:	4413      	add	r3, r2
 800b81a:	2205      	movs	r2, #5
 800b81c:	605a      	str	r2, [r3, #4]
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	2b0f      	cmp	r3, #15
 800b822:	d905      	bls.n	800b830 <malloc_extend_top+0x1dc>
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	3308      	adds	r3, #8
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f005 fbae 	bl	8010f8c <_free_r>
 800b830:	4b11      	ldr	r3, [pc, #68]	; (800b878 <malloc_extend_top+0x224>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	461a      	mov	r2, r3
 800b836:	4b11      	ldr	r3, [pc, #68]	; (800b87c <malloc_extend_top+0x228>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d904      	bls.n	800b848 <malloc_extend_top+0x1f4>
 800b83e:	4b0e      	ldr	r3, [pc, #56]	; (800b878 <malloc_extend_top+0x224>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <malloc_extend_top+0x228>)
 800b846:	601a      	str	r2, [r3, #0]
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <malloc_extend_top+0x224>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <malloc_extend_top+0x22c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d906      	bls.n	800b864 <malloc_extend_top+0x210>
 800b856:	4b08      	ldr	r3, [pc, #32]	; (800b878 <malloc_extend_top+0x224>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	4b08      	ldr	r3, [pc, #32]	; (800b880 <malloc_extend_top+0x22c>)
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	e000      	b.n	800b864 <malloc_extend_top+0x210>
 800b862:	bf00      	nop
 800b864:	3738      	adds	r7, #56	; 0x38
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000824 	.word	0x20000824
 800b870:	200041dc 	.word	0x200041dc
 800b874:	20000c30 	.word	0x20000c30
 800b878:	200041e8 	.word	0x200041e8
 800b87c:	200041e0 	.word	0x200041e0
 800b880:	200041e4 	.word	0x200041e4

0800b884 <_malloc_r>:
 800b884:	b580      	push	{r7, lr}
 800b886:	b090      	sub	sp, #64	; 0x40
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	330b      	adds	r3, #11
 800b892:	2b16      	cmp	r3, #22
 800b894:	d904      	bls.n	800b8a0 <_malloc_r+0x1c>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	330b      	adds	r3, #11
 800b89a:	f023 0307 	bic.w	r3, r3, #7
 800b89e:	e000      	b.n	800b8a2 <_malloc_r+0x1e>
 800b8a0:	2310      	movs	r3, #16
 800b8a2:	61bb      	str	r3, [r7, #24]
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	db03      	blt.n	800b8b2 <_malloc_r+0x2e>
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d204      	bcs.n	800b8bc <_malloc_r+0x38>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	220c      	movs	r2, #12
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e2db      	b.n	800be74 <_malloc_r+0x5f0>
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f00c f852 	bl	8017966 <__malloc_lock>
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800b8c8:	d240      	bcs.n	800b94c <_malloc_r+0xc8>
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	08db      	lsrs	r3, r3, #3
 800b8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4a83      	ldr	r2, [pc, #524]	; (800bae8 <_malloc_r+0x264>)
 800b8da:	4413      	add	r3, r2
 800b8dc:	3b08      	subs	r3, #8
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d105      	bne.n	800b8fa <_malloc_r+0x76>
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	61fb      	str	r3, [r7, #28]
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d020      	beq.n	800b944 <_malloc_r+0xc0>
 800b902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f023 0303 	bic.w	r3, r3, #3
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	623b      	str	r3, [r7, #32]
 800b912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	627b      	str	r3, [r7, #36]	; 0x24
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91a:	6a3a      	ldr	r2, [r7, #32]
 800b91c:	60da      	str	r2, [r3, #12]
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b922:	609a      	str	r2, [r3, #8]
 800b924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	440b      	add	r3, r1
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	605a      	str	r2, [r3, #4]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f00c f81d 	bl	8017978 <__malloc_unlock>
 800b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b940:	3308      	adds	r3, #8
 800b942:	e297      	b.n	800be74 <_malloc_r+0x5f0>
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	3302      	adds	r3, #2
 800b948:	63bb      	str	r3, [r7, #56]	; 0x38
 800b94a:	e078      	b.n	800ba3e <_malloc_r+0x1ba>
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	0a5b      	lsrs	r3, r3, #9
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <_malloc_r+0xd6>
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	08db      	lsrs	r3, r3, #3
 800b958:	e02b      	b.n	800b9b2 <_malloc_r+0x12e>
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	0a5b      	lsrs	r3, r3, #9
 800b95e:	2b04      	cmp	r3, #4
 800b960:	d803      	bhi.n	800b96a <_malloc_r+0xe6>
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	099b      	lsrs	r3, r3, #6
 800b966:	3338      	adds	r3, #56	; 0x38
 800b968:	e023      	b.n	800b9b2 <_malloc_r+0x12e>
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	0a5b      	lsrs	r3, r3, #9
 800b96e:	2b14      	cmp	r3, #20
 800b970:	d803      	bhi.n	800b97a <_malloc_r+0xf6>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	0a5b      	lsrs	r3, r3, #9
 800b976:	335b      	adds	r3, #91	; 0x5b
 800b978:	e01b      	b.n	800b9b2 <_malloc_r+0x12e>
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	0a5b      	lsrs	r3, r3, #9
 800b97e:	2b54      	cmp	r3, #84	; 0x54
 800b980:	d803      	bhi.n	800b98a <_malloc_r+0x106>
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	0b1b      	lsrs	r3, r3, #12
 800b986:	336e      	adds	r3, #110	; 0x6e
 800b988:	e013      	b.n	800b9b2 <_malloc_r+0x12e>
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	0a5b      	lsrs	r3, r3, #9
 800b98e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b992:	d803      	bhi.n	800b99c <_malloc_r+0x118>
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	0bdb      	lsrs	r3, r3, #15
 800b998:	3377      	adds	r3, #119	; 0x77
 800b99a:	e00a      	b.n	800b9b2 <_malloc_r+0x12e>
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	0a5b      	lsrs	r3, r3, #9
 800b9a0:	f240 5254 	movw	r2, #1364	; 0x554
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d803      	bhi.n	800b9b0 <_malloc_r+0x12c>
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	0c9b      	lsrs	r3, r3, #18
 800b9ac:	337c      	adds	r3, #124	; 0x7c
 800b9ae:	e000      	b.n	800b9b2 <_malloc_r+0x12e>
 800b9b0:	237e      	movs	r3, #126	; 0x7e
 800b9b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4a4a      	ldr	r2, [pc, #296]	; (800bae8 <_malloc_r+0x264>)
 800b9be:	4413      	add	r3, r2
 800b9c0:	3b08      	subs	r3, #8
 800b9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9ca:	e031      	b.n	800ba30 <_malloc_r+0x1ac>
 800b9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f023 0303 	bic.w	r3, r3, #3
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	633b      	str	r3, [r7, #48]	; 0x30
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	2b0f      	cmp	r3, #15
 800b9e2:	dd03      	ble.n	800b9ec <_malloc_r+0x168>
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ea:	e025      	b.n	800ba38 <_malloc_r+0x1b4>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	db1b      	blt.n	800ba2a <_malloc_r+0x1a6>
 800b9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	623b      	str	r3, [r7, #32]
 800b9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	6a3a      	ldr	r2, [r7, #32]
 800ba02:	60da      	str	r2, [r3, #12]
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba08:	609a      	str	r2, [r3, #8]
 800ba0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	4413      	add	r3, r2
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	440b      	add	r3, r1
 800ba18:	f042 0201 	orr.w	r2, r2, #1
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f00b ffaa 	bl	8017978 <__malloc_unlock>
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	3308      	adds	r3, #8
 800ba28:	e224      	b.n	800be74 <_malloc_r+0x5f0>
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d1c9      	bne.n	800b9cc <_malloc_r+0x148>
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba3e:	4b2b      	ldr	r3, [pc, #172]	; (800baec <_malloc_r+0x268>)
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba44:	4a29      	ldr	r2, [pc, #164]	; (800baec <_malloc_r+0x268>)
 800ba46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	f000 80ed 	beq.w	800bc28 <_malloc_r+0x3a4>
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	f023 0303 	bic.w	r3, r3, #3
 800ba56:	617b      	str	r3, [r7, #20]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	633b      	str	r3, [r7, #48]	; 0x30
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	2b0f      	cmp	r3, #15
 800ba64:	dd26      	ble.n	800bab4 <_malloc_r+0x230>
 800ba66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	f043 0201 	orr.w	r2, r3, #1
 800ba74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba76:	605a      	str	r2, [r3, #4]
 800ba78:	4b1c      	ldr	r3, [pc, #112]	; (800baec <_malloc_r+0x268>)
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	60da      	str	r2, [r3, #12]
 800ba7e:	4a1b      	ldr	r2, [pc, #108]	; (800baec <_malloc_r+0x268>)
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	6093      	str	r3, [r2, #8]
 800ba84:	4a19      	ldr	r2, [pc, #100]	; (800baec <_malloc_r+0x268>)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	60da      	str	r2, [r3, #12]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	609a      	str	r2, [r3, #8]
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	f043 0301 	orr.w	r3, r3, #1
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	4413      	add	r3, r2
 800baa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa6:	601a      	str	r2, [r3, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f00b ff65 	bl	8017978 <__malloc_unlock>
 800baae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab0:	3308      	adds	r3, #8
 800bab2:	e1df      	b.n	800be74 <_malloc_r+0x5f0>
 800bab4:	4b0d      	ldr	r3, [pc, #52]	; (800baec <_malloc_r+0x268>)
 800bab6:	4a0d      	ldr	r2, [pc, #52]	; (800baec <_malloc_r+0x268>)
 800bab8:	60da      	str	r2, [r3, #12]
 800baba:	4a0c      	ldr	r2, [pc, #48]	; (800baec <_malloc_r+0x268>)
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	6093      	str	r3, [r2, #8]
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	db14      	blt.n	800baf0 <_malloc_r+0x26c>
 800bac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	4413      	add	r3, r2
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	440b      	add	r3, r1
 800bad4:	f042 0201 	orr.w	r2, r2, #1
 800bad8:	605a      	str	r2, [r3, #4]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f00b ff4c 	bl	8017978 <__malloc_unlock>
 800bae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae2:	3308      	adds	r3, #8
 800bae4:	e1c6      	b.n	800be74 <_malloc_r+0x5f0>
 800bae6:	bf00      	nop
 800bae8:	20000824 	.word	0x20000824
 800baec:	2000082c 	.word	0x2000082c
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf6:	d228      	bcs.n	800bb4a <_malloc_r+0x2c6>
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	08db      	lsrs	r3, r3, #3
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	4b96      	ldr	r3, [pc, #600]	; (800bd58 <_malloc_r+0x4d4>)
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da00      	bge.n	800bb0a <_malloc_r+0x286>
 800bb08:	3303      	adds	r3, #3
 800bb0a:	109b      	asrs	r3, r3, #2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	2301      	movs	r3, #1
 800bb10:	408b      	lsls	r3, r1
 800bb12:	4991      	ldr	r1, [pc, #580]	; (800bd58 <_malloc_r+0x4d4>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	604b      	str	r3, [r1, #4]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4a8d      	ldr	r2, [pc, #564]	; (800bd58 <_malloc_r+0x4d4>)
 800bb22:	4413      	add	r3, r2
 800bb24:	3b08      	subs	r3, #8
 800bb26:	623b      	str	r3, [r7, #32]
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb30:	6a3a      	ldr	r2, [r7, #32]
 800bb32:	60da      	str	r2, [r3, #12]
 800bb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb38:	609a      	str	r2, [r3, #8]
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb3e:	609a      	str	r2, [r3, #8]
 800bb40:	6a3b      	ldr	r3, [r7, #32]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	60da      	str	r2, [r3, #12]
 800bb48:	e06e      	b.n	800bc28 <_malloc_r+0x3a4>
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	0a5b      	lsrs	r3, r3, #9
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d102      	bne.n	800bb58 <_malloc_r+0x2d4>
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	08db      	lsrs	r3, r3, #3
 800bb56:	e02b      	b.n	800bbb0 <_malloc_r+0x32c>
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	0a5b      	lsrs	r3, r3, #9
 800bb5c:	2b04      	cmp	r3, #4
 800bb5e:	d803      	bhi.n	800bb68 <_malloc_r+0x2e4>
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	099b      	lsrs	r3, r3, #6
 800bb64:	3338      	adds	r3, #56	; 0x38
 800bb66:	e023      	b.n	800bbb0 <_malloc_r+0x32c>
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	0a5b      	lsrs	r3, r3, #9
 800bb6c:	2b14      	cmp	r3, #20
 800bb6e:	d803      	bhi.n	800bb78 <_malloc_r+0x2f4>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	0a5b      	lsrs	r3, r3, #9
 800bb74:	335b      	adds	r3, #91	; 0x5b
 800bb76:	e01b      	b.n	800bbb0 <_malloc_r+0x32c>
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	0a5b      	lsrs	r3, r3, #9
 800bb7c:	2b54      	cmp	r3, #84	; 0x54
 800bb7e:	d803      	bhi.n	800bb88 <_malloc_r+0x304>
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	0b1b      	lsrs	r3, r3, #12
 800bb84:	336e      	adds	r3, #110	; 0x6e
 800bb86:	e013      	b.n	800bbb0 <_malloc_r+0x32c>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	0a5b      	lsrs	r3, r3, #9
 800bb8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bb90:	d803      	bhi.n	800bb9a <_malloc_r+0x316>
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	0bdb      	lsrs	r3, r3, #15
 800bb96:	3377      	adds	r3, #119	; 0x77
 800bb98:	e00a      	b.n	800bbb0 <_malloc_r+0x32c>
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	0a5b      	lsrs	r3, r3, #9
 800bb9e:	f240 5254 	movw	r2, #1364	; 0x554
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d803      	bhi.n	800bbae <_malloc_r+0x32a>
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	0c9b      	lsrs	r3, r3, #18
 800bbaa:	337c      	adds	r3, #124	; 0x7c
 800bbac:	e000      	b.n	800bbb0 <_malloc_r+0x32c>
 800bbae:	237e      	movs	r3, #126	; 0x7e
 800bbb0:	613b      	str	r3, [r7, #16]
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4a67      	ldr	r2, [pc, #412]	; (800bd58 <_malloc_r+0x4d4>)
 800bbbc:	4413      	add	r3, r2
 800bbbe:	3b08      	subs	r3, #8
 800bbc0:	623b      	str	r3, [r7, #32]
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbca:	6a3b      	ldr	r3, [r7, #32]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d110      	bne.n	800bbf2 <_malloc_r+0x36e>
 800bbd0:	4b61      	ldr	r3, [pc, #388]	; (800bd58 <_malloc_r+0x4d4>)
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	da00      	bge.n	800bbdc <_malloc_r+0x358>
 800bbda:	3303      	adds	r3, #3
 800bbdc:	109b      	asrs	r3, r3, #2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	408b      	lsls	r3, r1
 800bbe4:	495c      	ldr	r1, [pc, #368]	; (800bd58 <_malloc_r+0x4d4>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	604b      	str	r3, [r1, #4]
 800bbea:	e010      	b.n	800bc0e <_malloc_r+0x38a>
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d006      	beq.n	800bc08 <_malloc_r+0x384>
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d3f1      	bcc.n	800bbec <_malloc_r+0x368>
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	623b      	str	r3, [r7, #32]
 800bc0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc10:	6a3a      	ldr	r2, [r7, #32]
 800bc12:	60da      	str	r2, [r3, #12]
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc18:	609a      	str	r2, [r3, #8]
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc1e:	609a      	str	r2, [r3, #8]
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	689a      	ldr	r2, [r3, #8]
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	60da      	str	r2, [r3, #12]
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	da00      	bge.n	800bc30 <_malloc_r+0x3ac>
 800bc2e:	3303      	adds	r3, #3
 800bc30:	109b      	asrs	r3, r3, #2
 800bc32:	461a      	mov	r2, r3
 800bc34:	2301      	movs	r3, #1
 800bc36:	4093      	lsls	r3, r2
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc3a:	4b47      	ldr	r3, [pc, #284]	; (800bd58 <_malloc_r+0x4d4>)
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc40:	429a      	cmp	r2, r3
 800bc42:	f200 80d0 	bhi.w	800bde6 <_malloc_r+0x562>
 800bc46:	4b44      	ldr	r3, [pc, #272]	; (800bd58 <_malloc_r+0x4d4>)
 800bc48:	685a      	ldr	r2, [r3, #4]
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d114      	bne.n	800bc7c <_malloc_r+0x3f8>
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	f023 0303 	bic.w	r3, r3, #3
 800bc58:	3304      	adds	r3, #4
 800bc5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc62:	e005      	b.n	800bc70 <_malloc_r+0x3ec>
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	3304      	adds	r3, #4
 800bc68:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc70:	4b39      	ldr	r3, [pc, #228]	; (800bd58 <_malloc_r+0x4d4>)
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	4013      	ands	r3, r2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0f3      	beq.n	800bc64 <_malloc_r+0x3e0>
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	3301      	adds	r3, #1
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4a33      	ldr	r2, [pc, #204]	; (800bd58 <_malloc_r+0x4d4>)
 800bc8a:	4413      	add	r3, r2
 800bc8c:	3b08      	subs	r3, #8
 800bc8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc9a:	e064      	b.n	800bd66 <_malloc_r+0x4e2>
 800bc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	f023 0303 	bic.w	r3, r3, #3
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	633b      	str	r3, [r7, #48]	; 0x30
 800bcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb0:	2b0f      	cmp	r3, #15
 800bcb2:	dd32      	ble.n	800bd1a <_malloc_r+0x496>
 800bcb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	4413      	add	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	f043 0201 	orr.w	r2, r3, #1
 800bcc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc4:	605a      	str	r2, [r3, #4]
 800bcc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	623b      	str	r3, [r7, #32]
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	6a3a      	ldr	r2, [r7, #32]
 800bcd6:	60da      	str	r2, [r3, #12]
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcdc:	609a      	str	r2, [r3, #8]
 800bcde:	4b1f      	ldr	r3, [pc, #124]	; (800bd5c <_malloc_r+0x4d8>)
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	60da      	str	r2, [r3, #12]
 800bce4:	4a1d      	ldr	r2, [pc, #116]	; (800bd5c <_malloc_r+0x4d8>)
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	6093      	str	r3, [r2, #8]
 800bcea:	4a1c      	ldr	r2, [pc, #112]	; (800bd5c <_malloc_r+0x4d8>)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	60da      	str	r2, [r3, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	609a      	str	r2, [r3, #8]
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfa:	f043 0301 	orr.w	r3, r3, #1
 800bcfe:	461a      	mov	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	605a      	str	r2, [r3, #4]
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f00b fe32 	bl	8017978 <__malloc_unlock>
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	3308      	adds	r3, #8
 800bd18:	e0ac      	b.n	800be74 <_malloc_r+0x5f0>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	db1f      	blt.n	800bd60 <_malloc_r+0x4dc>
 800bd20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	685a      	ldr	r2, [r3, #4]
 800bd28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f042 0201 	orr.w	r2, r2, #1
 800bd32:	605a      	str	r2, [r3, #4]
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	623b      	str	r3, [r7, #32]
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	6a3a      	ldr	r2, [r7, #32]
 800bd44:	60da      	str	r2, [r3, #12]
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd4a:	609a      	str	r2, [r3, #8]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f00b fe13 	bl	8017978 <__malloc_unlock>
 800bd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd54:	3308      	adds	r3, #8
 800bd56:	e08d      	b.n	800be74 <_malloc_r+0x5f0>
 800bd58:	20000824 	.word	0x20000824
 800bd5c:	2000082c 	.word	0x2000082c
 800bd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d196      	bne.n	800bc9c <_malloc_r+0x418>
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	3308      	adds	r3, #8
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	3301      	adds	r3, #1
 800bd78:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d187      	bne.n	800bc94 <_malloc_r+0x410>
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d107      	bne.n	800bd9e <_malloc_r+0x51a>
 800bd8e:	4b3b      	ldr	r3, [pc, #236]	; (800be7c <_malloc_r+0x5f8>)
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	43db      	mvns	r3, r3
 800bd96:	4939      	ldr	r1, [pc, #228]	; (800be7c <_malloc_r+0x5f8>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	604b      	str	r3, [r1, #4]
 800bd9c:	e00a      	b.n	800bdb4 <_malloc_r+0x530>
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	3b01      	subs	r3, #1
 800bda2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	3b08      	subs	r3, #8
 800bda8:	61fb      	str	r3, [r7, #28]
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	69fa      	ldr	r2, [r7, #28]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d0e7      	beq.n	800bd84 <_malloc_r+0x500>
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdba:	4b30      	ldr	r3, [pc, #192]	; (800be7c <_malloc_r+0x5f8>)
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d810      	bhi.n	800bde6 <_malloc_r+0x562>
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <_malloc_r+0x562>
 800bdca:	e005      	b.n	800bdd8 <_malloc_r+0x554>
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	3304      	adds	r3, #4
 800bdd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdd8:	4b28      	ldr	r3, [pc, #160]	; (800be7c <_malloc_r+0x5f8>)
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0f3      	beq.n	800bdcc <_malloc_r+0x548>
 800bde4:	e74a      	b.n	800bc7c <_malloc_r+0x3f8>
 800bde6:	4b25      	ldr	r3, [pc, #148]	; (800be7c <_malloc_r+0x5f8>)
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f023 0203 	bic.w	r2, r3, #3
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	633b      	str	r3, [r7, #48]	; 0x30
 800bdf6:	4b21      	ldr	r3, [pc, #132]	; (800be7c <_malloc_r+0x5f8>)
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	429a      	cmp	r2, r3
 800be04:	d802      	bhi.n	800be0c <_malloc_r+0x588>
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	2b0f      	cmp	r3, #15
 800be0a:	dc1b      	bgt.n	800be44 <_malloc_r+0x5c0>
 800be0c:	69b9      	ldr	r1, [r7, #24]
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff fc20 	bl	800b654 <malloc_extend_top>
 800be14:	4b19      	ldr	r3, [pc, #100]	; (800be7c <_malloc_r+0x5f8>)
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f023 0203 	bic.w	r2, r3, #3
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	633b      	str	r3, [r7, #48]	; 0x30
 800be24:	4b15      	ldr	r3, [pc, #84]	; (800be7c <_malloc_r+0x5f8>)
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	69ba      	ldr	r2, [r7, #24]
 800be30:	429a      	cmp	r2, r3
 800be32:	d802      	bhi.n	800be3a <_malloc_r+0x5b6>
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	2b0f      	cmp	r3, #15
 800be38:	dc04      	bgt.n	800be44 <_malloc_r+0x5c0>
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f00b fd9c 	bl	8017978 <__malloc_unlock>
 800be40:	2300      	movs	r3, #0
 800be42:	e017      	b.n	800be74 <_malloc_r+0x5f0>
 800be44:	4b0d      	ldr	r3, [pc, #52]	; (800be7c <_malloc_r+0x5f8>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	f043 0201 	orr.w	r2, r3, #1
 800be50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be52:	605a      	str	r2, [r3, #4]
 800be54:	4909      	ldr	r1, [pc, #36]	; (800be7c <_malloc_r+0x5f8>)
 800be56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	4413      	add	r3, r2
 800be5c:	608b      	str	r3, [r1, #8]
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	f043 0201 	orr.w	r2, r3, #1
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <_malloc_r+0x5f8>)
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	605a      	str	r2, [r3, #4]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f00b fd84 	bl	8017978 <__malloc_unlock>
 800be70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be72:	3308      	adds	r3, #8
 800be74:	4618      	mov	r0, r3
 800be76:	3740      	adds	r7, #64	; 0x40
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20000824 	.word	0x20000824

0800be80 <printf>:
 800be80:	b40f      	push	{r0, r1, r2, r3}
 800be82:	b580      	push	{r7, lr}
 800be84:	b084      	sub	sp, #16
 800be86:	af00      	add	r7, sp, #0
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <printf+0x34>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	f107 031c 	add.w	r3, r7, #28
 800be92:	607b      	str	r3, [r7, #4]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6899      	ldr	r1, [r3, #8]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f003 fa13 	bl	800f2c8 <_vfprintf_r>
 800bea2:	60b8      	str	r0, [r7, #8]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800beb0:	b004      	add	sp, #16
 800beb2:	4770      	bx	lr
 800beb4:	20000820 	.word	0x20000820

0800beb8 <srand>:
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	4b07      	ldr	r3, [pc, #28]	; (800bee0 <srand+0x28>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	461a      	mov	r2, r3
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800bed4:	bf00      	nop
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	bc80      	pop	{r7}
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	20000820 	.word	0x20000820

0800bee4 <rand>:
 800bee4:	b4b0      	push	{r4, r5, r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <rand+0x58>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	607b      	str	r3, [r7, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800bef6:	4c12      	ldr	r4, [pc, #72]	; (800bf40 <rand+0x5c>)
 800bef8:	fb04 f503 	mul.w	r5, r4, r3
 800befc:	4c11      	ldr	r4, [pc, #68]	; (800bf44 <rand+0x60>)
 800befe:	fb04 f402 	mul.w	r4, r4, r2
 800bf02:	442c      	add	r4, r5
 800bf04:	4d0e      	ldr	r5, [pc, #56]	; (800bf40 <rand+0x5c>)
 800bf06:	fba2 2305 	umull	r2, r3, r2, r5
 800bf0a:	441c      	add	r4, r3
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	1c50      	adds	r0, r2, #1
 800bf10:	f143 0100 	adc.w	r1, r3, #0
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800bf20:	f04f 0200 	mov.w	r2, #0
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	000a      	movs	r2, r1
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bcb0      	pop	{r4, r5, r7}
 800bf3a:	4770      	bx	lr
 800bf3c:	20000820 	.word	0x20000820
 800bf40:	4c957f2d 	.word	0x4c957f2d
 800bf44:	5851f42d 	.word	0x5851f42d

0800bf48 <realloc>:
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <realloc+0x24>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	6879      	ldr	r1, [r7, #4]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 f808 	bl	800bf70 <_realloc_r>
 800bf60:	4603      	mov	r3, r0
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000820 	.word	0x20000820

0800bf70 <_realloc_r>:
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b09e      	sub	sp, #120	; 0x78
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <_realloc_r+0x1e>
 800bf82:	6879      	ldr	r1, [r7, #4]
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fc7d 	bl	800b884 <_malloc_r>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	e316      	b.n	800c5bc <_realloc_r+0x64c>
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f00b fce9 	bl	8017966 <__malloc_lock>
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3b08      	subs	r3, #8
 800bf98:	647b      	str	r3, [r7, #68]	; 0x44
 800bf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9c:	677b      	str	r3, [r7, #116]	; 0x74
 800bf9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	643b      	str	r3, [r7, #64]	; 0x40
 800bfa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfaa:	673b      	str	r3, [r7, #112]	; 0x70
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	330b      	adds	r3, #11
 800bfb0:	2b16      	cmp	r3, #22
 800bfb2:	d904      	bls.n	800bfbe <_realloc_r+0x4e>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	330b      	adds	r3, #11
 800bfb8:	f023 0307 	bic.w	r3, r3, #7
 800bfbc:	e000      	b.n	800bfc0 <_realloc_r+0x50>
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	db03      	blt.n	800bfd0 <_realloc_r+0x60>
 800bfc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d204      	bcs.n	800bfda <_realloc_r+0x6a>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	220c      	movs	r2, #12
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e2f0      	b.n	800c5bc <_realloc_r+0x64c>
 800bfda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	f280 82ab 	bge.w	800c53a <_realloc_r+0x5ca>
 800bfe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe8:	4413      	add	r3, r2
 800bfea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfec:	4b89      	ldr	r3, [pc, #548]	; (800c214 <_realloc_r+0x2a4>)
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d00a      	beq.n	800c00c <_realloc_r+0x9c>
 800bff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f023 0301 	bic.w	r3, r3, #1
 800bffe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c000:	4413      	add	r3, r2
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	f003 0301 	and.w	r3, r3, #1
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d148      	bne.n	800c09e <_realloc_r+0x12e>
 800c00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f023 0303 	bic.w	r3, r3, #3
 800c014:	66bb      	str	r3, [r7, #104]	; 0x68
 800c016:	4b7f      	ldr	r3, [pc, #508]	; (800c214 <_realloc_r+0x2a4>)
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d126      	bne.n	800c06e <_realloc_r+0xfe>
 800c020:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c024:	4413      	add	r3, r2
 800c026:	461a      	mov	r2, r3
 800c028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02a:	3310      	adds	r3, #16
 800c02c:	429a      	cmp	r2, r3
 800c02e:	db3b      	blt.n	800c0a8 <_realloc_r+0x138>
 800c030:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c034:	4413      	add	r3, r2
 800c036:	673b      	str	r3, [r7, #112]	; 0x70
 800c038:	4976      	ldr	r1, [pc, #472]	; (800c214 <_realloc_r+0x2a4>)
 800c03a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03e:	4413      	add	r3, r2
 800c040:	608b      	str	r3, [r1, #8]
 800c042:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c046:	1ad2      	subs	r2, r2, r3
 800c048:	4b72      	ldr	r3, [pc, #456]	; (800c214 <_realloc_r+0x2a4>)
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	f042 0201 	orr.w	r2, r2, #1
 800c050:	605a      	str	r2, [r3, #4]
 800c052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f003 0201 	and.w	r2, r3, #1
 800c05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05c:	431a      	orrs	r2, r3
 800c05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c060:	605a      	str	r2, [r3, #4]
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f00b fc88 	bl	8017978 <__malloc_unlock>
 800c068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c06a:	3308      	adds	r3, #8
 800c06c:	e2a6      	b.n	800c5bc <_realloc_r+0x64c>
 800c06e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c072:	4413      	add	r3, r2
 800c074:	461a      	mov	r2, r3
 800c076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c078:	429a      	cmp	r2, r3
 800c07a:	db15      	blt.n	800c0a8 <_realloc_r+0x138>
 800c07c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	63bb      	str	r3, [r7, #56]	; 0x38
 800c082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
 800c088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c08c:	60da      	str	r2, [r3, #12]
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c092:	609a      	str	r2, [r3, #8]
 800c094:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c096:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c098:	4413      	add	r3, r2
 800c09a:	673b      	str	r3, [r7, #112]	; 0x70
 800c09c:	e24e      	b.n	800c53c <_realloc_r+0x5cc>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0a6:	e000      	b.n	800c0aa <_realloc_r+0x13a>
 800c0a8:	bf00      	nop
 800c0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f040 81b8 	bne.w	800c428 <_realloc_r+0x4b8>
 800c0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	425b      	negs	r3, r3
 800c0be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0c0:	4413      	add	r3, r2
 800c0c2:	633b      	str	r3, [r7, #48]	; 0x30
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	f023 0303 	bic.w	r3, r3, #3
 800c0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 812c 	beq.w	800c32e <_realloc_r+0x3be>
 800c0d6:	4b4f      	ldr	r3, [pc, #316]	; (800c214 <_realloc_r+0x2a4>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	f040 809b 	bne.w	800c218 <_realloc_r+0x2a8>
 800c0e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	441a      	add	r2, r3
 800c0e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0ea:	4413      	add	r3, r2
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f0:	3310      	adds	r3, #16
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	f2c0 811b 	blt.w	800c32e <_realloc_r+0x3be>
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	637b      	str	r3, [r7, #52]	; 0x34
 800c104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c108:	60da      	str	r2, [r3, #12]
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c10e:	609a      	str	r2, [r3, #8]
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	677b      	str	r3, [r7, #116]	; 0x74
 800c114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c118:	4413      	add	r3, r2
 800c11a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c11c:	4413      	add	r3, r2
 800c11e:	673b      	str	r3, [r7, #112]	; 0x70
 800c120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c122:	3308      	adds	r3, #8
 800c124:	62bb      	str	r3, [r7, #40]	; 0x28
 800c126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c128:	3b04      	subs	r3, #4
 800c12a:	623b      	str	r3, [r7, #32]
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	2b24      	cmp	r3, #36	; 0x24
 800c130:	d851      	bhi.n	800c1d6 <_realloc_r+0x266>
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	667b      	str	r3, [r7, #100]	; 0x64
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	663b      	str	r3, [r7, #96]	; 0x60
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	2b13      	cmp	r3, #19
 800c13e:	d935      	bls.n	800c1ac <_realloc_r+0x23c>
 800c140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c142:	1d13      	adds	r3, r2, #4
 800c144:	667b      	str	r3, [r7, #100]	; 0x64
 800c146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c148:	1d19      	adds	r1, r3, #4
 800c14a:	6639      	str	r1, [r7, #96]	; 0x60
 800c14c:	6812      	ldr	r2, [r2, #0]
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c152:	1d13      	adds	r3, r2, #4
 800c154:	667b      	str	r3, [r7, #100]	; 0x64
 800c156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c158:	1d19      	adds	r1, r3, #4
 800c15a:	6639      	str	r1, [r7, #96]	; 0x60
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	2b1b      	cmp	r3, #27
 800c164:	d922      	bls.n	800c1ac <_realloc_r+0x23c>
 800c166:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c168:	1d13      	adds	r3, r2, #4
 800c16a:	667b      	str	r3, [r7, #100]	; 0x64
 800c16c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c16e:	1d19      	adds	r1, r3, #4
 800c170:	6639      	str	r1, [r7, #96]	; 0x60
 800c172:	6812      	ldr	r2, [r2, #0]
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c178:	1d13      	adds	r3, r2, #4
 800c17a:	667b      	str	r3, [r7, #100]	; 0x64
 800c17c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c17e:	1d19      	adds	r1, r3, #4
 800c180:	6639      	str	r1, [r7, #96]	; 0x60
 800c182:	6812      	ldr	r2, [r2, #0]
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	2b23      	cmp	r3, #35	; 0x23
 800c18a:	d90f      	bls.n	800c1ac <_realloc_r+0x23c>
 800c18c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c18e:	1d13      	adds	r3, r2, #4
 800c190:	667b      	str	r3, [r7, #100]	; 0x64
 800c192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c194:	1d19      	adds	r1, r3, #4
 800c196:	6639      	str	r1, [r7, #96]	; 0x60
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c19e:	1d13      	adds	r3, r2, #4
 800c1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1a4:	1d19      	adds	r1, r3, #4
 800c1a6:	6639      	str	r1, [r7, #96]	; 0x60
 800c1a8:	6812      	ldr	r2, [r2, #0]
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ae:	1d13      	adds	r3, r2, #4
 800c1b0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1b4:	1d19      	adds	r1, r3, #4
 800c1b6:	6639      	str	r1, [r7, #96]	; 0x60
 800c1b8:	6812      	ldr	r2, [r2, #0]
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1be:	1d13      	adds	r3, r2, #4
 800c1c0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	6639      	str	r1, [r7, #96]	; 0x60
 800c1c8:	6812      	ldr	r2, [r2, #0]
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	e004      	b.n	800c1e0 <_realloc_r+0x270>
 800c1d6:	6a3a      	ldr	r2, [r7, #32]
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1dc:	f00b fac1 	bl	8017762 <memmove>
 800c1e0:	490c      	ldr	r1, [pc, #48]	; (800c214 <_realloc_r+0x2a4>)
 800c1e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e6:	4413      	add	r3, r2
 800c1e8:	608b      	str	r3, [r1, #8]
 800c1ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	4b08      	ldr	r3, [pc, #32]	; (800c214 <_realloc_r+0x2a4>)
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f042 0201 	orr.w	r2, r2, #1
 800c1f8:	605a      	str	r2, [r3, #4]
 800c1fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	f003 0201 	and.w	r2, r3, #1
 800c202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c204:	431a      	orrs	r2, r3
 800c206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c208:	605a      	str	r2, [r3, #4]
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f00b fbb4 	bl	8017978 <__malloc_unlock>
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	e1d3      	b.n	800c5bc <_realloc_r+0x64c>
 800c214:	20000824 	.word	0x20000824
 800c218:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	441a      	add	r2, r3
 800c21e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c220:	4413      	add	r3, r2
 800c222:	461a      	mov	r2, r3
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	429a      	cmp	r2, r3
 800c228:	f2c0 8081 	blt.w	800c32e <_realloc_r+0x3be>
 800c22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	63bb      	str	r3, [r7, #56]	; 0x38
 800c232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
 800c238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c23c:	60da      	str	r2, [r3, #12]
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c242:	609a      	str	r2, [r3, #8]
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	63bb      	str	r3, [r7, #56]	; 0x38
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	637b      	str	r3, [r7, #52]	; 0x34
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c254:	60da      	str	r2, [r3, #12]
 800c256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c25a:	609a      	str	r2, [r3, #8]
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	677b      	str	r3, [r7, #116]	; 0x74
 800c260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	4413      	add	r3, r2
 800c266:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c268:	4413      	add	r3, r2
 800c26a:	673b      	str	r3, [r7, #112]	; 0x70
 800c26c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c26e:	3308      	adds	r3, #8
 800c270:	62bb      	str	r3, [r7, #40]	; 0x28
 800c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c274:	3b04      	subs	r3, #4
 800c276:	627b      	str	r3, [r7, #36]	; 0x24
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	2b24      	cmp	r3, #36	; 0x24
 800c27c:	d851      	bhi.n	800c322 <_realloc_r+0x3b2>
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	65bb      	str	r3, [r7, #88]	; 0x58
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	2b13      	cmp	r3, #19
 800c28a:	d935      	bls.n	800c2f8 <_realloc_r+0x388>
 800c28c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c28e:	1d13      	adds	r3, r2, #4
 800c290:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c294:	1d19      	adds	r1, r3, #4
 800c296:	65b9      	str	r1, [r7, #88]	; 0x58
 800c298:	6812      	ldr	r2, [r2, #0]
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c29e:	1d13      	adds	r3, r2, #4
 800c2a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2a4:	1d19      	adds	r1, r3, #4
 800c2a6:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	2b1b      	cmp	r3, #27
 800c2b0:	d922      	bls.n	800c2f8 <_realloc_r+0x388>
 800c2b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2b4:	1d13      	adds	r3, r2, #4
 800c2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2ba:	1d19      	adds	r1, r3, #4
 800c2bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2be:	6812      	ldr	r2, [r2, #0]
 800c2c0:	601a      	str	r2, [r3, #0]
 800c2c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2c4:	1d13      	adds	r3, r2, #4
 800c2c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2ca:	1d19      	adds	r1, r3, #4
 800c2cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2ce:	6812      	ldr	r2, [r2, #0]
 800c2d0:	601a      	str	r2, [r3, #0]
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d4:	2b23      	cmp	r3, #35	; 0x23
 800c2d6:	d90f      	bls.n	800c2f8 <_realloc_r+0x388>
 800c2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2da:	1d13      	adds	r3, r2, #4
 800c2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2e0:	1d19      	adds	r1, r3, #4
 800c2e2:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2ea:	1d13      	adds	r3, r2, #4
 800c2ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c2f0:	1d19      	adds	r1, r3, #4
 800c2f2:	65b9      	str	r1, [r7, #88]	; 0x58
 800c2f4:	6812      	ldr	r2, [r2, #0]
 800c2f6:	601a      	str	r2, [r3, #0]
 800c2f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2fa:	1d13      	adds	r3, r2, #4
 800c2fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	65b9      	str	r1, [r7, #88]	; 0x58
 800c304:	6812      	ldr	r2, [r2, #0]
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c30a:	1d13      	adds	r3, r2, #4
 800c30c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c30e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c310:	1d19      	adds	r1, r3, #4
 800c312:	65b9      	str	r1, [r7, #88]	; 0x58
 800c314:	6812      	ldr	r2, [r2, #0]
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c31e:	601a      	str	r2, [r3, #0]
 800c320:	e10c      	b.n	800c53c <_realloc_r+0x5cc>
 800c322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c324:	68b9      	ldr	r1, [r7, #8]
 800c326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c328:	f00b fa1b 	bl	8017762 <memmove>
 800c32c:	e106      	b.n	800c53c <_realloc_r+0x5cc>
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	2b00      	cmp	r3, #0
 800c332:	d079      	beq.n	800c428 <_realloc_r+0x4b8>
 800c334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c338:	4413      	add	r3, r2
 800c33a:	461a      	mov	r2, r3
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	429a      	cmp	r2, r3
 800c340:	db72      	blt.n	800c428 <_realloc_r+0x4b8>
 800c342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
 800c34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c352:	60da      	str	r2, [r3, #12]
 800c354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c358:	609a      	str	r2, [r3, #8]
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	677b      	str	r3, [r7, #116]	; 0x74
 800c35e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	4413      	add	r3, r2
 800c364:	673b      	str	r3, [r7, #112]	; 0x70
 800c366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c368:	3308      	adds	r3, #8
 800c36a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c36c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36e:	3b04      	subs	r3, #4
 800c370:	61fb      	str	r3, [r7, #28]
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	2b24      	cmp	r3, #36	; 0x24
 800c376:	d851      	bhi.n	800c41c <_realloc_r+0x4ac>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	657b      	str	r3, [r7, #84]	; 0x54
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	653b      	str	r3, [r7, #80]	; 0x50
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	2b13      	cmp	r3, #19
 800c384:	d935      	bls.n	800c3f2 <_realloc_r+0x482>
 800c386:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c388:	1d13      	adds	r3, r2, #4
 800c38a:	657b      	str	r3, [r7, #84]	; 0x54
 800c38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38e:	1d19      	adds	r1, r3, #4
 800c390:	6539      	str	r1, [r7, #80]	; 0x50
 800c392:	6812      	ldr	r2, [r2, #0]
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c398:	1d13      	adds	r3, r2, #4
 800c39a:	657b      	str	r3, [r7, #84]	; 0x54
 800c39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c39e:	1d19      	adds	r1, r3, #4
 800c3a0:	6539      	str	r1, [r7, #80]	; 0x50
 800c3a2:	6812      	ldr	r2, [r2, #0]
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	2b1b      	cmp	r3, #27
 800c3aa:	d922      	bls.n	800c3f2 <_realloc_r+0x482>
 800c3ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3ae:	1d13      	adds	r3, r2, #4
 800c3b0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b4:	1d19      	adds	r1, r3, #4
 800c3b6:	6539      	str	r1, [r7, #80]	; 0x50
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3be:	1d13      	adds	r3, r2, #4
 800c3c0:	657b      	str	r3, [r7, #84]	; 0x54
 800c3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3c4:	1d19      	adds	r1, r3, #4
 800c3c6:	6539      	str	r1, [r7, #80]	; 0x50
 800c3c8:	6812      	ldr	r2, [r2, #0]
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	2b23      	cmp	r3, #35	; 0x23
 800c3d0:	d90f      	bls.n	800c3f2 <_realloc_r+0x482>
 800c3d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3d4:	1d13      	adds	r3, r2, #4
 800c3d6:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3da:	1d19      	adds	r1, r3, #4
 800c3dc:	6539      	str	r1, [r7, #80]	; 0x50
 800c3de:	6812      	ldr	r2, [r2, #0]
 800c3e0:	601a      	str	r2, [r3, #0]
 800c3e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3e4:	1d13      	adds	r3, r2, #4
 800c3e6:	657b      	str	r3, [r7, #84]	; 0x54
 800c3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3ea:	1d19      	adds	r1, r3, #4
 800c3ec:	6539      	str	r1, [r7, #80]	; 0x50
 800c3ee:	6812      	ldr	r2, [r2, #0]
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3f4:	1d13      	adds	r3, r2, #4
 800c3f6:	657b      	str	r3, [r7, #84]	; 0x54
 800c3f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3fa:	1d19      	adds	r1, r3, #4
 800c3fc:	6539      	str	r1, [r7, #80]	; 0x50
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	601a      	str	r2, [r3, #0]
 800c402:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c404:	1d13      	adds	r3, r2, #4
 800c406:	657b      	str	r3, [r7, #84]	; 0x54
 800c408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c40a:	1d19      	adds	r1, r3, #4
 800c40c:	6539      	str	r1, [r7, #80]	; 0x50
 800c40e:	6812      	ldr	r2, [r2, #0]
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	e08f      	b.n	800c53c <_realloc_r+0x5cc>
 800c41c:	69fa      	ldr	r2, [r7, #28]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c422:	f00b f99e 	bl	8017762 <memmove>
 800c426:	e089      	b.n	800c53c <_realloc_r+0x5cc>
 800c428:	6879      	ldr	r1, [r7, #4]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7ff fa2a 	bl	800b884 <_malloc_r>
 800c430:	62b8      	str	r0, [r7, #40]	; 0x28
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	2b00      	cmp	r3, #0
 800c436:	d104      	bne.n	800c442 <_realloc_r+0x4d2>
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f00b fa9d 	bl	8017978 <__malloc_unlock>
 800c43e:	2300      	movs	r3, #0
 800c440:	e0bc      	b.n	800c5bc <_realloc_r+0x64c>
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	3b08      	subs	r3, #8
 800c446:	677b      	str	r3, [r7, #116]	; 0x74
 800c448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f023 0301 	bic.w	r3, r3, #1
 800c450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c452:	4413      	add	r3, r2
 800c454:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c456:	429a      	cmp	r2, r3
 800c458:	d109      	bne.n	800c46e <_realloc_r+0x4fe>
 800c45a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c464:	4413      	add	r3, r2
 800c466:	673b      	str	r3, [r7, #112]	; 0x70
 800c468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c46a:	677b      	str	r3, [r7, #116]	; 0x74
 800c46c:	e066      	b.n	800c53c <_realloc_r+0x5cc>
 800c46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c470:	3b04      	subs	r3, #4
 800c472:	61bb      	str	r3, [r7, #24]
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	2b24      	cmp	r3, #36	; 0x24
 800c478:	d851      	bhi.n	800c51e <_realloc_r+0x5ae>
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	64bb      	str	r3, [r7, #72]	; 0x48
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	2b13      	cmp	r3, #19
 800c486:	d935      	bls.n	800c4f4 <_realloc_r+0x584>
 800c488:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c48a:	1d13      	adds	r3, r2, #4
 800c48c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c490:	1d19      	adds	r1, r3, #4
 800c492:	64b9      	str	r1, [r7, #72]	; 0x48
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c49a:	1d13      	adds	r3, r2, #4
 800c49c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c49e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a0:	1d19      	adds	r1, r3, #4
 800c4a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b1b      	cmp	r3, #27
 800c4ac:	d922      	bls.n	800c4f4 <_realloc_r+0x584>
 800c4ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4b0:	1d13      	adds	r3, r2, #4
 800c4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4b6:	1d19      	adds	r1, r3, #4
 800c4b8:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4ba:	6812      	ldr	r2, [r2, #0]
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4c0:	1d13      	adds	r3, r2, #4
 800c4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4c6:	1d19      	adds	r1, r3, #4
 800c4c8:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4ca:	6812      	ldr	r2, [r2, #0]
 800c4cc:	601a      	str	r2, [r3, #0]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	2b23      	cmp	r3, #35	; 0x23
 800c4d2:	d90f      	bls.n	800c4f4 <_realloc_r+0x584>
 800c4d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4d6:	1d13      	adds	r3, r2, #4
 800c4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4dc:	1d19      	adds	r1, r3, #4
 800c4de:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4e0:	6812      	ldr	r2, [r2, #0]
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4e6:	1d13      	adds	r3, r2, #4
 800c4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ec:	1d19      	adds	r1, r3, #4
 800c4ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800c4f0:	6812      	ldr	r2, [r2, #0]
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4f6:	1d13      	adds	r3, r2, #4
 800c4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4fc:	1d19      	adds	r1, r3, #4
 800c4fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800c500:	6812      	ldr	r2, [r2, #0]
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c506:	1d13      	adds	r3, r2, #4
 800c508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c50c:	1d19      	adds	r1, r3, #4
 800c50e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c510:	6812      	ldr	r2, [r2, #0]
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	e004      	b.n	800c528 <_realloc_r+0x5b8>
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	68b9      	ldr	r1, [r7, #8]
 800c522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c524:	f00b f91d 	bl	8017762 <memmove>
 800c528:	68b9      	ldr	r1, [r7, #8]
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f004 fd2e 	bl	8010f8c <_free_r>
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f00b fa21 	bl	8017978 <__malloc_unlock>
 800c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c538:	e040      	b.n	800c5bc <_realloc_r+0x64c>
 800c53a:	bf00      	nop
 800c53c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2b0f      	cmp	r3, #15
 800c548:	d921      	bls.n	800c58e <_realloc_r+0x61e>
 800c54a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c54e:	4413      	add	r3, r2
 800c550:	613b      	str	r3, [r7, #16]
 800c552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f003 0201 	and.w	r2, r3, #1
 800c55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c55c:	431a      	orrs	r2, r3
 800c55e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c560:	605a      	str	r2, [r3, #4]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f043 0201 	orr.w	r2, r3, #1
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	605a      	str	r2, [r3, #4]
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	4413      	add	r3, r2
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	6939      	ldr	r1, [r7, #16]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	440b      	add	r3, r1
 800c57a:	f042 0201 	orr.w	r2, r2, #1
 800c57e:	605a      	str	r2, [r3, #4]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3308      	adds	r3, #8
 800c584:	4619      	mov	r1, r3
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f004 fd00 	bl	8010f8c <_free_r>
 800c58c:	e011      	b.n	800c5b2 <_realloc_r+0x642>
 800c58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f003 0201 	and.w	r2, r3, #1
 800c596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c598:	431a      	orrs	r2, r3
 800c59a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c59c:	605a      	str	r2, [r3, #4]
 800c59e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5a2:	4413      	add	r3, r2
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c5a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5aa:	440b      	add	r3, r1
 800c5ac:	f042 0201 	orr.w	r2, r2, #1
 800c5b0:	605a      	str	r2, [r3, #4]
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f00b f9e0 	bl	8017978 <__malloc_unlock>
 800c5b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5ba:	3308      	adds	r3, #8
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3778      	adds	r7, #120	; 0x78
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <_sbrk_r>:
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	; (800c600 <_sbrk_r+0x3c>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	6838      	ldr	r0, [r7, #0]
 800c5d6:	f7f7 feef 	bl	80043b8 <_sbrk>
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e2:	d107      	bne.n	800c5f4 <_sbrk_r+0x30>
 800c5e4:	4b06      	ldr	r3, [pc, #24]	; (800c600 <_sbrk_r+0x3c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <_sbrk_r+0x30>
 800c5ec:	4b04      	ldr	r3, [pc, #16]	; (800c600 <_sbrk_r+0x3c>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	2000598c 	.word	0x2000598c

0800c604 <setvbuf>:
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	b089      	sub	sp, #36	; 0x24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4604      	mov	r4, r0
 800c60c:	6079      	str	r1, [r7, #4]
 800c60e:	4616      	mov	r6, r2
 800c610:	461d      	mov	r5, r3
 800c612:	2300      	movs	r3, #0
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	4b65      	ldr	r3, [pc, #404]	; (800c7ac <setvbuf+0x1a8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d006      	beq.n	800c634 <setvbuf+0x30>
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <setvbuf+0x30>
 800c62e:	6978      	ldr	r0, [r7, #20]
 800c630:	f7fe ff1a 	bl	800b468 <__sinit>
 800c634:	2e02      	cmp	r6, #2
 800c636:	d009      	beq.n	800c64c <setvbuf+0x48>
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d001      	beq.n	800c640 <setvbuf+0x3c>
 800c63c:	2e01      	cmp	r6, #1
 800c63e:	d102      	bne.n	800c646 <setvbuf+0x42>
 800c640:	462b      	mov	r3, r5
 800c642:	2b00      	cmp	r3, #0
 800c644:	da02      	bge.n	800c64c <setvbuf+0x48>
 800c646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c64a:	e0ab      	b.n	800c7a4 <setvbuf+0x1a0>
 800c64c:	4621      	mov	r1, r4
 800c64e:	69b8      	ldr	r0, [r7, #24]
 800c650:	f00c fcfc 	bl	801904c <_fflush_r>
 800c654:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <setvbuf+0x6e>
 800c65a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c65c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c660:	429a      	cmp	r2, r3
 800c662:	d004      	beq.n	800c66e <setvbuf+0x6a>
 800c664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c666:	4619      	mov	r1, r3
 800c668:	69b8      	ldr	r0, [r7, #24]
 800c66a:	f004 fc8f 	bl	8010f8c <_free_r>
 800c66e:	2300      	movs	r3, #0
 800c670:	6323      	str	r3, [r4, #48]	; 0x30
 800c672:	2300      	movs	r3, #0
 800c674:	61a3      	str	r3, [r4, #24]
 800c676:	69a3      	ldr	r3, [r4, #24]
 800c678:	6063      	str	r3, [r4, #4]
 800c67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <setvbuf+0x8e>
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	4619      	mov	r1, r3
 800c68c:	69b8      	ldr	r0, [r7, #24]
 800c68e:	f004 fc7d 	bl	8010f8c <_free_r>
 800c692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c696:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	b21b      	sxth	r3, r3
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	2e02      	cmp	r6, #2
 800c6a4:	d02e      	beq.n	800c704 <setvbuf+0x100>
 800c6a6:	f107 030c 	add.w	r3, r7, #12
 800c6aa:	f107 0210 	add.w	r2, r7, #16
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	69b8      	ldr	r0, [r7, #24]
 800c6b2:	f00c fd1d 	bl	80190f0 <__swhatbuf_r>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6bc:	b21b      	sxth	r3, r3
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	b21b      	sxth	r3, r3
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	2d00      	cmp	r5, #0
 800c6c6:	d102      	bne.n	800c6ce <setvbuf+0xca>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	607b      	str	r3, [r7, #4]
 800c6cc:	693d      	ldr	r5, [r7, #16]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d12f      	bne.n	800c734 <setvbuf+0x130>
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f7fe ff9b 	bl	800b610 <malloc>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	607b      	str	r3, [r7, #4]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10b      	bne.n	800c6fc <setvbuf+0xf8>
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	429d      	cmp	r5, r3
 800c6ee:	d005      	beq.n	800c6fc <setvbuf+0xf8>
 800c6f0:	693d      	ldr	r5, [r7, #16]
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	f7fe ff8c 	bl	800b610 <malloc>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	607b      	str	r3, [r7, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d112      	bne.n	800c728 <setvbuf+0x124>
 800c702:	e000      	b.n	800c706 <setvbuf+0x102>
 800c704:	bf00      	nop
 800c706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70a:	f043 0302 	orr.w	r3, r3, #2
 800c70e:	b21b      	sxth	r3, r3
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	2300      	movs	r3, #0
 800c714:	60a3      	str	r3, [r4, #8]
 800c716:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	6823      	ldr	r3, [r4, #0]
 800c71e:	6123      	str	r3, [r4, #16]
 800c720:	2301      	movs	r3, #1
 800c722:	6163      	str	r3, [r4, #20]
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	e03d      	b.n	800c7a4 <setvbuf+0x1a0>
 800c728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c730:	b21b      	sxth	r3, r3
 800c732:	81a3      	strh	r3, [r4, #12]
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <setvbuf+0x13e>
 800c73c:	69b8      	ldr	r0, [r7, #24]
 800c73e:	f7fe fe93 	bl	800b468 <__sinit>
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	429d      	cmp	r5, r3
 800c746:	d005      	beq.n	800c754 <setvbuf+0x150>
 800c748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c750:	b21b      	sxth	r3, r3
 800c752:	81a3      	strh	r3, [r4, #12]
 800c754:	2e01      	cmp	r6, #1
 800c756:	d105      	bne.n	800c764 <setvbuf+0x160>
 800c758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	b21b      	sxth	r3, r3
 800c762:	81a3      	strh	r3, [r4, #12]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	462b      	mov	r3, r5
 800c76e:	6163      	str	r3, [r4, #20]
 800c770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c774:	b29b      	uxth	r3, r3
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00f      	beq.n	800c79e <setvbuf+0x19a>
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	b29b      	uxth	r3, r3
 800c784:	f003 0301 	and.w	r3, r3, #1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <setvbuf+0x194>
 800c78c:	2300      	movs	r3, #0
 800c78e:	60a3      	str	r3, [r4, #8]
 800c790:	6963      	ldr	r3, [r4, #20]
 800c792:	425b      	negs	r3, r3
 800c794:	61a3      	str	r3, [r4, #24]
 800c796:	e004      	b.n	800c7a2 <setvbuf+0x19e>
 800c798:	462b      	mov	r3, r5
 800c79a:	60a3      	str	r3, [r4, #8]
 800c79c:	e001      	b.n	800c7a2 <setvbuf+0x19e>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60a3      	str	r3, [r4, #8]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3724      	adds	r7, #36	; 0x24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ac:	20000820 	.word	0x20000820

0800c7b0 <snprintf>:
 800c7b0:	b40c      	push	{r2, r3}
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b09e      	sub	sp, #120	; 0x78
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	6039      	str	r1, [r7, #0]
 800c7bc:	4b20      	ldr	r3, [pc, #128]	; (800c840 <snprintf+0x90>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	677b      	str	r3, [r7, #116]	; 0x74
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	da05      	bge.n	800c7d4 <snprintf+0x24>
 800c7c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7ca:	228b      	movs	r2, #139	; 0x8b
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7d2:	e02d      	b.n	800c830 <snprintf+0x80>
 800c7d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c7d8:	82bb      	strh	r3, [r7, #20]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60bb      	str	r3, [r7, #8]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	61bb      	str	r3, [r7, #24]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <snprintf+0x3e>
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <snprintf+0x40>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	61fb      	str	r3, [r7, #28]
 800c7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7fa:	82fb      	strh	r3, [r7, #22]
 800c7fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800c800:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c802:	f107 0108 	add.w	r1, r7, #8
 800c806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c808:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c80c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800c80e:	f000 fa43 	bl	800cc98 <_svfprintf_r>
 800c812:	6738      	str	r0, [r7, #112]	; 0x70
 800c814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c81a:	da02      	bge.n	800c822 <snprintf+0x72>
 800c81c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c81e:	228b      	movs	r2, #139	; 0x8b
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <snprintf+0x7e>
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c830:	4618      	mov	r0, r3
 800c832:	3778      	adds	r7, #120	; 0x78
 800c834:	46bd      	mov	sp, r7
 800c836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c83a:	b002      	add	sp, #8
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	20000820 	.word	0x20000820

0800c844 <sprintf>:
 800c844:	b40e      	push	{r1, r2, r3}
 800c846:	b580      	push	{r7, lr}
 800c848:	b09f      	sub	sp, #124	; 0x7c
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c852:	833b      	strh	r3, [r7, #24]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c860:	617b      	str	r3, [r7, #20]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	623b      	str	r3, [r7, #32]
 800c866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c86a:	837b      	strh	r3, [r7, #26]
 800c86c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800c870:	673b      	str	r3, [r7, #112]	; 0x70
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <sprintf+0x58>)
 800c874:	6818      	ldr	r0, [r3, #0]
 800c876:	f107 010c 	add.w	r1, r7, #12
 800c87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c87c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c880:	f000 fa0a 	bl	800cc98 <_svfprintf_r>
 800c884:	6778      	str	r0, [r7, #116]	; 0x74
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c88e:	4618      	mov	r0, r3
 800c890:	377c      	adds	r7, #124	; 0x7c
 800c892:	46bd      	mov	sp, r7
 800c894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c898:	b003      	add	sp, #12
 800c89a:	4770      	bx	lr
 800c89c:	20000820 	.word	0x20000820

0800c8a0 <strcpy>:
 800c8a0:	ea80 0201 	eor.w	r2, r0, r1
 800c8a4:	4684      	mov	ip, r0
 800c8a6:	f012 0f03 	tst.w	r2, #3
 800c8aa:	d14f      	bne.n	800c94c <strcpy+0xac>
 800c8ac:	f011 0f03 	tst.w	r1, #3
 800c8b0:	d132      	bne.n	800c918 <strcpy+0x78>
 800c8b2:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800c8b6:	f011 0f04 	tst.w	r1, #4
 800c8ba:	f851 3b04 	ldr.w	r3, [r1], #4
 800c8be:	d00b      	beq.n	800c8d8 <strcpy+0x38>
 800c8c0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c8c4:	439a      	bics	r2, r3
 800c8c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c8ca:	bf04      	itt	eq
 800c8cc:	f84c 3b04 	streq.w	r3, [ip], #4
 800c8d0:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c8d4:	d116      	bne.n	800c904 <strcpy+0x64>
 800c8d6:	bf00      	nop
 800c8d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800c8dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800c8e0:	439a      	bics	r2, r3
 800c8e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c8e6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800c8ea:	d10b      	bne.n	800c904 <strcpy+0x64>
 800c8ec:	f84c 3b04 	str.w	r3, [ip], #4
 800c8f0:	43a2      	bics	r2, r4
 800c8f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800c8f6:	bf04      	itt	eq
 800c8f8:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c8fc:	f84c 4b04 	streq.w	r4, [ip], #4
 800c900:	d0ea      	beq.n	800c8d8 <strcpy+0x38>
 800c902:	4623      	mov	r3, r4
 800c904:	f80c 3b01 	strb.w	r3, [ip], #1
 800c908:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c90c:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c910:	d1f8      	bne.n	800c904 <strcpy+0x64>
 800c912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	f011 0f01 	tst.w	r1, #1
 800c91c:	d006      	beq.n	800c92c <strcpy+0x8c>
 800c91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c922:	f80c 2b01 	strb.w	r2, [ip], #1
 800c926:	2a00      	cmp	r2, #0
 800c928:	bf08      	it	eq
 800c92a:	4770      	bxeq	lr
 800c92c:	f011 0f02 	tst.w	r1, #2
 800c930:	d0bf      	beq.n	800c8b2 <strcpy+0x12>
 800c932:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c936:	f012 0fff 	tst.w	r2, #255	; 0xff
 800c93a:	bf16      	itet	ne
 800c93c:	f82c 2b02 	strhne.w	r2, [ip], #2
 800c940:	f88c 2000 	strbeq.w	r2, [ip]
 800c944:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800c948:	d1b3      	bne.n	800c8b2 <strcpy+0x12>
 800c94a:	4770      	bx	lr
 800c94c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c950:	f80c 2b01 	strb.w	r2, [ip], #1
 800c954:	2a00      	cmp	r2, #0
 800c956:	d1f9      	bne.n	800c94c <strcpy+0xac>
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	4618      	mov	r0, r3
 800c95e:	bf00      	nop

0800c960 <__get_global_locale>:
 800c960:	b480      	push	{r7}
 800c962:	af00      	add	r7, sp, #0
 800c964:	4b02      	ldr	r3, [pc, #8]	; (800c970 <__get_global_locale+0x10>)
 800c966:	4618      	mov	r0, r3
 800c968:	46bd      	mov	sp, r7
 800c96a:	bc80      	pop	{r7}
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	20000c38 	.word	0x20000c38

0800c974 <_strtol_l>:
 800c974:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	60f8      	str	r0, [r7, #12]
 800c97e:	60b9      	str	r1, [r7, #8]
 800c980:	607a      	str	r2, [r7, #4]
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	68bd      	ldr	r5, [r7, #8]
 800c986:	f04f 0a00 	mov.w	sl, #0
 800c98a:	462b      	mov	r3, r5
 800c98c:	1c5d      	adds	r5, r3, #1
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	461c      	mov	r4, r3
 800c992:	4623      	mov	r3, r4
 800c994:	3301      	adds	r3, #1
 800c996:	4a4e      	ldr	r2, [pc, #312]	; (800cad0 <_strtol_l+0x15c>)
 800c998:	4413      	add	r3, r2
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f003 0308 	and.w	r3, r3, #8
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1f2      	bne.n	800c98a <_strtol_l+0x16>
 800c9a4:	2c2d      	cmp	r4, #45	; 0x2d
 800c9a6:	d106      	bne.n	800c9b6 <_strtol_l+0x42>
 800c9a8:	f04f 0a01 	mov.w	sl, #1
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	1c5d      	adds	r5, r3, #1
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	461c      	mov	r4, r3
 800c9b4:	e005      	b.n	800c9c2 <_strtol_l+0x4e>
 800c9b6:	2c2b      	cmp	r4, #43	; 0x2b
 800c9b8:	d103      	bne.n	800c9c2 <_strtol_l+0x4e>
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	1c5d      	adds	r5, r3, #1
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	461c      	mov	r4, r3
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <_strtol_l+0x5a>
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	2b10      	cmp	r3, #16
 800c9cc:	d10d      	bne.n	800c9ea <_strtol_l+0x76>
 800c9ce:	2c30      	cmp	r4, #48	; 0x30
 800c9d0:	d10b      	bne.n	800c9ea <_strtol_l+0x76>
 800c9d2:	782b      	ldrb	r3, [r5, #0]
 800c9d4:	2b78      	cmp	r3, #120	; 0x78
 800c9d6:	d002      	beq.n	800c9de <_strtol_l+0x6a>
 800c9d8:	782b      	ldrb	r3, [r5, #0]
 800c9da:	2b58      	cmp	r3, #88	; 0x58
 800c9dc:	d105      	bne.n	800c9ea <_strtol_l+0x76>
 800c9de:	1c6b      	adds	r3, r5, #1
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	461c      	mov	r4, r3
 800c9e4:	3502      	adds	r5, #2
 800c9e6:	2310      	movs	r3, #16
 800c9e8:	603b      	str	r3, [r7, #0]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d105      	bne.n	800c9fc <_strtol_l+0x88>
 800c9f0:	2c30      	cmp	r4, #48	; 0x30
 800c9f2:	d101      	bne.n	800c9f8 <_strtol_l+0x84>
 800c9f4:	2308      	movs	r3, #8
 800c9f6:	e000      	b.n	800c9fa <_strtol_l+0x86>
 800c9f8:	230a      	movs	r3, #10
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	f1ba 0f00 	cmp.w	sl, #0
 800ca00:	d002      	beq.n	800ca08 <_strtol_l+0x94>
 800ca02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca06:	e001      	b.n	800ca0c <_strtol_l+0x98>
 800ca08:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ca0c:	4698      	mov	r8, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	fbb8 f2f3 	udiv	r2, r8, r3
 800ca14:	fb03 f302 	mul.w	r3, r3, r2
 800ca18:	eba8 0303 	sub.w	r3, r8, r3
 800ca1c:	469b      	mov	fp, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca24:	2600      	movs	r6, #0
 800ca26:	f04f 0900 	mov.w	r9, #0
 800ca2a:	2c2f      	cmp	r4, #47	; 0x2f
 800ca2c:	dd03      	ble.n	800ca36 <_strtol_l+0xc2>
 800ca2e:	2c39      	cmp	r4, #57	; 0x39
 800ca30:	dc01      	bgt.n	800ca36 <_strtol_l+0xc2>
 800ca32:	3c30      	subs	r4, #48	; 0x30
 800ca34:	e00a      	b.n	800ca4c <_strtol_l+0xd8>
 800ca36:	2c40      	cmp	r4, #64	; 0x40
 800ca38:	dd03      	ble.n	800ca42 <_strtol_l+0xce>
 800ca3a:	2c5a      	cmp	r4, #90	; 0x5a
 800ca3c:	dc01      	bgt.n	800ca42 <_strtol_l+0xce>
 800ca3e:	3c37      	subs	r4, #55	; 0x37
 800ca40:	e004      	b.n	800ca4c <_strtol_l+0xd8>
 800ca42:	2c60      	cmp	r4, #96	; 0x60
 800ca44:	dd1e      	ble.n	800ca84 <_strtol_l+0x110>
 800ca46:	2c7a      	cmp	r4, #122	; 0x7a
 800ca48:	dc1c      	bgt.n	800ca84 <_strtol_l+0x110>
 800ca4a:	3c57      	subs	r4, #87	; 0x57
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	429c      	cmp	r4, r3
 800ca50:	da17      	bge.n	800ca82 <_strtol_l+0x10e>
 800ca52:	f1b9 0f00 	cmp.w	r9, #0
 800ca56:	db05      	blt.n	800ca64 <_strtol_l+0xf0>
 800ca58:	4546      	cmp	r6, r8
 800ca5a:	d803      	bhi.n	800ca64 <_strtol_l+0xf0>
 800ca5c:	4546      	cmp	r6, r8
 800ca5e:	d104      	bne.n	800ca6a <_strtol_l+0xf6>
 800ca60:	455c      	cmp	r4, fp
 800ca62:	dd02      	ble.n	800ca6a <_strtol_l+0xf6>
 800ca64:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800ca68:	e006      	b.n	800ca78 <_strtol_l+0x104>
 800ca6a:	f04f 0901 	mov.w	r9, #1
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	fb03 f606 	mul.w	r6, r3, r6
 800ca74:	4623      	mov	r3, r4
 800ca76:	441e      	add	r6, r3
 800ca78:	462b      	mov	r3, r5
 800ca7a:	1c5d      	adds	r5, r3, #1
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	461c      	mov	r4, r3
 800ca80:	e7d3      	b.n	800ca2a <_strtol_l+0xb6>
 800ca82:	bf00      	nop
 800ca84:	f1b9 0f00 	cmp.w	r9, #0
 800ca88:	da0c      	bge.n	800caa4 <_strtol_l+0x130>
 800ca8a:	f1ba 0f00 	cmp.w	sl, #0
 800ca8e:	d002      	beq.n	800ca96 <_strtol_l+0x122>
 800ca90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca94:	e001      	b.n	800ca9a <_strtol_l+0x126>
 800ca96:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ca9a:	461e      	mov	r6, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2222      	movs	r2, #34	; 0x22
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	e003      	b.n	800caac <_strtol_l+0x138>
 800caa4:	f1ba 0f00 	cmp.w	sl, #0
 800caa8:	d000      	beq.n	800caac <_strtol_l+0x138>
 800caaa:	4276      	negs	r6, r6
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d007      	beq.n	800cac2 <_strtol_l+0x14e>
 800cab2:	f1b9 0f00 	cmp.w	r9, #0
 800cab6:	d001      	beq.n	800cabc <_strtol_l+0x148>
 800cab8:	1e6b      	subs	r3, r5, #1
 800caba:	e000      	b.n	800cabe <_strtol_l+0x14a>
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	4633      	mov	r3, r6
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cace:	4770      	bx	lr
 800cad0:	0801bb80 	.word	0x0801bb80

0800cad4 <strtol>:
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b087      	sub	sp, #28
 800cad8:	af02      	add	r7, sp, #8
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	4b08      	ldr	r3, [pc, #32]	; (800cb04 <strtol+0x30>)
 800cae2:	681c      	ldr	r4, [r3, #0]
 800cae4:	f00b fe2e 	bl	8018744 <__get_current_locale>
 800cae8:	4603      	mov	r3, r0
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	68f9      	ldr	r1, [r7, #12]
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7ff ff3e 	bl	800c974 <_strtol_l>
 800caf8:	4603      	mov	r3, r0
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd90      	pop	{r4, r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20000820 	.word	0x20000820

0800cb08 <__get_global_locale>:
 800cb08:	b480      	push	{r7}
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <__get_global_locale+0x10>)
 800cb0e:	4618      	mov	r0, r3
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20000c38 	.word	0x20000c38

0800cb1c <_strtoul_l>:
 800cb1c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	68bd      	ldr	r5, [r7, #8]
 800cb2e:	f04f 0a00 	mov.w	sl, #0
 800cb32:	462b      	mov	r3, r5
 800cb34:	1c5d      	adds	r5, r3, #1
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	461c      	mov	r4, r3
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	4a48      	ldr	r2, [pc, #288]	; (800cc60 <_strtoul_l+0x144>)
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	f003 0308 	and.w	r3, r3, #8
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1f2      	bne.n	800cb32 <_strtoul_l+0x16>
 800cb4c:	2c2d      	cmp	r4, #45	; 0x2d
 800cb4e:	d106      	bne.n	800cb5e <_strtoul_l+0x42>
 800cb50:	f04f 0a01 	mov.w	sl, #1
 800cb54:	462b      	mov	r3, r5
 800cb56:	1c5d      	adds	r5, r3, #1
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	e005      	b.n	800cb6a <_strtoul_l+0x4e>
 800cb5e:	2c2b      	cmp	r4, #43	; 0x2b
 800cb60:	d103      	bne.n	800cb6a <_strtoul_l+0x4e>
 800cb62:	462b      	mov	r3, r5
 800cb64:	1c5d      	adds	r5, r3, #1
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	461c      	mov	r4, r3
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <_strtoul_l+0x5a>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b10      	cmp	r3, #16
 800cb74:	d10d      	bne.n	800cb92 <_strtoul_l+0x76>
 800cb76:	2c30      	cmp	r4, #48	; 0x30
 800cb78:	d10b      	bne.n	800cb92 <_strtoul_l+0x76>
 800cb7a:	782b      	ldrb	r3, [r5, #0]
 800cb7c:	2b78      	cmp	r3, #120	; 0x78
 800cb7e:	d002      	beq.n	800cb86 <_strtoul_l+0x6a>
 800cb80:	782b      	ldrb	r3, [r5, #0]
 800cb82:	2b58      	cmp	r3, #88	; 0x58
 800cb84:	d105      	bne.n	800cb92 <_strtoul_l+0x76>
 800cb86:	1c6b      	adds	r3, r5, #1
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	3502      	adds	r5, #2
 800cb8e:	2310      	movs	r3, #16
 800cb90:	603b      	str	r3, [r7, #0]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d105      	bne.n	800cba4 <_strtoul_l+0x88>
 800cb98:	2c30      	cmp	r4, #48	; 0x30
 800cb9a:	d101      	bne.n	800cba0 <_strtoul_l+0x84>
 800cb9c:	2308      	movs	r3, #8
 800cb9e:	e000      	b.n	800cba2 <_strtoul_l+0x86>
 800cba0:	230a      	movs	r3, #10
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbaa:	fbb2 f9f3 	udiv	r9, r2, r3
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800cbb8:	fb03 f301 	mul.w	r3, r3, r1
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	469b      	mov	fp, r3
 800cbc0:	2600      	movs	r6, #0
 800cbc2:	f04f 0800 	mov.w	r8, #0
 800cbc6:	2c2f      	cmp	r4, #47	; 0x2f
 800cbc8:	dd03      	ble.n	800cbd2 <_strtoul_l+0xb6>
 800cbca:	2c39      	cmp	r4, #57	; 0x39
 800cbcc:	dc01      	bgt.n	800cbd2 <_strtoul_l+0xb6>
 800cbce:	3c30      	subs	r4, #48	; 0x30
 800cbd0:	e00a      	b.n	800cbe8 <_strtoul_l+0xcc>
 800cbd2:	2c40      	cmp	r4, #64	; 0x40
 800cbd4:	dd03      	ble.n	800cbde <_strtoul_l+0xc2>
 800cbd6:	2c5a      	cmp	r4, #90	; 0x5a
 800cbd8:	dc01      	bgt.n	800cbde <_strtoul_l+0xc2>
 800cbda:	3c37      	subs	r4, #55	; 0x37
 800cbdc:	e004      	b.n	800cbe8 <_strtoul_l+0xcc>
 800cbde:	2c60      	cmp	r4, #96	; 0x60
 800cbe0:	dd1e      	ble.n	800cc20 <_strtoul_l+0x104>
 800cbe2:	2c7a      	cmp	r4, #122	; 0x7a
 800cbe4:	dc1c      	bgt.n	800cc20 <_strtoul_l+0x104>
 800cbe6:	3c57      	subs	r4, #87	; 0x57
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	429c      	cmp	r4, r3
 800cbec:	da17      	bge.n	800cc1e <_strtoul_l+0x102>
 800cbee:	f1b8 0f00 	cmp.w	r8, #0
 800cbf2:	db05      	blt.n	800cc00 <_strtoul_l+0xe4>
 800cbf4:	454e      	cmp	r6, r9
 800cbf6:	d803      	bhi.n	800cc00 <_strtoul_l+0xe4>
 800cbf8:	454e      	cmp	r6, r9
 800cbfa:	d104      	bne.n	800cc06 <_strtoul_l+0xea>
 800cbfc:	455c      	cmp	r4, fp
 800cbfe:	dd02      	ble.n	800cc06 <_strtoul_l+0xea>
 800cc00:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cc04:	e006      	b.n	800cc14 <_strtoul_l+0xf8>
 800cc06:	f04f 0801 	mov.w	r8, #1
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	fb03 f606 	mul.w	r6, r3, r6
 800cc10:	4623      	mov	r3, r4
 800cc12:	441e      	add	r6, r3
 800cc14:	462b      	mov	r3, r5
 800cc16:	1c5d      	adds	r5, r3, #1
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	e7d3      	b.n	800cbc6 <_strtoul_l+0xaa>
 800cc1e:	bf00      	nop
 800cc20:	f1b8 0f00 	cmp.w	r8, #0
 800cc24:	da05      	bge.n	800cc32 <_strtoul_l+0x116>
 800cc26:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2222      	movs	r2, #34	; 0x22
 800cc2e:	601a      	str	r2, [r3, #0]
 800cc30:	e003      	b.n	800cc3a <_strtoul_l+0x11e>
 800cc32:	f1ba 0f00 	cmp.w	sl, #0
 800cc36:	d000      	beq.n	800cc3a <_strtoul_l+0x11e>
 800cc38:	4276      	negs	r6, r6
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d007      	beq.n	800cc50 <_strtoul_l+0x134>
 800cc40:	f1b8 0f00 	cmp.w	r8, #0
 800cc44:	d001      	beq.n	800cc4a <_strtoul_l+0x12e>
 800cc46:	1e6b      	subs	r3, r5, #1
 800cc48:	e000      	b.n	800cc4c <_strtoul_l+0x130>
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	4633      	mov	r3, r6
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	0801bb80 	.word	0x0801bb80

0800cc64 <strtoul>:
 800cc64:	b590      	push	{r4, r7, lr}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af02      	add	r7, sp, #8
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <strtoul+0x30>)
 800cc72:	681c      	ldr	r4, [r3, #0]
 800cc74:	f00b fd6d 	bl	8018752 <__get_current_locale>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	68f9      	ldr	r1, [r7, #12]
 800cc82:	4620      	mov	r0, r4
 800cc84:	f7ff ff4a 	bl	800cb1c <_strtoul_l>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd90      	pop	{r4, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20000820 	.word	0x20000820

0800cc98 <_svfprintf_r>:
 800cc98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	b0cb      	sub	sp, #300	; 0x12c
 800cc9e:	af08      	add	r7, sp, #32
 800cca0:	61f8      	str	r0, [r7, #28]
 800cca2:	61b9      	str	r1, [r7, #24]
 800cca4:	617a      	str	r2, [r7, #20]
 800cca6:	613b      	str	r3, [r7, #16]
 800cca8:	69f8      	ldr	r0, [r7, #28]
 800ccaa:	f00c fa12 	bl	80190d2 <_localeconv_r>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ccb6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800ccba:	f7f3 fa81 	bl	80001c0 <strlen>
 800ccbe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ccc2:	f04f 0200 	mov.w	r2, #0
 800ccc6:	f04f 0300 	mov.w	r3, #0
 800ccca:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ccda:	2300      	movs	r3, #0
 800ccdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cce0:	2300      	movs	r3, #0
 800cce2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d01c      	beq.n	800cd30 <_svfprintf_r+0x98>
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	691b      	ldr	r3, [r3, #16]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d118      	bne.n	800cd30 <_svfprintf_r+0x98>
 800ccfe:	2140      	movs	r1, #64	; 0x40
 800cd00:	69f8      	ldr	r0, [r7, #28]
 800cd02:	f7fe fdbf 	bl	800b884 <_malloc_r>
 800cd06:	4602      	mov	r2, r0
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	611a      	str	r2, [r3, #16]
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d106      	bne.n	800cd2a <_svfprintf_r+0x92>
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	220c      	movs	r2, #12
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd26:	f001 bbd4 	b.w	800e4d2 <_svfprintf_r+0x183a>
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	2240      	movs	r2, #64	; 0x40
 800cd2e:	615a      	str	r2, [r3, #20]
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	607b      	str	r3, [r7, #4]
 800cd34:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cd38:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd42:	2300      	movs	r3, #0
 800cd44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	60fb      	str	r3, [r7, #12]
 800cd52:	e002      	b.n	800cd5a <_svfprintf_r+0xc2>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3301      	adds	r3, #1
 800cd58:	607b      	str	r3, [r7, #4]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <_svfprintf_r+0xd2>
 800cd64:	7813      	ldrb	r3, [r2, #0]
 800cd66:	2b25      	cmp	r3, #37	; 0x25
 800cd68:	d1f4      	bne.n	800cd54 <_svfprintf_r+0xbc>
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	1ad5      	subs	r5, r2, r3
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	d024      	beq.n	800cdbe <_svfprintf_r+0x126>
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	462b      	mov	r3, r5
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cd7e:	462a      	mov	r2, r5
 800cd80:	4413      	add	r3, r2
 800cd82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd86:	3408      	adds	r4, #8
 800cd88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cd96:	2b07      	cmp	r3, #7
 800cd98:	dd0c      	ble.n	800cdb4 <_svfprintf_r+0x11c>
 800cd9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cd9e:	461a      	mov	r2, r3
 800cda0:	69b9      	ldr	r1, [r7, #24]
 800cda2:	69f8      	ldr	r0, [r7, #28]
 800cda4:	f00c fee1 	bl	8019b6a <__ssprint_r>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f041 8332 	bne.w	800e414 <_svfprintf_r+0x177c>
 800cdb0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdb8:	442b      	add	r3, r5
 800cdba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f001 830e 	beq.w	800e3e6 <_svfprintf_r+0x174e>
 800cdca:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cdce:	1c53      	adds	r3, r2, #1
 800cdd0:	607b      	str	r3, [r7, #4]
 800cdd2:	2600      	movs	r6, #0
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cdda:	2300      	movs	r3, #0
 800cddc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cde0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cde4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cde8:	2300      	movs	r3, #0
 800cdea:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	1c5a      	adds	r2, r3, #1
 800cdf8:	607a      	str	r2, [r7, #4]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	60bb      	str	r3, [r7, #8]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	3b20      	subs	r3, #32
 800ce02:	2b58      	cmp	r3, #88	; 0x58
 800ce04:	f200 84ed 	bhi.w	800d7e2 <_svfprintf_r+0xb4a>
 800ce08:	a201      	add	r2, pc, #4	; (adr r2, 800ce10 <_svfprintf_r+0x178>)
 800ce0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0e:	bf00      	nop
 800ce10:	0800cf75 	.word	0x0800cf75
 800ce14:	0800d7e3 	.word	0x0800d7e3
 800ce18:	0800d7e3 	.word	0x0800d7e3
 800ce1c:	0800cf87 	.word	0x0800cf87
 800ce20:	0800d7e3 	.word	0x0800d7e3
 800ce24:	0800d7e3 	.word	0x0800d7e3
 800ce28:	0800d7e3 	.word	0x0800d7e3
 800ce2c:	0800d7e3 	.word	0x0800d7e3
 800ce30:	0800d7e3 	.word	0x0800d7e3
 800ce34:	0800d7e3 	.word	0x0800d7e3
 800ce38:	0800cf8d 	.word	0x0800cf8d
 800ce3c:	0800cfb3 	.word	0x0800cfb3
 800ce40:	0800d7e3 	.word	0x0800d7e3
 800ce44:	0800cfad 	.word	0x0800cfad
 800ce48:	0800cfbb 	.word	0x0800cfbb
 800ce4c:	0800d7e3 	.word	0x0800d7e3
 800ce50:	0800d019 	.word	0x0800d019
 800ce54:	0800d01f 	.word	0x0800d01f
 800ce58:	0800d01f 	.word	0x0800d01f
 800ce5c:	0800d01f 	.word	0x0800d01f
 800ce60:	0800d01f 	.word	0x0800d01f
 800ce64:	0800d01f 	.word	0x0800d01f
 800ce68:	0800d01f 	.word	0x0800d01f
 800ce6c:	0800d01f 	.word	0x0800d01f
 800ce70:	0800d01f 	.word	0x0800d01f
 800ce74:	0800d01f 	.word	0x0800d01f
 800ce78:	0800d7e3 	.word	0x0800d7e3
 800ce7c:	0800d7e3 	.word	0x0800d7e3
 800ce80:	0800d7e3 	.word	0x0800d7e3
 800ce84:	0800d7e3 	.word	0x0800d7e3
 800ce88:	0800d7e3 	.word	0x0800d7e3
 800ce8c:	0800d7e3 	.word	0x0800d7e3
 800ce90:	0800d7e3 	.word	0x0800d7e3
 800ce94:	0800d7e3 	.word	0x0800d7e3
 800ce98:	0800d7e3 	.word	0x0800d7e3
 800ce9c:	0800d7e3 	.word	0x0800d7e3
 800cea0:	0800d093 	.word	0x0800d093
 800cea4:	0800d11f 	.word	0x0800d11f
 800cea8:	0800d7e3 	.word	0x0800d7e3
 800ceac:	0800d11f 	.word	0x0800d11f
 800ceb0:	0800d7e3 	.word	0x0800d7e3
 800ceb4:	0800d7e3 	.word	0x0800d7e3
 800ceb8:	0800d7e3 	.word	0x0800d7e3
 800cebc:	0800d7e3 	.word	0x0800d7e3
 800cec0:	0800d047 	.word	0x0800d047
 800cec4:	0800d7e3 	.word	0x0800d7e3
 800cec8:	0800d7e3 	.word	0x0800d7e3
 800cecc:	0800d42f 	.word	0x0800d42f
 800ced0:	0800d7e3 	.word	0x0800d7e3
 800ced4:	0800d7e3 	.word	0x0800d7e3
 800ced8:	0800d7e3 	.word	0x0800d7e3
 800cedc:	0800d7e3 	.word	0x0800d7e3
 800cee0:	0800d7e3 	.word	0x0800d7e3
 800cee4:	0800d555 	.word	0x0800d555
 800cee8:	0800d7e3 	.word	0x0800d7e3
 800ceec:	0800d7e3 	.word	0x0800d7e3
 800cef0:	0800d5c1 	.word	0x0800d5c1
 800cef4:	0800d7e3 	.word	0x0800d7e3
 800cef8:	0800d7e3 	.word	0x0800d7e3
 800cefc:	0800d7e3 	.word	0x0800d7e3
 800cf00:	0800d7e3 	.word	0x0800d7e3
 800cf04:	0800d7e3 	.word	0x0800d7e3
 800cf08:	0800d7e3 	.word	0x0800d7e3
 800cf0c:	0800d7e3 	.word	0x0800d7e3
 800cf10:	0800d7e3 	.word	0x0800d7e3
 800cf14:	0800d7e3 	.word	0x0800d7e3
 800cf18:	0800d7e3 	.word	0x0800d7e3
 800cf1c:	0800d073 	.word	0x0800d073
 800cf20:	0800d097 	.word	0x0800d097
 800cf24:	0800d11f 	.word	0x0800d11f
 800cf28:	0800d11f 	.word	0x0800d11f
 800cf2c:	0800d11f 	.word	0x0800d11f
 800cf30:	0800d04d 	.word	0x0800d04d
 800cf34:	0800d097 	.word	0x0800d097
 800cf38:	0800d7e3 	.word	0x0800d7e3
 800cf3c:	0800d7e3 	.word	0x0800d7e3
 800cf40:	0800d053 	.word	0x0800d053
 800cf44:	0800d7e3 	.word	0x0800d7e3
 800cf48:	0800d3c5 	.word	0x0800d3c5
 800cf4c:	0800d433 	.word	0x0800d433
 800cf50:	0800d4b1 	.word	0x0800d4b1
 800cf54:	0800d06d 	.word	0x0800d06d
 800cf58:	0800d7e3 	.word	0x0800d7e3
 800cf5c:	0800d4e5 	.word	0x0800d4e5
 800cf60:	0800d7e3 	.word	0x0800d7e3
 800cf64:	0800d559 	.word	0x0800d559
 800cf68:	0800d7e3 	.word	0x0800d7e3
 800cf6c:	0800d7e3 	.word	0x0800d7e3
 800cf70:	0800d5c9 	.word	0x0800d5c9
 800cf74:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f47f af3b 	bne.w	800cdf4 <_svfprintf_r+0x15c>
 800cf7e:	2320      	movs	r3, #32
 800cf80:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800cf84:	e736      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cf86:	f046 0601 	orr.w	r6, r6, #1
 800cf8a:	e733      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	1d1a      	adds	r2, r3, #4
 800cf90:	613a      	str	r2, [r7, #16]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	db00      	blt.n	800cfa2 <_svfprintf_r+0x30a>
 800cfa0:	e728      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cfa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cfa6:	425b      	negs	r3, r3
 800cfa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cfac:	f046 0604 	orr.w	r6, r6, #4
 800cfb0:	e720      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cfb2:	232b      	movs	r3, #43	; 0x2b
 800cfb4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800cfb8:	e71c      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	1c5a      	adds	r2, r3, #1
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	60bb      	str	r3, [r7, #8]
 800cfc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc6:	d10f      	bne.n	800cfe8 <_svfprintf_r+0x350>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	1d1a      	adds	r2, r3, #4
 800cfcc:	613a      	str	r2, [r7, #16]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f6bf af0b 	bge.w	800cdf4 <_svfprintf_r+0x15c>
 800cfde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfe2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cfe6:	e705      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800cfe8:	2500      	movs	r5, #0
 800cfea:	e00c      	b.n	800d006 <_svfprintf_r+0x36e>
 800cfec:	462b      	mov	r3, r5
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	442b      	add	r3, r5
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	461a      	mov	r2, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	3b30      	subs	r3, #48	; 0x30
 800cffa:	18d5      	adds	r5, r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	1c5a      	adds	r2, r3, #1
 800d000:	607a      	str	r2, [r7, #4]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	60bb      	str	r3, [r7, #8]
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	3b30      	subs	r3, #48	; 0x30
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d9ee      	bls.n	800cfec <_svfprintf_r+0x354>
 800d00e:	ea45 73e5 	orr.w	r3, r5, r5, asr #31
 800d012:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d016:	e6f2      	b.n	800cdfe <_svfprintf_r+0x166>
 800d018:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800d01c:	e6ea      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d01e:	2500      	movs	r5, #0
 800d020:	462b      	mov	r3, r5
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	442b      	add	r3, r5
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	461a      	mov	r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3b30      	subs	r3, #48	; 0x30
 800d02e:	18d5      	adds	r5, r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	607a      	str	r2, [r7, #4]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	60bb      	str	r3, [r7, #8]
 800d03a:	3b30      	subs	r3, #48	; 0x30
 800d03c:	2b09      	cmp	r3, #9
 800d03e:	d9ef      	bls.n	800d020 <_svfprintf_r+0x388>
 800d040:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800d044:	e6db      	b.n	800cdfe <_svfprintf_r+0x166>
 800d046:	f046 0608 	orr.w	r6, r6, #8
 800d04a:	e6d3      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d04c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800d050:	e6d0      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	4613      	mov	r3, r2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b6c      	cmp	r3, #108	; 0x6c
 800d05a:	d104      	bne.n	800d066 <_svfprintf_r+0x3ce>
 800d05c:	3201      	adds	r2, #1
 800d05e:	607a      	str	r2, [r7, #4]
 800d060:	f046 0620 	orr.w	r6, r6, #32
 800d064:	e6c6      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d066:	f046 0610 	orr.w	r6, r6, #16
 800d06a:	e6c3      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d06c:	f046 0620 	orr.w	r6, r6, #32
 800d070:	e6c0      	b.n	800cdf4 <_svfprintf_r+0x15c>
 800d072:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d076:	60f9      	str	r1, [r7, #12]
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	1d1a      	adds	r2, r3, #4
 800d07c:	613a      	str	r2, [r7, #16]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	b2db      	uxtb	r3, r3
 800d082:	700b      	strb	r3, [r1, #0]
 800d084:	2301      	movs	r3, #1
 800d086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d08a:	2300      	movs	r3, #0
 800d08c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d090:	e3b8      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d092:	f046 0610 	orr.w	r6, r6, #16
 800d096:	f006 0320 	and.w	r3, r6, #32
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d009      	beq.n	800d0b2 <_svfprintf_r+0x41a>
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	3307      	adds	r3, #7
 800d0a2:	f023 0307 	bic.w	r3, r3, #7
 800d0a6:	f103 0208 	add.w	r2, r3, #8
 800d0aa:	613a      	str	r2, [r7, #16]
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	e01f      	b.n	800d0f2 <_svfprintf_r+0x45a>
 800d0b2:	f006 0310 	and.w	r3, r6, #16
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d007      	beq.n	800d0ca <_svfprintf_r+0x432>
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	1d1a      	adds	r2, r3, #4
 800d0be:	613a      	str	r2, [r7, #16]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d0c8:	e013      	b.n	800d0f2 <_svfprintf_r+0x45a>
 800d0ca:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d008      	beq.n	800d0e4 <_svfprintf_r+0x44c>
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	1d1a      	adds	r2, r3, #4
 800d0d6:	613a      	str	r2, [r7, #16]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	b21b      	sxth	r3, r3
 800d0dc:	b21a      	sxth	r2, r3
 800d0de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d0e2:	e006      	b.n	800d0f2 <_svfprintf_r+0x45a>
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	1d1a      	adds	r2, r3, #4
 800d0e8:	613a      	str	r2, [r7, #16]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d0f2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d0f6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d0fa:	2a00      	cmp	r2, #0
 800d0fc:	f173 0300 	sbcs.w	r3, r3, #0
 800d100:	da09      	bge.n	800d116 <_svfprintf_r+0x47e>
 800d102:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d106:	4252      	negs	r2, r2
 800d108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800d10c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d110:	232d      	movs	r3, #45	; 0x2d
 800d112:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d116:	2301      	movs	r3, #1
 800d118:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800d11c:	e29f      	b.n	800d65e <_svfprintf_r+0x9c6>
 800d11e:	f006 0308 	and.w	r3, r6, #8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00b      	beq.n	800d13e <_svfprintf_r+0x4a6>
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	3307      	adds	r3, #7
 800d12a:	f023 0307 	bic.w	r3, r3, #7
 800d12e:	f103 0208 	add.w	r2, r3, #8
 800d132:	613a      	str	r2, [r7, #16]
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800d13c:	e00a      	b.n	800d154 <_svfprintf_r+0x4bc>
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3307      	adds	r3, #7
 800d142:	f023 0307 	bic.w	r3, r3, #7
 800d146:	f103 0208 	add.w	r2, r3, #8
 800d14a:	613a      	str	r2, [r7, #16]
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800d154:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800d158:	4690      	mov	r8, r2
 800d15a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800d15e:	2301      	movs	r3, #1
 800d160:	461d      	mov	r5, r3
 800d162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d166:	4bc0      	ldr	r3, [pc, #768]	; (800d468 <_svfprintf_r+0x7d0>)
 800d168:	4640      	mov	r0, r8
 800d16a:	4649      	mov	r1, r9
 800d16c:	f7f4 fbb2 	bl	80018d4 <__aeabi_dcmpun>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10b      	bne.n	800d18e <_svfprintf_r+0x4f6>
 800d176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d17a:	4bbb      	ldr	r3, [pc, #748]	; (800d468 <_svfprintf_r+0x7d0>)
 800d17c:	4640      	mov	r0, r8
 800d17e:	4649      	mov	r1, r9
 800d180:	f7f4 fad0 	bl	8001724 <__aeabi_dcmple>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <_svfprintf_r+0x4f6>
 800d18a:	2300      	movs	r3, #0
 800d18c:	461d      	mov	r5, r3
 800d18e:	b2eb      	uxtb	r3, r5
 800d190:	f083 0301 	eor.w	r3, r3, #1
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <_svfprintf_r+0x506>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e000      	b.n	800d1a0 <_svfprintf_r+0x508>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d01b      	beq.n	800d1dc <_svfprintf_r+0x544>
 800d1a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800d1a8:	f04f 0200 	mov.w	r2, #0
 800d1ac:	f04f 0300 	mov.w	r3, #0
 800d1b0:	f7f4 faae 	bl	8001710 <__aeabi_dcmplt>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <_svfprintf_r+0x528>
 800d1ba:	232d      	movs	r3, #45	; 0x2d
 800d1bc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2b47      	cmp	r3, #71	; 0x47
 800d1c4:	dc02      	bgt.n	800d1cc <_svfprintf_r+0x534>
 800d1c6:	4ba9      	ldr	r3, [pc, #676]	; (800d46c <_svfprintf_r+0x7d4>)
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	e001      	b.n	800d1d0 <_svfprintf_r+0x538>
 800d1cc:	4ba8      	ldr	r3, [pc, #672]	; (800d470 <_svfprintf_r+0x7d8>)
 800d1ce:	60fb      	str	r3, [r7, #12]
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1d6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800d1da:	e313      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d1dc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	f7f4 fb76 	bl	80018d4 <__aeabi_dcmpun>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d016      	beq.n	800d21c <_svfprintf_r+0x584>
 800d1ee:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800d1f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d002      	beq.n	800d200 <_svfprintf_r+0x568>
 800d1fa:	232d      	movs	r3, #45	; 0x2d
 800d1fc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b47      	cmp	r3, #71	; 0x47
 800d204:	dc02      	bgt.n	800d20c <_svfprintf_r+0x574>
 800d206:	4b9b      	ldr	r3, [pc, #620]	; (800d474 <_svfprintf_r+0x7dc>)
 800d208:	60fb      	str	r3, [r7, #12]
 800d20a:	e001      	b.n	800d210 <_svfprintf_r+0x578>
 800d20c:	4b9a      	ldr	r3, [pc, #616]	; (800d478 <_svfprintf_r+0x7e0>)
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	2303      	movs	r3, #3
 800d212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d216:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800d21a:	e2f3      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d21c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d224:	d103      	bne.n	800d22e <_svfprintf_r+0x596>
 800d226:	2306      	movs	r3, #6
 800d228:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d22c:	e00b      	b.n	800d246 <_svfprintf_r+0x5ae>
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b67      	cmp	r3, #103	; 0x67
 800d232:	d001      	beq.n	800d238 <_svfprintf_r+0x5a0>
 800d234:	2b47      	cmp	r3, #71	; 0x47
 800d236:	d106      	bne.n	800d246 <_svfprintf_r+0x5ae>
 800d238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d102      	bne.n	800d246 <_svfprintf_r+0x5ae>
 800d240:	2301      	movs	r3, #1
 800d242:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d246:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800d24a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800d24e:	68f9      	ldr	r1, [r7, #12]
 800d250:	9106      	str	r1, [sp, #24]
 800d252:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800d256:	9105      	str	r1, [sp, #20]
 800d258:	68bd      	ldr	r5, [r7, #8]
 800d25a:	9504      	str	r5, [sp, #16]
 800d25c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800d260:	9103      	str	r1, [sp, #12]
 800d262:	f107 01b2 	add.w	r1, r7, #178	; 0xb2
 800d266:	9102      	str	r1, [sp, #8]
 800d268:	9601      	str	r6, [sp, #4]
 800d26a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800d26e:	9100      	str	r1, [sp, #0]
 800d270:	69f8      	ldr	r0, [r7, #28]
 800d272:	f00b fa75 	bl	8018760 <cvt>
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	2d67      	cmp	r5, #103	; 0x67
 800d27a:	d001      	beq.n	800d280 <_svfprintf_r+0x5e8>
 800d27c:	2d47      	cmp	r5, #71	; 0x47
 800d27e:	d110      	bne.n	800d2a2 <_svfprintf_r+0x60a>
 800d280:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d284:	f113 0f03 	cmn.w	r3, #3
 800d288:	db05      	blt.n	800d296 <_svfprintf_r+0x5fe>
 800d28a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d28e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d292:	429a      	cmp	r2, r3
 800d294:	da03      	bge.n	800d29e <_svfprintf_r+0x606>
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	3b02      	subs	r3, #2
 800d29a:	60bb      	str	r3, [r7, #8]
 800d29c:	e001      	b.n	800d2a2 <_svfprintf_r+0x60a>
 800d29e:	2367      	movs	r3, #103	; 0x67
 800d2a0:	60bb      	str	r3, [r7, #8]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	2a65      	cmp	r2, #101	; 0x65
 800d2a6:	dc24      	bgt.n	800d2f2 <_svfprintf_r+0x65a>
 800d2a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d2b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f001 f914 	bl	800e4e8 <exponent>
 800d2c0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800d2c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2c8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	dc03      	bgt.n	800d2e2 <_svfprintf_r+0x64a>
 800d2da:	f006 0301 	and.w	r3, r6, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d067      	beq.n	800d3b2 <_svfprintf_r+0x71a>
 800d2e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d2e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d2ea:	4413      	add	r3, r2
 800d2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2f0:	e05f      	b.n	800d3b2 <_svfprintf_r+0x71a>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2b66      	cmp	r3, #102	; 0x66
 800d2f6:	d12d      	bne.n	800d354 <_svfprintf_r+0x6bc>
 800d2f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	dd16      	ble.n	800d32e <_svfprintf_r+0x696>
 800d300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d103      	bne.n	800d318 <_svfprintf_r+0x680>
 800d310:	f006 0301 	and.w	r3, r6, #1
 800d314:	2b00      	cmp	r3, #0
 800d316:	d048      	beq.n	800d3aa <_svfprintf_r+0x712>
 800d318:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d31c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d320:	441a      	add	r2, r3
 800d322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d326:	4413      	add	r3, r2
 800d328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d32c:	e03d      	b.n	800d3aa <_svfprintf_r+0x712>
 800d32e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d332:	2b00      	cmp	r3, #0
 800d334:	d103      	bne.n	800d33e <_svfprintf_r+0x6a6>
 800d336:	f006 0301 	and.w	r3, r6, #1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d006      	beq.n	800d34c <_svfprintf_r+0x6b4>
 800d33e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800d342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d346:	4413      	add	r3, r2
 800d348:	3301      	adds	r3, #1
 800d34a:	e000      	b.n	800d34e <_svfprintf_r+0x6b6>
 800d34c:	2301      	movs	r3, #1
 800d34e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d352:	e02a      	b.n	800d3aa <_svfprintf_r+0x712>
 800d354:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d35c:	429a      	cmp	r2, r3
 800d35e:	db0f      	blt.n	800d380 <_svfprintf_r+0x6e8>
 800d360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d368:	f006 0301 	and.w	r3, r6, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d01c      	beq.n	800d3aa <_svfprintf_r+0x712>
 800d370:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d378:	4413      	add	r3, r2
 800d37a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d37e:	e014      	b.n	800d3aa <_svfprintf_r+0x712>
 800d380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d384:	461a      	mov	r2, r3
 800d386:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d38a:	4413      	add	r3, r2
 800d38c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d394:	2b00      	cmp	r3, #0
 800d396:	dc08      	bgt.n	800d3aa <_svfprintf_r+0x712>
 800d398:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d39c:	f1c3 0301 	rsb	r3, r3, #1
 800d3a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d3aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d3b2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 8223 	beq.w	800d802 <_svfprintf_r+0xb6a>
 800d3bc:	232d      	movs	r3, #45	; 0x2d
 800d3be:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d3c2:	e21e      	b.n	800d802 <_svfprintf_r+0xb6a>
 800d3c4:	f006 0320 	and.w	r3, r6, #32
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00c      	beq.n	800d3e6 <_svfprintf_r+0x74e>
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	1d1a      	adds	r2, r3, #4
 800d3d0:	613a      	str	r2, [r7, #16]
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3d8:	461a      	mov	r2, r3
 800d3da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d3de:	e9c1 2300 	strd	r2, r3, [r1]
 800d3e2:	f000 bffe 	b.w	800e3e2 <_svfprintf_r+0x174a>
 800d3e6:	f006 0310 	and.w	r3, r6, #16
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d008      	beq.n	800d400 <_svfprintf_r+0x768>
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	1d1a      	adds	r2, r3, #4
 800d3f2:	613a      	str	r2, [r7, #16]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	f000 bff1 	b.w	800e3e2 <_svfprintf_r+0x174a>
 800d400:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800d404:	2b00      	cmp	r3, #0
 800d406:	d009      	beq.n	800d41c <_svfprintf_r+0x784>
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	1d1a      	adds	r2, r3, #4
 800d40c:	613a      	str	r2, [r7, #16]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d414:	b212      	sxth	r2, r2
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	f000 bfe3 	b.w	800e3e2 <_svfprintf_r+0x174a>
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	1d1a      	adds	r2, r3, #4
 800d420:	613a      	str	r2, [r7, #16]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	f000 bfda 	b.w	800e3e2 <_svfprintf_r+0x174a>
 800d42e:	f046 0610 	orr.w	r6, r6, #16
 800d432:	f006 0320 	and.w	r3, r6, #32
 800d436:	2b00      	cmp	r3, #0
 800d438:	d009      	beq.n	800d44e <_svfprintf_r+0x7b6>
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3307      	adds	r3, #7
 800d43e:	f023 0307 	bic.w	r3, r3, #7
 800d442:	f103 0208 	add.w	r2, r3, #8
 800d446:	613a      	str	r2, [r7, #16]
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	e02a      	b.n	800d4a4 <_svfprintf_r+0x80c>
 800d44e:	f006 0310 	and.w	r3, r6, #16
 800d452:	2b00      	cmp	r3, #0
 800d454:	d012      	beq.n	800d47c <_svfprintf_r+0x7e4>
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	1d1a      	adds	r2, r3, #4
 800d45a:	613a      	str	r2, [r7, #16]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	461a      	mov	r2, r3
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	e01e      	b.n	800d4a4 <_svfprintf_r+0x80c>
 800d466:	bf00      	nop
 800d468:	7fefffff 	.word	0x7fefffff
 800d46c:	0801a164 	.word	0x0801a164
 800d470:	0801a168 	.word	0x0801a168
 800d474:	0801a16c 	.word	0x0801a16c
 800d478:	0801a170 	.word	0x0801a170
 800d47c:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800d480:	2b00      	cmp	r3, #0
 800d482:	d008      	beq.n	800d496 <_svfprintf_r+0x7fe>
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	1d1a      	adds	r2, r3, #4
 800d488:	613a      	str	r2, [r7, #16]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	b29a      	uxth	r2, r3
 800d490:	f04f 0300 	mov.w	r3, #0
 800d494:	e006      	b.n	800d4a4 <_svfprintf_r+0x80c>
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	1d1a      	adds	r2, r3, #4
 800d49a:	613a      	str	r2, [r7, #16]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	461a      	mov	r2, r3
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800d4ae:	e0d3      	b.n	800d658 <_svfprintf_r+0x9c0>
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	613a      	str	r2, [r7, #16]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	f04f 0300 	mov.w	r3, #0
 800d4be:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800d4c8:	4bb6      	ldr	r3, [pc, #728]	; (800d7a4 <_svfprintf_r+0xb0c>)
 800d4ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d4ce:	f046 0602 	orr.w	r6, r6, #2
 800d4d2:	2330      	movs	r3, #48	; 0x30
 800d4d4:	f887 3020 	strb.w	r3, [r7, #32]
 800d4d8:	2378      	movs	r3, #120	; 0x78
 800d4da:	60bb      	str	r3, [r7, #8]
 800d4dc:	2378      	movs	r3, #120	; 0x78
 800d4de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800d4e2:	e0b9      	b.n	800d658 <_svfprintf_r+0x9c0>
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	613a      	str	r2, [r7, #16]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	60fa      	str	r2, [r7, #12]
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d4f4:	2a00      	cmp	r2, #0
 800d4f6:	d109      	bne.n	800d50c <_svfprintf_r+0x874>
 800d4f8:	4bab      	ldr	r3, [pc, #684]	; (800d7a8 <_svfprintf_r+0xb10>)
 800d4fa:	60fb      	str	r3, [r7, #12]
 800d4fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d500:	2b06      	cmp	r3, #6
 800d502:	bf28      	it	cs
 800d504:	2306      	movcs	r3, #6
 800d506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d50a:	e17b      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d50c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d510:	2b00      	cmp	r3, #0
 800d512:	db18      	blt.n	800d546 <_svfprintf_r+0x8ae>
 800d514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d518:	461a      	mov	r2, r3
 800d51a:	2100      	movs	r1, #0
 800d51c:	68fd      	ldr	r5, [r7, #12]
 800d51e:	4628      	mov	r0, r5
 800d520:	f7f3 f82e 	bl	8000580 <memchr>
 800d524:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800d528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <_svfprintf_r+0x8a4>
 800d530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d534:	1b5b      	subs	r3, r3, r5
 800d536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d53a:	e163      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d53c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d544:	e15e      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f7f2 fe3a 	bl	80001c0 <strlen>
 800d54c:	4603      	mov	r3, r0
 800d54e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d552:	e157      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d554:	f046 0610 	orr.w	r6, r6, #16
 800d558:	f006 0320 	and.w	r3, r6, #32
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d009      	beq.n	800d574 <_svfprintf_r+0x8dc>
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3307      	adds	r3, #7
 800d564:	f023 0307 	bic.w	r3, r3, #7
 800d568:	f103 0208 	add.w	r2, r3, #8
 800d56c:	613a      	str	r2, [r7, #16]
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	e01f      	b.n	800d5b4 <_svfprintf_r+0x91c>
 800d574:	f006 0310 	and.w	r3, r6, #16
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d007      	beq.n	800d58c <_svfprintf_r+0x8f4>
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	1d1a      	adds	r2, r3, #4
 800d580:	613a      	str	r2, [r7, #16]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	e013      	b.n	800d5b4 <_svfprintf_r+0x91c>
 800d58c:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800d590:	2b00      	cmp	r3, #0
 800d592:	d008      	beq.n	800d5a6 <_svfprintf_r+0x90e>
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	1d1a      	adds	r2, r3, #4
 800d598:	613a      	str	r2, [r7, #16]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	b29a      	uxth	r2, r3
 800d5a0:	f04f 0300 	mov.w	r3, #0
 800d5a4:	e006      	b.n	800d5b4 <_svfprintf_r+0x91c>
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	1d1a      	adds	r2, r3, #4
 800d5aa:	613a      	str	r2, [r7, #16]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f04f 0300 	mov.w	r3, #0
 800d5b4:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800d5be:	e04b      	b.n	800d658 <_svfprintf_r+0x9c0>
 800d5c0:	4b7a      	ldr	r3, [pc, #488]	; (800d7ac <_svfprintf_r+0xb14>)
 800d5c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5c6:	e002      	b.n	800d5ce <_svfprintf_r+0x936>
 800d5c8:	4b76      	ldr	r3, [pc, #472]	; (800d7a4 <_svfprintf_r+0xb0c>)
 800d5ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d5ce:	f006 0320 	and.w	r3, r6, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <_svfprintf_r+0x952>
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	3307      	adds	r3, #7
 800d5da:	f023 0307 	bic.w	r3, r3, #7
 800d5de:	f103 0208 	add.w	r2, r3, #8
 800d5e2:	613a      	str	r2, [r7, #16]
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	e01f      	b.n	800d62a <_svfprintf_r+0x992>
 800d5ea:	f006 0310 	and.w	r3, r6, #16
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d007      	beq.n	800d602 <_svfprintf_r+0x96a>
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	1d1a      	adds	r2, r3, #4
 800d5f6:	613a      	str	r2, [r7, #16]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	f04f 0300 	mov.w	r3, #0
 800d600:	e013      	b.n	800d62a <_svfprintf_r+0x992>
 800d602:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800d606:	2b00      	cmp	r3, #0
 800d608:	d008      	beq.n	800d61c <_svfprintf_r+0x984>
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	1d1a      	adds	r2, r3, #4
 800d60e:	613a      	str	r2, [r7, #16]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
 800d614:	b29a      	uxth	r2, r3
 800d616:	f04f 0300 	mov.w	r3, #0
 800d61a:	e006      	b.n	800d62a <_svfprintf_r+0x992>
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	1d1a      	adds	r2, r3, #4
 800d620:	613a      	str	r2, [r7, #16]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	461a      	mov	r2, r3
 800d626:	f04f 0300 	mov.w	r3, #0
 800d62a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d62e:	2302      	movs	r3, #2
 800d630:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800d634:	f006 0301 	and.w	r3, r6, #1
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00c      	beq.n	800d656 <_svfprintf_r+0x9be>
 800d63c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d640:	4313      	orrs	r3, r2
 800d642:	d008      	beq.n	800d656 <_svfprintf_r+0x9be>
 800d644:	2330      	movs	r3, #48	; 0x30
 800d646:	f887 3020 	strb.w	r3, [r7, #32]
 800d64a:	7a3b      	ldrb	r3, [r7, #8]
 800d64c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800d650:	f046 0602 	orr.w	r6, r6, #2
 800d654:	e000      	b.n	800d658 <_svfprintf_r+0x9c0>
 800d656:	bf00      	nop
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d65e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	db01      	blt.n	800d672 <_svfprintf_r+0x9da>
 800d66e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800d672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d676:	3328      	adds	r3, #40	; 0x28
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d67e:	4313      	orrs	r3, r2
 800d680:	d104      	bne.n	800d68c <_svfprintf_r+0x9f4>
 800d682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d686:	2b00      	cmp	r3, #0
 800d688:	f000 8096 	beq.w	800d7b8 <_svfprintf_r+0xb20>
 800d68c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800d690:	2b02      	cmp	r3, #2
 800d692:	d060      	beq.n	800d756 <_svfprintf_r+0xabe>
 800d694:	2b02      	cmp	r3, #2
 800d696:	dc7b      	bgt.n	800d790 <_svfprintf_r+0xaf8>
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <_svfprintf_r+0xa0c>
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d02a      	beq.n	800d6f6 <_svfprintf_r+0xa5e>
 800d6a0:	e076      	b.n	800d790 <_svfprintf_r+0xaf8>
 800d6a2:	bf00      	nop
 800d6a4:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800d6a8:	f003 0307 	and.w	r3, r3, #7
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	1e55      	subs	r5, r2, #1
 800d6b2:	60fd      	str	r5, [r7, #12]
 800d6b4:	3330      	adds	r3, #48	; 0x30
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	462a      	mov	r2, r5
 800d6ba:	7013      	strb	r3, [r2, #0]
 800d6bc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	f04f 0300 	mov.w	r3, #0
 800d6c8:	08c2      	lsrs	r2, r0, #3
 800d6ca:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800d6ce:	08cb      	lsrs	r3, r1, #3
 800d6d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d6d4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	d1e2      	bne.n	800d6a2 <_svfprintf_r+0xa0a>
 800d6dc:	f006 0301 	and.w	r3, r6, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d067      	beq.n	800d7b4 <_svfprintf_r+0xb1c>
 800d6e4:	462b      	mov	r3, r5
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	2b30      	cmp	r3, #48	; 0x30
 800d6ea:	d063      	beq.n	800d7b4 <_svfprintf_r+0xb1c>
 800d6ec:	1e6a      	subs	r2, r5, #1
 800d6ee:	60fa      	str	r2, [r7, #12]
 800d6f0:	2330      	movs	r3, #48	; 0x30
 800d6f2:	7013      	strb	r3, [r2, #0]
 800d6f4:	e05e      	b.n	800d7b4 <_svfprintf_r+0xb1c>
 800d6f6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	bf08      	it	eq
 800d6fe:	2a0a      	cmpeq	r2, #10
 800d700:	d208      	bcs.n	800d714 <_svfprintf_r+0xa7c>
 800d702:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	3a01      	subs	r2, #1
 800d70a:	60fa      	str	r2, [r7, #12]
 800d70c:	3330      	adds	r3, #48	; 0x30
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	7013      	strb	r3, [r2, #0]
 800d712:	e050      	b.n	800d7b6 <_svfprintf_r+0xb1e>
 800d714:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d718:	f04f 020a 	mov.w	r2, #10
 800d71c:	f04f 0300 	mov.w	r3, #0
 800d720:	f7f3 fdfa 	bl	8001318 <__aeabi_uldivmod>
 800d724:	b2d3      	uxtb	r3, r2
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	3a01      	subs	r2, #1
 800d72a:	60fa      	str	r2, [r7, #12]
 800d72c:	3330      	adds	r3, #48	; 0x30
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	7013      	strb	r3, [r2, #0]
 800d732:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d736:	f04f 020a 	mov.w	r2, #10
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	f7f3 fdeb 	bl	8001318 <__aeabi_uldivmod>
 800d742:	4602      	mov	r2, r0
 800d744:	460b      	mov	r3, r1
 800d746:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d74a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d74e:	4313      	orrs	r3, r2
 800d750:	d1e0      	bne.n	800d714 <_svfprintf_r+0xa7c>
 800d752:	e030      	b.n	800d7b6 <_svfprintf_r+0xb1e>
 800d754:	bf00      	nop
 800d756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d75a:	f003 030f 	and.w	r3, r3, #15
 800d75e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d762:	4413      	add	r3, r2
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	3a01      	subs	r2, #1
 800d768:	60fa      	str	r2, [r7, #12]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	7013      	strb	r3, [r2, #0]
 800d76e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800d772:	f04f 0200 	mov.w	r2, #0
 800d776:	f04f 0300 	mov.w	r3, #0
 800d77a:	0902      	lsrs	r2, r0, #4
 800d77c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800d780:	090b      	lsrs	r3, r1, #4
 800d782:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800d786:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800d78a:	4313      	orrs	r3, r2
 800d78c:	d1e2      	bne.n	800d754 <_svfprintf_r+0xabc>
 800d78e:	e012      	b.n	800d7b6 <_svfprintf_r+0xb1e>
 800d790:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <_svfprintf_r+0xb18>)
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	4618      	mov	r0, r3
 800d796:	f7f2 fd13 	bl	80001c0 <strlen>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d7a0:	bf00      	nop
 800d7a2:	e02f      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d7a4:	0801a174 	.word	0x0801a174
 800d7a8:	0801a188 	.word	0x0801a188
 800d7ac:	0801a190 	.word	0x0801a190
 800d7b0:	0801a1a4 	.word	0x0801a1a4
 800d7b4:	bf00      	nop
 800d7b6:	e00c      	b.n	800d7d2 <_svfprintf_r+0xb3a>
 800d7b8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d108      	bne.n	800d7d2 <_svfprintf_r+0xb3a>
 800d7c0:	f006 0301 	and.w	r3, r6, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d004      	beq.n	800d7d2 <_svfprintf_r+0xb3a>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	1e5a      	subs	r2, r3, #1
 800d7cc:	60fa      	str	r2, [r7, #12]
 800d7ce:	2330      	movs	r3, #48	; 0x30
 800d7d0:	7013      	strb	r3, [r2, #0]
 800d7d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7d6:	3328      	adds	r3, #40	; 0x28
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	1a9b      	subs	r3, r3, r2
 800d7dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d7e0:	e010      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 8600 	beq.w	800e3ea <_svfprintf_r+0x1752>
 800d7ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d7ee:	60fa      	str	r2, [r7, #12]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	7013      	strb	r3, [r2, #0]
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d800:	e000      	b.n	800d804 <_svfprintf_r+0xb6c>
 800d802:	bf00      	nop
 800d804:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800d808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d80c:	4293      	cmp	r3, r2
 800d80e:	bfb8      	it	lt
 800d810:	4613      	movlt	r3, r2
 800d812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d816:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d004      	beq.n	800d828 <_svfprintf_r+0xb90>
 800d81e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d822:	3301      	adds	r3, #1
 800d824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d828:	f006 0302 	and.w	r3, r6, #2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d004      	beq.n	800d83a <_svfprintf_r+0xba2>
 800d830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d834:	3302      	adds	r3, #2
 800d836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d83a:	f006 0384 	and.w	r3, r6, #132	; 0x84
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d14b      	bne.n	800d8da <_svfprintf_r+0xc42>
 800d842:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800d846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d84a:	1ad5      	subs	r5, r2, r3
 800d84c:	2d00      	cmp	r5, #0
 800d84e:	dd44      	ble.n	800d8da <_svfprintf_r+0xc42>
 800d850:	e020      	b.n	800d894 <_svfprintf_r+0xbfc>
 800d852:	4ba9      	ldr	r3, [pc, #676]	; (800daf8 <_svfprintf_r+0xe60>)
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	2310      	movs	r3, #16
 800d858:	6063      	str	r3, [r4, #4]
 800d85a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d85e:	3310      	adds	r3, #16
 800d860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d864:	3408      	adds	r4, #8
 800d866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d86a:	3301      	adds	r3, #1
 800d86c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d874:	2b07      	cmp	r3, #7
 800d876:	dd0c      	ble.n	800d892 <_svfprintf_r+0xbfa>
 800d878:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d87c:	461a      	mov	r2, r3
 800d87e:	69b9      	ldr	r1, [r7, #24]
 800d880:	69f8      	ldr	r0, [r7, #28]
 800d882:	f00c f972 	bl	8019b6a <__ssprint_r>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f040 85c5 	bne.w	800e418 <_svfprintf_r+0x1780>
 800d88e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d892:	3d10      	subs	r5, #16
 800d894:	2d10      	cmp	r5, #16
 800d896:	dcdc      	bgt.n	800d852 <_svfprintf_r+0xbba>
 800d898:	4b97      	ldr	r3, [pc, #604]	; (800daf8 <_svfprintf_r+0xe60>)
 800d89a:	6023      	str	r3, [r4, #0]
 800d89c:	462b      	mov	r3, r5
 800d89e:	6063      	str	r3, [r4, #4]
 800d8a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8a4:	462a      	mov	r2, r5
 800d8a6:	4413      	add	r3, r2
 800d8a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8ac:	3408      	adds	r4, #8
 800d8ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8bc:	2b07      	cmp	r3, #7
 800d8be:	dd0c      	ble.n	800d8da <_svfprintf_r+0xc42>
 800d8c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	69b9      	ldr	r1, [r7, #24]
 800d8c8:	69f8      	ldr	r0, [r7, #28]
 800d8ca:	f00c f94e 	bl	8019b6a <__ssprint_r>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f040 85a3 	bne.w	800e41c <_svfprintf_r+0x1784>
 800d8d6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d8da:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d020      	beq.n	800d924 <_svfprintf_r+0xc8c>
 800d8e2:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 800d8e6:	6023      	str	r3, [r4, #0]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	6063      	str	r3, [r4, #4]
 800d8ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8f6:	3408      	adds	r4, #8
 800d8f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d906:	2b07      	cmp	r3, #7
 800d908:	dd0c      	ble.n	800d924 <_svfprintf_r+0xc8c>
 800d90a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d90e:	461a      	mov	r2, r3
 800d910:	69b9      	ldr	r1, [r7, #24]
 800d912:	69f8      	ldr	r0, [r7, #28]
 800d914:	f00c f929 	bl	8019b6a <__ssprint_r>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f040 8580 	bne.w	800e420 <_svfprintf_r+0x1788>
 800d920:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d924:	f006 0302 	and.w	r3, r6, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d020      	beq.n	800d96e <_svfprintf_r+0xcd6>
 800d92c:	f107 0320 	add.w	r3, r7, #32
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	2302      	movs	r3, #2
 800d934:	6063      	str	r3, [r4, #4]
 800d936:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d93a:	3302      	adds	r3, #2
 800d93c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d940:	3408      	adds	r4, #8
 800d942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d946:	3301      	adds	r3, #1
 800d948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d950:	2b07      	cmp	r3, #7
 800d952:	dd0c      	ble.n	800d96e <_svfprintf_r+0xcd6>
 800d954:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d958:	461a      	mov	r2, r3
 800d95a:	69b9      	ldr	r1, [r7, #24]
 800d95c:	69f8      	ldr	r0, [r7, #28]
 800d95e:	f00c f904 	bl	8019b6a <__ssprint_r>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	f040 855d 	bne.w	800e424 <_svfprintf_r+0x178c>
 800d96a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d96e:	f006 0384 	and.w	r3, r6, #132	; 0x84
 800d972:	2b80      	cmp	r3, #128	; 0x80
 800d974:	d14b      	bne.n	800da0e <_svfprintf_r+0xd76>
 800d976:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800d97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d97e:	1ad5      	subs	r5, r2, r3
 800d980:	2d00      	cmp	r5, #0
 800d982:	dd44      	ble.n	800da0e <_svfprintf_r+0xd76>
 800d984:	e020      	b.n	800d9c8 <_svfprintf_r+0xd30>
 800d986:	4b5d      	ldr	r3, [pc, #372]	; (800dafc <_svfprintf_r+0xe64>)
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	2310      	movs	r3, #16
 800d98c:	6063      	str	r3, [r4, #4]
 800d98e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d992:	3310      	adds	r3, #16
 800d994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d998:	3408      	adds	r4, #8
 800d99a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d99e:	3301      	adds	r3, #1
 800d9a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d9a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9a8:	2b07      	cmp	r3, #7
 800d9aa:	dd0c      	ble.n	800d9c6 <_svfprintf_r+0xd2e>
 800d9ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	69b9      	ldr	r1, [r7, #24]
 800d9b4:	69f8      	ldr	r0, [r7, #28]
 800d9b6:	f00c f8d8 	bl	8019b6a <__ssprint_r>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 8533 	bne.w	800e428 <_svfprintf_r+0x1790>
 800d9c2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d9c6:	3d10      	subs	r5, #16
 800d9c8:	2d10      	cmp	r5, #16
 800d9ca:	dcdc      	bgt.n	800d986 <_svfprintf_r+0xcee>
 800d9cc:	4b4b      	ldr	r3, [pc, #300]	; (800dafc <_svfprintf_r+0xe64>)
 800d9ce:	6023      	str	r3, [r4, #0]
 800d9d0:	462b      	mov	r3, r5
 800d9d2:	6063      	str	r3, [r4, #4]
 800d9d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d9d8:	462a      	mov	r2, r5
 800d9da:	4413      	add	r3, r2
 800d9dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d9e0:	3408      	adds	r4, #8
 800d9e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d9ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9f0:	2b07      	cmp	r3, #7
 800d9f2:	dd0c      	ble.n	800da0e <_svfprintf_r+0xd76>
 800d9f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	69b9      	ldr	r1, [r7, #24]
 800d9fc:	69f8      	ldr	r0, [r7, #28]
 800d9fe:	f00c f8b4 	bl	8019b6a <__ssprint_r>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	f040 8511 	bne.w	800e42c <_svfprintf_r+0x1794>
 800da0a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800da0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da16:	1ad5      	subs	r5, r2, r3
 800da18:	2d00      	cmp	r5, #0
 800da1a:	dd44      	ble.n	800daa6 <_svfprintf_r+0xe0e>
 800da1c:	e020      	b.n	800da60 <_svfprintf_r+0xdc8>
 800da1e:	4b37      	ldr	r3, [pc, #220]	; (800dafc <_svfprintf_r+0xe64>)
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	2310      	movs	r3, #16
 800da24:	6063      	str	r3, [r4, #4]
 800da26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da2a:	3310      	adds	r3, #16
 800da2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da30:	3408      	adds	r4, #8
 800da32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da36:	3301      	adds	r3, #1
 800da38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da40:	2b07      	cmp	r3, #7
 800da42:	dd0c      	ble.n	800da5e <_svfprintf_r+0xdc6>
 800da44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da48:	461a      	mov	r2, r3
 800da4a:	69b9      	ldr	r1, [r7, #24]
 800da4c:	69f8      	ldr	r0, [r7, #28]
 800da4e:	f00c f88c 	bl	8019b6a <__ssprint_r>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 84eb 	bne.w	800e430 <_svfprintf_r+0x1798>
 800da5a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800da5e:	3d10      	subs	r5, #16
 800da60:	2d10      	cmp	r5, #16
 800da62:	dcdc      	bgt.n	800da1e <_svfprintf_r+0xd86>
 800da64:	4b25      	ldr	r3, [pc, #148]	; (800dafc <_svfprintf_r+0xe64>)
 800da66:	6023      	str	r3, [r4, #0]
 800da68:	462b      	mov	r3, r5
 800da6a:	6063      	str	r3, [r4, #4]
 800da6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da70:	462a      	mov	r2, r5
 800da72:	4413      	add	r3, r2
 800da74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da78:	3408      	adds	r4, #8
 800da7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da7e:	3301      	adds	r3, #1
 800da80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da88:	2b07      	cmp	r3, #7
 800da8a:	dd0c      	ble.n	800daa6 <_svfprintf_r+0xe0e>
 800da8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da90:	461a      	mov	r2, r3
 800da92:	69b9      	ldr	r1, [r7, #24]
 800da94:	69f8      	ldr	r0, [r7, #28]
 800da96:	f00c f868 	bl	8019b6a <__ssprint_r>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f040 84c9 	bne.w	800e434 <_svfprintf_r+0x179c>
 800daa2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800daa6:	f406 7380 	and.w	r3, r6, #256	; 0x100
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d128      	bne.n	800db00 <_svfprintf_r+0xe68>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dab6:	6063      	str	r3, [r4, #4]
 800dab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dabc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dac0:	4413      	add	r3, r2
 800dac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dac6:	3408      	adds	r4, #8
 800dac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dacc:	3301      	adds	r3, #1
 800dace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dad6:	2b07      	cmp	r3, #7
 800dad8:	f340 8407 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800dadc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dae0:	461a      	mov	r2, r3
 800dae2:	69b9      	ldr	r1, [r7, #24]
 800dae4:	69f8      	ldr	r0, [r7, #28]
 800dae6:	f00c f840 	bl	8019b6a <__ssprint_r>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 84a3 	bne.w	800e438 <_svfprintf_r+0x17a0>
 800daf2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800daf6:	e3f8      	b.n	800e2ea <_svfprintf_r+0x1652>
 800daf8:	0801bc84 	.word	0x0801bc84
 800dafc:	0801bc94 	.word	0x0801bc94
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b65      	cmp	r3, #101	; 0x65
 800db04:	f340 82dd 	ble.w	800e0c2 <_svfprintf_r+0x142a>
 800db08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800db0c:	f04f 0200 	mov.w	r2, #0
 800db10:	f04f 0300 	mov.w	r3, #0
 800db14:	f7f3 fdf2 	bl	80016fc <__aeabi_dcmpeq>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f000 809c 	beq.w	800dc58 <_svfprintf_r+0xfc0>
 800db20:	4bd5      	ldr	r3, [pc, #852]	; (800de78 <_svfprintf_r+0x11e0>)
 800db22:	6023      	str	r3, [r4, #0]
 800db24:	2301      	movs	r3, #1
 800db26:	6063      	str	r3, [r4, #4]
 800db28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800db2c:	3301      	adds	r3, #1
 800db2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db32:	3408      	adds	r4, #8
 800db34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db38:	3301      	adds	r3, #1
 800db3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db42:	2b07      	cmp	r3, #7
 800db44:	dd0c      	ble.n	800db60 <_svfprintf_r+0xec8>
 800db46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db4a:	461a      	mov	r2, r3
 800db4c:	69b9      	ldr	r1, [r7, #24]
 800db4e:	69f8      	ldr	r0, [r7, #28]
 800db50:	f00c f80b 	bl	8019b6a <__ssprint_r>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	f040 8470 	bne.w	800e43c <_svfprintf_r+0x17a4>
 800db5c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800db60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800db64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db68:	429a      	cmp	r2, r3
 800db6a:	db04      	blt.n	800db76 <_svfprintf_r+0xede>
 800db6c:	f006 0301 	and.w	r3, r6, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 83ba 	beq.w	800e2ea <_svfprintf_r+0x1652>
 800db76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db80:	6063      	str	r3, [r4, #4]
 800db82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800db86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db8a:	4413      	add	r3, r2
 800db8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800db90:	3408      	adds	r4, #8
 800db92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db96:	3301      	adds	r3, #1
 800db98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dba0:	2b07      	cmp	r3, #7
 800dba2:	dd0c      	ble.n	800dbbe <_svfprintf_r+0xf26>
 800dba4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dba8:	461a      	mov	r2, r3
 800dbaa:	69b9      	ldr	r1, [r7, #24]
 800dbac:	69f8      	ldr	r0, [r7, #28]
 800dbae:	f00b ffdc 	bl	8019b6a <__ssprint_r>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f040 8443 	bne.w	800e440 <_svfprintf_r+0x17a8>
 800dbba:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dbbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbc2:	1e5d      	subs	r5, r3, #1
 800dbc4:	2d00      	cmp	r5, #0
 800dbc6:	f340 8390 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800dbca:	e020      	b.n	800dc0e <_svfprintf_r+0xf76>
 800dbcc:	4bab      	ldr	r3, [pc, #684]	; (800de7c <_svfprintf_r+0x11e4>)
 800dbce:	6023      	str	r3, [r4, #0]
 800dbd0:	2310      	movs	r3, #16
 800dbd2:	6063      	str	r3, [r4, #4]
 800dbd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dbd8:	3310      	adds	r3, #16
 800dbda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dbde:	3408      	adds	r4, #8
 800dbe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbee:	2b07      	cmp	r3, #7
 800dbf0:	dd0c      	ble.n	800dc0c <_svfprintf_r+0xf74>
 800dbf2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	69b9      	ldr	r1, [r7, #24]
 800dbfa:	69f8      	ldr	r0, [r7, #28]
 800dbfc:	f00b ffb5 	bl	8019b6a <__ssprint_r>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f040 841e 	bne.w	800e444 <_svfprintf_r+0x17ac>
 800dc08:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dc0c:	3d10      	subs	r5, #16
 800dc0e:	2d10      	cmp	r5, #16
 800dc10:	dcdc      	bgt.n	800dbcc <_svfprintf_r+0xf34>
 800dc12:	4b9a      	ldr	r3, [pc, #616]	; (800de7c <_svfprintf_r+0x11e4>)
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	462b      	mov	r3, r5
 800dc18:	6063      	str	r3, [r4, #4]
 800dc1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc1e:	462a      	mov	r2, r5
 800dc20:	4413      	add	r3, r2
 800dc22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc26:	3408      	adds	r4, #8
 800dc28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc36:	2b07      	cmp	r3, #7
 800dc38:	f340 8357 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800dc3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dc40:	461a      	mov	r2, r3
 800dc42:	69b9      	ldr	r1, [r7, #24]
 800dc44:	69f8      	ldr	r0, [r7, #28]
 800dc46:	f00b ff90 	bl	8019b6a <__ssprint_r>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f040 83fb 	bne.w	800e448 <_svfprintf_r+0x17b0>
 800dc52:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dc56:	e348      	b.n	800e2ea <_svfprintf_r+0x1652>
 800dc58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f300 80c0 	bgt.w	800dde2 <_svfprintf_r+0x114a>
 800dc62:	4b85      	ldr	r3, [pc, #532]	; (800de78 <_svfprintf_r+0x11e0>)
 800dc64:	6023      	str	r3, [r4, #0]
 800dc66:	2301      	movs	r3, #1
 800dc68:	6063      	str	r3, [r4, #4]
 800dc6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc6e:	3301      	adds	r3, #1
 800dc70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc74:	3408      	adds	r4, #8
 800dc76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc84:	2b07      	cmp	r3, #7
 800dc86:	dd0c      	ble.n	800dca2 <_svfprintf_r+0x100a>
 800dc88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	69b9      	ldr	r1, [r7, #24]
 800dc90:	69f8      	ldr	r0, [r7, #28]
 800dc92:	f00b ff6a 	bl	8019b6a <__ssprint_r>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f040 83d7 	bne.w	800e44c <_svfprintf_r+0x17b4>
 800dc9e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d108      	bne.n	800dcbc <_svfprintf_r+0x1024>
 800dcaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d104      	bne.n	800dcbc <_svfprintf_r+0x1024>
 800dcb2:	f006 0301 	and.w	r3, r6, #1
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 8317 	beq.w	800e2ea <_svfprintf_r+0x1652>
 800dcbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcc6:	6063      	str	r3, [r4, #4]
 800dcc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dcd0:	4413      	add	r3, r2
 800dcd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dcd6:	3408      	adds	r4, #8
 800dcd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcdc:	3301      	adds	r3, #1
 800dcde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dce6:	2b07      	cmp	r3, #7
 800dce8:	dd0c      	ble.n	800dd04 <_svfprintf_r+0x106c>
 800dcea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dcee:	461a      	mov	r2, r3
 800dcf0:	69b9      	ldr	r1, [r7, #24]
 800dcf2:	69f8      	ldr	r0, [r7, #28]
 800dcf4:	f00b ff39 	bl	8019b6a <__ssprint_r>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f040 83a8 	bne.w	800e450 <_svfprintf_r+0x17b8>
 800dd00:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dd04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd08:	425d      	negs	r5, r3
 800dd0a:	2d00      	cmp	r5, #0
 800dd0c:	dd44      	ble.n	800dd98 <_svfprintf_r+0x1100>
 800dd0e:	e020      	b.n	800dd52 <_svfprintf_r+0x10ba>
 800dd10:	4b5a      	ldr	r3, [pc, #360]	; (800de7c <_svfprintf_r+0x11e4>)
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	2310      	movs	r3, #16
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd1c:	3310      	adds	r3, #16
 800dd1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd22:	3408      	adds	r4, #8
 800dd24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd28:	3301      	adds	r3, #1
 800dd2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd32:	2b07      	cmp	r3, #7
 800dd34:	dd0c      	ble.n	800dd50 <_svfprintf_r+0x10b8>
 800dd36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	69b9      	ldr	r1, [r7, #24]
 800dd3e:	69f8      	ldr	r0, [r7, #28]
 800dd40:	f00b ff13 	bl	8019b6a <__ssprint_r>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f040 8384 	bne.w	800e454 <_svfprintf_r+0x17bc>
 800dd4c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dd50:	3d10      	subs	r5, #16
 800dd52:	2d10      	cmp	r5, #16
 800dd54:	dcdc      	bgt.n	800dd10 <_svfprintf_r+0x1078>
 800dd56:	4b49      	ldr	r3, [pc, #292]	; (800de7c <_svfprintf_r+0x11e4>)
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	6063      	str	r3, [r4, #4]
 800dd5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd62:	462a      	mov	r2, r5
 800dd64:	4413      	add	r3, r2
 800dd66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd6a:	3408      	adds	r4, #8
 800dd6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd70:	3301      	adds	r3, #1
 800dd72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dd76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd7a:	2b07      	cmp	r3, #7
 800dd7c:	dd0c      	ble.n	800dd98 <_svfprintf_r+0x1100>
 800dd7e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dd82:	461a      	mov	r2, r3
 800dd84:	69b9      	ldr	r1, [r7, #24]
 800dd86:	69f8      	ldr	r0, [r7, #28]
 800dd88:	f00b feef 	bl	8019b6a <__ssprint_r>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	f040 8362 	bne.w	800e458 <_svfprintf_r+0x17c0>
 800dd94:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6023      	str	r3, [r4, #0]
 800dd9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dda0:	6063      	str	r3, [r4, #4]
 800dda2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dda6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ddaa:	4413      	add	r3, r2
 800ddac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ddb0:	3408      	adds	r4, #8
 800ddb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ddbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddc0:	2b07      	cmp	r3, #7
 800ddc2:	f340 8292 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800ddc6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ddca:	461a      	mov	r2, r3
 800ddcc:	69b9      	ldr	r1, [r7, #24]
 800ddce:	69f8      	ldr	r0, [r7, #28]
 800ddd0:	f00b fecb 	bl	8019b6a <__ssprint_r>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f040 8340 	bne.w	800e45c <_svfprintf_r+0x17c4>
 800dddc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dde0:	e283      	b.n	800e2ea <_svfprintf_r+0x1652>
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800dde8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ddec:	461a      	mov	r2, r3
 800ddee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddf2:	4413      	add	r3, r2
 800ddf4:	1a5b      	subs	r3, r3, r1
 800ddf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ddfa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ddfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de02:	429a      	cmp	r2, r3
 800de04:	dd03      	ble.n	800de0e <_svfprintf_r+0x1176>
 800de06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de12:	2b00      	cmp	r3, #0
 800de14:	dd22      	ble.n	800de5c <_svfprintf_r+0x11c4>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6023      	str	r3, [r4, #0]
 800de1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de1e:	6063      	str	r3, [r4, #4]
 800de20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de28:	4413      	add	r3, r2
 800de2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de2e:	3408      	adds	r4, #8
 800de30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de34:	3301      	adds	r3, #1
 800de36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de3e:	2b07      	cmp	r3, #7
 800de40:	dd0c      	ble.n	800de5c <_svfprintf_r+0x11c4>
 800de42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800de46:	461a      	mov	r2, r3
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	69f8      	ldr	r0, [r7, #28]
 800de4c:	f00b fe8d 	bl	8019b6a <__ssprint_r>
 800de50:	4603      	mov	r3, r0
 800de52:	2b00      	cmp	r3, #0
 800de54:	f040 8304 	bne.w	800e460 <_svfprintf_r+0x17c8>
 800de58:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800de5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de64:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd50      	ble.n	800df18 <_svfprintf_r+0x1280>
 800de76:	e028      	b.n	800deca <_svfprintf_r+0x1232>
 800de78:	0801a1c0 	.word	0x0801a1c0
 800de7c:	0801bc94 	.word	0x0801bc94
 800de80:	4bd3      	ldr	r3, [pc, #844]	; (800e1d0 <_svfprintf_r+0x1538>)
 800de82:	6023      	str	r3, [r4, #0]
 800de84:	2310      	movs	r3, #16
 800de86:	6063      	str	r3, [r4, #4]
 800de88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800de8c:	3310      	adds	r3, #16
 800de8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de92:	3408      	adds	r4, #8
 800de94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dea2:	2b07      	cmp	r3, #7
 800dea4:	dd0c      	ble.n	800dec0 <_svfprintf_r+0x1228>
 800dea6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800deaa:	461a      	mov	r2, r3
 800deac:	69b9      	ldr	r1, [r7, #24]
 800deae:	69f8      	ldr	r0, [r7, #28]
 800deb0:	f00b fe5b 	bl	8019b6a <__ssprint_r>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f040 82d4 	bne.w	800e464 <_svfprintf_r+0x17cc>
 800debc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800dec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dec4:	3b10      	subs	r3, #16
 800dec6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800deca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dece:	2b10      	cmp	r3, #16
 800ded0:	dcd6      	bgt.n	800de80 <_svfprintf_r+0x11e8>
 800ded2:	4bbf      	ldr	r3, [pc, #764]	; (800e1d0 <_svfprintf_r+0x1538>)
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800deda:	6063      	str	r3, [r4, #4]
 800dedc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dee4:	4413      	add	r3, r2
 800dee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800deea:	3408      	adds	r4, #8
 800deec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800def0:	3301      	adds	r3, #1
 800def2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800def6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800defa:	2b07      	cmp	r3, #7
 800defc:	dd0c      	ble.n	800df18 <_svfprintf_r+0x1280>
 800defe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df02:	461a      	mov	r2, r3
 800df04:	69b9      	ldr	r1, [r7, #24]
 800df06:	69f8      	ldr	r0, [r7, #28]
 800df08:	f00b fe2f 	bl	8019b6a <__ssprint_r>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f040 82aa 	bne.w	800e468 <_svfprintf_r+0x17d0>
 800df14:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800df18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	441a      	add	r2, r3
 800df20:	4613      	mov	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800df28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df2c:	429a      	cmp	r2, r3
 800df2e:	db03      	blt.n	800df38 <_svfprintf_r+0x12a0>
 800df30:	f006 0301 	and.w	r3, r6, #1
 800df34:	2b00      	cmp	r3, #0
 800df36:	d023      	beq.n	800df80 <_svfprintf_r+0x12e8>
 800df38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df42:	6063      	str	r3, [r4, #4]
 800df44:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800df48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df4c:	4413      	add	r3, r2
 800df4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800df52:	3408      	adds	r4, #8
 800df54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df58:	3301      	adds	r3, #1
 800df5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df62:	2b07      	cmp	r3, #7
 800df64:	dd0c      	ble.n	800df80 <_svfprintf_r+0x12e8>
 800df66:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800df6a:	461a      	mov	r2, r3
 800df6c:	69b9      	ldr	r1, [r7, #24]
 800df6e:	69f8      	ldr	r0, [r7, #28]
 800df70:	f00b fdfb 	bl	8019b6a <__ssprint_r>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	f040 8278 	bne.w	800e46c <_svfprintf_r+0x17d4>
 800df7c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800df80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df84:	461a      	mov	r2, r3
 800df86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df8a:	4413      	add	r3, r2
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	1a9b      	subs	r3, r3, r2
 800df90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800df98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	dd06      	ble.n	800dfb4 <_svfprintf_r+0x131c>
 800dfa6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dfaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dfb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	dd22      	ble.n	800e002 <_svfprintf_r+0x136a>
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dfca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dfce:	4413      	add	r3, r2
 800dfd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dfd4:	3408      	adds	r4, #8
 800dfd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfda:	3301      	adds	r3, #1
 800dfdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dfe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfe4:	2b07      	cmp	r3, #7
 800dfe6:	dd0c      	ble.n	800e002 <_svfprintf_r+0x136a>
 800dfe8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dfec:	461a      	mov	r2, r3
 800dfee:	69b9      	ldr	r1, [r7, #24]
 800dff0:	69f8      	ldr	r0, [r7, #28]
 800dff2:	f00b fdba 	bl	8019b6a <__ssprint_r>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f040 8239 	bne.w	800e470 <_svfprintf_r+0x17d8>
 800dffe:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e002:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e00a:	1ad2      	subs	r2, r2, r3
 800e00c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f340 8163 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800e024:	e024      	b.n	800e070 <_svfprintf_r+0x13d8>
 800e026:	4b6a      	ldr	r3, [pc, #424]	; (800e1d0 <_svfprintf_r+0x1538>)
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	2310      	movs	r3, #16
 800e02c:	6063      	str	r3, [r4, #4]
 800e02e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e032:	3310      	adds	r3, #16
 800e034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e038:	3408      	adds	r4, #8
 800e03a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e03e:	3301      	adds	r3, #1
 800e040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e048:	2b07      	cmp	r3, #7
 800e04a:	dd0c      	ble.n	800e066 <_svfprintf_r+0x13ce>
 800e04c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e050:	461a      	mov	r2, r3
 800e052:	69b9      	ldr	r1, [r7, #24]
 800e054:	69f8      	ldr	r0, [r7, #28]
 800e056:	f00b fd88 	bl	8019b6a <__ssprint_r>
 800e05a:	4603      	mov	r3, r0
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f040 8209 	bne.w	800e474 <_svfprintf_r+0x17dc>
 800e062:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e06a:	3b10      	subs	r3, #16
 800e06c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e074:	2b10      	cmp	r3, #16
 800e076:	dcd6      	bgt.n	800e026 <_svfprintf_r+0x138e>
 800e078:	4b55      	ldr	r3, [pc, #340]	; (800e1d0 <_svfprintf_r+0x1538>)
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e080:	6063      	str	r3, [r4, #4]
 800e082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e08a:	4413      	add	r3, r2
 800e08c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e090:	3408      	adds	r4, #8
 800e092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e096:	3301      	adds	r3, #1
 800e098:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e09c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0a0:	2b07      	cmp	r3, #7
 800e0a2:	f340 8122 	ble.w	800e2ea <_svfprintf_r+0x1652>
 800e0a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	69b9      	ldr	r1, [r7, #24]
 800e0ae:	69f8      	ldr	r0, [r7, #28]
 800e0b0:	f00b fd5b 	bl	8019b6a <__ssprint_r>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f040 81de 	bne.w	800e478 <_svfprintf_r+0x17e0>
 800e0bc:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e0c0:	e113      	b.n	800e2ea <_svfprintf_r+0x1652>
 800e0c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	dc04      	bgt.n	800e0d4 <_svfprintf_r+0x143c>
 800e0ca:	f006 0301 	and.w	r3, r6, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 80c5 	beq.w	800e25e <_svfprintf_r+0x15c6>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6023      	str	r3, [r4, #0]
 800e0d8:	2301      	movs	r3, #1
 800e0da:	6063      	str	r3, [r4, #4]
 800e0dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e0e6:	3408      	adds	r4, #8
 800e0e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e0f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0f6:	2b07      	cmp	r3, #7
 800e0f8:	dd0c      	ble.n	800e114 <_svfprintf_r+0x147c>
 800e0fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e0fe:	461a      	mov	r2, r3
 800e100:	69b9      	ldr	r1, [r7, #24]
 800e102:	69f8      	ldr	r0, [r7, #28]
 800e104:	f00b fd31 	bl	8019b6a <__ssprint_r>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f040 81b6 	bne.w	800e47c <_svfprintf_r+0x17e4>
 800e110:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e11e:	6023      	str	r3, [r4, #0]
 800e120:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e124:	6063      	str	r3, [r4, #4]
 800e126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e12a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e12e:	4413      	add	r3, r2
 800e130:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e134:	3408      	adds	r4, #8
 800e136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e13a:	3301      	adds	r3, #1
 800e13c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e140:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e144:	2b07      	cmp	r3, #7
 800e146:	dd0c      	ble.n	800e162 <_svfprintf_r+0x14ca>
 800e148:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e14c:	461a      	mov	r2, r3
 800e14e:	69b9      	ldr	r1, [r7, #24]
 800e150:	69f8      	ldr	r0, [r7, #28]
 800e152:	f00b fd0a 	bl	8019b6a <__ssprint_r>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f040 8191 	bne.w	800e480 <_svfprintf_r+0x17e8>
 800e15e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e162:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800e166:	f04f 0200 	mov.w	r2, #0
 800e16a:	f04f 0300 	mov.w	r3, #0
 800e16e:	f7f3 fac5 	bl	80016fc <__aeabi_dcmpeq>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d125      	bne.n	800e1c4 <_svfprintf_r+0x152c>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e180:	3b01      	subs	r3, #1
 800e182:	6063      	str	r3, [r4, #4]
 800e184:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e188:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e18c:	4413      	add	r3, r2
 800e18e:	3b01      	subs	r3, #1
 800e190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e194:	3408      	adds	r4, #8
 800e196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e19a:	3301      	adds	r3, #1
 800e19c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e1a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1a4:	2b07      	cmp	r3, #7
 800e1a6:	dd7b      	ble.n	800e2a0 <_svfprintf_r+0x1608>
 800e1a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	69b9      	ldr	r1, [r7, #24]
 800e1b0:	69f8      	ldr	r0, [r7, #28]
 800e1b2:	f00b fcda 	bl	8019b6a <__ssprint_r>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f040 8163 	bne.w	800e484 <_svfprintf_r+0x17ec>
 800e1be:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e1c2:	e06d      	b.n	800e2a0 <_svfprintf_r+0x1608>
 800e1c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1c8:	1e5d      	subs	r5, r3, #1
 800e1ca:	2d00      	cmp	r5, #0
 800e1cc:	dd68      	ble.n	800e2a0 <_svfprintf_r+0x1608>
 800e1ce:	e022      	b.n	800e216 <_svfprintf_r+0x157e>
 800e1d0:	0801bc94 	.word	0x0801bc94
 800e1d4:	4bc2      	ldr	r3, [pc, #776]	; (800e4e0 <_svfprintf_r+0x1848>)
 800e1d6:	6023      	str	r3, [r4, #0]
 800e1d8:	2310      	movs	r3, #16
 800e1da:	6063      	str	r3, [r4, #4]
 800e1dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1e0:	3310      	adds	r3, #16
 800e1e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e1e6:	3408      	adds	r4, #8
 800e1e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e1f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e1f6:	2b07      	cmp	r3, #7
 800e1f8:	dd0c      	ble.n	800e214 <_svfprintf_r+0x157c>
 800e1fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e1fe:	461a      	mov	r2, r3
 800e200:	69b9      	ldr	r1, [r7, #24]
 800e202:	69f8      	ldr	r0, [r7, #28]
 800e204:	f00b fcb1 	bl	8019b6a <__ssprint_r>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f040 813c 	bne.w	800e488 <_svfprintf_r+0x17f0>
 800e210:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e214:	3d10      	subs	r5, #16
 800e216:	2d10      	cmp	r5, #16
 800e218:	dcdc      	bgt.n	800e1d4 <_svfprintf_r+0x153c>
 800e21a:	4bb1      	ldr	r3, [pc, #708]	; (800e4e0 <_svfprintf_r+0x1848>)
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	462b      	mov	r3, r5
 800e220:	6063      	str	r3, [r4, #4]
 800e222:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e226:	462a      	mov	r2, r5
 800e228:	4413      	add	r3, r2
 800e22a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e22e:	3408      	adds	r4, #8
 800e230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e234:	3301      	adds	r3, #1
 800e236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e23a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e23e:	2b07      	cmp	r3, #7
 800e240:	dd2e      	ble.n	800e2a0 <_svfprintf_r+0x1608>
 800e242:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e246:	461a      	mov	r2, r3
 800e248:	69b9      	ldr	r1, [r7, #24]
 800e24a:	69f8      	ldr	r0, [r7, #28]
 800e24c:	f00b fc8d 	bl	8019b6a <__ssprint_r>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	f040 811a 	bne.w	800e48c <_svfprintf_r+0x17f4>
 800e258:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e25c:	e020      	b.n	800e2a0 <_svfprintf_r+0x1608>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	2301      	movs	r3, #1
 800e264:	6063      	str	r3, [r4, #4]
 800e266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e26a:	3301      	adds	r3, #1
 800e26c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e270:	3408      	adds	r4, #8
 800e272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e276:	3301      	adds	r3, #1
 800e278:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e27c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e280:	2b07      	cmp	r3, #7
 800e282:	dd0e      	ble.n	800e2a2 <_svfprintf_r+0x160a>
 800e284:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e288:	461a      	mov	r2, r3
 800e28a:	69b9      	ldr	r1, [r7, #24]
 800e28c:	69f8      	ldr	r0, [r7, #28]
 800e28e:	f00b fc6c 	bl	8019b6a <__ssprint_r>
 800e292:	4603      	mov	r3, r0
 800e294:	2b00      	cmp	r3, #0
 800e296:	f040 80fb 	bne.w	800e490 <_svfprintf_r+0x17f8>
 800e29a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e29e:	e000      	b.n	800e2a2 <_svfprintf_r+0x160a>
 800e2a0:	bf00      	nop
 800e2a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e2a6:	6023      	str	r3, [r4, #0]
 800e2a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e2b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e2bc:	3408      	adds	r4, #8
 800e2be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e2c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2cc:	2b07      	cmp	r3, #7
 800e2ce:	dd0c      	ble.n	800e2ea <_svfprintf_r+0x1652>
 800e2d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	69b9      	ldr	r1, [r7, #24]
 800e2d8:	69f8      	ldr	r0, [r7, #28]
 800e2da:	f00b fc46 	bl	8019b6a <__ssprint_r>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f040 80d7 	bne.w	800e494 <_svfprintf_r+0x17fc>
 800e2e6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e2ea:	f006 0304 	and.w	r3, r6, #4
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d04b      	beq.n	800e38a <_svfprintf_r+0x16f2>
 800e2f2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800e2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2fa:	1ad5      	subs	r5, r2, r3
 800e2fc:	2d00      	cmp	r5, #0
 800e2fe:	dd44      	ble.n	800e38a <_svfprintf_r+0x16f2>
 800e300:	e020      	b.n	800e344 <_svfprintf_r+0x16ac>
 800e302:	4b78      	ldr	r3, [pc, #480]	; (800e4e4 <_svfprintf_r+0x184c>)
 800e304:	6023      	str	r3, [r4, #0]
 800e306:	2310      	movs	r3, #16
 800e308:	6063      	str	r3, [r4, #4]
 800e30a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e30e:	3310      	adds	r3, #16
 800e310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e314:	3408      	adds	r4, #8
 800e316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e31a:	3301      	adds	r3, #1
 800e31c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e324:	2b07      	cmp	r3, #7
 800e326:	dd0c      	ble.n	800e342 <_svfprintf_r+0x16aa>
 800e328:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e32c:	461a      	mov	r2, r3
 800e32e:	69b9      	ldr	r1, [r7, #24]
 800e330:	69f8      	ldr	r0, [r7, #28]
 800e332:	f00b fc1a 	bl	8019b6a <__ssprint_r>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f040 80ad 	bne.w	800e498 <_svfprintf_r+0x1800>
 800e33e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e342:	3d10      	subs	r5, #16
 800e344:	2d10      	cmp	r5, #16
 800e346:	dcdc      	bgt.n	800e302 <_svfprintf_r+0x166a>
 800e348:	4b66      	ldr	r3, [pc, #408]	; (800e4e4 <_svfprintf_r+0x184c>)
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	462b      	mov	r3, r5
 800e34e:	6063      	str	r3, [r4, #4]
 800e350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e354:	462a      	mov	r2, r5
 800e356:	4413      	add	r3, r2
 800e358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e35c:	3408      	adds	r4, #8
 800e35e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e362:	3301      	adds	r3, #1
 800e364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e36c:	2b07      	cmp	r3, #7
 800e36e:	dd0c      	ble.n	800e38a <_svfprintf_r+0x16f2>
 800e370:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e374:	461a      	mov	r2, r3
 800e376:	69b9      	ldr	r1, [r7, #24]
 800e378:	69f8      	ldr	r0, [r7, #28]
 800e37a:	f00b fbf6 	bl	8019b6a <__ssprint_r>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	f040 808b 	bne.w	800e49c <_svfprintf_r+0x1804>
 800e386:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e38a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e38e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e392:	4293      	cmp	r3, r2
 800e394:	bfb8      	it	lt
 800e396:	4613      	movlt	r3, r2
 800e398:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800e39c:	4413      	add	r3, r2
 800e39e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800e3a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d009      	beq.n	800e3be <_svfprintf_r+0x1726>
 800e3aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	69b9      	ldr	r1, [r7, #24]
 800e3b2:	69f8      	ldr	r0, [r7, #28]
 800e3b4:	f00b fbd9 	bl	8019b6a <__ssprint_r>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d170      	bne.n	800e4a0 <_svfprintf_r+0x1808>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e3c4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e3c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f43e acbe 	beq.w	800cd4e <_svfprintf_r+0xb6>
 800e3d2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800e3d6:	69f8      	ldr	r0, [r7, #28]
 800e3d8:	f002 fdd8 	bl	8010f8c <_free_r>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3e2:	f7fe bcb4 	b.w	800cd4e <_svfprintf_r+0xb6>
 800e3e6:	bf00      	nop
 800e3e8:	e000      	b.n	800e3ec <_svfprintf_r+0x1754>
 800e3ea:	bf00      	nop
 800e3ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d009      	beq.n	800e408 <_svfprintf_r+0x1770>
 800e3f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	69b9      	ldr	r1, [r7, #24]
 800e3fc:	69f8      	ldr	r0, [r7, #28]
 800e3fe:	f00b fbb4 	bl	8019b6a <__ssprint_r>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d14d      	bne.n	800e4a4 <_svfprintf_r+0x180c>
 800e408:	2300      	movs	r3, #0
 800e40a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e40e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e412:	e048      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e414:	bf00      	nop
 800e416:	e046      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e418:	bf00      	nop
 800e41a:	e044      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e41c:	bf00      	nop
 800e41e:	e042      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e420:	bf00      	nop
 800e422:	e040      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e424:	bf00      	nop
 800e426:	e03e      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e428:	bf00      	nop
 800e42a:	e03c      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e42c:	bf00      	nop
 800e42e:	e03a      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e430:	bf00      	nop
 800e432:	e038      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e434:	bf00      	nop
 800e436:	e036      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e438:	bf00      	nop
 800e43a:	e034      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e43c:	bf00      	nop
 800e43e:	e032      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e440:	bf00      	nop
 800e442:	e030      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e444:	bf00      	nop
 800e446:	e02e      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e448:	bf00      	nop
 800e44a:	e02c      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e44c:	bf00      	nop
 800e44e:	e02a      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e450:	bf00      	nop
 800e452:	e028      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e454:	bf00      	nop
 800e456:	e026      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e458:	bf00      	nop
 800e45a:	e024      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e45c:	bf00      	nop
 800e45e:	e022      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e460:	bf00      	nop
 800e462:	e020      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e464:	bf00      	nop
 800e466:	e01e      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e468:	bf00      	nop
 800e46a:	e01c      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e46c:	bf00      	nop
 800e46e:	e01a      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e470:	bf00      	nop
 800e472:	e018      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e474:	bf00      	nop
 800e476:	e016      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e478:	bf00      	nop
 800e47a:	e014      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e47c:	bf00      	nop
 800e47e:	e012      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e480:	bf00      	nop
 800e482:	e010      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e484:	bf00      	nop
 800e486:	e00e      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e488:	bf00      	nop
 800e48a:	e00c      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e48c:	bf00      	nop
 800e48e:	e00a      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e490:	bf00      	nop
 800e492:	e008      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e494:	bf00      	nop
 800e496:	e006      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e498:	bf00      	nop
 800e49a:	e004      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e49c:	bf00      	nop
 800e49e:	e002      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e4a0:	bf00      	nop
 800e4a2:	e000      	b.n	800e4a6 <_svfprintf_r+0x180e>
 800e4a4:	bf00      	nop
 800e4a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d004      	beq.n	800e4b8 <_svfprintf_r+0x1820>
 800e4ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800e4b2:	69f8      	ldr	r0, [r7, #28]
 800e4b4:	f002 fd6a 	bl	8010f8c <_free_r>
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <_svfprintf_r+0x1836>
 800e4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4cc:	e001      	b.n	800e4d2 <_svfprintf_r+0x183a>
 800e4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4de:	bf00      	nop
 800e4e0:	0801bc94 	.word	0x0801bc94
 800e4e4:	0801bc84 	.word	0x0801bc84

0800e4e8 <exponent>:
 800e4e8:	b4b0      	push	{r4, r5, r7}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	68fd      	ldr	r5, [r7, #12]
 800e4f6:	462b      	mov	r3, r5
 800e4f8:	1c5d      	adds	r5, r3, #1
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	701a      	strb	r2, [r3, #0]
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	da07      	bge.n	800e516 <exponent+0x2e>
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	425b      	negs	r3, r3
 800e50a:	60bb      	str	r3, [r7, #8]
 800e50c:	462b      	mov	r3, r5
 800e50e:	1c5d      	adds	r5, r3, #1
 800e510:	222d      	movs	r2, #45	; 0x2d
 800e512:	701a      	strb	r2, [r3, #0]
 800e514:	e003      	b.n	800e51e <exponent+0x36>
 800e516:	462b      	mov	r3, r5
 800e518:	1c5d      	adds	r5, r3, #1
 800e51a:	222b      	movs	r2, #43	; 0x2b
 800e51c:	701a      	strb	r2, [r3, #0]
 800e51e:	f107 0410 	add.w	r4, r7, #16
 800e522:	3407      	adds	r4, #7
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	2b09      	cmp	r3, #9
 800e528:	dd2e      	ble.n	800e588 <exponent+0xa0>
 800e52a:	68ba      	ldr	r2, [r7, #8]
 800e52c:	4b1f      	ldr	r3, [pc, #124]	; (800e5ac <exponent+0xc4>)
 800e52e:	fb83 1302 	smull	r1, r3, r3, r2
 800e532:	1099      	asrs	r1, r3, #2
 800e534:	17d3      	asrs	r3, r2, #31
 800e536:	1ac9      	subs	r1, r1, r3
 800e538:	460b      	mov	r3, r1
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	440b      	add	r3, r1
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	1ad1      	subs	r1, r2, r3
 800e542:	b2cb      	uxtb	r3, r1
 800e544:	3c01      	subs	r4, #1
 800e546:	3330      	adds	r3, #48	; 0x30
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	7023      	strb	r3, [r4, #0]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <exponent+0xc4>)
 800e550:	fb82 1203 	smull	r1, r2, r2, r3
 800e554:	1092      	asrs	r2, r2, #2
 800e556:	17db      	asrs	r3, r3, #31
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b09      	cmp	r3, #9
 800e560:	dce3      	bgt.n	800e52a <exponent+0x42>
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	b2db      	uxtb	r3, r3
 800e566:	3c01      	subs	r4, #1
 800e568:	3330      	adds	r3, #48	; 0x30
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	7023      	strb	r3, [r4, #0]
 800e56e:	e005      	b.n	800e57c <exponent+0x94>
 800e570:	4622      	mov	r2, r4
 800e572:	1c54      	adds	r4, r2, #1
 800e574:	462b      	mov	r3, r5
 800e576:	1c5d      	adds	r5, r3, #1
 800e578:	7812      	ldrb	r2, [r2, #0]
 800e57a:	701a      	strb	r2, [r3, #0]
 800e57c:	f107 0310 	add.w	r3, r7, #16
 800e580:	3307      	adds	r3, #7
 800e582:	429c      	cmp	r4, r3
 800e584:	d3f4      	bcc.n	800e570 <exponent+0x88>
 800e586:	e00a      	b.n	800e59e <exponent+0xb6>
 800e588:	462b      	mov	r3, r5
 800e58a:	1c5d      	adds	r5, r3, #1
 800e58c:	2230      	movs	r2, #48	; 0x30
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	b2da      	uxtb	r2, r3
 800e594:	462b      	mov	r3, r5
 800e596:	1c5d      	adds	r5, r3, #1
 800e598:	3230      	adds	r2, #48	; 0x30
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	1aeb      	subs	r3, r5, r3
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bcb0      	pop	{r4, r5, r7}
 800e5aa:	4770      	bx	lr
 800e5ac:	66666667 	.word	0x66666667

0800e5b0 <_vfiprintf_r>:
 800e5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b4:	b0b4      	sub	sp, #208	; 0xd0
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6178      	str	r0, [r7, #20]
 800e5ba:	6139      	str	r1, [r7, #16]
 800e5bc:	60fa      	str	r2, [r7, #12]
 800e5be:	60bb      	str	r3, [r7, #8]
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e5d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d008      	beq.n	800e5ec <_vfiprintf_r+0x3c>
 800e5da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d103      	bne.n	800e5ec <_vfiprintf_r+0x3c>
 800e5e4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e5e8:	f7fc ff3e 	bl	800b468 <__sinit>
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	f003 0308 	and.w	r3, r3, #8
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <_vfiprintf_r+0x54>
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <_vfiprintf_r+0x6a>
 800e604:	6939      	ldr	r1, [r7, #16]
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	f002 fbc6 	bl	8010d98 <__swsetup_r>
 800e60c:	4603      	mov	r3, r0
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <_vfiprintf_r+0x6a>
 800e612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e616:	f000 be4f 	b.w	800f2b8 <_vfiprintf_r+0xd08>
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e620:	b29b      	uxth	r3, r3
 800e622:	f003 031a 	and.w	r3, r3, #26
 800e626:	2b0a      	cmp	r3, #10
 800e628:	d10d      	bne.n	800e646 <_vfiprintf_r+0x96>
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e630:	2b00      	cmp	r3, #0
 800e632:	db08      	blt.n	800e646 <_vfiprintf_r+0x96>
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	6939      	ldr	r1, [r7, #16]
 800e63a:	6978      	ldr	r0, [r7, #20]
 800e63c:	f00a f93d 	bl	80188ba <__sbprintf>
 800e640:	4603      	mov	r3, r0
 800e642:	f000 be39 	b.w	800f2b8 <_vfiprintf_r+0xd08>
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	603b      	str	r3, [r7, #0]
 800e64a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800e64e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 800e652:	2300      	movs	r3, #0
 800e654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e658:	2300      	movs	r3, #0
 800e65a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e65e:	2300      	movs	r3, #0
 800e660:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e664:	683e      	ldr	r6, [r7, #0]
 800e666:	e002      	b.n	800e66e <_vfiprintf_r+0xbe>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	3301      	adds	r3, #1
 800e66c:	603b      	str	r3, [r7, #0]
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	4613      	mov	r3, r2
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <_vfiprintf_r+0xce>
 800e678:	7813      	ldrb	r3, [r2, #0]
 800e67a:	2b25      	cmp	r3, #37	; 0x25
 800e67c:	d1f4      	bne.n	800e668 <_vfiprintf_r+0xb8>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	1b9d      	subs	r5, r3, r6
 800e682:	2d00      	cmp	r5, #0
 800e684:	d024      	beq.n	800e6d0 <_vfiprintf_r+0x120>
 800e686:	6026      	str	r6, [r4, #0]
 800e688:	462b      	mov	r3, r5
 800e68a:	6063      	str	r3, [r4, #4]
 800e68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e690:	462a      	mov	r2, r5
 800e692:	4413      	add	r3, r2
 800e694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e698:	3408      	adds	r4, #8
 800e69a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e69e:	3301      	adds	r3, #1
 800e6a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e6a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6a8:	2b07      	cmp	r3, #7
 800e6aa:	dd0c      	ble.n	800e6c6 <_vfiprintf_r+0x116>
 800e6ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	6939      	ldr	r1, [r7, #16]
 800e6b4:	6978      	ldr	r0, [r7, #20]
 800e6b6:	f00a f8e3 	bl	8018880 <__sprint_r>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f040 85ca 	bne.w	800f256 <_vfiprintf_r+0xca6>
 800e6c2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800e6c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e6ca:	442b      	add	r3, r5
 800e6cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 85a6 	beq.w	800f228 <_vfiprintf_r+0xc78>
 800e6dc:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800e6e0:	1c53      	adds	r3, r2, #1
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	2500      	movs	r5, #0
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e6f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	603a      	str	r2, [r7, #0]
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	4698      	mov	r8, r3
 800e70a:	f1a8 0320 	sub.w	r3, r8, #32
 800e70e:	2b58      	cmp	r3, #88	; 0x58
 800e710:	f200 837a 	bhi.w	800ee08 <_vfiprintf_r+0x858>
 800e714:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <_vfiprintf_r+0x16c>)
 800e716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71a:	bf00      	nop
 800e71c:	0800e881 	.word	0x0800e881
 800e720:	0800ee09 	.word	0x0800ee09
 800e724:	0800ee09 	.word	0x0800ee09
 800e728:	0800e893 	.word	0x0800e893
 800e72c:	0800ee09 	.word	0x0800ee09
 800e730:	0800ee09 	.word	0x0800ee09
 800e734:	0800ee09 	.word	0x0800ee09
 800e738:	0800ee09 	.word	0x0800ee09
 800e73c:	0800ee09 	.word	0x0800ee09
 800e740:	0800ee09 	.word	0x0800ee09
 800e744:	0800e899 	.word	0x0800e899
 800e748:	0800e8bf 	.word	0x0800e8bf
 800e74c:	0800ee09 	.word	0x0800ee09
 800e750:	0800e8b9 	.word	0x0800e8b9
 800e754:	0800e8c7 	.word	0x0800e8c7
 800e758:	0800ee09 	.word	0x0800ee09
 800e75c:	0800e92f 	.word	0x0800e92f
 800e760:	0800e935 	.word	0x0800e935
 800e764:	0800e935 	.word	0x0800e935
 800e768:	0800e935 	.word	0x0800e935
 800e76c:	0800e935 	.word	0x0800e935
 800e770:	0800e935 	.word	0x0800e935
 800e774:	0800e935 	.word	0x0800e935
 800e778:	0800e935 	.word	0x0800e935
 800e77c:	0800e935 	.word	0x0800e935
 800e780:	0800e935 	.word	0x0800e935
 800e784:	0800ee09 	.word	0x0800ee09
 800e788:	0800ee09 	.word	0x0800ee09
 800e78c:	0800ee09 	.word	0x0800ee09
 800e790:	0800ee09 	.word	0x0800ee09
 800e794:	0800ee09 	.word	0x0800ee09
 800e798:	0800ee09 	.word	0x0800ee09
 800e79c:	0800ee09 	.word	0x0800ee09
 800e7a0:	0800ee09 	.word	0x0800ee09
 800e7a4:	0800ee09 	.word	0x0800ee09
 800e7a8:	0800ee09 	.word	0x0800ee09
 800e7ac:	0800e9a9 	.word	0x0800e9a9
 800e7b0:	0800ee09 	.word	0x0800ee09
 800e7b4:	0800ee09 	.word	0x0800ee09
 800e7b8:	0800ee09 	.word	0x0800ee09
 800e7bc:	0800ee09 	.word	0x0800ee09
 800e7c0:	0800ee09 	.word	0x0800ee09
 800e7c4:	0800ee09 	.word	0x0800ee09
 800e7c8:	0800ee09 	.word	0x0800ee09
 800e7cc:	0800ee09 	.word	0x0800ee09
 800e7d0:	0800ee09 	.word	0x0800ee09
 800e7d4:	0800ee09 	.word	0x0800ee09
 800e7d8:	0800ea97 	.word	0x0800ea97
 800e7dc:	0800ee09 	.word	0x0800ee09
 800e7e0:	0800ee09 	.word	0x0800ee09
 800e7e4:	0800ee09 	.word	0x0800ee09
 800e7e8:	0800ee09 	.word	0x0800ee09
 800e7ec:	0800ee09 	.word	0x0800ee09
 800e7f0:	0800eb9d 	.word	0x0800eb9d
 800e7f4:	0800ee09 	.word	0x0800ee09
 800e7f8:	0800ee09 	.word	0x0800ee09
 800e7fc:	0800ec09 	.word	0x0800ec09
 800e800:	0800ee09 	.word	0x0800ee09
 800e804:	0800ee09 	.word	0x0800ee09
 800e808:	0800ee09 	.word	0x0800ee09
 800e80c:	0800ee09 	.word	0x0800ee09
 800e810:	0800ee09 	.word	0x0800ee09
 800e814:	0800ee09 	.word	0x0800ee09
 800e818:	0800ee09 	.word	0x0800ee09
 800e81c:	0800ee09 	.word	0x0800ee09
 800e820:	0800ee09 	.word	0x0800ee09
 800e824:	0800ee09 	.word	0x0800ee09
 800e828:	0800e98b 	.word	0x0800e98b
 800e82c:	0800e9ad 	.word	0x0800e9ad
 800e830:	0800ee09 	.word	0x0800ee09
 800e834:	0800ee09 	.word	0x0800ee09
 800e838:	0800ee09 	.word	0x0800ee09
 800e83c:	0800e965 	.word	0x0800e965
 800e840:	0800e9ad 	.word	0x0800e9ad
 800e844:	0800ee09 	.word	0x0800ee09
 800e848:	0800ee09 	.word	0x0800ee09
 800e84c:	0800e96b 	.word	0x0800e96b
 800e850:	0800ee09 	.word	0x0800ee09
 800e854:	0800ea35 	.word	0x0800ea35
 800e858:	0800ea9b 	.word	0x0800ea9b
 800e85c:	0800eb03 	.word	0x0800eb03
 800e860:	0800e985 	.word	0x0800e985
 800e864:	0800ee09 	.word	0x0800ee09
 800e868:	0800eb33 	.word	0x0800eb33
 800e86c:	0800ee09 	.word	0x0800ee09
 800e870:	0800eba1 	.word	0x0800eba1
 800e874:	0800ee09 	.word	0x0800ee09
 800e878:	0800ee09 	.word	0x0800ee09
 800e87c:	0800ec11 	.word	0x0800ec11
 800e880:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800e884:	2b00      	cmp	r3, #0
 800e886:	f47f af3b 	bne.w	800e700 <_vfiprintf_r+0x150>
 800e88a:	2320      	movs	r3, #32
 800e88c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e890:	e736      	b.n	800e700 <_vfiprintf_r+0x150>
 800e892:	f045 0501 	orr.w	r5, r5, #1
 800e896:	e733      	b.n	800e700 <_vfiprintf_r+0x150>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	1d1a      	adds	r2, r3, #4
 800e89c:	60ba      	str	r2, [r7, #8]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e8a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	db00      	blt.n	800e8ae <_vfiprintf_r+0x2fe>
 800e8ac:	e728      	b.n	800e700 <_vfiprintf_r+0x150>
 800e8ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8b2:	425b      	negs	r3, r3
 800e8b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e8b8:	f045 0504 	orr.w	r5, r5, #4
 800e8bc:	e720      	b.n	800e700 <_vfiprintf_r+0x150>
 800e8be:	232b      	movs	r3, #43	; 0x2b
 800e8c0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e8c4:	e71c      	b.n	800e700 <_vfiprintf_r+0x150>
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	603a      	str	r2, [r7, #0]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	4698      	mov	r8, r3
 800e8d0:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 800e8d4:	d10f      	bne.n	800e8f6 <_vfiprintf_r+0x346>
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	1d1a      	adds	r2, r3, #4
 800e8da:	60ba      	str	r2, [r7, #8]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e8e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f6bf af0a 	bge.w	800e700 <_vfiprintf_r+0x150>
 800e8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e8f4:	e704      	b.n	800e700 <_vfiprintf_r+0x150>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	607b      	str	r3, [r7, #4]
 800e8fa:	e00e      	b.n	800e91a <_vfiprintf_r+0x36a>
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	4613      	mov	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	461a      	mov	r2, r3
 800e908:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800e90c:	18d3      	adds	r3, r2, r3
 800e90e:	607b      	str	r3, [r7, #4]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	603a      	str	r2, [r7, #0]
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	4698      	mov	r8, r3
 800e91a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800e91e:	2b09      	cmp	r3, #9
 800e920:	d9ec      	bls.n	800e8fc <_vfiprintf_r+0x34c>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e928:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e92c:	e6ed      	b.n	800e70a <_vfiprintf_r+0x15a>
 800e92e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800e932:	e6e5      	b.n	800e700 <_vfiprintf_r+0x150>
 800e934:	2300      	movs	r3, #0
 800e936:	607b      	str	r3, [r7, #4]
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	4613      	mov	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	461a      	mov	r2, r3
 800e944:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800e948:	441a      	add	r2, r3
 800e94a:	607a      	str	r2, [r7, #4]
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	1c59      	adds	r1, r3, #1
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	4698      	mov	r8, r3
 800e956:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800e95a:	2b09      	cmp	r3, #9
 800e95c:	d9ec      	bls.n	800e938 <_vfiprintf_r+0x388>
 800e95e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800e962:	e6d2      	b.n	800e70a <_vfiprintf_r+0x15a>
 800e964:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800e968:	e6ca      	b.n	800e700 <_vfiprintf_r+0x150>
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	4613      	mov	r3, r2
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	2b6c      	cmp	r3, #108	; 0x6c
 800e972:	d104      	bne.n	800e97e <_vfiprintf_r+0x3ce>
 800e974:	3201      	adds	r2, #1
 800e976:	603a      	str	r2, [r7, #0]
 800e978:	f045 0520 	orr.w	r5, r5, #32
 800e97c:	e6c0      	b.n	800e700 <_vfiprintf_r+0x150>
 800e97e:	f045 0510 	orr.w	r5, r5, #16
 800e982:	e6bd      	b.n	800e700 <_vfiprintf_r+0x150>
 800e984:	f045 0520 	orr.w	r5, r5, #32
 800e988:	e6ba      	b.n	800e700 <_vfiprintf_r+0x150>
 800e98a:	f107 061c 	add.w	r6, r7, #28
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	1d1a      	adds	r2, r3, #4
 800e992:	60ba      	str	r2, [r7, #8]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	b2db      	uxtb	r3, r3
 800e998:	7033      	strb	r3, [r6, #0]
 800e99a:	2301      	movs	r3, #1
 800e99c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800e9a6:	e23f      	b.n	800ee28 <_vfiprintf_r+0x878>
 800e9a8:	f045 0510 	orr.w	r5, r5, #16
 800e9ac:	f005 0320 	and.w	r3, r5, #32
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d009      	beq.n	800e9c8 <_vfiprintf_r+0x418>
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	3307      	adds	r3, #7
 800e9b8:	f023 0307 	bic.w	r3, r3, #7
 800e9bc:	f103 0208 	add.w	r2, r3, #8
 800e9c0:	60ba      	str	r2, [r7, #8]
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	e01f      	b.n	800ea08 <_vfiprintf_r+0x458>
 800e9c8:	f005 0310 	and.w	r3, r5, #16
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d007      	beq.n	800e9e0 <_vfiprintf_r+0x430>
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	1d1a      	adds	r2, r3, #4
 800e9d4:	60ba      	str	r2, [r7, #8]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e9de:	e013      	b.n	800ea08 <_vfiprintf_r+0x458>
 800e9e0:	f005 0340 	and.w	r3, r5, #64	; 0x40
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d008      	beq.n	800e9fa <_vfiprintf_r+0x44a>
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	1d1a      	adds	r2, r3, #4
 800e9ec:	60ba      	str	r2, [r7, #8]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	b21b      	sxth	r3, r3
 800e9f2:	b21a      	sxth	r2, r3
 800e9f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e9f8:	e006      	b.n	800ea08 <_vfiprintf_r+0x458>
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	1d1a      	adds	r2, r3, #4
 800e9fe:	60ba      	str	r2, [r7, #8]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ea08:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ea0c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ea10:	2a00      	cmp	r2, #0
 800ea12:	f173 0300 	sbcs.w	r3, r3, #0
 800ea16:	da09      	bge.n	800ea2c <_vfiprintf_r+0x47c>
 800ea18:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ea1c:	4252      	negs	r2, r2
 800ea1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800ea22:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ea26:	232d      	movs	r3, #45	; 0x2d
 800ea28:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800ea32:	e137      	b.n	800eca4 <_vfiprintf_r+0x6f4>
 800ea34:	f005 0320 	and.w	r3, r5, #32
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00b      	beq.n	800ea54 <_vfiprintf_r+0x4a4>
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	1d1a      	adds	r2, r3, #4
 800ea40:	60ba      	str	r2, [r7, #8]
 800ea42:	6819      	ldr	r1, [r3, #0]
 800ea44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ea48:	461a      	mov	r2, r3
 800ea4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ea4e:	e9c1 2300 	strd	r2, r3, [r1]
 800ea52:	e3e7      	b.n	800f224 <_vfiprintf_r+0xc74>
 800ea54:	f005 0310 	and.w	r3, r5, #16
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d007      	beq.n	800ea6c <_vfiprintf_r+0x4bc>
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	60ba      	str	r2, [r7, #8]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	e3db      	b.n	800f224 <_vfiprintf_r+0xc74>
 800ea6c:	f005 0340 	and.w	r3, r5, #64	; 0x40
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d008      	beq.n	800ea86 <_vfiprintf_r+0x4d6>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	1d1a      	adds	r2, r3, #4
 800ea78:	60ba      	str	r2, [r7, #8]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ea80:	b212      	sxth	r2, r2
 800ea82:	801a      	strh	r2, [r3, #0]
 800ea84:	e3ce      	b.n	800f224 <_vfiprintf_r+0xc74>
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	1d1a      	adds	r2, r3, #4
 800ea8a:	60ba      	str	r2, [r7, #8]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	e3c6      	b.n	800f224 <_vfiprintf_r+0xc74>
 800ea96:	f045 0510 	orr.w	r5, r5, #16
 800ea9a:	f005 0320 	and.w	r3, r5, #32
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d009      	beq.n	800eab6 <_vfiprintf_r+0x506>
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	3307      	adds	r3, #7
 800eaa6:	f023 0307 	bic.w	r3, r3, #7
 800eaaa:	f103 0208 	add.w	r2, r3, #8
 800eaae:	60ba      	str	r2, [r7, #8]
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	e01f      	b.n	800eaf6 <_vfiprintf_r+0x546>
 800eab6:	f005 0310 	and.w	r3, r5, #16
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <_vfiprintf_r+0x51e>
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	1d1a      	adds	r2, r3, #4
 800eac2:	60ba      	str	r2, [r7, #8]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	f04f 0300 	mov.w	r3, #0
 800eacc:	e013      	b.n	800eaf6 <_vfiprintf_r+0x546>
 800eace:	f005 0340 	and.w	r3, r5, #64	; 0x40
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d008      	beq.n	800eae8 <_vfiprintf_r+0x538>
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	1d1a      	adds	r2, r3, #4
 800eada:	60ba      	str	r2, [r7, #8]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	f04f 0300 	mov.w	r3, #0
 800eae6:	e006      	b.n	800eaf6 <_vfiprintf_r+0x546>
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	1d1a      	adds	r2, r3, #4
 800eaec:	60ba      	str	r2, [r7, #8]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	f04f 0300 	mov.w	r3, #0
 800eaf6:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800eafa:	2300      	movs	r3, #0
 800eafc:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800eb00:	e0cd      	b.n	800ec9e <_vfiprintf_r+0x6ee>
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	1d1a      	adds	r2, r3, #4
 800eb06:	60ba      	str	r2, [r7, #8]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f04f 0300 	mov.w	r3, #0
 800eb10:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800eb14:	2302      	movs	r3, #2
 800eb16:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800eb1a:	4bb7      	ldr	r3, [pc, #732]	; (800edf8 <_vfiprintf_r+0x848>)
 800eb1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eb20:	f045 0502 	orr.w	r5, r5, #2
 800eb24:	2330      	movs	r3, #48	; 0x30
 800eb26:	763b      	strb	r3, [r7, #24]
 800eb28:	f04f 0878 	mov.w	r8, #120	; 0x78
 800eb2c:	2378      	movs	r3, #120	; 0x78
 800eb2e:	767b      	strb	r3, [r7, #25]
 800eb30:	e0b5      	b.n	800ec9e <_vfiprintf_r+0x6ee>
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	1d1a      	adds	r2, r3, #4
 800eb36:	60ba      	str	r2, [r7, #8]
 800eb38:	681e      	ldr	r6, [r3, #0]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800eb40:	2e00      	cmp	r6, #0
 800eb42:	d108      	bne.n	800eb56 <_vfiprintf_r+0x5a6>
 800eb44:	4ead      	ldr	r6, [pc, #692]	; (800edfc <_vfiprintf_r+0x84c>)
 800eb46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb4a:	2b06      	cmp	r3, #6
 800eb4c:	bf28      	it	cs
 800eb4e:	2306      	movcs	r3, #6
 800eb50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eb54:	e168      	b.n	800ee28 <_vfiprintf_r+0x878>
 800eb56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	db17      	blt.n	800eb8e <_vfiprintf_r+0x5de>
 800eb5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb62:	461a      	mov	r2, r3
 800eb64:	2100      	movs	r1, #0
 800eb66:	4630      	mov	r0, r6
 800eb68:	f7f1 fd0a 	bl	8000580 <memchr>
 800eb6c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800eb70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d005      	beq.n	800eb84 <_vfiprintf_r+0x5d4>
 800eb78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eb7c:	1b9b      	subs	r3, r3, r6
 800eb7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eb82:	e151      	b.n	800ee28 <_vfiprintf_r+0x878>
 800eb84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eb8c:	e14c      	b.n	800ee28 <_vfiprintf_r+0x878>
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f7f1 fb16 	bl	80001c0 <strlen>
 800eb94:	4603      	mov	r3, r0
 800eb96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eb9a:	e145      	b.n	800ee28 <_vfiprintf_r+0x878>
 800eb9c:	f045 0510 	orr.w	r5, r5, #16
 800eba0:	f005 0320 	and.w	r3, r5, #32
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d009      	beq.n	800ebbc <_vfiprintf_r+0x60c>
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	3307      	adds	r3, #7
 800ebac:	f023 0307 	bic.w	r3, r3, #7
 800ebb0:	f103 0208 	add.w	r2, r3, #8
 800ebb4:	60ba      	str	r2, [r7, #8]
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	e01f      	b.n	800ebfc <_vfiprintf_r+0x64c>
 800ebbc:	f005 0310 	and.w	r3, r5, #16
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d007      	beq.n	800ebd4 <_vfiprintf_r+0x624>
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	1d1a      	adds	r2, r3, #4
 800ebc8:	60ba      	str	r2, [r7, #8]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	f04f 0300 	mov.w	r3, #0
 800ebd2:	e013      	b.n	800ebfc <_vfiprintf_r+0x64c>
 800ebd4:	f005 0340 	and.w	r3, r5, #64	; 0x40
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d008      	beq.n	800ebee <_vfiprintf_r+0x63e>
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	1d1a      	adds	r2, r3, #4
 800ebe0:	60ba      	str	r2, [r7, #8]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	f04f 0300 	mov.w	r3, #0
 800ebec:	e006      	b.n	800ebfc <_vfiprintf_r+0x64c>
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	1d1a      	adds	r2, r3, #4
 800ebf2:	60ba      	str	r2, [r7, #8]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	461a      	mov	r2, r3
 800ebf8:	f04f 0300 	mov.w	r3, #0
 800ebfc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ec00:	2301      	movs	r3, #1
 800ec02:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800ec06:	e04a      	b.n	800ec9e <_vfiprintf_r+0x6ee>
 800ec08:	4b7d      	ldr	r3, [pc, #500]	; (800ee00 <_vfiprintf_r+0x850>)
 800ec0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ec0e:	e002      	b.n	800ec16 <_vfiprintf_r+0x666>
 800ec10:	4b79      	ldr	r3, [pc, #484]	; (800edf8 <_vfiprintf_r+0x848>)
 800ec12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ec16:	f005 0320 	and.w	r3, r5, #32
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d009      	beq.n	800ec32 <_vfiprintf_r+0x682>
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	3307      	adds	r3, #7
 800ec22:	f023 0307 	bic.w	r3, r3, #7
 800ec26:	f103 0208 	add.w	r2, r3, #8
 800ec2a:	60ba      	str	r2, [r7, #8]
 800ec2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec30:	e01f      	b.n	800ec72 <_vfiprintf_r+0x6c2>
 800ec32:	f005 0310 	and.w	r3, r5, #16
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d007      	beq.n	800ec4a <_vfiprintf_r+0x69a>
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	1d1a      	adds	r2, r3, #4
 800ec3e:	60ba      	str	r2, [r7, #8]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f04f 0300 	mov.w	r3, #0
 800ec48:	e013      	b.n	800ec72 <_vfiprintf_r+0x6c2>
 800ec4a:	f005 0340 	and.w	r3, r5, #64	; 0x40
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d008      	beq.n	800ec64 <_vfiprintf_r+0x6b4>
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	1d1a      	adds	r2, r3, #4
 800ec56:	60ba      	str	r2, [r7, #8]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	f04f 0300 	mov.w	r3, #0
 800ec62:	e006      	b.n	800ec72 <_vfiprintf_r+0x6c2>
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	1d1a      	adds	r2, r3, #4
 800ec68:	60ba      	str	r2, [r7, #8]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	f04f 0300 	mov.w	r3, #0
 800ec72:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ec76:	2302      	movs	r3, #2
 800ec78:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800ec7c:	f005 0301 	and.w	r3, r5, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00b      	beq.n	800ec9c <_vfiprintf_r+0x6ec>
 800ec84:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	d007      	beq.n	800ec9c <_vfiprintf_r+0x6ec>
 800ec8c:	2330      	movs	r3, #48	; 0x30
 800ec8e:	763b      	strb	r3, [r7, #24]
 800ec90:	fa5f f388 	uxtb.w	r3, r8
 800ec94:	767b      	strb	r3, [r7, #25]
 800ec96:	f045 0502 	orr.w	r5, r5, #2
 800ec9a:	e000      	b.n	800ec9e <_vfiprintf_r+0x6ee>
 800ec9c:	bf00      	nop
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800eca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ecac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	db01      	blt.n	800ecb8 <_vfiprintf_r+0x708>
 800ecb4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800ecb8:	f107 061c 	add.w	r6, r7, #28
 800ecbc:	3628      	adds	r6, #40	; 0x28
 800ecbe:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	d104      	bne.n	800ecd0 <_vfiprintf_r+0x720>
 800ecc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 8082 	beq.w	800edd4 <_vfiprintf_r+0x824>
 800ecd0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d057      	beq.n	800ed88 <_vfiprintf_r+0x7d8>
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	dc70      	bgt.n	800edbe <_vfiprintf_r+0x80e>
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d003      	beq.n	800ece8 <_vfiprintf_r+0x738>
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d025      	beq.n	800ed30 <_vfiprintf_r+0x780>
 800ece4:	e06b      	b.n	800edbe <_vfiprintf_r+0x80e>
 800ece6:	bf00      	nop
 800ece8:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800ecec:	f003 0307 	and.w	r3, r3, #7
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	3e01      	subs	r6, #1
 800ecf4:	3330      	adds	r3, #48	; 0x30
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	7033      	strb	r3, [r6, #0]
 800ecfa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ecfe:	f04f 0200 	mov.w	r2, #0
 800ed02:	f04f 0300 	mov.w	r3, #0
 800ed06:	08c2      	lsrs	r2, r0, #3
 800ed08:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800ed0c:	08cb      	lsrs	r3, r1, #3
 800ed0e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ed12:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ed16:	4313      	orrs	r3, r2
 800ed18:	d1e5      	bne.n	800ece6 <_vfiprintf_r+0x736>
 800ed1a:	f005 0301 	and.w	r3, r5, #1
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d056      	beq.n	800edd0 <_vfiprintf_r+0x820>
 800ed22:	7833      	ldrb	r3, [r6, #0]
 800ed24:	2b30      	cmp	r3, #48	; 0x30
 800ed26:	d053      	beq.n	800edd0 <_vfiprintf_r+0x820>
 800ed28:	3e01      	subs	r6, #1
 800ed2a:	2330      	movs	r3, #48	; 0x30
 800ed2c:	7033      	strb	r3, [r6, #0]
 800ed2e:	e04f      	b.n	800edd0 <_vfiprintf_r+0x820>
 800ed30:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	bf08      	it	eq
 800ed38:	2a0a      	cmpeq	r2, #10
 800ed3a:	d206      	bcs.n	800ed4a <_vfiprintf_r+0x79a>
 800ed3c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800ed40:	3e01      	subs	r6, #1
 800ed42:	3330      	adds	r3, #48	; 0x30
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	7033      	strb	r3, [r6, #0]
 800ed48:	e043      	b.n	800edd2 <_vfiprintf_r+0x822>
 800ed4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ed4e:	f04f 020a 	mov.w	r2, #10
 800ed52:	f04f 0300 	mov.w	r3, #0
 800ed56:	f7f2 fadf 	bl	8001318 <__aeabi_uldivmod>
 800ed5a:	b2d3      	uxtb	r3, r2
 800ed5c:	3e01      	subs	r6, #1
 800ed5e:	3330      	adds	r3, #48	; 0x30
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	7033      	strb	r3, [r6, #0]
 800ed64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ed68:	f04f 020a 	mov.w	r2, #10
 800ed6c:	f04f 0300 	mov.w	r3, #0
 800ed70:	f7f2 fad2 	bl	8001318 <__aeabi_uldivmod>
 800ed74:	4602      	mov	r2, r0
 800ed76:	460b      	mov	r3, r1
 800ed78:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800ed7c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ed80:	4313      	orrs	r3, r2
 800ed82:	d1e2      	bne.n	800ed4a <_vfiprintf_r+0x79a>
 800ed84:	e025      	b.n	800edd2 <_vfiprintf_r+0x822>
 800ed86:	bf00      	nop
 800ed88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ed8c:	f003 030f 	and.w	r3, r3, #15
 800ed90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ed94:	4413      	add	r3, r2
 800ed96:	3e01      	subs	r6, #1
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	7033      	strb	r3, [r6, #0]
 800ed9c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800eda0:	f04f 0200 	mov.w	r2, #0
 800eda4:	f04f 0300 	mov.w	r3, #0
 800eda8:	0902      	lsrs	r2, r0, #4
 800edaa:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800edae:	090b      	lsrs	r3, r1, #4
 800edb0:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
 800edb4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800edb8:	4313      	orrs	r3, r2
 800edba:	d1e4      	bne.n	800ed86 <_vfiprintf_r+0x7d6>
 800edbc:	e009      	b.n	800edd2 <_vfiprintf_r+0x822>
 800edbe:	4e11      	ldr	r6, [pc, #68]	; (800ee04 <_vfiprintf_r+0x854>)
 800edc0:	4630      	mov	r0, r6
 800edc2:	f7f1 f9fd 	bl	80001c0 <strlen>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800edcc:	bf00      	nop
 800edce:	e02b      	b.n	800ee28 <_vfiprintf_r+0x878>
 800edd0:	bf00      	nop
 800edd2:	e00a      	b.n	800edea <_vfiprintf_r+0x83a>
 800edd4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d106      	bne.n	800edea <_vfiprintf_r+0x83a>
 800eddc:	f005 0301 	and.w	r3, r5, #1
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <_vfiprintf_r+0x83a>
 800ede4:	3e01      	subs	r6, #1
 800ede6:	2330      	movs	r3, #48	; 0x30
 800ede8:	7033      	strb	r3, [r6, #0]
 800edea:	f107 031c 	add.w	r3, r7, #28
 800edee:	3328      	adds	r3, #40	; 0x28
 800edf0:	1b9b      	subs	r3, r3, r6
 800edf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800edf6:	e017      	b.n	800ee28 <_vfiprintf_r+0x878>
 800edf8:	0801a1c4 	.word	0x0801a1c4
 800edfc:	0801a1d8 	.word	0x0801a1d8
 800ee00:	0801a1e0 	.word	0x0801a1e0
 800ee04:	0801a1f4 	.word	0x0801a1f4
 800ee08:	f1b8 0f00 	cmp.w	r8, #0
 800ee0c:	f000 820e 	beq.w	800f22c <_vfiprintf_r+0xc7c>
 800ee10:	f107 061c 	add.w	r6, r7, #28
 800ee14:	fa5f f388 	uxtb.w	r3, r8
 800ee18:	7033      	strb	r3, [r6, #0]
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ee20:	2300      	movs	r3, #0
 800ee22:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800ee26:	bf00      	nop
 800ee28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ee2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ee30:	4293      	cmp	r3, r2
 800ee32:	bfb8      	it	lt
 800ee34:	4613      	movlt	r3, r2
 800ee36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ee3a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <_vfiprintf_r+0x89c>
 800ee42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee46:	3301      	adds	r3, #1
 800ee48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ee4c:	f005 0302 	and.w	r3, r5, #2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d004      	beq.n	800ee5e <_vfiprintf_r+0x8ae>
 800ee54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee58:	3302      	adds	r3, #2
 800ee5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ee5e:	f005 0384 	and.w	r3, r5, #132	; 0x84
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d14e      	bne.n	800ef04 <_vfiprintf_r+0x954>
 800ee66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ee6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	607b      	str	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dd46      	ble.n	800ef04 <_vfiprintf_r+0x954>
 800ee76:	e022      	b.n	800eebe <_vfiprintf_r+0x90e>
 800ee78:	4bb0      	ldr	r3, [pc, #704]	; (800f13c <_vfiprintf_r+0xb8c>)
 800ee7a:	6023      	str	r3, [r4, #0]
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	6063      	str	r3, [r4, #4]
 800ee80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee84:	3310      	adds	r3, #16
 800ee86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee8a:	3408      	adds	r4, #8
 800ee8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee90:	3301      	adds	r3, #1
 800ee92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ee96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee9a:	2b07      	cmp	r3, #7
 800ee9c:	dd0c      	ble.n	800eeb8 <_vfiprintf_r+0x908>
 800ee9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eea2:	461a      	mov	r2, r3
 800eea4:	6939      	ldr	r1, [r7, #16]
 800eea6:	6978      	ldr	r0, [r7, #20]
 800eea8:	f009 fcea 	bl	8018880 <__sprint_r>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f040 81d3 	bne.w	800f25a <_vfiprintf_r+0xcaa>
 800eeb4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3b10      	subs	r3, #16
 800eebc:	607b      	str	r3, [r7, #4]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	2a10      	cmp	r2, #16
 800eec2:	dcd9      	bgt.n	800ee78 <_vfiprintf_r+0x8c8>
 800eec4:	4b9d      	ldr	r3, [pc, #628]	; (800f13c <_vfiprintf_r+0xb8c>)
 800eec6:	6023      	str	r3, [r4, #0]
 800eec8:	4613      	mov	r3, r2
 800eeca:	6063      	str	r3, [r4, #4]
 800eecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eed0:	4413      	add	r3, r2
 800eed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800eed6:	3408      	adds	r4, #8
 800eed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eedc:	3301      	adds	r3, #1
 800eede:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800eee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eee6:	2b07      	cmp	r3, #7
 800eee8:	dd0c      	ble.n	800ef04 <_vfiprintf_r+0x954>
 800eeea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800eeee:	461a      	mov	r2, r3
 800eef0:	6939      	ldr	r1, [r7, #16]
 800eef2:	6978      	ldr	r0, [r7, #20]
 800eef4:	f009 fcc4 	bl	8018880 <__sprint_r>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	f040 81af 	bne.w	800f25e <_vfiprintf_r+0xcae>
 800ef00:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800ef04:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d020      	beq.n	800ef4e <_vfiprintf_r+0x99e>
 800ef0c:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	2301      	movs	r3, #1
 800ef14:	6063      	str	r3, [r4, #4]
 800ef16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ef20:	3408      	adds	r4, #8
 800ef22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef26:	3301      	adds	r3, #1
 800ef28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ef2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef30:	2b07      	cmp	r3, #7
 800ef32:	dd0c      	ble.n	800ef4e <_vfiprintf_r+0x99e>
 800ef34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ef38:	461a      	mov	r2, r3
 800ef3a:	6939      	ldr	r1, [r7, #16]
 800ef3c:	6978      	ldr	r0, [r7, #20]
 800ef3e:	f009 fc9f 	bl	8018880 <__sprint_r>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f040 818c 	bne.w	800f262 <_vfiprintf_r+0xcb2>
 800ef4a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800ef4e:	f005 0302 	and.w	r3, r5, #2
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d020      	beq.n	800ef98 <_vfiprintf_r+0x9e8>
 800ef56:	f107 0318 	add.w	r3, r7, #24
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	6063      	str	r3, [r4, #4]
 800ef60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ef64:	3302      	adds	r3, #2
 800ef66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ef6a:	3408      	adds	r4, #8
 800ef6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef70:	3301      	adds	r3, #1
 800ef72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ef76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ef7a:	2b07      	cmp	r3, #7
 800ef7c:	dd0c      	ble.n	800ef98 <_vfiprintf_r+0x9e8>
 800ef7e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ef82:	461a      	mov	r2, r3
 800ef84:	6939      	ldr	r1, [r7, #16]
 800ef86:	6978      	ldr	r0, [r7, #20]
 800ef88:	f009 fc7a 	bl	8018880 <__sprint_r>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 8169 	bne.w	800f266 <_vfiprintf_r+0xcb6>
 800ef94:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800ef98:	f005 0384 	and.w	r3, r5, #132	; 0x84
 800ef9c:	2b80      	cmp	r3, #128	; 0x80
 800ef9e:	d14e      	bne.n	800f03e <_vfiprintf_r+0xa8e>
 800efa0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800efa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	607b      	str	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	dd46      	ble.n	800f03e <_vfiprintf_r+0xa8e>
 800efb0:	e022      	b.n	800eff8 <_vfiprintf_r+0xa48>
 800efb2:	4b63      	ldr	r3, [pc, #396]	; (800f140 <_vfiprintf_r+0xb90>)
 800efb4:	6023      	str	r3, [r4, #0]
 800efb6:	2310      	movs	r3, #16
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efbe:	3310      	adds	r3, #16
 800efc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efc4:	3408      	adds	r4, #8
 800efc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800efca:	3301      	adds	r3, #1
 800efcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800efd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800efd4:	2b07      	cmp	r3, #7
 800efd6:	dd0c      	ble.n	800eff2 <_vfiprintf_r+0xa42>
 800efd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800efdc:	461a      	mov	r2, r3
 800efde:	6939      	ldr	r1, [r7, #16]
 800efe0:	6978      	ldr	r0, [r7, #20]
 800efe2:	f009 fc4d 	bl	8018880 <__sprint_r>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f040 813e 	bne.w	800f26a <_vfiprintf_r+0xcba>
 800efee:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3b10      	subs	r3, #16
 800eff6:	607b      	str	r3, [r7, #4]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	2a10      	cmp	r2, #16
 800effc:	dcd9      	bgt.n	800efb2 <_vfiprintf_r+0xa02>
 800effe:	4b50      	ldr	r3, [pc, #320]	; (800f140 <_vfiprintf_r+0xb90>)
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	4613      	mov	r3, r2
 800f004:	6063      	str	r3, [r4, #4]
 800f006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f00a:	4413      	add	r3, r2
 800f00c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f010:	3408      	adds	r4, #8
 800f012:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f016:	3301      	adds	r3, #1
 800f018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f01c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f020:	2b07      	cmp	r3, #7
 800f022:	dd0c      	ble.n	800f03e <_vfiprintf_r+0xa8e>
 800f024:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f028:	461a      	mov	r2, r3
 800f02a:	6939      	ldr	r1, [r7, #16]
 800f02c:	6978      	ldr	r0, [r7, #20]
 800f02e:	f009 fc27 	bl	8018880 <__sprint_r>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	f040 811a 	bne.w	800f26e <_vfiprintf_r+0xcbe>
 800f03a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f03e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	607b      	str	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dd46      	ble.n	800f0dc <_vfiprintf_r+0xb2c>
 800f04e:	e022      	b.n	800f096 <_vfiprintf_r+0xae6>
 800f050:	4b3b      	ldr	r3, [pc, #236]	; (800f140 <_vfiprintf_r+0xb90>)
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	2310      	movs	r3, #16
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f05c:	3310      	adds	r3, #16
 800f05e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f062:	3408      	adds	r4, #8
 800f064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f068:	3301      	adds	r3, #1
 800f06a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f06e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f072:	2b07      	cmp	r3, #7
 800f074:	dd0c      	ble.n	800f090 <_vfiprintf_r+0xae0>
 800f076:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f07a:	461a      	mov	r2, r3
 800f07c:	6939      	ldr	r1, [r7, #16]
 800f07e:	6978      	ldr	r0, [r7, #20]
 800f080:	f009 fbfe 	bl	8018880 <__sprint_r>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	f040 80f3 	bne.w	800f272 <_vfiprintf_r+0xcc2>
 800f08c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	3b10      	subs	r3, #16
 800f094:	607b      	str	r3, [r7, #4]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	2a10      	cmp	r2, #16
 800f09a:	dcd9      	bgt.n	800f050 <_vfiprintf_r+0xaa0>
 800f09c:	4b28      	ldr	r3, [pc, #160]	; (800f140 <_vfiprintf_r+0xb90>)
 800f09e:	6023      	str	r3, [r4, #0]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	6063      	str	r3, [r4, #4]
 800f0a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f0a8:	4413      	add	r3, r2
 800f0aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f0ae:	3408      	adds	r4, #8
 800f0b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f0ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f0be:	2b07      	cmp	r3, #7
 800f0c0:	dd0c      	ble.n	800f0dc <_vfiprintf_r+0xb2c>
 800f0c2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	6939      	ldr	r1, [r7, #16]
 800f0ca:	6978      	ldr	r0, [r7, #20]
 800f0cc:	f009 fbd8 	bl	8018880 <__sprint_r>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f040 80cf 	bne.w	800f276 <_vfiprintf_r+0xcc6>
 800f0d8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f0dc:	6026      	str	r6, [r4, #0]
 800f0de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f0e2:	6063      	str	r3, [r4, #4]
 800f0e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f0e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f0ec:	4413      	add	r3, r2
 800f0ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f0f2:	3408      	adds	r4, #8
 800f0f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f0fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f102:	2b07      	cmp	r3, #7
 800f104:	dd0c      	ble.n	800f120 <_vfiprintf_r+0xb70>
 800f106:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f10a:	461a      	mov	r2, r3
 800f10c:	6939      	ldr	r1, [r7, #16]
 800f10e:	6978      	ldr	r0, [r7, #20]
 800f110:	f009 fbb6 	bl	8018880 <__sprint_r>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	f040 80af 	bne.w	800f27a <_vfiprintf_r+0xcca>
 800f11c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f120:	f005 0304 	and.w	r3, r5, #4
 800f124:	2b00      	cmp	r3, #0
 800f126:	d051      	beq.n	800f1cc <_vfiprintf_r+0xc1c>
 800f128:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	607b      	str	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	dd49      	ble.n	800f1cc <_vfiprintf_r+0xc1c>
 800f138:	e026      	b.n	800f188 <_vfiprintf_r+0xbd8>
 800f13a:	bf00      	nop
 800f13c:	0801bca4 	.word	0x0801bca4
 800f140:	0801bcb4 	.word	0x0801bcb4
 800f144:	4b5f      	ldr	r3, [pc, #380]	; (800f2c4 <_vfiprintf_r+0xd14>)
 800f146:	6023      	str	r3, [r4, #0]
 800f148:	2310      	movs	r3, #16
 800f14a:	6063      	str	r3, [r4, #4]
 800f14c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f150:	3310      	adds	r3, #16
 800f152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f156:	3408      	adds	r4, #8
 800f158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f15c:	3301      	adds	r3, #1
 800f15e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f166:	2b07      	cmp	r3, #7
 800f168:	dd0b      	ble.n	800f182 <_vfiprintf_r+0xbd2>
 800f16a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f16e:	461a      	mov	r2, r3
 800f170:	6939      	ldr	r1, [r7, #16]
 800f172:	6978      	ldr	r0, [r7, #20]
 800f174:	f009 fb84 	bl	8018880 <__sprint_r>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d17f      	bne.n	800f27e <_vfiprintf_r+0xcce>
 800f17e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	3b10      	subs	r3, #16
 800f186:	607b      	str	r3, [r7, #4]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	2a10      	cmp	r2, #16
 800f18c:	dcda      	bgt.n	800f144 <_vfiprintf_r+0xb94>
 800f18e:	4b4d      	ldr	r3, [pc, #308]	; (800f2c4 <_vfiprintf_r+0xd14>)
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	4613      	mov	r3, r2
 800f194:	6063      	str	r3, [r4, #4]
 800f196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f19a:	4413      	add	r3, r2
 800f19c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f1a0:	3408      	adds	r4, #8
 800f1a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f1ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f1b0:	2b07      	cmp	r3, #7
 800f1b2:	dd0b      	ble.n	800f1cc <_vfiprintf_r+0xc1c>
 800f1b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	6939      	ldr	r1, [r7, #16]
 800f1bc:	6978      	ldr	r0, [r7, #20]
 800f1be:	f009 fb5f 	bl	8018880 <__sprint_r>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d15c      	bne.n	800f282 <_vfiprintf_r+0xcd2>
 800f1c8:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f1cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f1d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	bfb8      	it	lt
 800f1d8:	4613      	movlt	r3, r2
 800f1da:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f1de:	4413      	add	r3, r2
 800f1e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f1e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d009      	beq.n	800f200 <_vfiprintf_r+0xc50>
 800f1ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	6939      	ldr	r1, [r7, #16]
 800f1f4:	6978      	ldr	r0, [r7, #20]
 800f1f6:	f009 fb43 	bl	8018880 <__sprint_r>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d142      	bne.n	800f286 <_vfiprintf_r+0xcd6>
 800f200:	2300      	movs	r3, #0
 800f202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f206:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f20a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f43f aa28 	beq.w	800e664 <_vfiprintf_r+0xb4>
 800f214:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f218:	6978      	ldr	r0, [r7, #20]
 800f21a:	f001 feb7 	bl	8010f8c <_free_r>
 800f21e:	2300      	movs	r3, #0
 800f220:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f224:	f7ff ba1e 	b.w	800e664 <_vfiprintf_r+0xb4>
 800f228:	bf00      	nop
 800f22a:	e000      	b.n	800f22e <_vfiprintf_r+0xc7e>
 800f22c:	bf00      	nop
 800f22e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f232:	2b00      	cmp	r3, #0
 800f234:	d009      	beq.n	800f24a <_vfiprintf_r+0xc9a>
 800f236:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f23a:	461a      	mov	r2, r3
 800f23c:	6939      	ldr	r1, [r7, #16]
 800f23e:	6978      	ldr	r0, [r7, #20]
 800f240:	f009 fb1e 	bl	8018880 <__sprint_r>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d11f      	bne.n	800f28a <_vfiprintf_r+0xcda>
 800f24a:	2300      	movs	r3, #0
 800f24c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f250:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800f254:	e01a      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f256:	bf00      	nop
 800f258:	e018      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f25a:	bf00      	nop
 800f25c:	e016      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f25e:	bf00      	nop
 800f260:	e014      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f262:	bf00      	nop
 800f264:	e012      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f266:	bf00      	nop
 800f268:	e010      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f26a:	bf00      	nop
 800f26c:	e00e      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f26e:	bf00      	nop
 800f270:	e00c      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f272:	bf00      	nop
 800f274:	e00a      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f276:	bf00      	nop
 800f278:	e008      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f27a:	bf00      	nop
 800f27c:	e006      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f27e:	bf00      	nop
 800f280:	e004      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f282:	bf00      	nop
 800f284:	e002      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f286:	bf00      	nop
 800f288:	e000      	b.n	800f28c <_vfiprintf_r+0xcdc>
 800f28a:	bf00      	nop
 800f28c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d004      	beq.n	800f29e <_vfiprintf_r+0xcee>
 800f294:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800f298:	6978      	ldr	r0, [r7, #20]
 800f29a:	f001 fe77 	bl	8010f8c <_free_r>
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d102      	bne.n	800f2b4 <_vfiprintf_r+0xd04>
 800f2ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f2b2:	e001      	b.n	800f2b8 <_vfiprintf_r+0xd08>
 800f2b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	37d0      	adds	r7, #208	; 0xd0
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0801bca4 	.word	0x0801bca4

0800f2c8 <_vfprintf_r>:
 800f2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2cc:	b0cd      	sub	sp, #308	; 0x134
 800f2ce:	af08      	add	r7, sp, #32
 800f2d0:	61f8      	str	r0, [r7, #28]
 800f2d2:	61b9      	str	r1, [r7, #24]
 800f2d4:	617a      	str	r2, [r7, #20]
 800f2d6:	f107 0210 	add.w	r2, r7, #16
 800f2da:	6013      	str	r3, [r2, #0]
 800f2dc:	69f8      	ldr	r0, [r7, #28]
 800f2de:	f009 fef8 	bl	80190d2 <_localeconv_r>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f2ea:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800f2ee:	f7f0 ff67 	bl	80001c0 <strlen>
 800f2f2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 800f2f6:	f04f 0200 	mov.w	r2, #0
 800f2fa:	f04f 0300 	mov.w	r3, #0
 800f2fe:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800f302:	2300      	movs	r3, #0
 800f304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f308:	2300      	movs	r3, #0
 800f30a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f30e:	2300      	movs	r3, #0
 800f310:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f314:	2300      	movs	r3, #0
 800f316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d008      	beq.n	800f33a <_vfprintf_r+0x72>
 800f328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d103      	bne.n	800f33a <_vfprintf_r+0x72>
 800f332:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800f336:	f7fc f897 	bl	800b468 <__sinit>
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f340:	b29b      	uxth	r3, r3
 800f342:	f003 0308 	and.w	r3, r3, #8
 800f346:	2b00      	cmp	r3, #0
 800f348:	d003      	beq.n	800f352 <_vfprintf_r+0x8a>
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <_vfprintf_r+0xa0>
 800f352:	69b9      	ldr	r1, [r7, #24]
 800f354:	69f8      	ldr	r0, [r7, #28]
 800f356:	f001 fd1f 	bl	8010d98 <__swsetup_r>
 800f35a:	4603      	mov	r3, r0
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <_vfprintf_r+0xa0>
 800f360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f364:	f001 bc5c 	b.w	8010c20 <_vfprintf_r+0x1958>
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	f003 031a 	and.w	r3, r3, #26
 800f374:	2b0a      	cmp	r3, #10
 800f376:	d10f      	bne.n	800f398 <_vfprintf_r+0xd0>
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	db0a      	blt.n	800f398 <_vfprintf_r+0xd0>
 800f382:	f107 0310 	add.w	r3, r7, #16
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	69b9      	ldr	r1, [r7, #24]
 800f38c:	69f8      	ldr	r0, [r7, #28]
 800f38e:	f009 fafd 	bl	801898c <__sbprintf>
 800f392:	4603      	mov	r3, r0
 800f394:	f001 bc44 	b.w	8010c20 <_vfprintf_r+0x1958>
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	607b      	str	r3, [r7, #4]
 800f39c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800f3a0:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	60fb      	str	r3, [r7, #12]
 800f3ba:	e002      	b.n	800f3c2 <_vfprintf_r+0xfa>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	607b      	str	r3, [r7, #4]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <_vfprintf_r+0x10a>
 800f3cc:	7813      	ldrb	r3, [r2, #0]
 800f3ce:	2b25      	cmp	r3, #37	; 0x25
 800f3d0:	d1f4      	bne.n	800f3bc <_vfprintf_r+0xf4>
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	1ad5      	subs	r5, r2, r3
 800f3d8:	2d00      	cmp	r5, #0
 800f3da:	d024      	beq.n	800f426 <_vfprintf_r+0x15e>
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	462b      	mov	r3, r5
 800f3e0:	6063      	str	r3, [r4, #4]
 800f3e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3e6:	462a      	mov	r2, r5
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f3ee:	3408      	adds	r4, #8
 800f3f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f3fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3fe:	2b07      	cmp	r3, #7
 800f400:	dd0c      	ble.n	800f41c <_vfprintf_r+0x154>
 800f402:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f406:	461a      	mov	r2, r3
 800f408:	69b9      	ldr	r1, [r7, #24]
 800f40a:	69f8      	ldr	r0, [r7, #28]
 800f40c:	f009 fa38 	bl	8018880 <__sprint_r>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	f041 83a5 	bne.w	8010b62 <_vfprintf_r+0x189a>
 800f418:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800f41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800f420:	442b      	add	r3, r5
 800f422:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	4613      	mov	r3, r2
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f001 8381 	beq.w	8010b34 <_vfprintf_r+0x186c>
 800f432:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800f436:	1c53      	adds	r3, r2, #1
 800f438:	607b      	str	r3, [r7, #4]
 800f43a:	2600      	movs	r6, #0
 800f43c:	2300      	movs	r3, #0
 800f43e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f442:	2300      	movs	r3, #0
 800f444:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f44c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f450:	2300      	movs	r3, #0
 800f452:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f456:	2300      	movs	r3, #0
 800f458:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	607a      	str	r2, [r7, #4]
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	60bb      	str	r3, [r7, #8]
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	3b20      	subs	r3, #32
 800f46a:	2b58      	cmp	r3, #88	; 0x58
 800f46c:	f200 8559 	bhi.w	800ff22 <_vfprintf_r+0xc5a>
 800f470:	a201      	add	r2, pc, #4	; (adr r2, 800f478 <_vfprintf_r+0x1b0>)
 800f472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f476:	bf00      	nop
 800f478:	0800f5dd 	.word	0x0800f5dd
 800f47c:	0800ff23 	.word	0x0800ff23
 800f480:	0800ff23 	.word	0x0800ff23
 800f484:	0800f5ef 	.word	0x0800f5ef
 800f488:	0800ff23 	.word	0x0800ff23
 800f48c:	0800ff23 	.word	0x0800ff23
 800f490:	0800ff23 	.word	0x0800ff23
 800f494:	0800ff23 	.word	0x0800ff23
 800f498:	0800ff23 	.word	0x0800ff23
 800f49c:	0800ff23 	.word	0x0800ff23
 800f4a0:	0800f5f5 	.word	0x0800f5f5
 800f4a4:	0800f623 	.word	0x0800f623
 800f4a8:	0800ff23 	.word	0x0800ff23
 800f4ac:	0800f61d 	.word	0x0800f61d
 800f4b0:	0800f62b 	.word	0x0800f62b
 800f4b4:	0800ff23 	.word	0x0800ff23
 800f4b8:	0800f691 	.word	0x0800f691
 800f4bc:	0800f697 	.word	0x0800f697
 800f4c0:	0800f697 	.word	0x0800f697
 800f4c4:	0800f697 	.word	0x0800f697
 800f4c8:	0800f697 	.word	0x0800f697
 800f4cc:	0800f697 	.word	0x0800f697
 800f4d0:	0800f697 	.word	0x0800f697
 800f4d4:	0800f697 	.word	0x0800f697
 800f4d8:	0800f697 	.word	0x0800f697
 800f4dc:	0800f697 	.word	0x0800f697
 800f4e0:	0800ff23 	.word	0x0800ff23
 800f4e4:	0800ff23 	.word	0x0800ff23
 800f4e8:	0800ff23 	.word	0x0800ff23
 800f4ec:	0800ff23 	.word	0x0800ff23
 800f4f0:	0800ff23 	.word	0x0800ff23
 800f4f4:	0800ff23 	.word	0x0800ff23
 800f4f8:	0800ff23 	.word	0x0800ff23
 800f4fc:	0800ff23 	.word	0x0800ff23
 800f500:	0800ff23 	.word	0x0800ff23
 800f504:	0800ff23 	.word	0x0800ff23
 800f508:	0800f715 	.word	0x0800f715
 800f50c:	0800f7c1 	.word	0x0800f7c1
 800f510:	0800ff23 	.word	0x0800ff23
 800f514:	0800f7c1 	.word	0x0800f7c1
 800f518:	0800ff23 	.word	0x0800ff23
 800f51c:	0800ff23 	.word	0x0800ff23
 800f520:	0800ff23 	.word	0x0800ff23
 800f524:	0800ff23 	.word	0x0800ff23
 800f528:	0800f6bf 	.word	0x0800f6bf
 800f52c:	0800ff23 	.word	0x0800ff23
 800f530:	0800ff23 	.word	0x0800ff23
 800f534:	0800fb01 	.word	0x0800fb01
 800f538:	0800ff23 	.word	0x0800ff23
 800f53c:	0800ff23 	.word	0x0800ff23
 800f540:	0800ff23 	.word	0x0800ff23
 800f544:	0800ff23 	.word	0x0800ff23
 800f548:	0800ff23 	.word	0x0800ff23
 800f54c:	0800fc55 	.word	0x0800fc55
 800f550:	0800ff23 	.word	0x0800ff23
 800f554:	0800ff23 	.word	0x0800ff23
 800f558:	0800fce1 	.word	0x0800fce1
 800f55c:	0800ff23 	.word	0x0800ff23
 800f560:	0800ff23 	.word	0x0800ff23
 800f564:	0800ff23 	.word	0x0800ff23
 800f568:	0800ff23 	.word	0x0800ff23
 800f56c:	0800ff23 	.word	0x0800ff23
 800f570:	0800ff23 	.word	0x0800ff23
 800f574:	0800ff23 	.word	0x0800ff23
 800f578:	0800ff23 	.word	0x0800ff23
 800f57c:	0800ff23 	.word	0x0800ff23
 800f580:	0800ff23 	.word	0x0800ff23
 800f584:	0800f6eb 	.word	0x0800f6eb
 800f588:	0800f719 	.word	0x0800f719
 800f58c:	0800f7c1 	.word	0x0800f7c1
 800f590:	0800f7c1 	.word	0x0800f7c1
 800f594:	0800f7c1 	.word	0x0800f7c1
 800f598:	0800f6c5 	.word	0x0800f6c5
 800f59c:	0800f719 	.word	0x0800f719
 800f5a0:	0800ff23 	.word	0x0800ff23
 800f5a4:	0800ff23 	.word	0x0800ff23
 800f5a8:	0800f6cb 	.word	0x0800f6cb
 800f5ac:	0800ff23 	.word	0x0800ff23
 800f5b0:	0800fa77 	.word	0x0800fa77
 800f5b4:	0800fb05 	.word	0x0800fb05
 800f5b8:	0800fba1 	.word	0x0800fba1
 800f5bc:	0800f6e5 	.word	0x0800f6e5
 800f5c0:	0800ff23 	.word	0x0800ff23
 800f5c4:	0800fbdd 	.word	0x0800fbdd
 800f5c8:	0800ff23 	.word	0x0800ff23
 800f5cc:	0800fc59 	.word	0x0800fc59
 800f5d0:	0800ff23 	.word	0x0800ff23
 800f5d4:	0800ff23 	.word	0x0800ff23
 800f5d8:	0800fce9 	.word	0x0800fce9
 800f5dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	f47f af3b 	bne.w	800f45c <_vfprintf_r+0x194>
 800f5e6:	2320      	movs	r3, #32
 800f5e8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f5ec:	e736      	b.n	800f45c <_vfprintf_r+0x194>
 800f5ee:	f046 0601 	orr.w	r6, r6, #1
 800f5f2:	e733      	b.n	800f45c <_vfprintf_r+0x194>
 800f5f4:	f107 0310 	add.w	r3, r7, #16
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	1d19      	adds	r1, r3, #4
 800f5fc:	f107 0210 	add.w	r2, r7, #16
 800f600:	6011      	str	r1, [r2, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f608:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	db00      	blt.n	800f612 <_vfprintf_r+0x34a>
 800f610:	e724      	b.n	800f45c <_vfprintf_r+0x194>
 800f612:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f616:	425b      	negs	r3, r3
 800f618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f61c:	f046 0604 	orr.w	r6, r6, #4
 800f620:	e71c      	b.n	800f45c <_vfprintf_r+0x194>
 800f622:	232b      	movs	r3, #43	; 0x2b
 800f624:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f628:	e718      	b.n	800f45c <_vfprintf_r+0x194>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	1c5a      	adds	r2, r3, #1
 800f62e:	607a      	str	r2, [r7, #4]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	60bb      	str	r3, [r7, #8]
 800f634:	2b2a      	cmp	r3, #42	; 0x2a
 800f636:	d113      	bne.n	800f660 <_vfprintf_r+0x398>
 800f638:	f107 0310 	add.w	r3, r7, #16
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	1d19      	adds	r1, r3, #4
 800f640:	f107 0210 	add.w	r2, r7, #16
 800f644:	6011      	str	r1, [r2, #0]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f650:	2b00      	cmp	r3, #0
 800f652:	f6bf af03 	bge.w	800f45c <_vfprintf_r+0x194>
 800f656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f65a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f65e:	e6fd      	b.n	800f45c <_vfprintf_r+0x194>
 800f660:	2500      	movs	r5, #0
 800f662:	e00c      	b.n	800f67e <_vfprintf_r+0x3b6>
 800f664:	462b      	mov	r3, r5
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	442b      	add	r3, r5
 800f66a:	005b      	lsls	r3, r3, #1
 800f66c:	461a      	mov	r2, r3
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	3b30      	subs	r3, #48	; 0x30
 800f672:	18d5      	adds	r5, r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	1c5a      	adds	r2, r3, #1
 800f678:	607a      	str	r2, [r7, #4]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	60bb      	str	r3, [r7, #8]
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	3b30      	subs	r3, #48	; 0x30
 800f682:	2b09      	cmp	r3, #9
 800f684:	d9ee      	bls.n	800f664 <_vfprintf_r+0x39c>
 800f686:	ea45 73e5 	orr.w	r3, r5, r5, asr #31
 800f68a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f68e:	e6ea      	b.n	800f466 <_vfprintf_r+0x19e>
 800f690:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800f694:	e6e2      	b.n	800f45c <_vfprintf_r+0x194>
 800f696:	2500      	movs	r5, #0
 800f698:	462b      	mov	r3, r5
 800f69a:	009b      	lsls	r3, r3, #2
 800f69c:	442b      	add	r3, r5
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	3b30      	subs	r3, #48	; 0x30
 800f6a6:	18d5      	adds	r5, r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	607a      	str	r2, [r7, #4]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	60bb      	str	r3, [r7, #8]
 800f6b2:	3b30      	subs	r3, #48	; 0x30
 800f6b4:	2b09      	cmp	r3, #9
 800f6b6:	d9ef      	bls.n	800f698 <_vfprintf_r+0x3d0>
 800f6b8:	f8c7 5108 	str.w	r5, [r7, #264]	; 0x108
 800f6bc:	e6d3      	b.n	800f466 <_vfprintf_r+0x19e>
 800f6be:	f046 0608 	orr.w	r6, r6, #8
 800f6c2:	e6cb      	b.n	800f45c <_vfprintf_r+0x194>
 800f6c4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800f6c8:	e6c8      	b.n	800f45c <_vfprintf_r+0x194>
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	2b6c      	cmp	r3, #108	; 0x6c
 800f6d2:	d104      	bne.n	800f6de <_vfprintf_r+0x416>
 800f6d4:	3201      	adds	r2, #1
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	f046 0620 	orr.w	r6, r6, #32
 800f6dc:	e6be      	b.n	800f45c <_vfprintf_r+0x194>
 800f6de:	f046 0610 	orr.w	r6, r6, #16
 800f6e2:	e6bb      	b.n	800f45c <_vfprintf_r+0x194>
 800f6e4:	f046 0620 	orr.w	r6, r6, #32
 800f6e8:	e6b8      	b.n	800f45c <_vfprintf_r+0x194>
 800f6ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	f107 0310 	add.w	r3, r7, #16
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	1d19      	adds	r1, r3, #4
 800f6f8:	f107 0210 	add.w	r2, r7, #16
 800f6fc:	6011      	str	r1, [r2, #0]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	7003      	strb	r3, [r0, #0]
 800f704:	2301      	movs	r3, #1
 800f706:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f70a:	2300      	movs	r3, #0
 800f70c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f710:	f000 bc18 	b.w	800ff44 <_vfprintf_r+0xc7c>
 800f714:	f046 0610 	orr.w	r6, r6, #16
 800f718:	f006 0320 	and.w	r3, r6, #32
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00d      	beq.n	800f73c <_vfprintf_r+0x474>
 800f720:	f107 0310 	add.w	r3, r7, #16
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	3307      	adds	r3, #7
 800f728:	f023 0307 	bic.w	r3, r3, #7
 800f72c:	f103 0108 	add.w	r1, r3, #8
 800f730:	f107 0210 	add.w	r2, r7, #16
 800f734:	6011      	str	r1, [r2, #0]
 800f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73a:	e02b      	b.n	800f794 <_vfprintf_r+0x4cc>
 800f73c:	f006 0310 	and.w	r3, r6, #16
 800f740:	2b00      	cmp	r3, #0
 800f742:	d00b      	beq.n	800f75c <_vfprintf_r+0x494>
 800f744:	f107 0310 	add.w	r3, r7, #16
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	1d19      	adds	r1, r3, #4
 800f74c:	f107 0210 	add.w	r2, r7, #16
 800f750:	6011      	str	r1, [r2, #0]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	461a      	mov	r2, r3
 800f756:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f75a:	e01b      	b.n	800f794 <_vfprintf_r+0x4cc>
 800f75c:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00c      	beq.n	800f77e <_vfprintf_r+0x4b6>
 800f764:	f107 0310 	add.w	r3, r7, #16
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	1d19      	adds	r1, r3, #4
 800f76c:	f107 0210 	add.w	r2, r7, #16
 800f770:	6011      	str	r1, [r2, #0]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	b21b      	sxth	r3, r3
 800f776:	b21a      	sxth	r2, r3
 800f778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f77c:	e00a      	b.n	800f794 <_vfprintf_r+0x4cc>
 800f77e:	f107 0310 	add.w	r3, r7, #16
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	1d19      	adds	r1, r3, #4
 800f786:	f107 0210 	add.w	r2, r7, #16
 800f78a:	6011      	str	r1, [r2, #0]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f794:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f798:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f79c:	2a00      	cmp	r2, #0
 800f79e:	f173 0300 	sbcs.w	r3, r3, #0
 800f7a2:	da09      	bge.n	800f7b8 <_vfprintf_r+0x4f0>
 800f7a4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800f7a8:	4252      	negs	r2, r2
 800f7aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800f7ae:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800f7b2:	232d      	movs	r3, #45	; 0x2d
 800f7b4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800f7be:	e2ee      	b.n	800fd9e <_vfprintf_r+0xad6>
 800f7c0:	f006 0308 	and.w	r3, r6, #8
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00f      	beq.n	800f7e8 <_vfprintf_r+0x520>
 800f7c8:	f107 0310 	add.w	r3, r7, #16
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3307      	adds	r3, #7
 800f7d0:	f023 0307 	bic.w	r3, r3, #7
 800f7d4:	f103 0108 	add.w	r1, r3, #8
 800f7d8:	f107 0210 	add.w	r2, r7, #16
 800f7dc:	6011      	str	r1, [r2, #0]
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800f7e6:	e00e      	b.n	800f806 <_vfprintf_r+0x53e>
 800f7e8:	f107 0310 	add.w	r3, r7, #16
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3307      	adds	r3, #7
 800f7f0:	f023 0307 	bic.w	r3, r3, #7
 800f7f4:	f103 0108 	add.w	r1, r3, #8
 800f7f8:	f107 0210 	add.w	r2, r7, #16
 800f7fc:	6011      	str	r1, [r2, #0]
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 800f806:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800f80a:	4690      	mov	r8, r2
 800f80c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800f810:	2301      	movs	r3, #1
 800f812:	461d      	mov	r5, r3
 800f814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f818:	4bc3      	ldr	r3, [pc, #780]	; (800fb28 <_vfprintf_r+0x860>)
 800f81a:	4640      	mov	r0, r8
 800f81c:	4649      	mov	r1, r9
 800f81e:	f7f2 f859 	bl	80018d4 <__aeabi_dcmpun>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10b      	bne.n	800f840 <_vfprintf_r+0x578>
 800f828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f82c:	4bbe      	ldr	r3, [pc, #760]	; (800fb28 <_vfprintf_r+0x860>)
 800f82e:	4640      	mov	r0, r8
 800f830:	4649      	mov	r1, r9
 800f832:	f7f1 ff77 	bl	8001724 <__aeabi_dcmple>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <_vfprintf_r+0x578>
 800f83c:	2300      	movs	r3, #0
 800f83e:	461d      	mov	r5, r3
 800f840:	b2eb      	uxtb	r3, r5
 800f842:	f083 0301 	eor.w	r3, r3, #1
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d001      	beq.n	800f850 <_vfprintf_r+0x588>
 800f84c:	2301      	movs	r3, #1
 800f84e:	e000      	b.n	800f852 <_vfprintf_r+0x58a>
 800f850:	2300      	movs	r3, #0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d01b      	beq.n	800f88e <_vfprintf_r+0x5c6>
 800f856:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f85a:	f04f 0200 	mov.w	r2, #0
 800f85e:	f04f 0300 	mov.w	r3, #0
 800f862:	f7f1 ff55 	bl	8001710 <__aeabi_dcmplt>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <_vfprintf_r+0x5aa>
 800f86c:	232d      	movs	r3, #45	; 0x2d
 800f86e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	2b47      	cmp	r3, #71	; 0x47
 800f876:	dc02      	bgt.n	800f87e <_vfprintf_r+0x5b6>
 800f878:	4bac      	ldr	r3, [pc, #688]	; (800fb2c <_vfprintf_r+0x864>)
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	e001      	b.n	800f882 <_vfprintf_r+0x5ba>
 800f87e:	4bac      	ldr	r3, [pc, #688]	; (800fb30 <_vfprintf_r+0x868>)
 800f880:	60fb      	str	r3, [r7, #12]
 800f882:	2303      	movs	r3, #3
 800f884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f888:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800f88c:	e35a      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800f88e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	f7f2 f81d 	bl	80018d4 <__aeabi_dcmpun>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d016      	beq.n	800f8ce <_vfprintf_r+0x606>
 800f8a0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800f8a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <_vfprintf_r+0x5ea>
 800f8ac:	232d      	movs	r3, #45	; 0x2d
 800f8ae:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2b47      	cmp	r3, #71	; 0x47
 800f8b6:	dc02      	bgt.n	800f8be <_vfprintf_r+0x5f6>
 800f8b8:	4b9e      	ldr	r3, [pc, #632]	; (800fb34 <_vfprintf_r+0x86c>)
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	e001      	b.n	800f8c2 <_vfprintf_r+0x5fa>
 800f8be:	4b9e      	ldr	r3, [pc, #632]	; (800fb38 <_vfprintf_r+0x870>)
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	2303      	movs	r3, #3
 800f8c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f8c8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800f8cc:	e33a      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800f8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8d6:	d103      	bne.n	800f8e0 <_vfprintf_r+0x618>
 800f8d8:	2306      	movs	r3, #6
 800f8da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f8de:	e00b      	b.n	800f8f8 <_vfprintf_r+0x630>
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2b67      	cmp	r3, #103	; 0x67
 800f8e4:	d001      	beq.n	800f8ea <_vfprintf_r+0x622>
 800f8e6:	2b47      	cmp	r3, #71	; 0x47
 800f8e8:	d106      	bne.n	800f8f8 <_vfprintf_r+0x630>
 800f8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d102      	bne.n	800f8f8 <_vfprintf_r+0x630>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f8f8:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 800f8fc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800f900:	68f9      	ldr	r1, [r7, #12]
 800f902:	9106      	str	r1, [sp, #24]
 800f904:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800f908:	9105      	str	r1, [sp, #20]
 800f90a:	68bd      	ldr	r5, [r7, #8]
 800f90c:	9504      	str	r5, [sp, #16]
 800f90e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800f912:	9103      	str	r1, [sp, #12]
 800f914:	f107 01b6 	add.w	r1, r7, #182	; 0xb6
 800f918:	9102      	str	r1, [sp, #8]
 800f91a:	9601      	str	r6, [sp, #4]
 800f91c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800f920:	9100      	str	r1, [sp, #0]
 800f922:	69f8      	ldr	r0, [r7, #28]
 800f924:	f009 f89b 	bl	8018a5e <cvt>
 800f928:	60f8      	str	r0, [r7, #12]
 800f92a:	2d67      	cmp	r5, #103	; 0x67
 800f92c:	d001      	beq.n	800f932 <_vfprintf_r+0x66a>
 800f92e:	2d47      	cmp	r5, #71	; 0x47
 800f930:	d110      	bne.n	800f954 <_vfprintf_r+0x68c>
 800f932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f936:	f113 0f03 	cmn.w	r3, #3
 800f93a:	db05      	blt.n	800f948 <_vfprintf_r+0x680>
 800f93c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f940:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f944:	429a      	cmp	r2, r3
 800f946:	da03      	bge.n	800f950 <_vfprintf_r+0x688>
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	3b02      	subs	r3, #2
 800f94c:	60bb      	str	r3, [r7, #8]
 800f94e:	e001      	b.n	800f954 <_vfprintf_r+0x68c>
 800f950:	2367      	movs	r3, #103	; 0x67
 800f952:	60bb      	str	r3, [r7, #8]
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	2a65      	cmp	r2, #101	; 0x65
 800f958:	dc24      	bgt.n	800f9a4 <_vfprintf_r+0x6dc>
 800f95a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f95e:	3b01      	subs	r3, #1
 800f960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f964:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f968:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800f96c:	4618      	mov	r0, r3
 800f96e:	f001 f95f 	bl	8010c30 <exponent>
 800f972:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800f976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f97a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800f97e:	4413      	add	r3, r2
 800f980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f988:	2b01      	cmp	r3, #1
 800f98a:	dc03      	bgt.n	800f994 <_vfprintf_r+0x6cc>
 800f98c:	f006 0301 	and.w	r3, r6, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	d067      	beq.n	800fa64 <_vfprintf_r+0x79c>
 800f994:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f99c:	4413      	add	r3, r2
 800f99e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f9a2:	e05f      	b.n	800fa64 <_vfprintf_r+0x79c>
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	2b66      	cmp	r3, #102	; 0x66
 800f9a8:	d12d      	bne.n	800fa06 <_vfprintf_r+0x73e>
 800f9aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	dd16      	ble.n	800f9e0 <_vfprintf_r+0x718>
 800f9b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d103      	bne.n	800f9ca <_vfprintf_r+0x702>
 800f9c2:	f006 0301 	and.w	r3, r6, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d048      	beq.n	800fa5c <_vfprintf_r+0x794>
 800f9ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f9ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f9d2:	441a      	add	r2, r3
 800f9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d8:	4413      	add	r3, r2
 800f9da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f9de:	e03d      	b.n	800fa5c <_vfprintf_r+0x794>
 800f9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d103      	bne.n	800f9f0 <_vfprintf_r+0x728>
 800f9e8:	f006 0301 	and.w	r3, r6, #1
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d006      	beq.n	800f9fe <_vfprintf_r+0x736>
 800f9f0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f9f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f9f8:	4413      	add	r3, r2
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	e000      	b.n	800fa00 <_vfprintf_r+0x738>
 800f9fe:	2301      	movs	r3, #1
 800fa00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa04:	e02a      	b.n	800fa5c <_vfprintf_r+0x794>
 800fa06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fa0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	db0f      	blt.n	800fa32 <_vfprintf_r+0x76a>
 800fa12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa1a:	f006 0301 	and.w	r3, r6, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01c      	beq.n	800fa5c <_vfprintf_r+0x794>
 800fa22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fa26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fa2a:	4413      	add	r3, r2
 800fa2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa30:	e014      	b.n	800fa5c <_vfprintf_r+0x794>
 800fa32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa36:	461a      	mov	r2, r3
 800fa38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	dc08      	bgt.n	800fa5c <_vfprintf_r+0x794>
 800fa4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa4e:	f1c3 0301 	rsb	r3, r3, #1
 800fa52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fa56:	4413      	add	r3, r2
 800fa58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fa60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fa64:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 826a 	beq.w	800ff42 <_vfprintf_r+0xc7a>
 800fa6e:	232d      	movs	r3, #45	; 0x2d
 800fa70:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800fa74:	e265      	b.n	800ff42 <_vfprintf_r+0xc7a>
 800fa76:	f006 0320 	and.w	r3, r6, #32
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d010      	beq.n	800faa0 <_vfprintf_r+0x7d8>
 800fa7e:	f107 0310 	add.w	r3, r7, #16
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	1d19      	adds	r1, r3, #4
 800fa86:	f107 0210 	add.w	r2, r7, #16
 800fa8a:	6011      	str	r1, [r2, #0]
 800fa8c:	6819      	ldr	r1, [r3, #0]
 800fa8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800fa92:	461a      	mov	r2, r3
 800fa94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fa98:	e9c1 2300 	strd	r2, r3, [r1]
 800fa9c:	f001 b848 	b.w	8010b30 <_vfprintf_r+0x1868>
 800faa0:	f006 0310 	and.w	r3, r6, #16
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00c      	beq.n	800fac2 <_vfprintf_r+0x7fa>
 800faa8:	f107 0310 	add.w	r3, r7, #16
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	1d19      	adds	r1, r3, #4
 800fab0:	f107 0210 	add.w	r2, r7, #16
 800fab4:	6011      	str	r1, [r2, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800fabc:	601a      	str	r2, [r3, #0]
 800fabe:	f001 b837 	b.w	8010b30 <_vfprintf_r+0x1868>
 800fac2:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00d      	beq.n	800fae6 <_vfprintf_r+0x81e>
 800faca:	f107 0310 	add.w	r3, r7, #16
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	1d19      	adds	r1, r3, #4
 800fad2:	f107 0210 	add.w	r2, r7, #16
 800fad6:	6011      	str	r1, [r2, #0]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800fade:	b212      	sxth	r2, r2
 800fae0:	801a      	strh	r2, [r3, #0]
 800fae2:	f001 b825 	b.w	8010b30 <_vfprintf_r+0x1868>
 800fae6:	f107 0310 	add.w	r3, r7, #16
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	1d19      	adds	r1, r3, #4
 800faee:	f107 0210 	add.w	r2, r7, #16
 800faf2:	6011      	str	r1, [r2, #0]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	f001 b818 	b.w	8010b30 <_vfprintf_r+0x1868>
 800fb00:	f046 0610 	orr.w	r6, r6, #16
 800fb04:	f006 0320 	and.w	r3, r6, #32
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d017      	beq.n	800fb3c <_vfprintf_r+0x874>
 800fb0c:	f107 0310 	add.w	r3, r7, #16
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3307      	adds	r3, #7
 800fb14:	f023 0307 	bic.w	r3, r3, #7
 800fb18:	f103 0108 	add.w	r1, r3, #8
 800fb1c:	f107 0210 	add.w	r2, r7, #16
 800fb20:	6011      	str	r1, [r2, #0]
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	e035      	b.n	800fb94 <_vfprintf_r+0x8cc>
 800fb28:	7fefffff 	.word	0x7fefffff
 800fb2c:	0801a210 	.word	0x0801a210
 800fb30:	0801a214 	.word	0x0801a214
 800fb34:	0801a218 	.word	0x0801a218
 800fb38:	0801a21c 	.word	0x0801a21c
 800fb3c:	f006 0310 	and.w	r3, r6, #16
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00b      	beq.n	800fb5c <_vfprintf_r+0x894>
 800fb44:	f107 0310 	add.w	r3, r7, #16
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	1d19      	adds	r1, r3, #4
 800fb4c:	f107 0210 	add.w	r2, r7, #16
 800fb50:	6011      	str	r1, [r2, #0]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	f04f 0300 	mov.w	r3, #0
 800fb5a:	e01b      	b.n	800fb94 <_vfprintf_r+0x8cc>
 800fb5c:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00c      	beq.n	800fb7e <_vfprintf_r+0x8b6>
 800fb64:	f107 0310 	add.w	r3, r7, #16
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	1d19      	adds	r1, r3, #4
 800fb6c:	f107 0210 	add.w	r2, r7, #16
 800fb70:	6011      	str	r1, [r2, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	f04f 0300 	mov.w	r3, #0
 800fb7c:	e00a      	b.n	800fb94 <_vfprintf_r+0x8cc>
 800fb7e:	f107 0310 	add.w	r3, r7, #16
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	1d19      	adds	r1, r3, #4
 800fb86:	f107 0210 	add.w	r2, r7, #16
 800fb8a:	6011      	str	r1, [r2, #0]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	461a      	mov	r2, r3
 800fb90:	f04f 0300 	mov.w	r3, #0
 800fb94:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fb98:	2300      	movs	r3, #0
 800fb9a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fb9e:	e0fb      	b.n	800fd98 <_vfprintf_r+0xad0>
 800fba0:	f107 0310 	add.w	r3, r7, #16
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	1d19      	adds	r1, r3, #4
 800fba8:	f107 0210 	add.w	r2, r7, #16
 800fbac:	6011      	str	r1, [r2, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f04f 0300 	mov.w	r3, #0
 800fbb6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fbba:	2302      	movs	r3, #2
 800fbbc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fbc0:	4bb5      	ldr	r3, [pc, #724]	; (800fe98 <_vfprintf_r+0xbd0>)
 800fbc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fbc6:	f046 0602 	orr.w	r6, r6, #2
 800fbca:	2330      	movs	r3, #48	; 0x30
 800fbcc:	f887 3020 	strb.w	r3, [r7, #32]
 800fbd0:	2378      	movs	r3, #120	; 0x78
 800fbd2:	60bb      	str	r3, [r7, #8]
 800fbd4:	2378      	movs	r3, #120	; 0x78
 800fbd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800fbda:	e0dd      	b.n	800fd98 <_vfprintf_r+0xad0>
 800fbdc:	f107 0310 	add.w	r3, r7, #16
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	1d19      	adds	r1, r3, #4
 800fbe4:	f107 0210 	add.w	r2, r7, #16
 800fbe8:	6011      	str	r1, [r2, #0]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	60fa      	str	r2, [r7, #12]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800fbf4:	2a00      	cmp	r2, #0
 800fbf6:	d109      	bne.n	800fc0c <_vfprintf_r+0x944>
 800fbf8:	4ba8      	ldr	r3, [pc, #672]	; (800fe9c <_vfprintf_r+0xbd4>)
 800fbfa:	60fb      	str	r3, [r7, #12]
 800fbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc00:	2b06      	cmp	r3, #6
 800fc02:	bf28      	it	cs
 800fc04:	2306      	movcs	r3, #6
 800fc06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc0a:	e19b      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800fc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	db18      	blt.n	800fc46 <_vfprintf_r+0x97e>
 800fc14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc18:	461a      	mov	r2, r3
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	68fd      	ldr	r5, [r7, #12]
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f7f0 fcae 	bl	8000580 <memchr>
 800fc24:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800fc28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d005      	beq.n	800fc3c <_vfprintf_r+0x974>
 800fc30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fc34:	1b5b      	subs	r3, r3, r5
 800fc36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc3a:	e183      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800fc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc44:	e17e      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f7f0 faba 	bl	80001c0 <strlen>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fc52:	e177      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800fc54:	f046 0610 	orr.w	r6, r6, #16
 800fc58:	f006 0320 	and.w	r3, r6, #32
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00d      	beq.n	800fc7c <_vfprintf_r+0x9b4>
 800fc60:	f107 0310 	add.w	r3, r7, #16
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	3307      	adds	r3, #7
 800fc68:	f023 0307 	bic.w	r3, r3, #7
 800fc6c:	f103 0108 	add.w	r1, r3, #8
 800fc70:	f107 0210 	add.w	r2, r7, #16
 800fc74:	6011      	str	r1, [r2, #0]
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	e02b      	b.n	800fcd4 <_vfprintf_r+0xa0c>
 800fc7c:	f006 0310 	and.w	r3, r6, #16
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00b      	beq.n	800fc9c <_vfprintf_r+0x9d4>
 800fc84:	f107 0310 	add.w	r3, r7, #16
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	1d19      	adds	r1, r3, #4
 800fc8c:	f107 0210 	add.w	r2, r7, #16
 800fc90:	6011      	str	r1, [r2, #0]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	f04f 0300 	mov.w	r3, #0
 800fc9a:	e01b      	b.n	800fcd4 <_vfprintf_r+0xa0c>
 800fc9c:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00c      	beq.n	800fcbe <_vfprintf_r+0x9f6>
 800fca4:	f107 0310 	add.w	r3, r7, #16
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	1d19      	adds	r1, r3, #4
 800fcac:	f107 0210 	add.w	r2, r7, #16
 800fcb0:	6011      	str	r1, [r2, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	b29a      	uxth	r2, r3
 800fcb8:	f04f 0300 	mov.w	r3, #0
 800fcbc:	e00a      	b.n	800fcd4 <_vfprintf_r+0xa0c>
 800fcbe:	f107 0310 	add.w	r3, r7, #16
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	1d19      	adds	r1, r3, #4
 800fcc6:	f107 0210 	add.w	r2, r7, #16
 800fcca:	6011      	str	r1, [r2, #0]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	f04f 0300 	mov.w	r3, #0
 800fcd4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fcde:	e05b      	b.n	800fd98 <_vfprintf_r+0xad0>
 800fce0:	4b6f      	ldr	r3, [pc, #444]	; (800fea0 <_vfprintf_r+0xbd8>)
 800fce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fce6:	e002      	b.n	800fcee <_vfprintf_r+0xa26>
 800fce8:	4b6b      	ldr	r3, [pc, #428]	; (800fe98 <_vfprintf_r+0xbd0>)
 800fcea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fcee:	f006 0320 	and.w	r3, r6, #32
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00d      	beq.n	800fd12 <_vfprintf_r+0xa4a>
 800fcf6:	f107 0310 	add.w	r3, r7, #16
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3307      	adds	r3, #7
 800fcfe:	f023 0307 	bic.w	r3, r3, #7
 800fd02:	f103 0108 	add.w	r1, r3, #8
 800fd06:	f107 0210 	add.w	r2, r7, #16
 800fd0a:	6011      	str	r1, [r2, #0]
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	e02b      	b.n	800fd6a <_vfprintf_r+0xaa2>
 800fd12:	f006 0310 	and.w	r3, r6, #16
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <_vfprintf_r+0xa6a>
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	1d19      	adds	r1, r3, #4
 800fd22:	f107 0210 	add.w	r2, r7, #16
 800fd26:	6011      	str	r1, [r2, #0]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	f04f 0300 	mov.w	r3, #0
 800fd30:	e01b      	b.n	800fd6a <_vfprintf_r+0xaa2>
 800fd32:	f006 0340 	and.w	r3, r6, #64	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00c      	beq.n	800fd54 <_vfprintf_r+0xa8c>
 800fd3a:	f107 0310 	add.w	r3, r7, #16
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	1d19      	adds	r1, r3, #4
 800fd42:	f107 0210 	add.w	r2, r7, #16
 800fd46:	6011      	str	r1, [r2, #0]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	f04f 0300 	mov.w	r3, #0
 800fd52:	e00a      	b.n	800fd6a <_vfprintf_r+0xaa2>
 800fd54:	f107 0310 	add.w	r3, r7, #16
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	1d19      	adds	r1, r3, #4
 800fd5c:	f107 0210 	add.w	r2, r7, #16
 800fd60:	6011      	str	r1, [r2, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	461a      	mov	r2, r3
 800fd66:	f04f 0300 	mov.w	r3, #0
 800fd6a:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fd6e:	2302      	movs	r3, #2
 800fd70:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800fd74:	f006 0301 	and.w	r3, r6, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00c      	beq.n	800fd96 <_vfprintf_r+0xace>
 800fd7c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fd80:	4313      	orrs	r3, r2
 800fd82:	d008      	beq.n	800fd96 <_vfprintf_r+0xace>
 800fd84:	2330      	movs	r3, #48	; 0x30
 800fd86:	f887 3020 	strb.w	r3, [r7, #32]
 800fd8a:	7a3b      	ldrb	r3, [r7, #8]
 800fd8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800fd90:	f046 0602 	orr.w	r6, r6, #2
 800fd94:	e000      	b.n	800fd98 <_vfprintf_r+0xad0>
 800fd96:	bf00      	nop
 800fd98:	2300      	movs	r3, #0
 800fd9a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800fd9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fda2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fda6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	db01      	blt.n	800fdb2 <_vfprintf_r+0xaea>
 800fdae:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 800fdb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdb6:	3328      	adds	r3, #40	; 0x28
 800fdb8:	60fb      	str	r3, [r7, #12]
 800fdba:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fdbe:	4313      	orrs	r3, r2
 800fdc0:	d104      	bne.n	800fdcc <_vfprintf_r+0xb04>
 800fdc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	f000 8096 	beq.w	800fef8 <_vfprintf_r+0xc30>
 800fdcc:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	d068      	beq.n	800fea6 <_vfprintf_r+0xbde>
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	f300 8083 	bgt.w	800fee0 <_vfprintf_r+0xc18>
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <_vfprintf_r+0xb1e>
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d02a      	beq.n	800fe38 <_vfprintf_r+0xb70>
 800fde2:	e07d      	b.n	800fee0 <_vfprintf_r+0xc18>
 800fde4:	bf00      	nop
 800fde6:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800fdea:	f003 0307 	and.w	r3, r3, #7
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	1e55      	subs	r5, r2, #1
 800fdf4:	60fd      	str	r5, [r7, #12]
 800fdf6:	3330      	adds	r3, #48	; 0x30
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	462a      	mov	r2, r5
 800fdfc:	7013      	strb	r3, [r2, #0]
 800fdfe:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800fe02:	f04f 0200 	mov.w	r2, #0
 800fe06:	f04f 0300 	mov.w	r3, #0
 800fe0a:	08c2      	lsrs	r2, r0, #3
 800fe0c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800fe10:	08cb      	lsrs	r3, r1, #3
 800fe12:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fe16:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	d1e2      	bne.n	800fde4 <_vfprintf_r+0xb1c>
 800fe1e:	f006 0301 	and.w	r3, r6, #1
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d066      	beq.n	800fef4 <_vfprintf_r+0xc2c>
 800fe26:	462b      	mov	r3, r5
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	2b30      	cmp	r3, #48	; 0x30
 800fe2c:	d062      	beq.n	800fef4 <_vfprintf_r+0xc2c>
 800fe2e:	1e6a      	subs	r2, r5, #1
 800fe30:	60fa      	str	r2, [r7, #12]
 800fe32:	2330      	movs	r3, #48	; 0x30
 800fe34:	7013      	strb	r3, [r2, #0]
 800fe36:	e05d      	b.n	800fef4 <_vfprintf_r+0xc2c>
 800fe38:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	bf08      	it	eq
 800fe40:	2a0a      	cmpeq	r2, #10
 800fe42:	d208      	bcs.n	800fe56 <_vfprintf_r+0xb8e>
 800fe44:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	3a01      	subs	r2, #1
 800fe4c:	60fa      	str	r2, [r7, #12]
 800fe4e:	3330      	adds	r3, #48	; 0x30
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	7013      	strb	r3, [r2, #0]
 800fe54:	e04f      	b.n	800fef6 <_vfprintf_r+0xc2e>
 800fe56:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800fe5a:	f04f 020a 	mov.w	r2, #10
 800fe5e:	f04f 0300 	mov.w	r3, #0
 800fe62:	f7f1 fa59 	bl	8001318 <__aeabi_uldivmod>
 800fe66:	b2d3      	uxtb	r3, r2
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	3a01      	subs	r2, #1
 800fe6c:	60fa      	str	r2, [r7, #12]
 800fe6e:	3330      	adds	r3, #48	; 0x30
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	7013      	strb	r3, [r2, #0]
 800fe74:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800fe78:	f04f 020a 	mov.w	r2, #10
 800fe7c:	f04f 0300 	mov.w	r3, #0
 800fe80:	f7f1 fa4a 	bl	8001318 <__aeabi_uldivmod>
 800fe84:	4602      	mov	r2, r0
 800fe86:	460b      	mov	r3, r1
 800fe88:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fe8c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800fe90:	4313      	orrs	r3, r2
 800fe92:	d1e0      	bne.n	800fe56 <_vfprintf_r+0xb8e>
 800fe94:	e02f      	b.n	800fef6 <_vfprintf_r+0xc2e>
 800fe96:	bf00      	nop
 800fe98:	0801a220 	.word	0x0801a220
 800fe9c:	0801a234 	.word	0x0801a234
 800fea0:	0801a23c 	.word	0x0801a23c
 800fea4:	bf00      	nop
 800fea6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800feaa:	f003 030f 	and.w	r3, r3, #15
 800feae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800feb2:	4413      	add	r3, r2
 800feb4:	68fa      	ldr	r2, [r7, #12]
 800feb6:	3a01      	subs	r2, #1
 800feb8:	60fa      	str	r2, [r7, #12]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	7013      	strb	r3, [r2, #0]
 800febe:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800fec2:	f04f 0200 	mov.w	r2, #0
 800fec6:	f04f 0300 	mov.w	r3, #0
 800feca:	0902      	lsrs	r2, r0, #4
 800fecc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800fed0:	090b      	lsrs	r3, r1, #4
 800fed2:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 800fed6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800feda:	4313      	orrs	r3, r2
 800fedc:	d1e2      	bne.n	800fea4 <_vfprintf_r+0xbdc>
 800fede:	e00a      	b.n	800fef6 <_vfprintf_r+0xc2e>
 800fee0:	4b9f      	ldr	r3, [pc, #636]	; (8010160 <_vfprintf_r+0xe98>)
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7f0 f96b 	bl	80001c0 <strlen>
 800feea:	4603      	mov	r3, r0
 800feec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fef0:	bf00      	nop
 800fef2:	e027      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800fef4:	bf00      	nop
 800fef6:	e00c      	b.n	800ff12 <_vfprintf_r+0xc4a>
 800fef8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d108      	bne.n	800ff12 <_vfprintf_r+0xc4a>
 800ff00:	f006 0301 	and.w	r3, r6, #1
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d004      	beq.n	800ff12 <_vfprintf_r+0xc4a>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	1e5a      	subs	r2, r3, #1
 800ff0c:	60fa      	str	r2, [r7, #12]
 800ff0e:	2330      	movs	r3, #48	; 0x30
 800ff10:	7013      	strb	r3, [r2, #0]
 800ff12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff16:	3328      	adds	r3, #40	; 0x28
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	1a9b      	subs	r3, r3, r2
 800ff1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ff20:	e010      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f000 8607 	beq.w	8010b38 <_vfprintf_r+0x1870>
 800ff2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ff2e:	60fa      	str	r2, [r7, #12]
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	7013      	strb	r3, [r2, #0]
 800ff34:	2301      	movs	r3, #1
 800ff36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800ff40:	e000      	b.n	800ff44 <_vfprintf_r+0xc7c>
 800ff42:	bf00      	nop
 800ff44:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ff48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	bfb8      	it	lt
 800ff50:	4613      	movlt	r3, r2
 800ff52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff56:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d004      	beq.n	800ff68 <_vfprintf_r+0xca0>
 800ff5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff62:	3301      	adds	r3, #1
 800ff64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff68:	f006 0302 	and.w	r3, r6, #2
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d004      	beq.n	800ff7a <_vfprintf_r+0xcb2>
 800ff70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff74:	3302      	adds	r3, #2
 800ff76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff7a:	f006 0384 	and.w	r3, r6, #132	; 0x84
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d14b      	bne.n	801001a <_vfprintf_r+0xd52>
 800ff82:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800ff86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff8a:	1ad5      	subs	r5, r2, r3
 800ff8c:	2d00      	cmp	r5, #0
 800ff8e:	dd44      	ble.n	801001a <_vfprintf_r+0xd52>
 800ff90:	e020      	b.n	800ffd4 <_vfprintf_r+0xd0c>
 800ff92:	4b74      	ldr	r3, [pc, #464]	; (8010164 <_vfprintf_r+0xe9c>)
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	2310      	movs	r3, #16
 800ff98:	6063      	str	r3, [r4, #4]
 800ff9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff9e:	3310      	adds	r3, #16
 800ffa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ffa4:	3408      	adds	r4, #8
 800ffa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffaa:	3301      	adds	r3, #1
 800ffac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ffb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffb4:	2b07      	cmp	r3, #7
 800ffb6:	dd0c      	ble.n	800ffd2 <_vfprintf_r+0xd0a>
 800ffb8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	69b9      	ldr	r1, [r7, #24]
 800ffc0:	69f8      	ldr	r0, [r7, #28]
 800ffc2:	f008 fc5d 	bl	8018880 <__sprint_r>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f040 85cc 	bne.w	8010b66 <_vfprintf_r+0x189e>
 800ffce:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ffd2:	3d10      	subs	r5, #16
 800ffd4:	2d10      	cmp	r5, #16
 800ffd6:	dcdc      	bgt.n	800ff92 <_vfprintf_r+0xcca>
 800ffd8:	4b62      	ldr	r3, [pc, #392]	; (8010164 <_vfprintf_r+0xe9c>)
 800ffda:	6023      	str	r3, [r4, #0]
 800ffdc:	462b      	mov	r3, r5
 800ffde:	6063      	str	r3, [r4, #4]
 800ffe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffe4:	462a      	mov	r2, r5
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ffec:	3408      	adds	r4, #8
 800ffee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fff2:	3301      	adds	r3, #1
 800fff4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fffc:	2b07      	cmp	r3, #7
 800fffe:	dd0c      	ble.n	801001a <_vfprintf_r+0xd52>
 8010000:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010004:	461a      	mov	r2, r3
 8010006:	69b9      	ldr	r1, [r7, #24]
 8010008:	69f8      	ldr	r0, [r7, #28]
 801000a:	f008 fc39 	bl	8018880 <__sprint_r>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	f040 85aa 	bne.w	8010b6a <_vfprintf_r+0x18a2>
 8010016:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801001a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 801001e:	2b00      	cmp	r3, #0
 8010020:	d020      	beq.n	8010064 <_vfprintf_r+0xd9c>
 8010022:	f107 03b7 	add.w	r3, r7, #183	; 0xb7
 8010026:	6023      	str	r3, [r4, #0]
 8010028:	2301      	movs	r3, #1
 801002a:	6063      	str	r3, [r4, #4]
 801002c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010030:	3301      	adds	r3, #1
 8010032:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010036:	3408      	adds	r4, #8
 8010038:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801003c:	3301      	adds	r3, #1
 801003e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010046:	2b07      	cmp	r3, #7
 8010048:	dd0c      	ble.n	8010064 <_vfprintf_r+0xd9c>
 801004a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801004e:	461a      	mov	r2, r3
 8010050:	69b9      	ldr	r1, [r7, #24]
 8010052:	69f8      	ldr	r0, [r7, #28]
 8010054:	f008 fc14 	bl	8018880 <__sprint_r>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	f040 8587 	bne.w	8010b6e <_vfprintf_r+0x18a6>
 8010060:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010064:	f006 0302 	and.w	r3, r6, #2
 8010068:	2b00      	cmp	r3, #0
 801006a:	d020      	beq.n	80100ae <_vfprintf_r+0xde6>
 801006c:	f107 0320 	add.w	r3, r7, #32
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	2302      	movs	r3, #2
 8010074:	6063      	str	r3, [r4, #4]
 8010076:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801007a:	3302      	adds	r3, #2
 801007c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010080:	3408      	adds	r4, #8
 8010082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010086:	3301      	adds	r3, #1
 8010088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801008c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010090:	2b07      	cmp	r3, #7
 8010092:	dd0c      	ble.n	80100ae <_vfprintf_r+0xde6>
 8010094:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010098:	461a      	mov	r2, r3
 801009a:	69b9      	ldr	r1, [r7, #24]
 801009c:	69f8      	ldr	r0, [r7, #28]
 801009e:	f008 fbef 	bl	8018880 <__sprint_r>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f040 8564 	bne.w	8010b72 <_vfprintf_r+0x18aa>
 80100aa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80100ae:	f006 0384 	and.w	r3, r6, #132	; 0x84
 80100b2:	2b80      	cmp	r3, #128	; 0x80
 80100b4:	d14b      	bne.n	801014e <_vfprintf_r+0xe86>
 80100b6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80100ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100be:	1ad5      	subs	r5, r2, r3
 80100c0:	2d00      	cmp	r5, #0
 80100c2:	dd44      	ble.n	801014e <_vfprintf_r+0xe86>
 80100c4:	e020      	b.n	8010108 <_vfprintf_r+0xe40>
 80100c6:	4b28      	ldr	r3, [pc, #160]	; (8010168 <_vfprintf_r+0xea0>)
 80100c8:	6023      	str	r3, [r4, #0]
 80100ca:	2310      	movs	r3, #16
 80100cc:	6063      	str	r3, [r4, #4]
 80100ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100d2:	3310      	adds	r3, #16
 80100d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80100d8:	3408      	adds	r4, #8
 80100da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100de:	3301      	adds	r3, #1
 80100e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80100e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80100e8:	2b07      	cmp	r3, #7
 80100ea:	dd0c      	ble.n	8010106 <_vfprintf_r+0xe3e>
 80100ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80100f0:	461a      	mov	r2, r3
 80100f2:	69b9      	ldr	r1, [r7, #24]
 80100f4:	69f8      	ldr	r0, [r7, #28]
 80100f6:	f008 fbc3 	bl	8018880 <__sprint_r>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f040 853a 	bne.w	8010b76 <_vfprintf_r+0x18ae>
 8010102:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010106:	3d10      	subs	r5, #16
 8010108:	2d10      	cmp	r5, #16
 801010a:	dcdc      	bgt.n	80100c6 <_vfprintf_r+0xdfe>
 801010c:	4b16      	ldr	r3, [pc, #88]	; (8010168 <_vfprintf_r+0xea0>)
 801010e:	6023      	str	r3, [r4, #0]
 8010110:	462b      	mov	r3, r5
 8010112:	6063      	str	r3, [r4, #4]
 8010114:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010118:	462a      	mov	r2, r5
 801011a:	4413      	add	r3, r2
 801011c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010120:	3408      	adds	r4, #8
 8010122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010126:	3301      	adds	r3, #1
 8010128:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801012c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010130:	2b07      	cmp	r3, #7
 8010132:	dd0c      	ble.n	801014e <_vfprintf_r+0xe86>
 8010134:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010138:	461a      	mov	r2, r3
 801013a:	69b9      	ldr	r1, [r7, #24]
 801013c:	69f8      	ldr	r0, [r7, #28]
 801013e:	f008 fb9f 	bl	8018880 <__sprint_r>
 8010142:	4603      	mov	r3, r0
 8010144:	2b00      	cmp	r3, #0
 8010146:	f040 8518 	bne.w	8010b7a <_vfprintf_r+0x18b2>
 801014a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801014e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010156:	1ad5      	subs	r5, r2, r3
 8010158:	2d00      	cmp	r5, #0
 801015a:	dd4b      	ble.n	80101f4 <_vfprintf_r+0xf2c>
 801015c:	e027      	b.n	80101ae <_vfprintf_r+0xee6>
 801015e:	bf00      	nop
 8010160:	0801a250 	.word	0x0801a250
 8010164:	0801bcc4 	.word	0x0801bcc4
 8010168:	0801bcd4 	.word	0x0801bcd4
 801016c:	4bba      	ldr	r3, [pc, #744]	; (8010458 <_vfprintf_r+0x1190>)
 801016e:	6023      	str	r3, [r4, #0]
 8010170:	2310      	movs	r3, #16
 8010172:	6063      	str	r3, [r4, #4]
 8010174:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010178:	3310      	adds	r3, #16
 801017a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801017e:	3408      	adds	r4, #8
 8010180:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010184:	3301      	adds	r3, #1
 8010186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801018a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801018e:	2b07      	cmp	r3, #7
 8010190:	dd0c      	ble.n	80101ac <_vfprintf_r+0xee4>
 8010192:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010196:	461a      	mov	r2, r3
 8010198:	69b9      	ldr	r1, [r7, #24]
 801019a:	69f8      	ldr	r0, [r7, #28]
 801019c:	f008 fb70 	bl	8018880 <__sprint_r>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f040 84eb 	bne.w	8010b7e <_vfprintf_r+0x18b6>
 80101a8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80101ac:	3d10      	subs	r5, #16
 80101ae:	2d10      	cmp	r5, #16
 80101b0:	dcdc      	bgt.n	801016c <_vfprintf_r+0xea4>
 80101b2:	4ba9      	ldr	r3, [pc, #676]	; (8010458 <_vfprintf_r+0x1190>)
 80101b4:	6023      	str	r3, [r4, #0]
 80101b6:	462b      	mov	r3, r5
 80101b8:	6063      	str	r3, [r4, #4]
 80101ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80101be:	462a      	mov	r2, r5
 80101c0:	4413      	add	r3, r2
 80101c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80101c6:	3408      	adds	r4, #8
 80101c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101cc:	3301      	adds	r3, #1
 80101ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80101d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101d6:	2b07      	cmp	r3, #7
 80101d8:	dd0c      	ble.n	80101f4 <_vfprintf_r+0xf2c>
 80101da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80101de:	461a      	mov	r2, r3
 80101e0:	69b9      	ldr	r1, [r7, #24]
 80101e2:	69f8      	ldr	r0, [r7, #28]
 80101e4:	f008 fb4c 	bl	8018880 <__sprint_r>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f040 84c9 	bne.w	8010b82 <_vfprintf_r+0x18ba>
 80101f0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80101f4:	f406 7380 	and.w	r3, r6, #256	; 0x100
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d124      	bne.n	8010246 <_vfprintf_r+0xf7e>
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6023      	str	r3, [r4, #0]
 8010200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801020a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801020e:	4413      	add	r3, r2
 8010210:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010214:	3408      	adds	r4, #8
 8010216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801021a:	3301      	adds	r3, #1
 801021c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010224:	2b07      	cmp	r3, #7
 8010226:	f340 8405 	ble.w	8010a34 <_vfprintf_r+0x176c>
 801022a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801022e:	461a      	mov	r2, r3
 8010230:	69b9      	ldr	r1, [r7, #24]
 8010232:	69f8      	ldr	r0, [r7, #28]
 8010234:	f008 fb24 	bl	8018880 <__sprint_r>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	f040 84a3 	bne.w	8010b86 <_vfprintf_r+0x18be>
 8010240:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010244:	e3f6      	b.n	8010a34 <_vfprintf_r+0x176c>
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	2b65      	cmp	r3, #101	; 0x65
 801024a:	f340 82e1 	ble.w	8010810 <_vfprintf_r+0x1548>
 801024e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8010252:	f04f 0200 	mov.w	r2, #0
 8010256:	f04f 0300 	mov.w	r3, #0
 801025a:	f7f1 fa4f 	bl	80016fc <__aeabi_dcmpeq>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 809c 	beq.w	801039e <_vfprintf_r+0x10d6>
 8010266:	4b7d      	ldr	r3, [pc, #500]	; (801045c <_vfprintf_r+0x1194>)
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	2301      	movs	r3, #1
 801026c:	6063      	str	r3, [r4, #4]
 801026e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010272:	3301      	adds	r3, #1
 8010274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010278:	3408      	adds	r4, #8
 801027a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801027e:	3301      	adds	r3, #1
 8010280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010288:	2b07      	cmp	r3, #7
 801028a:	dd0c      	ble.n	80102a6 <_vfprintf_r+0xfde>
 801028c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010290:	461a      	mov	r2, r3
 8010292:	69b9      	ldr	r1, [r7, #24]
 8010294:	69f8      	ldr	r0, [r7, #28]
 8010296:	f008 faf3 	bl	8018880 <__sprint_r>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	f040 8474 	bne.w	8010b8a <_vfprintf_r+0x18c2>
 80102a2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80102a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80102aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102ae:	429a      	cmp	r2, r3
 80102b0:	db04      	blt.n	80102bc <_vfprintf_r+0xff4>
 80102b2:	f006 0301 	and.w	r3, r6, #1
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f000 83bc 	beq.w	8010a34 <_vfprintf_r+0x176c>
 80102bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80102c6:	6063      	str	r3, [r4, #4]
 80102c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80102d0:	4413      	add	r3, r2
 80102d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102d6:	3408      	adds	r4, #8
 80102d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102dc:	3301      	adds	r3, #1
 80102de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80102e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102e6:	2b07      	cmp	r3, #7
 80102e8:	dd0c      	ble.n	8010304 <_vfprintf_r+0x103c>
 80102ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80102ee:	461a      	mov	r2, r3
 80102f0:	69b9      	ldr	r1, [r7, #24]
 80102f2:	69f8      	ldr	r0, [r7, #28]
 80102f4:	f008 fac4 	bl	8018880 <__sprint_r>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f040 8447 	bne.w	8010b8e <_vfprintf_r+0x18c6>
 8010300:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010308:	1e5d      	subs	r5, r3, #1
 801030a:	2d00      	cmp	r5, #0
 801030c:	f340 8392 	ble.w	8010a34 <_vfprintf_r+0x176c>
 8010310:	e020      	b.n	8010354 <_vfprintf_r+0x108c>
 8010312:	4b51      	ldr	r3, [pc, #324]	; (8010458 <_vfprintf_r+0x1190>)
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	2310      	movs	r3, #16
 8010318:	6063      	str	r3, [r4, #4]
 801031a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801031e:	3310      	adds	r3, #16
 8010320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010324:	3408      	adds	r4, #8
 8010326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801032a:	3301      	adds	r3, #1
 801032c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010334:	2b07      	cmp	r3, #7
 8010336:	dd0c      	ble.n	8010352 <_vfprintf_r+0x108a>
 8010338:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801033c:	461a      	mov	r2, r3
 801033e:	69b9      	ldr	r1, [r7, #24]
 8010340:	69f8      	ldr	r0, [r7, #28]
 8010342:	f008 fa9d 	bl	8018880 <__sprint_r>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	f040 8422 	bne.w	8010b92 <_vfprintf_r+0x18ca>
 801034e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010352:	3d10      	subs	r5, #16
 8010354:	2d10      	cmp	r5, #16
 8010356:	dcdc      	bgt.n	8010312 <_vfprintf_r+0x104a>
 8010358:	4b3f      	ldr	r3, [pc, #252]	; (8010458 <_vfprintf_r+0x1190>)
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	462b      	mov	r3, r5
 801035e:	6063      	str	r3, [r4, #4]
 8010360:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010364:	462a      	mov	r2, r5
 8010366:	4413      	add	r3, r2
 8010368:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801036c:	3408      	adds	r4, #8
 801036e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010372:	3301      	adds	r3, #1
 8010374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010378:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801037c:	2b07      	cmp	r3, #7
 801037e:	f340 8359 	ble.w	8010a34 <_vfprintf_r+0x176c>
 8010382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010386:	461a      	mov	r2, r3
 8010388:	69b9      	ldr	r1, [r7, #24]
 801038a:	69f8      	ldr	r0, [r7, #28]
 801038c:	f008 fa78 	bl	8018880 <__sprint_r>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	f040 83ff 	bne.w	8010b96 <_vfprintf_r+0x18ce>
 8010398:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801039c:	e34a      	b.n	8010a34 <_vfprintf_r+0x176c>
 801039e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	f300 80c5 	bgt.w	8010532 <_vfprintf_r+0x126a>
 80103a8:	4b2c      	ldr	r3, [pc, #176]	; (801045c <_vfprintf_r+0x1194>)
 80103aa:	6023      	str	r3, [r4, #0]
 80103ac:	2301      	movs	r3, #1
 80103ae:	6063      	str	r3, [r4, #4]
 80103b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103b4:	3301      	adds	r3, #1
 80103b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103ba:	3408      	adds	r4, #8
 80103bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103c0:	3301      	adds	r3, #1
 80103c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103ca:	2b07      	cmp	r3, #7
 80103cc:	dd0c      	ble.n	80103e8 <_vfprintf_r+0x1120>
 80103ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80103d2:	461a      	mov	r2, r3
 80103d4:	69b9      	ldr	r1, [r7, #24]
 80103d6:	69f8      	ldr	r0, [r7, #28]
 80103d8:	f008 fa52 	bl	8018880 <__sprint_r>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f040 83db 	bne.w	8010b9a <_vfprintf_r+0x18d2>
 80103e4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80103e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d108      	bne.n	8010402 <_vfprintf_r+0x113a>
 80103f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <_vfprintf_r+0x113a>
 80103f8:	f006 0301 	and.w	r3, r6, #1
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	f000 8319 	beq.w	8010a34 <_vfprintf_r+0x176c>
 8010402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010406:	6023      	str	r3, [r4, #0]
 8010408:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801040c:	6063      	str	r3, [r4, #4]
 801040e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010416:	4413      	add	r3, r2
 8010418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801041c:	3408      	adds	r4, #8
 801041e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010422:	3301      	adds	r3, #1
 8010424:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010428:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801042c:	2b07      	cmp	r3, #7
 801042e:	dd0c      	ble.n	801044a <_vfprintf_r+0x1182>
 8010430:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010434:	461a      	mov	r2, r3
 8010436:	69b9      	ldr	r1, [r7, #24]
 8010438:	69f8      	ldr	r0, [r7, #28]
 801043a:	f008 fa21 	bl	8018880 <__sprint_r>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	f040 83ac 	bne.w	8010b9e <_vfprintf_r+0x18d6>
 8010446:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801044a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801044e:	425d      	negs	r5, r3
 8010450:	2d00      	cmp	r5, #0
 8010452:	dd49      	ble.n	80104e8 <_vfprintf_r+0x1220>
 8010454:	e025      	b.n	80104a2 <_vfprintf_r+0x11da>
 8010456:	bf00      	nop
 8010458:	0801bcd4 	.word	0x0801bcd4
 801045c:	0801a26c 	.word	0x0801a26c
 8010460:	4bc3      	ldr	r3, [pc, #780]	; (8010770 <_vfprintf_r+0x14a8>)
 8010462:	6023      	str	r3, [r4, #0]
 8010464:	2310      	movs	r3, #16
 8010466:	6063      	str	r3, [r4, #4]
 8010468:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801046c:	3310      	adds	r3, #16
 801046e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010472:	3408      	adds	r4, #8
 8010474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010478:	3301      	adds	r3, #1
 801047a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801047e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010482:	2b07      	cmp	r3, #7
 8010484:	dd0c      	ble.n	80104a0 <_vfprintf_r+0x11d8>
 8010486:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801048a:	461a      	mov	r2, r3
 801048c:	69b9      	ldr	r1, [r7, #24]
 801048e:	69f8      	ldr	r0, [r7, #28]
 8010490:	f008 f9f6 	bl	8018880 <__sprint_r>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	f040 8383 	bne.w	8010ba2 <_vfprintf_r+0x18da>
 801049c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80104a0:	3d10      	subs	r5, #16
 80104a2:	2d10      	cmp	r5, #16
 80104a4:	dcdc      	bgt.n	8010460 <_vfprintf_r+0x1198>
 80104a6:	4bb2      	ldr	r3, [pc, #712]	; (8010770 <_vfprintf_r+0x14a8>)
 80104a8:	6023      	str	r3, [r4, #0]
 80104aa:	462b      	mov	r3, r5
 80104ac:	6063      	str	r3, [r4, #4]
 80104ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104b2:	462a      	mov	r2, r5
 80104b4:	4413      	add	r3, r2
 80104b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104ba:	3408      	adds	r4, #8
 80104bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104c0:	3301      	adds	r3, #1
 80104c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80104c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104ca:	2b07      	cmp	r3, #7
 80104cc:	dd0c      	ble.n	80104e8 <_vfprintf_r+0x1220>
 80104ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80104d2:	461a      	mov	r2, r3
 80104d4:	69b9      	ldr	r1, [r7, #24]
 80104d6:	69f8      	ldr	r0, [r7, #28]
 80104d8:	f008 f9d2 	bl	8018880 <__sprint_r>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f040 8361 	bne.w	8010ba6 <_vfprintf_r+0x18de>
 80104e4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104f0:	6063      	str	r3, [r4, #4]
 80104f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80104fa:	4413      	add	r3, r2
 80104fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010500:	3408      	adds	r4, #8
 8010502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010506:	3301      	adds	r3, #1
 8010508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801050c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010510:	2b07      	cmp	r3, #7
 8010512:	f340 828f 	ble.w	8010a34 <_vfprintf_r+0x176c>
 8010516:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801051a:	461a      	mov	r2, r3
 801051c:	69b9      	ldr	r1, [r7, #24]
 801051e:	69f8      	ldr	r0, [r7, #28]
 8010520:	f008 f9ae 	bl	8018880 <__sprint_r>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	f040 833f 	bne.w	8010baa <_vfprintf_r+0x18e2>
 801052c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010530:	e280      	b.n	8010a34 <_vfprintf_r+0x176c>
 8010532:	68f9      	ldr	r1, [r7, #12]
 8010534:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8010538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801053c:	461a      	mov	r2, r3
 801053e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010542:	4413      	add	r3, r2
 8010544:	1a5b      	subs	r3, r3, r1
 8010546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801054a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801054e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010552:	429a      	cmp	r2, r3
 8010554:	dd03      	ble.n	801055e <_vfprintf_r+0x1296>
 8010556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801055a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801055e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010562:	2b00      	cmp	r3, #0
 8010564:	dd22      	ble.n	80105ac <_vfprintf_r+0x12e4>
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801056e:	6063      	str	r3, [r4, #4]
 8010570:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010578:	4413      	add	r3, r2
 801057a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801057e:	3408      	adds	r4, #8
 8010580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010584:	3301      	adds	r3, #1
 8010586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801058a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801058e:	2b07      	cmp	r3, #7
 8010590:	dd0c      	ble.n	80105ac <_vfprintf_r+0x12e4>
 8010592:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010596:	461a      	mov	r2, r3
 8010598:	69b9      	ldr	r1, [r7, #24]
 801059a:	69f8      	ldr	r0, [r7, #28]
 801059c:	f008 f970 	bl	8018880 <__sprint_r>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	f040 8303 	bne.w	8010bae <_vfprintf_r+0x18e6>
 80105a8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80105ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80105b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80105b4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80105b8:	1ad3      	subs	r3, r2, r3
 80105ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80105be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	dd4c      	ble.n	8010660 <_vfprintf_r+0x1398>
 80105c6:	e024      	b.n	8010612 <_vfprintf_r+0x134a>
 80105c8:	4b69      	ldr	r3, [pc, #420]	; (8010770 <_vfprintf_r+0x14a8>)
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	2310      	movs	r3, #16
 80105ce:	6063      	str	r3, [r4, #4]
 80105d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105d4:	3310      	adds	r3, #16
 80105d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105da:	3408      	adds	r4, #8
 80105dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105e0:	3301      	adds	r3, #1
 80105e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80105e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105ea:	2b07      	cmp	r3, #7
 80105ec:	dd0c      	ble.n	8010608 <_vfprintf_r+0x1340>
 80105ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80105f2:	461a      	mov	r2, r3
 80105f4:	69b9      	ldr	r1, [r7, #24]
 80105f6:	69f8      	ldr	r0, [r7, #28]
 80105f8:	f008 f942 	bl	8018880 <__sprint_r>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f040 82d7 	bne.w	8010bb2 <_vfprintf_r+0x18ea>
 8010604:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801060c:	3b10      	subs	r3, #16
 801060e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010616:	2b10      	cmp	r3, #16
 8010618:	dcd6      	bgt.n	80105c8 <_vfprintf_r+0x1300>
 801061a:	4b55      	ldr	r3, [pc, #340]	; (8010770 <_vfprintf_r+0x14a8>)
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010622:	6063      	str	r3, [r4, #4]
 8010624:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801062c:	4413      	add	r3, r2
 801062e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010632:	3408      	adds	r4, #8
 8010634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010638:	3301      	adds	r3, #1
 801063a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801063e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010642:	2b07      	cmp	r3, #7
 8010644:	dd0c      	ble.n	8010660 <_vfprintf_r+0x1398>
 8010646:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801064a:	461a      	mov	r2, r3
 801064c:	69b9      	ldr	r1, [r7, #24]
 801064e:	69f8      	ldr	r0, [r7, #28]
 8010650:	f008 f916 	bl	8018880 <__sprint_r>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	f040 82ad 	bne.w	8010bb6 <_vfprintf_r+0x18ee>
 801065c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	441a      	add	r2, r3
 8010668:	4613      	mov	r3, r2
 801066a:	60fb      	str	r3, [r7, #12]
 801066c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010674:	429a      	cmp	r2, r3
 8010676:	db03      	blt.n	8010680 <_vfprintf_r+0x13b8>
 8010678:	f006 0301 	and.w	r3, r6, #1
 801067c:	2b00      	cmp	r3, #0
 801067e:	d023      	beq.n	80106c8 <_vfprintf_r+0x1400>
 8010680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801068a:	6063      	str	r3, [r4, #4]
 801068c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010694:	4413      	add	r3, r2
 8010696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801069a:	3408      	adds	r4, #8
 801069c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106a0:	3301      	adds	r3, #1
 80106a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106aa:	2b07      	cmp	r3, #7
 80106ac:	dd0c      	ble.n	80106c8 <_vfprintf_r+0x1400>
 80106ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80106b2:	461a      	mov	r2, r3
 80106b4:	69b9      	ldr	r1, [r7, #24]
 80106b6:	69f8      	ldr	r0, [r7, #28]
 80106b8:	f008 f8e2 	bl	8018880 <__sprint_r>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f040 827b 	bne.w	8010bba <_vfprintf_r+0x18f2>
 80106c4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80106c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80106cc:	461a      	mov	r2, r3
 80106ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80106d2:	4413      	add	r3, r2
 80106d4:	68fa      	ldr	r2, [r7, #12]
 80106d6:	1a9b      	subs	r3, r3, r2
 80106d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80106dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80106e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80106ea:	429a      	cmp	r2, r3
 80106ec:	dd06      	ble.n	80106fc <_vfprintf_r+0x1434>
 80106ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80106f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80106fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010700:	2b00      	cmp	r3, #0
 8010702:	dd22      	ble.n	801074a <_vfprintf_r+0x1482>
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6023      	str	r3, [r4, #0]
 8010708:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801070c:	6063      	str	r3, [r4, #4]
 801070e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010716:	4413      	add	r3, r2
 8010718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801071c:	3408      	adds	r4, #8
 801071e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010722:	3301      	adds	r3, #1
 8010724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801072c:	2b07      	cmp	r3, #7
 801072e:	dd0c      	ble.n	801074a <_vfprintf_r+0x1482>
 8010730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010734:	461a      	mov	r2, r3
 8010736:	69b9      	ldr	r1, [r7, #24]
 8010738:	69f8      	ldr	r0, [r7, #28]
 801073a:	f008 f8a1 	bl	8018880 <__sprint_r>
 801073e:	4603      	mov	r3, r0
 8010740:	2b00      	cmp	r3, #0
 8010742:	f040 823c 	bne.w	8010bbe <_vfprintf_r+0x18f6>
 8010746:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801074a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801074e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010752:	1ad2      	subs	r2, r2, r3
 8010754:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010766:	2b00      	cmp	r3, #0
 8010768:	f340 8164 	ble.w	8010a34 <_vfprintf_r+0x176c>
 801076c:	e027      	b.n	80107be <_vfprintf_r+0x14f6>
 801076e:	bf00      	nop
 8010770:	0801bcd4 	.word	0x0801bcd4
 8010774:	4bb5      	ldr	r3, [pc, #724]	; (8010a4c <_vfprintf_r+0x1784>)
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	2310      	movs	r3, #16
 801077a:	6063      	str	r3, [r4, #4]
 801077c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010780:	3310      	adds	r3, #16
 8010782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010786:	3408      	adds	r4, #8
 8010788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801078c:	3301      	adds	r3, #1
 801078e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010796:	2b07      	cmp	r3, #7
 8010798:	dd0c      	ble.n	80107b4 <_vfprintf_r+0x14ec>
 801079a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801079e:	461a      	mov	r2, r3
 80107a0:	69b9      	ldr	r1, [r7, #24]
 80107a2:	69f8      	ldr	r0, [r7, #28]
 80107a4:	f008 f86c 	bl	8018880 <__sprint_r>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f040 8209 	bne.w	8010bc2 <_vfprintf_r+0x18fa>
 80107b0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80107b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107b8:	3b10      	subs	r3, #16
 80107ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80107be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107c2:	2b10      	cmp	r3, #16
 80107c4:	dcd6      	bgt.n	8010774 <_vfprintf_r+0x14ac>
 80107c6:	4ba1      	ldr	r3, [pc, #644]	; (8010a4c <_vfprintf_r+0x1784>)
 80107c8:	6023      	str	r3, [r4, #0]
 80107ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107ce:	6063      	str	r3, [r4, #4]
 80107d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80107d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107d8:	4413      	add	r3, r2
 80107da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80107de:	3408      	adds	r4, #8
 80107e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107e4:	3301      	adds	r3, #1
 80107e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107ee:	2b07      	cmp	r3, #7
 80107f0:	f340 8120 	ble.w	8010a34 <_vfprintf_r+0x176c>
 80107f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80107f8:	461a      	mov	r2, r3
 80107fa:	69b9      	ldr	r1, [r7, #24]
 80107fc:	69f8      	ldr	r0, [r7, #28]
 80107fe:	f008 f83f 	bl	8018880 <__sprint_r>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	f040 81de 	bne.w	8010bc6 <_vfprintf_r+0x18fe>
 801080a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801080e:	e111      	b.n	8010a34 <_vfprintf_r+0x176c>
 8010810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010814:	2b01      	cmp	r3, #1
 8010816:	dc04      	bgt.n	8010822 <_vfprintf_r+0x155a>
 8010818:	f006 0301 	and.w	r3, r6, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	f000 80c3 	beq.w	80109a8 <_vfprintf_r+0x16e0>
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	6023      	str	r3, [r4, #0]
 8010826:	2301      	movs	r3, #1
 8010828:	6063      	str	r3, [r4, #4]
 801082a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801082e:	3301      	adds	r3, #1
 8010830:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010834:	3408      	adds	r4, #8
 8010836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801083a:	3301      	adds	r3, #1
 801083c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010844:	2b07      	cmp	r3, #7
 8010846:	dd0c      	ble.n	8010862 <_vfprintf_r+0x159a>
 8010848:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801084c:	461a      	mov	r2, r3
 801084e:	69b9      	ldr	r1, [r7, #24]
 8010850:	69f8      	ldr	r0, [r7, #28]
 8010852:	f008 f815 	bl	8018880 <__sprint_r>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	f040 81b6 	bne.w	8010bca <_vfprintf_r+0x1902>
 801085e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	3301      	adds	r3, #1
 8010866:	60fb      	str	r3, [r7, #12]
 8010868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010872:	6063      	str	r3, [r4, #4]
 8010874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801087c:	4413      	add	r3, r2
 801087e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010882:	3408      	adds	r4, #8
 8010884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010888:	3301      	adds	r3, #1
 801088a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801088e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010892:	2b07      	cmp	r3, #7
 8010894:	dd0c      	ble.n	80108b0 <_vfprintf_r+0x15e8>
 8010896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801089a:	461a      	mov	r2, r3
 801089c:	69b9      	ldr	r1, [r7, #24]
 801089e:	69f8      	ldr	r0, [r7, #28]
 80108a0:	f007 ffee 	bl	8018880 <__sprint_r>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f040 8191 	bne.w	8010bce <_vfprintf_r+0x1906>
 80108ac:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80108b0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80108b4:	f04f 0200 	mov.w	r2, #0
 80108b8:	f04f 0300 	mov.w	r3, #0
 80108bc:	f7f0 ff1e 	bl	80016fc <__aeabi_dcmpeq>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d125      	bne.n	8010912 <_vfprintf_r+0x164a>
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108ce:	3b01      	subs	r3, #1
 80108d0:	6063      	str	r3, [r4, #4]
 80108d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80108da:	4413      	add	r3, r2
 80108dc:	3b01      	subs	r3, #1
 80108de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80108e2:	3408      	adds	r4, #8
 80108e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108e8:	3301      	adds	r3, #1
 80108ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108f2:	2b07      	cmp	r3, #7
 80108f4:	dd79      	ble.n	80109ea <_vfprintf_r+0x1722>
 80108f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80108fa:	461a      	mov	r2, r3
 80108fc:	69b9      	ldr	r1, [r7, #24]
 80108fe:	69f8      	ldr	r0, [r7, #28]
 8010900:	f007 ffbe 	bl	8018880 <__sprint_r>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	f040 8163 	bne.w	8010bd2 <_vfprintf_r+0x190a>
 801090c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010910:	e06b      	b.n	80109ea <_vfprintf_r+0x1722>
 8010912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010916:	1e5d      	subs	r5, r3, #1
 8010918:	2d00      	cmp	r5, #0
 801091a:	dd66      	ble.n	80109ea <_vfprintf_r+0x1722>
 801091c:	e020      	b.n	8010960 <_vfprintf_r+0x1698>
 801091e:	4b4b      	ldr	r3, [pc, #300]	; (8010a4c <_vfprintf_r+0x1784>)
 8010920:	6023      	str	r3, [r4, #0]
 8010922:	2310      	movs	r3, #16
 8010924:	6063      	str	r3, [r4, #4]
 8010926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801092a:	3310      	adds	r3, #16
 801092c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010930:	3408      	adds	r4, #8
 8010932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010936:	3301      	adds	r3, #1
 8010938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801093c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010940:	2b07      	cmp	r3, #7
 8010942:	dd0c      	ble.n	801095e <_vfprintf_r+0x1696>
 8010944:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010948:	461a      	mov	r2, r3
 801094a:	69b9      	ldr	r1, [r7, #24]
 801094c:	69f8      	ldr	r0, [r7, #28]
 801094e:	f007 ff97 	bl	8018880 <__sprint_r>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	f040 813e 	bne.w	8010bd6 <_vfprintf_r+0x190e>
 801095a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801095e:	3d10      	subs	r5, #16
 8010960:	2d10      	cmp	r5, #16
 8010962:	dcdc      	bgt.n	801091e <_vfprintf_r+0x1656>
 8010964:	4b39      	ldr	r3, [pc, #228]	; (8010a4c <_vfprintf_r+0x1784>)
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	462b      	mov	r3, r5
 801096a:	6063      	str	r3, [r4, #4]
 801096c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010970:	462a      	mov	r2, r5
 8010972:	4413      	add	r3, r2
 8010974:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010978:	3408      	adds	r4, #8
 801097a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801097e:	3301      	adds	r3, #1
 8010980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010988:	2b07      	cmp	r3, #7
 801098a:	dd2e      	ble.n	80109ea <_vfprintf_r+0x1722>
 801098c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010990:	461a      	mov	r2, r3
 8010992:	69b9      	ldr	r1, [r7, #24]
 8010994:	69f8      	ldr	r0, [r7, #28]
 8010996:	f007 ff73 	bl	8018880 <__sprint_r>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	f040 811c 	bne.w	8010bda <_vfprintf_r+0x1912>
 80109a2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80109a6:	e020      	b.n	80109ea <_vfprintf_r+0x1722>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	6023      	str	r3, [r4, #0]
 80109ac:	2301      	movs	r3, #1
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109b4:	3301      	adds	r3, #1
 80109b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80109ba:	3408      	adds	r4, #8
 80109bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109c0:	3301      	adds	r3, #1
 80109c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80109c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80109ca:	2b07      	cmp	r3, #7
 80109cc:	dd0e      	ble.n	80109ec <_vfprintf_r+0x1724>
 80109ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80109d2:	461a      	mov	r2, r3
 80109d4:	69b9      	ldr	r1, [r7, #24]
 80109d6:	69f8      	ldr	r0, [r7, #28]
 80109d8:	f007 ff52 	bl	8018880 <__sprint_r>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f040 80fd 	bne.w	8010bde <_vfprintf_r+0x1916>
 80109e4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80109e8:	e000      	b.n	80109ec <_vfprintf_r+0x1724>
 80109ea:	bf00      	nop
 80109ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80109f6:	6063      	str	r3, [r4, #4]
 80109f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80109fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010a00:	4413      	add	r3, r2
 8010a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a06:	3408      	adds	r4, #8
 8010a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a16:	2b07      	cmp	r3, #7
 8010a18:	dd0c      	ble.n	8010a34 <_vfprintf_r+0x176c>
 8010a1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010a1e:	461a      	mov	r2, r3
 8010a20:	69b9      	ldr	r1, [r7, #24]
 8010a22:	69f8      	ldr	r0, [r7, #28]
 8010a24:	f007 ff2c 	bl	8018880 <__sprint_r>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f040 80d9 	bne.w	8010be2 <_vfprintf_r+0x191a>
 8010a30:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010a34:	f006 0304 	and.w	r3, r6, #4
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d04d      	beq.n	8010ad8 <_vfprintf_r+0x1810>
 8010a3c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010a44:	1ad5      	subs	r5, r2, r3
 8010a46:	2d00      	cmp	r5, #0
 8010a48:	dd46      	ble.n	8010ad8 <_vfprintf_r+0x1810>
 8010a4a:	e022      	b.n	8010a92 <_vfprintf_r+0x17ca>
 8010a4c:	0801bcd4 	.word	0x0801bcd4
 8010a50:	4b76      	ldr	r3, [pc, #472]	; (8010c2c <_vfprintf_r+0x1964>)
 8010a52:	6023      	str	r3, [r4, #0]
 8010a54:	2310      	movs	r3, #16
 8010a56:	6063      	str	r3, [r4, #4]
 8010a58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a5c:	3310      	adds	r3, #16
 8010a5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a62:	3408      	adds	r4, #8
 8010a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a68:	3301      	adds	r3, #1
 8010a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a72:	2b07      	cmp	r3, #7
 8010a74:	dd0c      	ble.n	8010a90 <_vfprintf_r+0x17c8>
 8010a76:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	69b9      	ldr	r1, [r7, #24]
 8010a7e:	69f8      	ldr	r0, [r7, #28]
 8010a80:	f007 fefe 	bl	8018880 <__sprint_r>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f040 80ad 	bne.w	8010be6 <_vfprintf_r+0x191e>
 8010a8c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010a90:	3d10      	subs	r5, #16
 8010a92:	2d10      	cmp	r5, #16
 8010a94:	dcdc      	bgt.n	8010a50 <_vfprintf_r+0x1788>
 8010a96:	4b65      	ldr	r3, [pc, #404]	; (8010c2c <_vfprintf_r+0x1964>)
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	462b      	mov	r3, r5
 8010a9c:	6063      	str	r3, [r4, #4]
 8010a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010aa2:	462a      	mov	r2, r5
 8010aa4:	4413      	add	r3, r2
 8010aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010aaa:	3408      	adds	r4, #8
 8010aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010aba:	2b07      	cmp	r3, #7
 8010abc:	dd0c      	ble.n	8010ad8 <_vfprintf_r+0x1810>
 8010abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	69b9      	ldr	r1, [r7, #24]
 8010ac6:	69f8      	ldr	r0, [r7, #28]
 8010ac8:	f007 feda 	bl	8018880 <__sprint_r>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f040 808b 	bne.w	8010bea <_vfprintf_r+0x1922>
 8010ad4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010ad8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010adc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	bfb8      	it	lt
 8010ae4:	4613      	movlt	r3, r2
 8010ae6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8010aea:	4413      	add	r3, r2
 8010aec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d009      	beq.n	8010b0c <_vfprintf_r+0x1844>
 8010af8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010afc:	461a      	mov	r2, r3
 8010afe:	69b9      	ldr	r1, [r7, #24]
 8010b00:	69f8      	ldr	r0, [r7, #28]
 8010b02:	f007 febd 	bl	8018880 <__sprint_r>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d170      	bne.n	8010bee <_vfprintf_r+0x1926>
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b12:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f43e ac4b 	beq.w	800f3b6 <_vfprintf_r+0xee>
 8010b20:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010b24:	69f8      	ldr	r0, [r7, #28]
 8010b26:	f000 fa31 	bl	8010f8c <_free_r>
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010b30:	f7fe bc41 	b.w	800f3b6 <_vfprintf_r+0xee>
 8010b34:	bf00      	nop
 8010b36:	e000      	b.n	8010b3a <_vfprintf_r+0x1872>
 8010b38:	bf00      	nop
 8010b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d009      	beq.n	8010b56 <_vfprintf_r+0x188e>
 8010b42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010b46:	461a      	mov	r2, r3
 8010b48:	69b9      	ldr	r1, [r7, #24]
 8010b4a:	69f8      	ldr	r0, [r7, #28]
 8010b4c:	f007 fe98 	bl	8018880 <__sprint_r>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d14d      	bne.n	8010bf2 <_vfprintf_r+0x192a>
 8010b56:	2300      	movs	r3, #0
 8010b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010b5c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8010b60:	e048      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b62:	bf00      	nop
 8010b64:	e046      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b66:	bf00      	nop
 8010b68:	e044      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b6a:	bf00      	nop
 8010b6c:	e042      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b6e:	bf00      	nop
 8010b70:	e040      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b72:	bf00      	nop
 8010b74:	e03e      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b76:	bf00      	nop
 8010b78:	e03c      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b7a:	bf00      	nop
 8010b7c:	e03a      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b7e:	bf00      	nop
 8010b80:	e038      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b82:	bf00      	nop
 8010b84:	e036      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b86:	bf00      	nop
 8010b88:	e034      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b8a:	bf00      	nop
 8010b8c:	e032      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b8e:	bf00      	nop
 8010b90:	e030      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b92:	bf00      	nop
 8010b94:	e02e      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b96:	bf00      	nop
 8010b98:	e02c      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b9a:	bf00      	nop
 8010b9c:	e02a      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010b9e:	bf00      	nop
 8010ba0:	e028      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010ba2:	bf00      	nop
 8010ba4:	e026      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010ba6:	bf00      	nop
 8010ba8:	e024      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010baa:	bf00      	nop
 8010bac:	e022      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bae:	bf00      	nop
 8010bb0:	e020      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bb2:	bf00      	nop
 8010bb4:	e01e      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bb6:	bf00      	nop
 8010bb8:	e01c      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bba:	bf00      	nop
 8010bbc:	e01a      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bbe:	bf00      	nop
 8010bc0:	e018      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bc2:	bf00      	nop
 8010bc4:	e016      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bc6:	bf00      	nop
 8010bc8:	e014      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bca:	bf00      	nop
 8010bcc:	e012      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bce:	bf00      	nop
 8010bd0:	e010      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bd2:	bf00      	nop
 8010bd4:	e00e      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bd6:	bf00      	nop
 8010bd8:	e00c      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bda:	bf00      	nop
 8010bdc:	e00a      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bde:	bf00      	nop
 8010be0:	e008      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010be2:	bf00      	nop
 8010be4:	e006      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010be6:	bf00      	nop
 8010be8:	e004      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bea:	bf00      	nop
 8010bec:	e002      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bee:	bf00      	nop
 8010bf0:	e000      	b.n	8010bf4 <_vfprintf_r+0x192c>
 8010bf2:	bf00      	nop
 8010bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d004      	beq.n	8010c06 <_vfprintf_r+0x193e>
 8010bfc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010c00:	69f8      	ldr	r0, [r7, #28]
 8010c02:	f000 f9c3 	bl	8010f8c <_free_r>
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <_vfprintf_r+0x1954>
 8010c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010c1a:	e001      	b.n	8010c20 <_vfprintf_r+0x1958>
 8010c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c20:	4618      	mov	r0, r3
 8010c22:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8010c26:	46bd      	mov	sp, r7
 8010c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c2c:	0801bcc4 	.word	0x0801bcc4

08010c30 <exponent>:
 8010c30:	b4b0      	push	{r4, r5, r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
 8010c3c:	68fd      	ldr	r5, [r7, #12]
 8010c3e:	462b      	mov	r3, r5
 8010c40:	1c5d      	adds	r5, r3, #1
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	b2d2      	uxtb	r2, r2
 8010c46:	701a      	strb	r2, [r3, #0]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	da07      	bge.n	8010c5e <exponent+0x2e>
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	425b      	negs	r3, r3
 8010c52:	60bb      	str	r3, [r7, #8]
 8010c54:	462b      	mov	r3, r5
 8010c56:	1c5d      	adds	r5, r3, #1
 8010c58:	222d      	movs	r2, #45	; 0x2d
 8010c5a:	701a      	strb	r2, [r3, #0]
 8010c5c:	e003      	b.n	8010c66 <exponent+0x36>
 8010c5e:	462b      	mov	r3, r5
 8010c60:	1c5d      	adds	r5, r3, #1
 8010c62:	222b      	movs	r2, #43	; 0x2b
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	f107 0410 	add.w	r4, r7, #16
 8010c6a:	3407      	adds	r4, #7
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	2b09      	cmp	r3, #9
 8010c70:	dd2e      	ble.n	8010cd0 <exponent+0xa0>
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	4b1f      	ldr	r3, [pc, #124]	; (8010cf4 <exponent+0xc4>)
 8010c76:	fb83 1302 	smull	r1, r3, r3, r2
 8010c7a:	1099      	asrs	r1, r3, #2
 8010c7c:	17d3      	asrs	r3, r2, #31
 8010c7e:	1ac9      	subs	r1, r1, r3
 8010c80:	460b      	mov	r3, r1
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	440b      	add	r3, r1
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	1ad1      	subs	r1, r2, r3
 8010c8a:	b2cb      	uxtb	r3, r1
 8010c8c:	3c01      	subs	r4, #1
 8010c8e:	3330      	adds	r3, #48	; 0x30
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	7023      	strb	r3, [r4, #0]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	4a17      	ldr	r2, [pc, #92]	; (8010cf4 <exponent+0xc4>)
 8010c98:	fb82 1203 	smull	r1, r2, r2, r3
 8010c9c:	1092      	asrs	r2, r2, #2
 8010c9e:	17db      	asrs	r3, r3, #31
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	60bb      	str	r3, [r7, #8]
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2b09      	cmp	r3, #9
 8010ca8:	dce3      	bgt.n	8010c72 <exponent+0x42>
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	b2db      	uxtb	r3, r3
 8010cae:	3c01      	subs	r4, #1
 8010cb0:	3330      	adds	r3, #48	; 0x30
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	7023      	strb	r3, [r4, #0]
 8010cb6:	e005      	b.n	8010cc4 <exponent+0x94>
 8010cb8:	4622      	mov	r2, r4
 8010cba:	1c54      	adds	r4, r2, #1
 8010cbc:	462b      	mov	r3, r5
 8010cbe:	1c5d      	adds	r5, r3, #1
 8010cc0:	7812      	ldrb	r2, [r2, #0]
 8010cc2:	701a      	strb	r2, [r3, #0]
 8010cc4:	f107 0310 	add.w	r3, r7, #16
 8010cc8:	3307      	adds	r3, #7
 8010cca:	429c      	cmp	r4, r3
 8010ccc:	d3f4      	bcc.n	8010cb8 <exponent+0x88>
 8010cce:	e00a      	b.n	8010ce6 <exponent+0xb6>
 8010cd0:	462b      	mov	r3, r5
 8010cd2:	1c5d      	adds	r5, r3, #1
 8010cd4:	2230      	movs	r2, #48	; 0x30
 8010cd6:	701a      	strb	r2, [r3, #0]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	b2da      	uxtb	r2, r3
 8010cdc:	462b      	mov	r3, r5
 8010cde:	1c5d      	adds	r5, r3, #1
 8010ce0:	3230      	adds	r2, #48	; 0x30
 8010ce2:	b2d2      	uxtb	r2, r2
 8010ce4:	701a      	strb	r2, [r3, #0]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	1aeb      	subs	r3, r5, r3
 8010cea:	4618      	mov	r0, r3
 8010cec:	371c      	adds	r7, #28
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bcb0      	pop	{r4, r5, r7}
 8010cf2:	4770      	bx	lr
 8010cf4:	66666667 	.word	0x66666667

08010cf8 <vsnprintf>:
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af02      	add	r7, sp, #8
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
 8010d04:	603b      	str	r3, [r7, #0]
 8010d06:	4b07      	ldr	r3, [pc, #28]	; (8010d24 <vsnprintf+0x2c>)
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68ba      	ldr	r2, [r7, #8]
 8010d12:	68f9      	ldr	r1, [r7, #12]
 8010d14:	f007 ff33 	bl	8018b7e <_vsnprintf_r>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	20000820 	.word	0x20000820

08010d28 <vsprintf>:
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
 8010d34:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <vsprintf+0x24>)
 8010d36:	6818      	ldr	r0, [r3, #0]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	68f9      	ldr	r1, [r7, #12]
 8010d3e:	f007 ff5d 	bl	8018bfc <_vsprintf_r>
 8010d42:	4603      	mov	r3, r0
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	20000820 	.word	0x20000820

08010d50 <_write_r>:
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	603b      	str	r3, [r7, #0]
 8010d5e:	4b0d      	ldr	r3, [pc, #52]	; (8010d94 <_write_r+0x44>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	6879      	ldr	r1, [r7, #4]
 8010d68:	68b8      	ldr	r0, [r7, #8]
 8010d6a:	f7f2 fc9d 	bl	80036a8 <_write>
 8010d6e:	6178      	str	r0, [r7, #20]
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d76:	d107      	bne.n	8010d88 <_write_r+0x38>
 8010d78:	4b06      	ldr	r3, [pc, #24]	; (8010d94 <_write_r+0x44>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d003      	beq.n	8010d88 <_write_r+0x38>
 8010d80:	4b04      	ldr	r3, [pc, #16]	; (8010d94 <_write_r+0x44>)
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3718      	adds	r7, #24
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	2000598c 	.word	0x2000598c

08010d98 <__swsetup_r>:
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	460c      	mov	r4, r1
 8010da2:	4b49      	ldr	r3, [pc, #292]	; (8010ec8 <__swsetup_r+0x130>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	60fb      	str	r3, [r7, #12]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d006      	beq.n	8010dbc <__swsetup_r+0x24>
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d102      	bne.n	8010dbc <__swsetup_r+0x24>
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f7fa fb56 	bl	800b468 <__sinit>
 8010dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	f003 0308 	and.w	r3, r3, #8
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d138      	bne.n	8010e3c <__swsetup_r+0xa4>
 8010dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	f003 0310 	and.w	r3, r3, #16
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10b      	bne.n	8010df0 <__swsetup_r+0x58>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2209      	movs	r2, #9
 8010ddc:	601a      	str	r2, [r3, #0]
 8010dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de6:	b21b      	sxth	r3, r3
 8010de8:	81a3      	strh	r3, [r4, #12]
 8010dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dee:	e066      	b.n	8010ebe <__swsetup_r+0x126>
 8010df0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	f003 0304 	and.w	r3, r3, #4
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d018      	beq.n	8010e30 <__swsetup_r+0x98>
 8010dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00b      	beq.n	8010e1c <__swsetup_r+0x84>
 8010e04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e06:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d004      	beq.n	8010e18 <__swsetup_r+0x80>
 8010e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e10:	4619      	mov	r1, r3
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 f8ba 	bl	8010f8c <_free_r>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e24:	b21b      	sxth	r3, r3
 8010e26:	81a3      	strh	r3, [r4, #12]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	6063      	str	r3, [r4, #4]
 8010e2c:	6923      	ldr	r3, [r4, #16]
 8010e2e:	6023      	str	r3, [r4, #0]
 8010e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e34:	f043 0308 	orr.w	r3, r3, #8
 8010e38:	b21b      	sxth	r3, r3
 8010e3a:	81a3      	strh	r3, [r4, #12]
 8010e3c:	6923      	ldr	r3, [r4, #16]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d111      	bne.n	8010e66 <__swsetup_r+0xce>
 8010e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d006      	beq.n	8010e5e <__swsetup_r+0xc6>
 8010e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d003      	beq.n	8010e66 <__swsetup_r+0xce>
 8010e5e:	4621      	mov	r1, r4
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 fc8d 	bl	8011780 <__smakebuf_r>
 8010e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	f003 0301 	and.w	r3, r3, #1
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d005      	beq.n	8010e80 <__swsetup_r+0xe8>
 8010e74:	2300      	movs	r3, #0
 8010e76:	60a3      	str	r3, [r4, #8]
 8010e78:	6963      	ldr	r3, [r4, #20]
 8010e7a:	425b      	negs	r3, r3
 8010e7c:	61a3      	str	r3, [r4, #24]
 8010e7e:	e00a      	b.n	8010e96 <__swsetup_r+0xfe>
 8010e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	f003 0302 	and.w	r3, r3, #2
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <__swsetup_r+0xfa>
 8010e8e:	6963      	ldr	r3, [r4, #20]
 8010e90:	e000      	b.n	8010e94 <__swsetup_r+0xfc>
 8010e92:	2300      	movs	r3, #0
 8010e94:	60a3      	str	r3, [r4, #8]
 8010e96:	6923      	ldr	r3, [r4, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d10f      	bne.n	8010ebc <__swsetup_r+0x124>
 8010e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d008      	beq.n	8010ebc <__swsetup_r+0x124>
 8010eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eb2:	b21b      	sxth	r3, r3
 8010eb4:	81a3      	strh	r3, [r4, #12]
 8010eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eba:	e000      	b.n	8010ebe <__swsetup_r+0x126>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	3714      	adds	r7, #20
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	bd90      	pop	{r4, r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	20000820 	.word	0x20000820

08010ecc <__xpg_strerror_r>:
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	607a      	str	r2, [r7, #4]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	613b      	str	r3, [r7, #16]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <__xpg_strerror_r+0x1a>
 8010ee2:	2322      	movs	r3, #34	; 0x22
 8010ee4:	e02c      	b.n	8010f40 <__xpg_strerror_r+0x74>
 8010ee6:	4b18      	ldr	r3, [pc, #96]	; (8010f48 <__xpg_strerror_r+0x7c>)
 8010ee8:	6818      	ldr	r0, [r3, #0]
 8010eea:	f107 0310 	add.w	r3, r7, #16
 8010eee:	2201      	movs	r2, #1
 8010ef0:	68f9      	ldr	r1, [r7, #12]
 8010ef2:	f000 fd73 	bl	80119dc <_strerror_r>
 8010ef6:	6178      	str	r0, [r7, #20]
 8010ef8:	6978      	ldr	r0, [r7, #20]
 8010efa:	f7ef f961 	bl	80001c0 <strlen>
 8010efe:	4602      	mov	r2, r0
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d80e      	bhi.n	8010f24 <__xpg_strerror_r+0x58>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	6979      	ldr	r1, [r7, #20]
 8010f0e:	68b8      	ldr	r0, [r7, #8]
 8010f10:	f7f0 fc46 	bl	80017a0 <memcpy>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	3b01      	subs	r3, #1
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	4413      	add	r3, r2
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	701a      	strb	r2, [r3, #0]
 8010f20:	2322      	movs	r3, #34	; 0x22
 8010f22:	e00d      	b.n	8010f40 <__xpg_strerror_r+0x74>
 8010f24:	6979      	ldr	r1, [r7, #20]
 8010f26:	68b8      	ldr	r0, [r7, #8]
 8010f28:	f7fb fcba 	bl	800c8a0 <strcpy>
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d103      	bne.n	8010f3a <__xpg_strerror_r+0x6e>
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d001      	beq.n	8010f3e <__xpg_strerror_r+0x72>
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	e000      	b.n	8010f40 <__xpg_strerror_r+0x74>
 8010f3e:	2316      	movs	r3, #22
 8010f40:	4618      	mov	r0, r3
 8010f42:	3718      	adds	r7, #24
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	20000820 	.word	0x20000820

08010f4c <_close_r>:
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
 8010f56:	4b0c      	ldr	r3, [pc, #48]	; (8010f88 <_close_r+0x3c>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	601a      	str	r2, [r3, #0]
 8010f5c:	6838      	ldr	r0, [r7, #0]
 8010f5e:	f7f2 fbbf 	bl	80036e0 <_close>
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f6a:	d107      	bne.n	8010f7c <_close_r+0x30>
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <_close_r+0x3c>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d003      	beq.n	8010f7c <_close_r+0x30>
 8010f74:	4b04      	ldr	r3, [pc, #16]	; (8010f88 <_close_r+0x3c>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	601a      	str	r2, [r3, #0]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	2000598c 	.word	0x2000598c

08010f8c <_free_r>:
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b08c      	sub	sp, #48	; 0x30
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 8163 	beq.w	8011264 <_free_r+0x2d8>
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f006 fce1 	bl	8017966 <__malloc_lock>
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	3b08      	subs	r3, #8
 8010fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	61bb      	str	r3, [r7, #24]
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	f023 0301 	bic.w	r3, r3, #1
 8010fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbc:	4413      	add	r3, r2
 8010fbe:	617b      	str	r3, [r7, #20]
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	f023 0303 	bic.w	r3, r3, #3
 8010fc8:	613b      	str	r3, [r7, #16]
 8010fca:	4b91      	ldr	r3, [pc, #580]	; (8011210 <_free_r+0x284>)
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	697a      	ldr	r2, [r7, #20]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d137      	bne.n	8011044 <_free_r+0xb8>
 8010fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	4413      	add	r3, r2
 8010fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	f003 0301 	and.w	r3, r3, #1
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d117      	bne.n	8011016 <_free_r+0x8a>
 8010fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60fb      	str	r3, [r7, #12]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	425b      	negs	r3, r3
 8010ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ff2:	4413      	add	r3, r2
 8010ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	627b      	str	r3, [r7, #36]	; 0x24
 8011004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	623b      	str	r3, [r7, #32]
 801100a:	6a3b      	ldr	r3, [r7, #32]
 801100c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801100e:	60da      	str	r2, [r3, #12]
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	6a3a      	ldr	r2, [r7, #32]
 8011014:	609a      	str	r2, [r3, #8]
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	f043 0201 	orr.w	r2, r3, #1
 801101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101e:	605a      	str	r2, [r3, #4]
 8011020:	4a7b      	ldr	r2, [pc, #492]	; (8011210 <_free_r+0x284>)
 8011022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011024:	6093      	str	r3, [r2, #8]
 8011026:	4b7b      	ldr	r3, [pc, #492]	; (8011214 <_free_r+0x288>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801102c:	429a      	cmp	r2, r3
 801102e:	d305      	bcc.n	801103c <_free_r+0xb0>
 8011030:	4b79      	ldr	r3, [pc, #484]	; (8011218 <_free_r+0x28c>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4619      	mov	r1, r3
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f918 	bl	801126c <_malloc_trim_r>
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f006 fc9b 	bl	8017978 <__malloc_unlock>
 8011042:	e110      	b.n	8011266 <_free_r+0x2da>
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	605a      	str	r2, [r3, #4]
 801104a:	2300      	movs	r3, #0
 801104c:	61fb      	str	r3, [r7, #28]
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	f003 0301 	and.w	r3, r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	d11f      	bne.n	8011098 <_free_r+0x10c>
 8011058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	60fb      	str	r3, [r7, #12]
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	425b      	negs	r3, r3
 8011062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011064:	4413      	add	r3, r2
 8011066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	4413      	add	r3, r2
 801106e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011072:	689b      	ldr	r3, [r3, #8]
 8011074:	4a69      	ldr	r2, [pc, #420]	; (801121c <_free_r+0x290>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d102      	bne.n	8011080 <_free_r+0xf4>
 801107a:	2301      	movs	r3, #1
 801107c:	61fb      	str	r3, [r7, #28]
 801107e:	e00b      	b.n	8011098 <_free_r+0x10c>
 8011080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	627b      	str	r3, [r7, #36]	; 0x24
 8011086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	623b      	str	r3, [r7, #32]
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011090:	60da      	str	r2, [r3, #12]
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	6a3a      	ldr	r2, [r7, #32]
 8011096:	609a      	str	r2, [r3, #8]
 8011098:	697a      	ldr	r2, [r7, #20]
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	4413      	add	r3, r2
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	f003 0301 	and.w	r3, r3, #1
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d127      	bne.n	80110f8 <_free_r+0x16c>
 80110a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	4413      	add	r3, r2
 80110ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d114      	bne.n	80110e0 <_free_r+0x154>
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	4a58      	ldr	r2, [pc, #352]	; (801121c <_free_r+0x290>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d10f      	bne.n	80110e0 <_free_r+0x154>
 80110c0:	2301      	movs	r3, #1
 80110c2:	61fb      	str	r3, [r7, #28]
 80110c4:	4b55      	ldr	r3, [pc, #340]	; (801121c <_free_r+0x290>)
 80110c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110c8:	60da      	str	r2, [r3, #12]
 80110ca:	4a54      	ldr	r2, [pc, #336]	; (801121c <_free_r+0x290>)
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	6093      	str	r3, [r2, #8]
 80110d0:	4a52      	ldr	r2, [pc, #328]	; (801121c <_free_r+0x290>)
 80110d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d4:	60da      	str	r2, [r3, #12]
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	68da      	ldr	r2, [r3, #12]
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	609a      	str	r2, [r3, #8]
 80110de:	e00b      	b.n	80110f8 <_free_r+0x16c>
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	627b      	str	r3, [r7, #36]	; 0x24
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	623b      	str	r3, [r7, #32]
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f0:	60da      	str	r2, [r3, #12]
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	6a3a      	ldr	r2, [r7, #32]
 80110f6:	609a      	str	r2, [r3, #8]
 80110f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110fa:	f043 0201 	orr.w	r2, r3, #1
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	605a      	str	r2, [r3, #4]
 8011102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011106:	4413      	add	r3, r2
 8011108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f040 80a4 	bne.w	801125c <_free_r+0x2d0>
 8011114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801111a:	d228      	bcs.n	801116e <_free_r+0x1e2>
 801111c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111e:	08db      	lsrs	r3, r3, #3
 8011120:	60bb      	str	r3, [r7, #8]
 8011122:	4b3b      	ldr	r3, [pc, #236]	; (8011210 <_free_r+0x284>)
 8011124:	685a      	ldr	r2, [r3, #4]
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	2b00      	cmp	r3, #0
 801112a:	da00      	bge.n	801112e <_free_r+0x1a2>
 801112c:	3303      	adds	r3, #3
 801112e:	109b      	asrs	r3, r3, #2
 8011130:	4619      	mov	r1, r3
 8011132:	2301      	movs	r3, #1
 8011134:	408b      	lsls	r3, r1
 8011136:	4936      	ldr	r1, [pc, #216]	; (8011210 <_free_r+0x284>)
 8011138:	4313      	orrs	r3, r2
 801113a:	604b      	str	r3, [r1, #4]
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3301      	adds	r3, #1
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	4a32      	ldr	r2, [pc, #200]	; (8011210 <_free_r+0x284>)
 8011146:	4413      	add	r3, r2
 8011148:	3b08      	subs	r3, #8
 801114a:	627b      	str	r3, [r7, #36]	; 0x24
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	689b      	ldr	r3, [r3, #8]
 8011150:	623b      	str	r3, [r7, #32]
 8011152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011156:	60da      	str	r2, [r3, #12]
 8011158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115a:	6a3a      	ldr	r2, [r7, #32]
 801115c:	609a      	str	r2, [r3, #8]
 801115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011162:	609a      	str	r2, [r3, #8]
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	689a      	ldr	r2, [r3, #8]
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	60da      	str	r2, [r3, #12]
 801116c:	e076      	b.n	801125c <_free_r+0x2d0>
 801116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011170:	0a5b      	lsrs	r3, r3, #9
 8011172:	2b00      	cmp	r3, #0
 8011174:	d102      	bne.n	801117c <_free_r+0x1f0>
 8011176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011178:	08db      	lsrs	r3, r3, #3
 801117a:	e02b      	b.n	80111d4 <_free_r+0x248>
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	0a5b      	lsrs	r3, r3, #9
 8011180:	2b04      	cmp	r3, #4
 8011182:	d803      	bhi.n	801118c <_free_r+0x200>
 8011184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011186:	099b      	lsrs	r3, r3, #6
 8011188:	3338      	adds	r3, #56	; 0x38
 801118a:	e023      	b.n	80111d4 <_free_r+0x248>
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	0a5b      	lsrs	r3, r3, #9
 8011190:	2b14      	cmp	r3, #20
 8011192:	d803      	bhi.n	801119c <_free_r+0x210>
 8011194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011196:	0a5b      	lsrs	r3, r3, #9
 8011198:	335b      	adds	r3, #91	; 0x5b
 801119a:	e01b      	b.n	80111d4 <_free_r+0x248>
 801119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119e:	0a5b      	lsrs	r3, r3, #9
 80111a0:	2b54      	cmp	r3, #84	; 0x54
 80111a2:	d803      	bhi.n	80111ac <_free_r+0x220>
 80111a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a6:	0b1b      	lsrs	r3, r3, #12
 80111a8:	336e      	adds	r3, #110	; 0x6e
 80111aa:	e013      	b.n	80111d4 <_free_r+0x248>
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	0a5b      	lsrs	r3, r3, #9
 80111b0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80111b4:	d803      	bhi.n	80111be <_free_r+0x232>
 80111b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b8:	0bdb      	lsrs	r3, r3, #15
 80111ba:	3377      	adds	r3, #119	; 0x77
 80111bc:	e00a      	b.n	80111d4 <_free_r+0x248>
 80111be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c0:	0a5b      	lsrs	r3, r3, #9
 80111c2:	f240 5254 	movw	r2, #1364	; 0x554
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d803      	bhi.n	80111d2 <_free_r+0x246>
 80111ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111cc:	0c9b      	lsrs	r3, r3, #18
 80111ce:	337c      	adds	r3, #124	; 0x7c
 80111d0:	e000      	b.n	80111d4 <_free_r+0x248>
 80111d2:	237e      	movs	r3, #126	; 0x7e
 80111d4:	60bb      	str	r3, [r7, #8]
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	3301      	adds	r3, #1
 80111da:	005b      	lsls	r3, r3, #1
 80111dc:	009b      	lsls	r3, r3, #2
 80111de:	4a0c      	ldr	r2, [pc, #48]	; (8011210 <_free_r+0x284>)
 80111e0:	4413      	add	r3, r2
 80111e2:	3b08      	subs	r3, #8
 80111e4:	627b      	str	r3, [r7, #36]	; 0x24
 80111e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	623b      	str	r3, [r7, #32]
 80111ec:	6a3a      	ldr	r2, [r7, #32]
 80111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d118      	bne.n	8011226 <_free_r+0x29a>
 80111f4:	4b06      	ldr	r3, [pc, #24]	; (8011210 <_free_r+0x284>)
 80111f6:	685a      	ldr	r2, [r3, #4]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	da00      	bge.n	8011200 <_free_r+0x274>
 80111fe:	3303      	adds	r3, #3
 8011200:	109b      	asrs	r3, r3, #2
 8011202:	4619      	mov	r1, r3
 8011204:	2301      	movs	r3, #1
 8011206:	408b      	lsls	r3, r1
 8011208:	4901      	ldr	r1, [pc, #4]	; (8011210 <_free_r+0x284>)
 801120a:	4313      	orrs	r3, r2
 801120c:	604b      	str	r3, [r1, #4]
 801120e:	e018      	b.n	8011242 <_free_r+0x2b6>
 8011210:	20000824 	.word	0x20000824
 8011214:	20000c2c 	.word	0x20000c2c
 8011218:	200041dc 	.word	0x200041dc
 801121c:	2000082c 	.word	0x2000082c
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	623b      	str	r3, [r7, #32]
 8011226:	6a3a      	ldr	r2, [r7, #32]
 8011228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122a:	429a      	cmp	r2, r3
 801122c:	d006      	beq.n	801123c <_free_r+0x2b0>
 801122e:	6a3b      	ldr	r3, [r7, #32]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	f023 0303 	bic.w	r3, r3, #3
 8011236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011238:	429a      	cmp	r2, r3
 801123a:	d3f1      	bcc.n	8011220 <_free_r+0x294>
 801123c:	6a3b      	ldr	r3, [r7, #32]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	627b      	str	r3, [r7, #36]	; 0x24
 8011242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011246:	60da      	str	r2, [r3, #12]
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	6a3a      	ldr	r2, [r7, #32]
 801124c:	609a      	str	r2, [r3, #8]
 801124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011252:	609a      	str	r2, [r3, #8]
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	6a3b      	ldr	r3, [r7, #32]
 801125a:	60da      	str	r2, [r3, #12]
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f006 fb8b 	bl	8017978 <__malloc_unlock>
 8011262:	e000      	b.n	8011266 <_free_r+0x2da>
 8011264:	bf00      	nop
 8011266:	3730      	adds	r7, #48	; 0x30
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <_malloc_trim_r>:
 801126c:	b580      	push	{r7, lr}
 801126e:	b088      	sub	sp, #32
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
 8011276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801127a:	61fb      	str	r3, [r7, #28]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f006 fb72 	bl	8017966 <__malloc_lock>
 8011282:	4b37      	ldr	r3, [pc, #220]	; (8011360 <_malloc_trim_r+0xf4>)
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	f023 0303 	bic.w	r3, r3, #3
 801128c:	61bb      	str	r3, [r7, #24]
 801128e:	69ba      	ldr	r2, [r7, #24]
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	1ad2      	subs	r2, r2, r3
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	4413      	add	r3, r2
 8011298:	f1a3 0211 	sub.w	r2, r3, #17
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80112a2:	3b01      	subs	r3, #1
 80112a4:	69fa      	ldr	r2, [r7, #28]
 80112a6:	fb02 f303 	mul.w	r3, r2, r3
 80112aa:	617b      	str	r3, [r7, #20]
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	697a      	ldr	r2, [r7, #20]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	da04      	bge.n	80112be <_malloc_trim_r+0x52>
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f006 fb5f 	bl	8017978 <__malloc_unlock>
 80112ba:	2300      	movs	r3, #0
 80112bc:	e04b      	b.n	8011356 <_malloc_trim_r+0xea>
 80112be:	2100      	movs	r1, #0
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7fb f97f 	bl	800c5c4 <_sbrk_r>
 80112c6:	6138      	str	r0, [r7, #16]
 80112c8:	4b25      	ldr	r3, [pc, #148]	; (8011360 <_malloc_trim_r+0xf4>)
 80112ca:	689a      	ldr	r2, [r3, #8]
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	4413      	add	r3, r2
 80112d0:	693a      	ldr	r2, [r7, #16]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d004      	beq.n	80112e0 <_malloc_trim_r+0x74>
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f006 fb4e 	bl	8017978 <__malloc_unlock>
 80112dc:	2300      	movs	r3, #0
 80112de:	e03a      	b.n	8011356 <_malloc_trim_r+0xea>
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	425b      	negs	r3, r3
 80112e4:	4619      	mov	r1, r3
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7fb f96c 	bl	800c5c4 <_sbrk_r>
 80112ec:	60f8      	str	r0, [r7, #12]
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112f4:	d11d      	bne.n	8011332 <_malloc_trim_r+0xc6>
 80112f6:	2100      	movs	r1, #0
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7fb f963 	bl	800c5c4 <_sbrk_r>
 80112fe:	6138      	str	r0, [r7, #16]
 8011300:	4b17      	ldr	r3, [pc, #92]	; (8011360 <_malloc_trim_r+0xf4>)
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	61bb      	str	r3, [r7, #24]
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	2b0f      	cmp	r3, #15
 801130e:	dd0b      	ble.n	8011328 <_malloc_trim_r+0xbc>
 8011310:	4b14      	ldr	r3, [pc, #80]	; (8011364 <_malloc_trim_r+0xf8>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	693a      	ldr	r2, [r7, #16]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	4a13      	ldr	r2, [pc, #76]	; (8011368 <_malloc_trim_r+0xfc>)
 801131a:	6013      	str	r3, [r2, #0]
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	f043 0201 	orr.w	r2, r3, #1
 8011322:	4b0f      	ldr	r3, [pc, #60]	; (8011360 <_malloc_trim_r+0xf4>)
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	605a      	str	r2, [r3, #4]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f006 fb25 	bl	8017978 <__malloc_unlock>
 801132e:	2300      	movs	r3, #0
 8011330:	e011      	b.n	8011356 <_malloc_trim_r+0xea>
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	f043 0201 	orr.w	r2, r3, #1
 801133c:	4b08      	ldr	r3, [pc, #32]	; (8011360 <_malloc_trim_r+0xf4>)
 801133e:	689b      	ldr	r3, [r3, #8]
 8011340:	605a      	str	r2, [r3, #4]
 8011342:	4b09      	ldr	r3, [pc, #36]	; (8011368 <_malloc_trim_r+0xfc>)
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	4a07      	ldr	r2, [pc, #28]	; (8011368 <_malloc_trim_r+0xfc>)
 801134c:	6013      	str	r3, [r2, #0]
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f006 fb12 	bl	8017978 <__malloc_unlock>
 8011354:	2301      	movs	r3, #1
 8011356:	4618      	mov	r0, r3
 8011358:	3720      	adds	r7, #32
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	20000824 	.word	0x20000824
 8011364:	20000c30 	.word	0x20000c30
 8011368:	200041e8 	.word	0x200041e8

0801136c <__sfvwrite_r>:
 801136c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011370:	b08b      	sub	sp, #44	; 0x2c
 8011372:	af00      	add	r7, sp, #0
 8011374:	60f8      	str	r0, [r7, #12]
 8011376:	460c      	mov	r4, r1
 8011378:	4690      	mov	r8, r2
 801137a:	2300      	movs	r3, #0
 801137c:	60bb      	str	r3, [r7, #8]
 801137e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011382:	2d00      	cmp	r5, #0
 8011384:	d101      	bne.n	801138a <__sfvwrite_r+0x1e>
 8011386:	2300      	movs	r3, #0
 8011388:	e1c7      	b.n	801171a <__sfvwrite_r+0x3ae>
 801138a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138e:	b29b      	uxth	r3, r3
 8011390:	f003 0308 	and.w	r3, r3, #8
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <__sfvwrite_r+0x32>
 8011398:	6923      	ldr	r3, [r4, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d109      	bne.n	80113b2 <__sfvwrite_r+0x46>
 801139e:	4621      	mov	r1, r4
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7ff fcf9 	bl	8010d98 <__swsetup_r>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d002      	beq.n	80113b2 <__sfvwrite_r+0x46>
 80113ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113b0:	e1b3      	b.n	801171a <__sfvwrite_r+0x3ae>
 80113b2:	f8d8 3000 	ldr.w	r3, [r8]
 80113b6:	607b      	str	r3, [r7, #4]
 80113b8:	2500      	movs	r5, #0
 80113ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113be:	b29b      	uxth	r3, r3
 80113c0:	f003 0302 	and.w	r3, r3, #2
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d028      	beq.n	801141a <__sfvwrite_r+0xae>
 80113c8:	e007      	b.n	80113da <__sfvwrite_r+0x6e>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	461a      	mov	r2, r3
 80113ce:	6812      	ldr	r2, [r2, #0]
 80113d0:	60ba      	str	r2, [r7, #8]
 80113d2:	461a      	mov	r2, r3
 80113d4:	6855      	ldr	r5, [r2, #4]
 80113d6:	3308      	adds	r3, #8
 80113d8:	607b      	str	r3, [r7, #4]
 80113da:	2d00      	cmp	r5, #0
 80113dc:	d0f5      	beq.n	80113ca <__sfvwrite_r+0x5e>
 80113de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113e0:	69e1      	ldr	r1, [r4, #28]
 80113e2:	4bae      	ldr	r3, [pc, #696]	; (801169c <__sfvwrite_r+0x330>)
 80113e4:	42ab      	cmp	r3, r5
 80113e6:	bf28      	it	cs
 80113e8:	462b      	movcs	r3, r5
 80113ea:	68ba      	ldr	r2, [r7, #8]
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	47b0      	blx	r6
 80113f0:	4606      	mov	r6, r0
 80113f2:	2e00      	cmp	r6, #0
 80113f4:	f340 8184 	ble.w	8011700 <__sfvwrite_r+0x394>
 80113f8:	4633      	mov	r3, r6
 80113fa:	68ba      	ldr	r2, [r7, #8]
 80113fc:	441a      	add	r2, r3
 80113fe:	60ba      	str	r2, [r7, #8]
 8011400:	4633      	mov	r3, r6
 8011402:	1aed      	subs	r5, r5, r3
 8011404:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011408:	4632      	mov	r2, r6
 801140a:	1a9b      	subs	r3, r3, r2
 801140c:	f8c8 3008 	str.w	r3, [r8, #8]
 8011410:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1e0      	bne.n	80113da <__sfvwrite_r+0x6e>
 8011418:	e170      	b.n	80116fc <__sfvwrite_r+0x390>
 801141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801141e:	b29b      	uxth	r3, r3
 8011420:	f003 0301 	and.w	r3, r3, #1
 8011424:	2b00      	cmp	r3, #0
 8011426:	f040 80e3 	bne.w	80115f0 <__sfvwrite_r+0x284>
 801142a:	e007      	b.n	801143c <__sfvwrite_r+0xd0>
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	461a      	mov	r2, r3
 8011430:	6812      	ldr	r2, [r2, #0]
 8011432:	60ba      	str	r2, [r7, #8]
 8011434:	461a      	mov	r2, r3
 8011436:	6855      	ldr	r5, [r2, #4]
 8011438:	3308      	adds	r3, #8
 801143a:	607b      	str	r3, [r7, #4]
 801143c:	2d00      	cmp	r5, #0
 801143e:	d0f5      	beq.n	801142c <__sfvwrite_r+0xc0>
 8011440:	68a6      	ldr	r6, [r4, #8]
 8011442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011446:	b29b      	uxth	r3, r3
 8011448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801144c:	2b00      	cmp	r3, #0
 801144e:	d07c      	beq.n	801154a <__sfvwrite_r+0x1de>
 8011450:	4633      	mov	r3, r6
 8011452:	429d      	cmp	r5, r3
 8011454:	d366      	bcc.n	8011524 <__sfvwrite_r+0x1b8>
 8011456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801145a:	b29b      	uxth	r3, r3
 801145c:	f403 6390 	and.w	r3, r3, #1152	; 0x480
 8011460:	2b00      	cmp	r3, #0
 8011462:	d05f      	beq.n	8011524 <__sfvwrite_r+0x1b8>
 8011464:	6822      	ldr	r2, [r4, #0]
 8011466:	6923      	ldr	r3, [r4, #16]
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	613b      	str	r3, [r7, #16]
 801146c:	6962      	ldr	r2, [r4, #20]
 801146e:	4613      	mov	r3, r2
 8011470:	005b      	lsls	r3, r3, #1
 8011472:	4413      	add	r3, r2
 8011474:	0fda      	lsrs	r2, r3, #31
 8011476:	4413      	add	r3, r2
 8011478:	105b      	asrs	r3, r3, #1
 801147a:	61bb      	str	r3, [r7, #24]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	442b      	add	r3, r5
 8011480:	1c5a      	adds	r2, r3, #1
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	429a      	cmp	r2, r3
 8011486:	d903      	bls.n	8011490 <__sfvwrite_r+0x124>
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	442b      	add	r3, r5
 801148c:	3301      	adds	r3, #1
 801148e:	61bb      	str	r3, [r7, #24]
 8011490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011494:	b29b      	uxth	r3, r3
 8011496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801149a:	2b00      	cmp	r3, #0
 801149c:	d01c      	beq.n	80114d8 <__sfvwrite_r+0x16c>
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	4619      	mov	r1, r3
 80114a2:	68f8      	ldr	r0, [r7, #12]
 80114a4:	f7fa f9ee 	bl	800b884 <_malloc_r>
 80114a8:	61f8      	str	r0, [r7, #28]
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d103      	bne.n	80114b8 <__sfvwrite_r+0x14c>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	220c      	movs	r2, #12
 80114b4:	601a      	str	r2, [r3, #0]
 80114b6:	e128      	b.n	801170a <__sfvwrite_r+0x39e>
 80114b8:	6923      	ldr	r3, [r4, #16]
 80114ba:	693a      	ldr	r2, [r7, #16]
 80114bc:	4619      	mov	r1, r3
 80114be:	69f8      	ldr	r0, [r7, #28]
 80114c0:	f7f0 f96e 	bl	80017a0 <memcpy>
 80114c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80114cc:	b21b      	sxth	r3, r3
 80114ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	81a3      	strh	r3, [r4, #12]
 80114d6:	e018      	b.n	801150a <__sfvwrite_r+0x19e>
 80114d8:	6923      	ldr	r3, [r4, #16]
 80114da:	69ba      	ldr	r2, [r7, #24]
 80114dc:	4619      	mov	r1, r3
 80114de:	68f8      	ldr	r0, [r7, #12]
 80114e0:	f7fa fd46 	bl	800bf70 <_realloc_r>
 80114e4:	61f8      	str	r0, [r7, #28]
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d10e      	bne.n	801150a <__sfvwrite_r+0x19e>
 80114ec:	6923      	ldr	r3, [r4, #16]
 80114ee:	4619      	mov	r1, r3
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f7ff fd4b 	bl	8010f8c <_free_r>
 80114f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114fe:	b21b      	sxth	r3, r3
 8011500:	81a3      	strh	r3, [r4, #12]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	220c      	movs	r2, #12
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	e0ff      	b.n	801170a <__sfvwrite_r+0x39e>
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	6123      	str	r3, [r4, #16]
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	69fa      	ldr	r2, [r7, #28]
 8011512:	4413      	add	r3, r2
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	6163      	str	r3, [r4, #20]
 801151a:	462e      	mov	r6, r5
 801151c:	69ba      	ldr	r2, [r7, #24]
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	1ad3      	subs	r3, r2, r3
 8011522:	60a3      	str	r3, [r4, #8]
 8011524:	4633      	mov	r3, r6
 8011526:	429d      	cmp	r5, r3
 8011528:	d200      	bcs.n	801152c <__sfvwrite_r+0x1c0>
 801152a:	462e      	mov	r6, r5
 801152c:	6823      	ldr	r3, [r4, #0]
 801152e:	4632      	mov	r2, r6
 8011530:	68b9      	ldr	r1, [r7, #8]
 8011532:	4618      	mov	r0, r3
 8011534:	f006 f915 	bl	8017762 <memmove>
 8011538:	68a3      	ldr	r3, [r4, #8]
 801153a:	1b9b      	subs	r3, r3, r6
 801153c:	60a3      	str	r3, [r4, #8]
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4632      	mov	r2, r6
 8011542:	4413      	add	r3, r2
 8011544:	6023      	str	r3, [r4, #0]
 8011546:	462e      	mov	r6, r5
 8011548:	e03f      	b.n	80115ca <__sfvwrite_r+0x25e>
 801154a:	6822      	ldr	r2, [r4, #0]
 801154c:	6923      	ldr	r3, [r4, #16]
 801154e:	429a      	cmp	r2, r3
 8011550:	d802      	bhi.n	8011558 <__sfvwrite_r+0x1ec>
 8011552:	6963      	ldr	r3, [r4, #20]
 8011554:	429d      	cmp	r5, r3
 8011556:	d21c      	bcs.n	8011592 <__sfvwrite_r+0x226>
 8011558:	4633      	mov	r3, r6
 801155a:	42ab      	cmp	r3, r5
 801155c:	bf28      	it	cs
 801155e:	462b      	movcs	r3, r5
 8011560:	461e      	mov	r6, r3
 8011562:	6823      	ldr	r3, [r4, #0]
 8011564:	4632      	mov	r2, r6
 8011566:	68b9      	ldr	r1, [r7, #8]
 8011568:	4618      	mov	r0, r3
 801156a:	f006 f8fa 	bl	8017762 <memmove>
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	1b9b      	subs	r3, r3, r6
 8011572:	60a3      	str	r3, [r4, #8]
 8011574:	6823      	ldr	r3, [r4, #0]
 8011576:	4632      	mov	r2, r6
 8011578:	4413      	add	r3, r2
 801157a:	6023      	str	r3, [r4, #0]
 801157c:	68a3      	ldr	r3, [r4, #8]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d122      	bne.n	80115c8 <__sfvwrite_r+0x25c>
 8011582:	4621      	mov	r1, r4
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f007 fd61 	bl	801904c <_fflush_r>
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d01b      	beq.n	80115c8 <__sfvwrite_r+0x25c>
 8011590:	e0bb      	b.n	801170a <__sfvwrite_r+0x39e>
 8011592:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011596:	429d      	cmp	r5, r3
 8011598:	d201      	bcs.n	801159e <__sfvwrite_r+0x232>
 801159a:	462a      	mov	r2, r5
 801159c:	e001      	b.n	80115a2 <__sfvwrite_r+0x236>
 801159e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80115a2:	6963      	ldr	r3, [r4, #20]
 80115a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80115a8:	6962      	ldr	r2, [r4, #20]
 80115aa:	fb02 f603 	mul.w	r6, r2, r3
 80115ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115b0:	603b      	str	r3, [r7, #0]
 80115b2:	69e1      	ldr	r1, [r4, #28]
 80115b4:	4633      	mov	r3, r6
 80115b6:	68ba      	ldr	r2, [r7, #8]
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	683e      	ldr	r6, [r7, #0]
 80115bc:	47b0      	blx	r6
 80115be:	4606      	mov	r6, r0
 80115c0:	2e00      	cmp	r6, #0
 80115c2:	f340 809f 	ble.w	8011704 <__sfvwrite_r+0x398>
 80115c6:	e000      	b.n	80115ca <__sfvwrite_r+0x25e>
 80115c8:	bf00      	nop
 80115ca:	4633      	mov	r3, r6
 80115cc:	68ba      	ldr	r2, [r7, #8]
 80115ce:	441a      	add	r2, r3
 80115d0:	4613      	mov	r3, r2
 80115d2:	60bb      	str	r3, [r7, #8]
 80115d4:	4633      	mov	r3, r6
 80115d6:	1aed      	subs	r5, r5, r3
 80115d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115dc:	4632      	mov	r2, r6
 80115de:	1a9b      	subs	r3, r3, r2
 80115e0:	f8c8 3008 	str.w	r3, [r8, #8]
 80115e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f47f af27 	bne.w	801143c <__sfvwrite_r+0xd0>
 80115ee:	e085      	b.n	80116fc <__sfvwrite_r+0x390>
 80115f0:	2300      	movs	r3, #0
 80115f2:	627b      	str	r3, [r7, #36]	; 0x24
 80115f4:	2300      	movs	r3, #0
 80115f6:	623b      	str	r3, [r7, #32]
 80115f8:	e009      	b.n	801160e <__sfvwrite_r+0x2a2>
 80115fa:	2300      	movs	r3, #0
 80115fc:	627b      	str	r3, [r7, #36]	; 0x24
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	461a      	mov	r2, r3
 8011602:	6812      	ldr	r2, [r2, #0]
 8011604:	60ba      	str	r2, [r7, #8]
 8011606:	461a      	mov	r2, r3
 8011608:	6855      	ldr	r5, [r2, #4]
 801160a:	3308      	adds	r3, #8
 801160c:	607b      	str	r3, [r7, #4]
 801160e:	2d00      	cmp	r5, #0
 8011610:	d0f3      	beq.n	80115fa <__sfvwrite_r+0x28e>
 8011612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011614:	2b00      	cmp	r3, #0
 8011616:	d111      	bne.n	801163c <__sfvwrite_r+0x2d0>
 8011618:	462a      	mov	r2, r5
 801161a:	210a      	movs	r1, #10
 801161c:	68be      	ldr	r6, [r7, #8]
 801161e:	4630      	mov	r0, r6
 8011620:	f7ee ffae 	bl	8000580 <memchr>
 8011624:	6178      	str	r0, [r7, #20]
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d003      	beq.n	8011634 <__sfvwrite_r+0x2c8>
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	3301      	adds	r3, #1
 8011630:	1b9b      	subs	r3, r3, r6
 8011632:	e000      	b.n	8011636 <__sfvwrite_r+0x2ca>
 8011634:	1c6b      	adds	r3, r5, #1
 8011636:	623b      	str	r3, [r7, #32]
 8011638:	2301      	movs	r3, #1
 801163a:	627b      	str	r3, [r7, #36]	; 0x24
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	42ab      	cmp	r3, r5
 8011640:	bf28      	it	cs
 8011642:	462b      	movcs	r3, r5
 8011644:	4699      	mov	r9, r3
 8011646:	68a2      	ldr	r2, [r4, #8]
 8011648:	6963      	ldr	r3, [r4, #20]
 801164a:	18d6      	adds	r6, r2, r3
 801164c:	6822      	ldr	r2, [r4, #0]
 801164e:	6923      	ldr	r3, [r4, #16]
 8011650:	429a      	cmp	r2, r3
 8011652:	d913      	bls.n	801167c <__sfvwrite_r+0x310>
 8011654:	45b1      	cmp	r9, r6
 8011656:	dd11      	ble.n	801167c <__sfvwrite_r+0x310>
 8011658:	6823      	ldr	r3, [r4, #0]
 801165a:	4632      	mov	r2, r6
 801165c:	68b9      	ldr	r1, [r7, #8]
 801165e:	4618      	mov	r0, r3
 8011660:	f006 f87f 	bl	8017762 <memmove>
 8011664:	6823      	ldr	r3, [r4, #0]
 8011666:	4632      	mov	r2, r6
 8011668:	4413      	add	r3, r2
 801166a:	6023      	str	r3, [r4, #0]
 801166c:	4621      	mov	r1, r4
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	f007 fcec 	bl	801904c <_fflush_r>
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d020      	beq.n	80116bc <__sfvwrite_r+0x350>
 801167a:	e046      	b.n	801170a <__sfvwrite_r+0x39e>
 801167c:	6966      	ldr	r6, [r4, #20]
 801167e:	454e      	cmp	r6, r9
 8011680:	dc0e      	bgt.n	80116a0 <__sfvwrite_r+0x334>
 8011682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011684:	603b      	str	r3, [r7, #0]
 8011686:	69e1      	ldr	r1, [r4, #28]
 8011688:	4633      	mov	r3, r6
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	68f8      	ldr	r0, [r7, #12]
 801168e:	683e      	ldr	r6, [r7, #0]
 8011690:	47b0      	blx	r6
 8011692:	4606      	mov	r6, r0
 8011694:	2e00      	cmp	r6, #0
 8011696:	dc11      	bgt.n	80116bc <__sfvwrite_r+0x350>
 8011698:	e037      	b.n	801170a <__sfvwrite_r+0x39e>
 801169a:	bf00      	nop
 801169c:	7ffffc00 	.word	0x7ffffc00
 80116a0:	464e      	mov	r6, r9
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	4632      	mov	r2, r6
 80116a6:	68b9      	ldr	r1, [r7, #8]
 80116a8:	4618      	mov	r0, r3
 80116aa:	f006 f85a 	bl	8017762 <memmove>
 80116ae:	68a3      	ldr	r3, [r4, #8]
 80116b0:	1b9b      	subs	r3, r3, r6
 80116b2:	60a3      	str	r3, [r4, #8]
 80116b4:	6823      	ldr	r3, [r4, #0]
 80116b6:	4632      	mov	r2, r6
 80116b8:	4413      	add	r3, r2
 80116ba:	6023      	str	r3, [r4, #0]
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	1b9b      	subs	r3, r3, r6
 80116c0:	623b      	str	r3, [r7, #32]
 80116c2:	6a3b      	ldr	r3, [r7, #32]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d108      	bne.n	80116da <__sfvwrite_r+0x36e>
 80116c8:	4621      	mov	r1, r4
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f007 fcbe 	bl	801904c <_fflush_r>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d118      	bne.n	8011708 <__sfvwrite_r+0x39c>
 80116d6:	2300      	movs	r3, #0
 80116d8:	627b      	str	r3, [r7, #36]	; 0x24
 80116da:	4633      	mov	r3, r6
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	441a      	add	r2, r3
 80116e0:	4613      	mov	r3, r2
 80116e2:	60bb      	str	r3, [r7, #8]
 80116e4:	4633      	mov	r3, r6
 80116e6:	1aed      	subs	r5, r5, r3
 80116e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116ec:	4632      	mov	r2, r6
 80116ee:	1a9b      	subs	r3, r3, r2
 80116f0:	f8c8 3008 	str.w	r3, [r8, #8]
 80116f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d188      	bne.n	801160e <__sfvwrite_r+0x2a2>
 80116fc:	2300      	movs	r3, #0
 80116fe:	e00c      	b.n	801171a <__sfvwrite_r+0x3ae>
 8011700:	bf00      	nop
 8011702:	e002      	b.n	801170a <__sfvwrite_r+0x39e>
 8011704:	bf00      	nop
 8011706:	e000      	b.n	801170a <__sfvwrite_r+0x39e>
 8011708:	bf00      	nop
 801170a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801170e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011712:	b21b      	sxth	r3, r3
 8011714:	81a3      	strh	r3, [r4, #12]
 8011716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801171a:	4618      	mov	r0, r3
 801171c:	372c      	adds	r7, #44	; 0x2c
 801171e:	46bd      	mov	sp, r7
 8011720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011724 <__get_global_locale>:
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
 8011728:	4b02      	ldr	r3, [pc, #8]	; (8011734 <__get_global_locale+0x10>)
 801172a:	4618      	mov	r0, r3
 801172c:	46bd      	mov	sp, r7
 801172e:	bc80      	pop	{r7}
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	20000c38 	.word	0x20000c38

08011738 <_lseek_r>:
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
 8011746:	4b0d      	ldr	r3, [pc, #52]	; (801177c <_lseek_r+0x44>)
 8011748:	2200      	movs	r2, #0
 801174a:	601a      	str	r2, [r3, #0]
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	6879      	ldr	r1, [r7, #4]
 8011750:	68b8      	ldr	r0, [r7, #8]
 8011752:	f7f1 ffdf 	bl	8003714 <_lseek>
 8011756:	6178      	str	r0, [r7, #20]
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801175e:	d107      	bne.n	8011770 <_lseek_r+0x38>
 8011760:	4b06      	ldr	r3, [pc, #24]	; (801177c <_lseek_r+0x44>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d003      	beq.n	8011770 <_lseek_r+0x38>
 8011768:	4b04      	ldr	r3, [pc, #16]	; (801177c <_lseek_r+0x44>)
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	601a      	str	r2, [r3, #0]
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	4618      	mov	r0, r3
 8011774:	3718      	adds	r7, #24
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	2000598c 	.word	0x2000598c

08011780 <__smakebuf_r>:
 8011780:	b5b0      	push	{r4, r5, r7, lr}
 8011782:	b086      	sub	sp, #24
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	460c      	mov	r4, r1
 801178a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801178e:	b29b      	uxth	r3, r3
 8011790:	f003 0302 	and.w	r3, r3, #2
 8011794:	2b00      	cmp	r3, #0
 8011796:	d007      	beq.n	80117a8 <__smakebuf_r+0x28>
 8011798:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	6823      	ldr	r3, [r4, #0]
 80117a0:	6123      	str	r3, [r4, #16]
 80117a2:	2301      	movs	r3, #1
 80117a4:	6163      	str	r3, [r4, #20]
 80117a6:	e052      	b.n	801184e <__smakebuf_r+0xce>
 80117a8:	f107 030c 	add.w	r3, r7, #12
 80117ac:	f107 0210 	add.w	r2, r7, #16
 80117b0:	4621      	mov	r1, r4
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f007 fc9c 	bl	80190f0 <__swhatbuf_r>
 80117b8:	6178      	str	r0, [r7, #20]
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	4619      	mov	r1, r3
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7fa f860 	bl	800b884 <_malloc_r>
 80117c4:	4605      	mov	r5, r0
 80117c6:	2d00      	cmp	r5, #0
 80117c8:	d117      	bne.n	80117fa <__smakebuf_r+0x7a>
 80117ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d13a      	bne.n	801184e <__smakebuf_r+0xce>
 80117d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117dc:	f023 0303 	bic.w	r3, r3, #3
 80117e0:	b21b      	sxth	r3, r3
 80117e2:	f043 0302 	orr.w	r3, r3, #2
 80117e6:	b21b      	sxth	r3, r3
 80117e8:	81a3      	strh	r3, [r4, #12]
 80117ea:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80117ee:	6023      	str	r3, [r4, #0]
 80117f0:	6823      	ldr	r3, [r4, #0]
 80117f2:	6123      	str	r3, [r4, #16]
 80117f4:	2301      	movs	r3, #1
 80117f6:	6163      	str	r3, [r4, #20]
 80117f8:	e029      	b.n	801184e <__smakebuf_r+0xce>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4a15      	ldr	r2, [pc, #84]	; (8011854 <__smakebuf_r+0xd4>)
 80117fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8011800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011808:	b21b      	sxth	r3, r3
 801180a:	81a3      	strh	r3, [r4, #12]
 801180c:	6025      	str	r5, [r4, #0]
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	6123      	str	r3, [r4, #16]
 8011812:	693b      	ldr	r3, [r7, #16]
 8011814:	6163      	str	r3, [r4, #20]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d011      	beq.n	8011840 <__smakebuf_r+0xc0>
 801181c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8011820:	4619      	mov	r1, r3
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f000 fbd0 	bl	8011fc8 <_isatty_r>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	d008      	beq.n	8011840 <__smakebuf_r+0xc0>
 801182e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011832:	f023 0303 	bic.w	r3, r3, #3
 8011836:	b21b      	sxth	r3, r3
 8011838:	f043 0301 	orr.w	r3, r3, #1
 801183c:	b21b      	sxth	r3, r3
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	b21b      	sxth	r3, r3
 8011848:	4313      	orrs	r3, r2
 801184a:	b21b      	sxth	r3, r3
 801184c:	81a3      	strh	r3, [r4, #12]
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bdb0      	pop	{r4, r5, r7, pc}
 8011854:	0800b449 	.word	0x0800b449

08011858 <__pow5mult>:
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f003 0303 	and.w	r3, r3, #3
 801186a:	617b      	str	r3, [r7, #20]
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00a      	beq.n	8011888 <__pow5mult+0x30>
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	3b01      	subs	r3, #1
 8011876:	4a2c      	ldr	r2, [pc, #176]	; (8011928 <__pow5mult+0xd0>)
 8011878:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801187c:	2300      	movs	r3, #0
 801187e:	68b9      	ldr	r1, [r7, #8]
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f007 fd13 	bl	80192ac <__multadd>
 8011886:	60b8      	str	r0, [r7, #8]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	109b      	asrs	r3, r3, #2
 801188c:	607b      	str	r3, [r7, #4]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d101      	bne.n	8011898 <__pow5mult+0x40>
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	e043      	b.n	8011920 <__pow5mult+0xc8>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801189c:	61fb      	str	r3, [r7, #28]
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d10d      	bne.n	80118c0 <__pow5mult+0x68>
 80118a4:	f240 2171 	movw	r1, #625	; 0x271
 80118a8:	68f8      	ldr	r0, [r7, #12]
 80118aa:	f007 fddb 	bl	8019464 <__i2b>
 80118ae:	4602      	mov	r2, r0
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	649a      	str	r2, [r3, #72]	; 0x48
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118b8:	61fb      	str	r3, [r7, #28]
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	2200      	movs	r2, #0
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f003 0301 	and.w	r3, r3, #1
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00b      	beq.n	80118e2 <__pow5mult+0x8a>
 80118ca:	69fa      	ldr	r2, [r7, #28]
 80118cc:	68b9      	ldr	r1, [r7, #8]
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f007 fddd 	bl	801948e <__multiply>
 80118d4:	6138      	str	r0, [r7, #16]
 80118d6:	68b9      	ldr	r1, [r7, #8]
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f007 fcc9 	bl	8019270 <_Bfree>
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	60bb      	str	r3, [r7, #8]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	105b      	asrs	r3, r3, #1
 80118e6:	607b      	str	r3, [r7, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d016      	beq.n	801191c <__pow5mult+0xc4>
 80118ee:	69fb      	ldr	r3, [r7, #28]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	61bb      	str	r3, [r7, #24]
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d10d      	bne.n	8011916 <__pow5mult+0xbe>
 80118fa:	69fa      	ldr	r2, [r7, #28]
 80118fc:	69f9      	ldr	r1, [r7, #28]
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f007 fdc5 	bl	801948e <__multiply>
 8011904:	4602      	mov	r2, r0
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	601a      	str	r2, [r3, #0]
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	61bb      	str	r3, [r7, #24]
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	2200      	movs	r2, #0
 8011914:	601a      	str	r2, [r3, #0]
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	61fb      	str	r3, [r7, #28]
 801191a:	e7d1      	b.n	80118c0 <__pow5mult+0x68>
 801191c:	bf00      	nop
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	4618      	mov	r0, r3
 8011922:	3720      	adds	r7, #32
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	0801bce4 	.word	0x0801bce4

0801192c <_read_r>:
 801192c:	b580      	push	{r7, lr}
 801192e:	b086      	sub	sp, #24
 8011930:	af00      	add	r7, sp, #0
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	607a      	str	r2, [r7, #4]
 8011938:	603b      	str	r3, [r7, #0]
 801193a:	4b0d      	ldr	r3, [pc, #52]	; (8011970 <_read_r+0x44>)
 801193c:	2200      	movs	r2, #0
 801193e:	601a      	str	r2, [r3, #0]
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	68b8      	ldr	r0, [r7, #8]
 8011946:	f7f1 fe93 	bl	8003670 <_read>
 801194a:	6178      	str	r0, [r7, #20]
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011952:	d107      	bne.n	8011964 <_read_r+0x38>
 8011954:	4b06      	ldr	r3, [pc, #24]	; (8011970 <_read_r+0x44>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d003      	beq.n	8011964 <_read_r+0x38>
 801195c:	4b04      	ldr	r3, [pc, #16]	; (8011970 <_read_r+0x44>)
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	601a      	str	r2, [r3, #0]
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	4618      	mov	r0, r3
 8011968:	3718      	adds	r7, #24
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
 801196e:	bf00      	nop
 8011970:	2000598c 	.word	0x2000598c

08011974 <raise>:
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	4b05      	ldr	r3, [pc, #20]	; (8011994 <raise+0x20>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6879      	ldr	r1, [r7, #4]
 8011982:	4618      	mov	r0, r3
 8011984:	f008 f898 	bl	8019ab8 <_raise_r>
 8011988:	4603      	mov	r3, r0
 801198a:	4618      	mov	r0, r3
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	20000820 	.word	0x20000820

08011998 <_kill_r>:
 8011998:	b580      	push	{r7, lr}
 801199a:	b086      	sub	sp, #24
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <_kill_r+0x40>)
 80119a6:	2200      	movs	r2, #0
 80119a8:	601a      	str	r2, [r3, #0]
 80119aa:	6879      	ldr	r1, [r7, #4]
 80119ac:	68b8      	ldr	r0, [r7, #8]
 80119ae:	f000 fd8b 	bl	80124c8 <_kill>
 80119b2:	6178      	str	r0, [r7, #20]
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119ba:	d107      	bne.n	80119cc <_kill_r+0x34>
 80119bc:	4b06      	ldr	r3, [pc, #24]	; (80119d8 <_kill_r+0x40>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d003      	beq.n	80119cc <_kill_r+0x34>
 80119c4:	4b04      	ldr	r3, [pc, #16]	; (80119d8 <_kill_r+0x40>)
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	601a      	str	r2, [r3, #0]
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	4618      	mov	r0, r3
 80119d0:	3718      	adds	r7, #24
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	2000598c 	.word	0x2000598c

080119dc <_strerror_r>:
 80119dc:	b580      	push	{r7, lr}
 80119de:	b086      	sub	sp, #24
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	60f8      	str	r0, [r7, #12]
 80119e4:	60b9      	str	r1, [r7, #8]
 80119e6:	607a      	str	r2, [r7, #4]
 80119e8:	603b      	str	r3, [r7, #0]
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b8e      	cmp	r3, #142	; 0x8e
 80119ee:	f200 82b1 	bhi.w	8011f54 <_strerror_r+0x578>
 80119f2:	a201      	add	r2, pc, #4	; (adr r2, 80119f8 <_strerror_r+0x1c>)
 80119f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f8:	08011c35 	.word	0x08011c35
 80119fc:	08011c3b 	.word	0x08011c3b
 8011a00:	08011c41 	.word	0x08011c41
 8011a04:	08011c47 	.word	0x08011c47
 8011a08:	08011c4d 	.word	0x08011c4d
 8011a0c:	08011c53 	.word	0x08011c53
 8011a10:	08011c59 	.word	0x08011c59
 8011a14:	08011c5f 	.word	0x08011c5f
 8011a18:	08011c65 	.word	0x08011c65
 8011a1c:	08011c71 	.word	0x08011c71
 8011a20:	08011c77 	.word	0x08011c77
 8011a24:	08011c83 	.word	0x08011c83
 8011a28:	08011c89 	.word	0x08011c89
 8011a2c:	08011c8f 	.word	0x08011c8f
 8011a30:	08011c95 	.word	0x08011c95
 8011a34:	08011f55 	.word	0x08011f55
 8011a38:	08011c9b 	.word	0x08011c9b
 8011a3c:	08011ca1 	.word	0x08011ca1
 8011a40:	08011ca7 	.word	0x08011ca7
 8011a44:	08011cad 	.word	0x08011cad
 8011a48:	08011cb3 	.word	0x08011cb3
 8011a4c:	08011cc5 	.word	0x08011cc5
 8011a50:	08011ccb 	.word	0x08011ccb
 8011a54:	08011cdd 	.word	0x08011cdd
 8011a58:	08011ce3 	.word	0x08011ce3
 8011a5c:	08011ce9 	.word	0x08011ce9
 8011a60:	08011cef 	.word	0x08011cef
 8011a64:	08011cf5 	.word	0x08011cf5
 8011a68:	08011d01 	.word	0x08011d01
 8011a6c:	08011d0d 	.word	0x08011d0d
 8011a70:	08011d13 	.word	0x08011d13
 8011a74:	08011d19 	.word	0x08011d19
 8011a78:	08011d1f 	.word	0x08011d1f
 8011a7c:	08011d25 	.word	0x08011d25
 8011a80:	08011d2b 	.word	0x08011d2b
 8011a84:	08011d31 	.word	0x08011d31
 8011a88:	08011d37 	.word	0x08011d37
 8011a8c:	08011f55 	.word	0x08011f55
 8011a90:	08011f55 	.word	0x08011f55
 8011a94:	08011f55 	.word	0x08011f55
 8011a98:	08011f55 	.word	0x08011f55
 8011a9c:	08011f55 	.word	0x08011f55
 8011aa0:	08011f55 	.word	0x08011f55
 8011aa4:	08011f55 	.word	0x08011f55
 8011aa8:	08011f55 	.word	0x08011f55
 8011aac:	08011d43 	.word	0x08011d43
 8011ab0:	08011d4f 	.word	0x08011d4f
 8011ab4:	08011f55 	.word	0x08011f55
 8011ab8:	08011f55 	.word	0x08011f55
 8011abc:	08011f55 	.word	0x08011f55
 8011ac0:	08011f55 	.word	0x08011f55
 8011ac4:	08011f55 	.word	0x08011f55
 8011ac8:	08011f55 	.word	0x08011f55
 8011acc:	08011f55 	.word	0x08011f55
 8011ad0:	08011f55 	.word	0x08011f55
 8011ad4:	08011f55 	.word	0x08011f55
 8011ad8:	08011f55 	.word	0x08011f55
 8011adc:	08011f55 	.word	0x08011f55
 8011ae0:	08011f55 	.word	0x08011f55
 8011ae4:	08011f55 	.word	0x08011f55
 8011ae8:	08011d55 	.word	0x08011d55
 8011aec:	08011da3 	.word	0x08011da3
 8011af0:	08011d5b 	.word	0x08011d5b
 8011af4:	08011d61 	.word	0x08011d61
 8011af8:	08011f55 	.word	0x08011f55
 8011afc:	08011f55 	.word	0x08011f55
 8011b00:	08011f55 	.word	0x08011f55
 8011b04:	08011d67 	.word	0x08011d67
 8011b08:	08011f55 	.word	0x08011f55
 8011b0c:	08011f55 	.word	0x08011f55
 8011b10:	08011f55 	.word	0x08011f55
 8011b14:	08011d6d 	.word	0x08011d6d
 8011b18:	08011f55 	.word	0x08011f55
 8011b1c:	08011f55 	.word	0x08011f55
 8011b20:	08011d79 	.word	0x08011d79
 8011b24:	08011f55 	.word	0x08011f55
 8011b28:	08011f55 	.word	0x08011f55
 8011b2c:	08011d7f 	.word	0x08011d7f
 8011b30:	08011f55 	.word	0x08011f55
 8011b34:	08011f55 	.word	0x08011f55
 8011b38:	08011f55 	.word	0x08011f55
 8011b3c:	08011f55 	.word	0x08011f55
 8011b40:	08011f55 	.word	0x08011f55
 8011b44:	08011f55 	.word	0x08011f55
 8011b48:	08011f55 	.word	0x08011f55
 8011b4c:	08011f55 	.word	0x08011f55
 8011b50:	08011f55 	.word	0x08011f55
 8011b54:	08011f55 	.word	0x08011f55
 8011b58:	08011d85 	.word	0x08011d85
 8011b5c:	08011f55 	.word	0x08011f55
 8011b60:	08011d8b 	.word	0x08011d8b
 8011b64:	08011d91 	.word	0x08011d91
 8011b68:	08011d97 	.word	0x08011d97
 8011b6c:	08011f55 	.word	0x08011f55
 8011b70:	08011f55 	.word	0x08011f55
 8011b74:	08011dfd 	.word	0x08011dfd
 8011b78:	08011f55 	.word	0x08011f55
 8011b7c:	08011f55 	.word	0x08011f55
 8011b80:	08011f55 	.word	0x08011f55
 8011b84:	08011f55 	.word	0x08011f55
 8011b88:	08011f55 	.word	0x08011f55
 8011b8c:	08011f55 	.word	0x08011f55
 8011b90:	08011f55 	.word	0x08011f55
 8011b94:	08011f55 	.word	0x08011f55
 8011b98:	08011dc7 	.word	0x08011dc7
 8011b9c:	08011d9d 	.word	0x08011d9d
 8011ba0:	08011da9 	.word	0x08011da9
 8011ba4:	08011daf 	.word	0x08011daf
 8011ba8:	08011db5 	.word	0x08011db5
 8011bac:	08011dbb 	.word	0x08011dbb
 8011bb0:	08011f55 	.word	0x08011f55
 8011bb4:	08011dc1 	.word	0x08011dc1
 8011bb8:	08011dcd 	.word	0x08011dcd
 8011bbc:	08011dd9 	.word	0x08011dd9
 8011bc0:	08011d49 	.word	0x08011d49
 8011bc4:	08011cd1 	.word	0x08011cd1
 8011bc8:	08011e0f 	.word	0x08011e0f
 8011bcc:	08011cb9 	.word	0x08011cb9
 8011bd0:	08011cfb 	.word	0x08011cfb
 8011bd4:	08011cbf 	.word	0x08011cbf
 8011bd8:	08011c6b 	.word	0x08011c6b
 8011bdc:	08011c7d 	.word	0x08011c7d
 8011be0:	08011e09 	.word	0x08011e09
 8011be4:	08011d73 	.word	0x08011d73
 8011be8:	08011f55 	.word	0x08011f55
 8011bec:	08011dd3 	.word	0x08011dd3
 8011bf0:	08011cd7 	.word	0x08011cd7
 8011bf4:	08011de5 	.word	0x08011de5
 8011bf8:	08011ddf 	.word	0x08011ddf
 8011bfc:	08011f55 	.word	0x08011f55
 8011c00:	08011f55 	.word	0x08011f55
 8011c04:	08011f55 	.word	0x08011f55
 8011c08:	08011f55 	.word	0x08011f55
 8011c0c:	08011f55 	.word	0x08011f55
 8011c10:	08011d07 	.word	0x08011d07
 8011c14:	08011f55 	.word	0x08011f55
 8011c18:	08011f55 	.word	0x08011f55
 8011c1c:	08011f55 	.word	0x08011f55
 8011c20:	08011d3d 	.word	0x08011d3d
 8011c24:	08011e03 	.word	0x08011e03
 8011c28:	08011deb 	.word	0x08011deb
 8011c2c:	08011df1 	.word	0x08011df1
 8011c30:	08011df7 	.word	0x08011df7
 8011c34:	4b77      	ldr	r3, [pc, #476]	; (8011e14 <_strerror_r+0x438>)
 8011c36:	617b      	str	r3, [r7, #20]
 8011c38:	e19d      	b.n	8011f76 <_strerror_r+0x59a>
 8011c3a:	4b77      	ldr	r3, [pc, #476]	; (8011e18 <_strerror_r+0x43c>)
 8011c3c:	617b      	str	r3, [r7, #20]
 8011c3e:	e19a      	b.n	8011f76 <_strerror_r+0x59a>
 8011c40:	4b76      	ldr	r3, [pc, #472]	; (8011e1c <_strerror_r+0x440>)
 8011c42:	617b      	str	r3, [r7, #20]
 8011c44:	e197      	b.n	8011f76 <_strerror_r+0x59a>
 8011c46:	4b76      	ldr	r3, [pc, #472]	; (8011e20 <_strerror_r+0x444>)
 8011c48:	617b      	str	r3, [r7, #20]
 8011c4a:	e194      	b.n	8011f76 <_strerror_r+0x59a>
 8011c4c:	4b75      	ldr	r3, [pc, #468]	; (8011e24 <_strerror_r+0x448>)
 8011c4e:	617b      	str	r3, [r7, #20]
 8011c50:	e191      	b.n	8011f76 <_strerror_r+0x59a>
 8011c52:	4b75      	ldr	r3, [pc, #468]	; (8011e28 <_strerror_r+0x44c>)
 8011c54:	617b      	str	r3, [r7, #20]
 8011c56:	e18e      	b.n	8011f76 <_strerror_r+0x59a>
 8011c58:	4b74      	ldr	r3, [pc, #464]	; (8011e2c <_strerror_r+0x450>)
 8011c5a:	617b      	str	r3, [r7, #20]
 8011c5c:	e18b      	b.n	8011f76 <_strerror_r+0x59a>
 8011c5e:	4b74      	ldr	r3, [pc, #464]	; (8011e30 <_strerror_r+0x454>)
 8011c60:	617b      	str	r3, [r7, #20]
 8011c62:	e188      	b.n	8011f76 <_strerror_r+0x59a>
 8011c64:	4b73      	ldr	r3, [pc, #460]	; (8011e34 <_strerror_r+0x458>)
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e185      	b.n	8011f76 <_strerror_r+0x59a>
 8011c6a:	4b73      	ldr	r3, [pc, #460]	; (8011e38 <_strerror_r+0x45c>)
 8011c6c:	617b      	str	r3, [r7, #20]
 8011c6e:	e182      	b.n	8011f76 <_strerror_r+0x59a>
 8011c70:	4b72      	ldr	r3, [pc, #456]	; (8011e3c <_strerror_r+0x460>)
 8011c72:	617b      	str	r3, [r7, #20]
 8011c74:	e17f      	b.n	8011f76 <_strerror_r+0x59a>
 8011c76:	4b72      	ldr	r3, [pc, #456]	; (8011e40 <_strerror_r+0x464>)
 8011c78:	617b      	str	r3, [r7, #20]
 8011c7a:	e17c      	b.n	8011f76 <_strerror_r+0x59a>
 8011c7c:	4b71      	ldr	r3, [pc, #452]	; (8011e44 <_strerror_r+0x468>)
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	e179      	b.n	8011f76 <_strerror_r+0x59a>
 8011c82:	4b71      	ldr	r3, [pc, #452]	; (8011e48 <_strerror_r+0x46c>)
 8011c84:	617b      	str	r3, [r7, #20]
 8011c86:	e176      	b.n	8011f76 <_strerror_r+0x59a>
 8011c88:	4b70      	ldr	r3, [pc, #448]	; (8011e4c <_strerror_r+0x470>)
 8011c8a:	617b      	str	r3, [r7, #20]
 8011c8c:	e173      	b.n	8011f76 <_strerror_r+0x59a>
 8011c8e:	4b70      	ldr	r3, [pc, #448]	; (8011e50 <_strerror_r+0x474>)
 8011c90:	617b      	str	r3, [r7, #20]
 8011c92:	e170      	b.n	8011f76 <_strerror_r+0x59a>
 8011c94:	4b6f      	ldr	r3, [pc, #444]	; (8011e54 <_strerror_r+0x478>)
 8011c96:	617b      	str	r3, [r7, #20]
 8011c98:	e16d      	b.n	8011f76 <_strerror_r+0x59a>
 8011c9a:	4b6f      	ldr	r3, [pc, #444]	; (8011e58 <_strerror_r+0x47c>)
 8011c9c:	617b      	str	r3, [r7, #20]
 8011c9e:	e16a      	b.n	8011f76 <_strerror_r+0x59a>
 8011ca0:	4b6e      	ldr	r3, [pc, #440]	; (8011e5c <_strerror_r+0x480>)
 8011ca2:	617b      	str	r3, [r7, #20]
 8011ca4:	e167      	b.n	8011f76 <_strerror_r+0x59a>
 8011ca6:	4b6e      	ldr	r3, [pc, #440]	; (8011e60 <_strerror_r+0x484>)
 8011ca8:	617b      	str	r3, [r7, #20]
 8011caa:	e164      	b.n	8011f76 <_strerror_r+0x59a>
 8011cac:	4b6d      	ldr	r3, [pc, #436]	; (8011e64 <_strerror_r+0x488>)
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	e161      	b.n	8011f76 <_strerror_r+0x59a>
 8011cb2:	4b6d      	ldr	r3, [pc, #436]	; (8011e68 <_strerror_r+0x48c>)
 8011cb4:	617b      	str	r3, [r7, #20]
 8011cb6:	e15e      	b.n	8011f76 <_strerror_r+0x59a>
 8011cb8:	4b6c      	ldr	r3, [pc, #432]	; (8011e6c <_strerror_r+0x490>)
 8011cba:	617b      	str	r3, [r7, #20]
 8011cbc:	e15b      	b.n	8011f76 <_strerror_r+0x59a>
 8011cbe:	4b6c      	ldr	r3, [pc, #432]	; (8011e70 <_strerror_r+0x494>)
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e158      	b.n	8011f76 <_strerror_r+0x59a>
 8011cc4:	4b6b      	ldr	r3, [pc, #428]	; (8011e74 <_strerror_r+0x498>)
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	e155      	b.n	8011f76 <_strerror_r+0x59a>
 8011cca:	4b6b      	ldr	r3, [pc, #428]	; (8011e78 <_strerror_r+0x49c>)
 8011ccc:	617b      	str	r3, [r7, #20]
 8011cce:	e152      	b.n	8011f76 <_strerror_r+0x59a>
 8011cd0:	4b6a      	ldr	r3, [pc, #424]	; (8011e7c <_strerror_r+0x4a0>)
 8011cd2:	617b      	str	r3, [r7, #20]
 8011cd4:	e14f      	b.n	8011f76 <_strerror_r+0x59a>
 8011cd6:	4b6a      	ldr	r3, [pc, #424]	; (8011e80 <_strerror_r+0x4a4>)
 8011cd8:	617b      	str	r3, [r7, #20]
 8011cda:	e14c      	b.n	8011f76 <_strerror_r+0x59a>
 8011cdc:	4b69      	ldr	r3, [pc, #420]	; (8011e84 <_strerror_r+0x4a8>)
 8011cde:	617b      	str	r3, [r7, #20]
 8011ce0:	e149      	b.n	8011f76 <_strerror_r+0x59a>
 8011ce2:	4b69      	ldr	r3, [pc, #420]	; (8011e88 <_strerror_r+0x4ac>)
 8011ce4:	617b      	str	r3, [r7, #20]
 8011ce6:	e146      	b.n	8011f76 <_strerror_r+0x59a>
 8011ce8:	4b68      	ldr	r3, [pc, #416]	; (8011e8c <_strerror_r+0x4b0>)
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e143      	b.n	8011f76 <_strerror_r+0x59a>
 8011cee:	4b68      	ldr	r3, [pc, #416]	; (8011e90 <_strerror_r+0x4b4>)
 8011cf0:	617b      	str	r3, [r7, #20]
 8011cf2:	e140      	b.n	8011f76 <_strerror_r+0x59a>
 8011cf4:	4b67      	ldr	r3, [pc, #412]	; (8011e94 <_strerror_r+0x4b8>)
 8011cf6:	617b      	str	r3, [r7, #20]
 8011cf8:	e13d      	b.n	8011f76 <_strerror_r+0x59a>
 8011cfa:	4b67      	ldr	r3, [pc, #412]	; (8011e98 <_strerror_r+0x4bc>)
 8011cfc:	617b      	str	r3, [r7, #20]
 8011cfe:	e13a      	b.n	8011f76 <_strerror_r+0x59a>
 8011d00:	4b66      	ldr	r3, [pc, #408]	; (8011e9c <_strerror_r+0x4c0>)
 8011d02:	617b      	str	r3, [r7, #20]
 8011d04:	e137      	b.n	8011f76 <_strerror_r+0x59a>
 8011d06:	4b66      	ldr	r3, [pc, #408]	; (8011ea0 <_strerror_r+0x4c4>)
 8011d08:	617b      	str	r3, [r7, #20]
 8011d0a:	e134      	b.n	8011f76 <_strerror_r+0x59a>
 8011d0c:	4b65      	ldr	r3, [pc, #404]	; (8011ea4 <_strerror_r+0x4c8>)
 8011d0e:	617b      	str	r3, [r7, #20]
 8011d10:	e131      	b.n	8011f76 <_strerror_r+0x59a>
 8011d12:	4b65      	ldr	r3, [pc, #404]	; (8011ea8 <_strerror_r+0x4cc>)
 8011d14:	617b      	str	r3, [r7, #20]
 8011d16:	e12e      	b.n	8011f76 <_strerror_r+0x59a>
 8011d18:	4b64      	ldr	r3, [pc, #400]	; (8011eac <_strerror_r+0x4d0>)
 8011d1a:	617b      	str	r3, [r7, #20]
 8011d1c:	e12b      	b.n	8011f76 <_strerror_r+0x59a>
 8011d1e:	4b64      	ldr	r3, [pc, #400]	; (8011eb0 <_strerror_r+0x4d4>)
 8011d20:	617b      	str	r3, [r7, #20]
 8011d22:	e128      	b.n	8011f76 <_strerror_r+0x59a>
 8011d24:	4b63      	ldr	r3, [pc, #396]	; (8011eb4 <_strerror_r+0x4d8>)
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e125      	b.n	8011f76 <_strerror_r+0x59a>
 8011d2a:	4b63      	ldr	r3, [pc, #396]	; (8011eb8 <_strerror_r+0x4dc>)
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	e122      	b.n	8011f76 <_strerror_r+0x59a>
 8011d30:	4b62      	ldr	r3, [pc, #392]	; (8011ebc <_strerror_r+0x4e0>)
 8011d32:	617b      	str	r3, [r7, #20]
 8011d34:	e11f      	b.n	8011f76 <_strerror_r+0x59a>
 8011d36:	4b62      	ldr	r3, [pc, #392]	; (8011ec0 <_strerror_r+0x4e4>)
 8011d38:	617b      	str	r3, [r7, #20]
 8011d3a:	e11c      	b.n	8011f76 <_strerror_r+0x59a>
 8011d3c:	4b61      	ldr	r3, [pc, #388]	; (8011ec4 <_strerror_r+0x4e8>)
 8011d3e:	617b      	str	r3, [r7, #20]
 8011d40:	e119      	b.n	8011f76 <_strerror_r+0x59a>
 8011d42:	4b61      	ldr	r3, [pc, #388]	; (8011ec8 <_strerror_r+0x4ec>)
 8011d44:	617b      	str	r3, [r7, #20]
 8011d46:	e116      	b.n	8011f76 <_strerror_r+0x59a>
 8011d48:	4b60      	ldr	r3, [pc, #384]	; (8011ecc <_strerror_r+0x4f0>)
 8011d4a:	617b      	str	r3, [r7, #20]
 8011d4c:	e113      	b.n	8011f76 <_strerror_r+0x59a>
 8011d4e:	4b60      	ldr	r3, [pc, #384]	; (8011ed0 <_strerror_r+0x4f4>)
 8011d50:	617b      	str	r3, [r7, #20]
 8011d52:	e110      	b.n	8011f76 <_strerror_r+0x59a>
 8011d54:	4b5f      	ldr	r3, [pc, #380]	; (8011ed4 <_strerror_r+0x4f8>)
 8011d56:	617b      	str	r3, [r7, #20]
 8011d58:	e10d      	b.n	8011f76 <_strerror_r+0x59a>
 8011d5a:	4b5f      	ldr	r3, [pc, #380]	; (8011ed8 <_strerror_r+0x4fc>)
 8011d5c:	617b      	str	r3, [r7, #20]
 8011d5e:	e10a      	b.n	8011f76 <_strerror_r+0x59a>
 8011d60:	4b5e      	ldr	r3, [pc, #376]	; (8011edc <_strerror_r+0x500>)
 8011d62:	617b      	str	r3, [r7, #20]
 8011d64:	e107      	b.n	8011f76 <_strerror_r+0x59a>
 8011d66:	4b5e      	ldr	r3, [pc, #376]	; (8011ee0 <_strerror_r+0x504>)
 8011d68:	617b      	str	r3, [r7, #20]
 8011d6a:	e104      	b.n	8011f76 <_strerror_r+0x59a>
 8011d6c:	4b5d      	ldr	r3, [pc, #372]	; (8011ee4 <_strerror_r+0x508>)
 8011d6e:	617b      	str	r3, [r7, #20]
 8011d70:	e101      	b.n	8011f76 <_strerror_r+0x59a>
 8011d72:	4b5d      	ldr	r3, [pc, #372]	; (8011ee8 <_strerror_r+0x50c>)
 8011d74:	617b      	str	r3, [r7, #20]
 8011d76:	e0fe      	b.n	8011f76 <_strerror_r+0x59a>
 8011d78:	4b5c      	ldr	r3, [pc, #368]	; (8011eec <_strerror_r+0x510>)
 8011d7a:	617b      	str	r3, [r7, #20]
 8011d7c:	e0fb      	b.n	8011f76 <_strerror_r+0x59a>
 8011d7e:	4b5c      	ldr	r3, [pc, #368]	; (8011ef0 <_strerror_r+0x514>)
 8011d80:	617b      	str	r3, [r7, #20]
 8011d82:	e0f8      	b.n	8011f76 <_strerror_r+0x59a>
 8011d84:	4b5b      	ldr	r3, [pc, #364]	; (8011ef4 <_strerror_r+0x518>)
 8011d86:	617b      	str	r3, [r7, #20]
 8011d88:	e0f5      	b.n	8011f76 <_strerror_r+0x59a>
 8011d8a:	4b5b      	ldr	r3, [pc, #364]	; (8011ef8 <_strerror_r+0x51c>)
 8011d8c:	617b      	str	r3, [r7, #20]
 8011d8e:	e0f2      	b.n	8011f76 <_strerror_r+0x59a>
 8011d90:	4b5a      	ldr	r3, [pc, #360]	; (8011efc <_strerror_r+0x520>)
 8011d92:	617b      	str	r3, [r7, #20]
 8011d94:	e0ef      	b.n	8011f76 <_strerror_r+0x59a>
 8011d96:	4b5a      	ldr	r3, [pc, #360]	; (8011f00 <_strerror_r+0x524>)
 8011d98:	617b      	str	r3, [r7, #20]
 8011d9a:	e0ec      	b.n	8011f76 <_strerror_r+0x59a>
 8011d9c:	4b59      	ldr	r3, [pc, #356]	; (8011f04 <_strerror_r+0x528>)
 8011d9e:	617b      	str	r3, [r7, #20]
 8011da0:	e0e9      	b.n	8011f76 <_strerror_r+0x59a>
 8011da2:	4b59      	ldr	r3, [pc, #356]	; (8011f08 <_strerror_r+0x52c>)
 8011da4:	617b      	str	r3, [r7, #20]
 8011da6:	e0e6      	b.n	8011f76 <_strerror_r+0x59a>
 8011da8:	4b58      	ldr	r3, [pc, #352]	; (8011f0c <_strerror_r+0x530>)
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	e0e3      	b.n	8011f76 <_strerror_r+0x59a>
 8011dae:	4b58      	ldr	r3, [pc, #352]	; (8011f10 <_strerror_r+0x534>)
 8011db0:	617b      	str	r3, [r7, #20]
 8011db2:	e0e0      	b.n	8011f76 <_strerror_r+0x59a>
 8011db4:	4b57      	ldr	r3, [pc, #348]	; (8011f14 <_strerror_r+0x538>)
 8011db6:	617b      	str	r3, [r7, #20]
 8011db8:	e0dd      	b.n	8011f76 <_strerror_r+0x59a>
 8011dba:	4b57      	ldr	r3, [pc, #348]	; (8011f18 <_strerror_r+0x53c>)
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e0da      	b.n	8011f76 <_strerror_r+0x59a>
 8011dc0:	4b56      	ldr	r3, [pc, #344]	; (8011f1c <_strerror_r+0x540>)
 8011dc2:	617b      	str	r3, [r7, #20]
 8011dc4:	e0d7      	b.n	8011f76 <_strerror_r+0x59a>
 8011dc6:	4b56      	ldr	r3, [pc, #344]	; (8011f20 <_strerror_r+0x544>)
 8011dc8:	617b      	str	r3, [r7, #20]
 8011dca:	e0d4      	b.n	8011f76 <_strerror_r+0x59a>
 8011dcc:	4b55      	ldr	r3, [pc, #340]	; (8011f24 <_strerror_r+0x548>)
 8011dce:	617b      	str	r3, [r7, #20]
 8011dd0:	e0d1      	b.n	8011f76 <_strerror_r+0x59a>
 8011dd2:	4b55      	ldr	r3, [pc, #340]	; (8011f28 <_strerror_r+0x54c>)
 8011dd4:	617b      	str	r3, [r7, #20]
 8011dd6:	e0ce      	b.n	8011f76 <_strerror_r+0x59a>
 8011dd8:	4b54      	ldr	r3, [pc, #336]	; (8011f2c <_strerror_r+0x550>)
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	e0cb      	b.n	8011f76 <_strerror_r+0x59a>
 8011dde:	4b54      	ldr	r3, [pc, #336]	; (8011f30 <_strerror_r+0x554>)
 8011de0:	617b      	str	r3, [r7, #20]
 8011de2:	e0c8      	b.n	8011f76 <_strerror_r+0x59a>
 8011de4:	4b53      	ldr	r3, [pc, #332]	; (8011f34 <_strerror_r+0x558>)
 8011de6:	617b      	str	r3, [r7, #20]
 8011de8:	e0c5      	b.n	8011f76 <_strerror_r+0x59a>
 8011dea:	4b53      	ldr	r3, [pc, #332]	; (8011f38 <_strerror_r+0x55c>)
 8011dec:	617b      	str	r3, [r7, #20]
 8011dee:	e0c2      	b.n	8011f76 <_strerror_r+0x59a>
 8011df0:	4b52      	ldr	r3, [pc, #328]	; (8011f3c <_strerror_r+0x560>)
 8011df2:	617b      	str	r3, [r7, #20]
 8011df4:	e0bf      	b.n	8011f76 <_strerror_r+0x59a>
 8011df6:	4b52      	ldr	r3, [pc, #328]	; (8011f40 <_strerror_r+0x564>)
 8011df8:	617b      	str	r3, [r7, #20]
 8011dfa:	e0bc      	b.n	8011f76 <_strerror_r+0x59a>
 8011dfc:	4b51      	ldr	r3, [pc, #324]	; (8011f44 <_strerror_r+0x568>)
 8011dfe:	617b      	str	r3, [r7, #20]
 8011e00:	e0b9      	b.n	8011f76 <_strerror_r+0x59a>
 8011e02:	4b51      	ldr	r3, [pc, #324]	; (8011f48 <_strerror_r+0x56c>)
 8011e04:	617b      	str	r3, [r7, #20]
 8011e06:	e0b6      	b.n	8011f76 <_strerror_r+0x59a>
 8011e08:	4b50      	ldr	r3, [pc, #320]	; (8011f4c <_strerror_r+0x570>)
 8011e0a:	617b      	str	r3, [r7, #20]
 8011e0c:	e0b3      	b.n	8011f76 <_strerror_r+0x59a>
 8011e0e:	4b50      	ldr	r3, [pc, #320]	; (8011f50 <_strerror_r+0x574>)
 8011e10:	617b      	str	r3, [r7, #20]
 8011e12:	e0b0      	b.n	8011f76 <_strerror_r+0x59a>
 8011e14:	0801a298 	.word	0x0801a298
 8011e18:	0801a2a0 	.word	0x0801a2a0
 8011e1c:	0801a2ac 	.word	0x0801a2ac
 8011e20:	0801a2c8 	.word	0x0801a2c8
 8011e24:	0801a2d8 	.word	0x0801a2d8
 8011e28:	0801a2f0 	.word	0x0801a2f0
 8011e2c:	0801a2fc 	.word	0x0801a2fc
 8011e30:	0801a318 	.word	0x0801a318
 8011e34:	0801a32c 	.word	0x0801a32c
 8011e38:	0801a340 	.word	0x0801a340
 8011e3c:	0801a35c 	.word	0x0801a35c
 8011e40:	0801a36c 	.word	0x0801a36c
 8011e44:	0801a378 	.word	0x0801a378
 8011e48:	0801a398 	.word	0x0801a398
 8011e4c:	0801a3ac 	.word	0x0801a3ac
 8011e50:	0801a3c0 	.word	0x0801a3c0
 8011e54:	0801a3d4 	.word	0x0801a3d4
 8011e58:	0801a3e0 	.word	0x0801a3e0
 8011e5c:	0801a3f8 	.word	0x0801a3f8
 8011e60:	0801a404 	.word	0x0801a404
 8011e64:	0801a418 	.word	0x0801a418
 8011e68:	0801a428 	.word	0x0801a428
 8011e6c:	0801a438 	.word	0x0801a438
 8011e70:	0801a448 	.word	0x0801a448
 8011e74:	0801a468 	.word	0x0801a468
 8011e78:	0801a478 	.word	0x0801a478
 8011e7c:	0801a48c 	.word	0x0801a48c
 8011e80:	0801a4b0 	.word	0x0801a4b0
 8011e84:	0801a4d0 	.word	0x0801a4d0
 8011e88:	0801a4f0 	.word	0x0801a4f0
 8011e8c:	0801a510 	.word	0x0801a510
 8011e90:	0801a528 	.word	0x0801a528
 8011e94:	0801a538 	.word	0x0801a538
 8011e98:	0801a548 	.word	0x0801a548
 8011e9c:	0801a55c 	.word	0x0801a55c
 8011ea0:	0801a574 	.word	0x0801a574
 8011ea4:	0801a584 	.word	0x0801a584
 8011ea8:	0801a594 	.word	0x0801a594
 8011eac:	0801a5ac 	.word	0x0801a5ac
 8011eb0:	0801a5bc 	.word	0x0801a5bc
 8011eb4:	0801a5c8 	.word	0x0801a5c8
 8011eb8:	0801a5f8 	.word	0x0801a5f8
 8011ebc:	0801a60c 	.word	0x0801a60c
 8011ec0:	0801a628 	.word	0x0801a628
 8011ec4:	0801a63c 	.word	0x0801a63c
 8011ec8:	0801a654 	.word	0x0801a654
 8011ecc:	0801a660 	.word	0x0801a660
 8011ed0:	0801a678 	.word	0x0801a678
 8011ed4:	0801a680 	.word	0x0801a680
 8011ed8:	0801a690 	.word	0x0801a690
 8011edc:	0801a6a8 	.word	0x0801a6a8
 8011ee0:	0801a6bc 	.word	0x0801a6bc
 8011ee4:	0801a6d4 	.word	0x0801a6d4
 8011ee8:	0801a6e4 	.word	0x0801a6e4
 8011eec:	0801a6f8 	.word	0x0801a6f8
 8011ef0:	0801a70c 	.word	0x0801a70c
 8011ef4:	0801a718 	.word	0x0801a718
 8011ef8:	0801a734 	.word	0x0801a734
 8011efc:	0801a748 	.word	0x0801a748
 8011f00:	0801a764 	.word	0x0801a764
 8011f04:	0801a77c 	.word	0x0801a77c
 8011f08:	0801a798 	.word	0x0801a798
 8011f0c:	0801a7a0 	.word	0x0801a7a0
 8011f10:	0801a7d0 	.word	0x0801a7d0
 8011f14:	0801a7f0 	.word	0x0801a7f0
 8011f18:	0801a810 	.word	0x0801a810
 8011f1c:	0801a828 	.word	0x0801a828
 8011f20:	0801a83c 	.word	0x0801a83c
 8011f24:	0801a858 	.word	0x0801a858
 8011f28:	0801a870 	.word	0x0801a870
 8011f2c:	0801a888 	.word	0x0801a888
 8011f30:	0801a8ac 	.word	0x0801a8ac
 8011f34:	0801a8c4 	.word	0x0801a8c4
 8011f38:	0801a8e0 	.word	0x0801a8e0
 8011f3c:	0801a8f4 	.word	0x0801a8f4
 8011f40:	0801a90c 	.word	0x0801a90c
 8011f44:	0801a920 	.word	0x0801a920
 8011f48:	0801a944 	.word	0x0801a944
 8011f4c:	0801a96c 	.word	0x0801a96c
 8011f50:	0801a980 	.word	0x0801a980
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d101      	bne.n	8011f5e <_strerror_r+0x582>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	603b      	str	r3, [r7, #0]
 8011f5e:	683a      	ldr	r2, [r7, #0]
 8011f60:	6879      	ldr	r1, [r7, #4]
 8011f62:	68b8      	ldr	r0, [r7, #8]
 8011f64:	f007 fec9 	bl	8019cfa <_user_strerror>
 8011f68:	6178      	str	r0, [r7, #20]
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d101      	bne.n	8011f74 <_strerror_r+0x598>
 8011f70:	4b03      	ldr	r3, [pc, #12]	; (8011f80 <_strerror_r+0x5a4>)
 8011f72:	617b      	str	r3, [r7, #20]
 8011f74:	bf00      	nop
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3718      	adds	r7, #24
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	0801a998 	.word	0x0801a998

08011f84 <_fstat_r>:
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b086      	sub	sp, #24
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
 8011f90:	4b0c      	ldr	r3, [pc, #48]	; (8011fc4 <_fstat_r+0x40>)
 8011f92:	2200      	movs	r2, #0
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	6879      	ldr	r1, [r7, #4]
 8011f98:	68b8      	ldr	r0, [r7, #8]
 8011f9a:	f000 fa99 	bl	80124d0 <_fstat>
 8011f9e:	6178      	str	r0, [r7, #20]
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fa6:	d107      	bne.n	8011fb8 <_fstat_r+0x34>
 8011fa8:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <_fstat_r+0x40>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d003      	beq.n	8011fb8 <_fstat_r+0x34>
 8011fb0:	4b04      	ldr	r3, [pc, #16]	; (8011fc4 <_fstat_r+0x40>)
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	601a      	str	r2, [r3, #0]
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	2000598c 	.word	0x2000598c

08011fc8 <_isatty_r>:
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	6039      	str	r1, [r7, #0]
 8011fd2:	4b0c      	ldr	r3, [pc, #48]	; (8012004 <_isatty_r+0x3c>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	6838      	ldr	r0, [r7, #0]
 8011fda:	f000 fa70 	bl	80124be <_isatty>
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fe6:	d107      	bne.n	8011ff8 <_isatty_r+0x30>
 8011fe8:	4b06      	ldr	r3, [pc, #24]	; (8012004 <_isatty_r+0x3c>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d003      	beq.n	8011ff8 <_isatty_r+0x30>
 8011ff0:	4b04      	ldr	r3, [pc, #16]	; (8012004 <_isatty_r+0x3c>)
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	2000598c 	.word	0x2000598c

08012008 <stdinout_read_vmeth>:
int z_impl_zephyr_write_stdout(const char *buf, int nbytes);

static ssize_t stdinout_read_vmeth(void *obj, void *buffer, size_t count)
{
	return 0;
}
 8012008:	2000      	movs	r0, #0
 801200a:	4770      	bx	lr

0801200c <stdinout_ioctl_vmeth>:
	return 0;
#endif
}

static int stdinout_ioctl_vmeth(void *obj, unsigned int request, va_list args)
{
 801200c:	b508      	push	{r3, lr}
	errno = EINVAL;
 801200e:	f000 fa64 	bl	80124da <__errno>
 8012012:	2316      	movs	r3, #22
 8012014:	6003      	str	r3, [r0, #0]
	return -1;
}
 8012016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801201a:	bd08      	pop	{r3, pc}

0801201c <stdinout_write_vmeth>:
{
 801201c:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buffer, count);
 801201e:	4611      	mov	r1, r2
 8012020:	f7f2 b9a8 	b.w	8004374 <z_impl_zephyr_write_stdout>

08012024 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
 8012024:	b40c      	push	{r2, r3}
 8012026:	b507      	push	{r0, r1, r2, lr}
 8012028:	4603      	mov	r3, r0
 801202a:	aa04      	add	r2, sp, #16
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
 801202c:	68db      	ldr	r3, [r3, #12]
{
 801202e:	4608      	mov	r0, r1
 8012030:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
 8012034:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
 8012036:	4798      	blx	r3
	va_end(args);

	return res;
}
 8012038:	b003      	add	sp, #12
 801203a:	f85d eb04 	ldr.w	lr, [sp], #4
 801203e:	b002      	add	sp, #8
 8012040:	4770      	bx	lr

08012042 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
 8012042:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8012044:	f7f3 f998 	bl	8005378 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
 8012048:	2000      	movs	r0, #0
 801204a:	bd08      	pop	{r3, pc}

0801204c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
 801204c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
 801204e:	f7f3 f9b3 	bl	80053b8 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
 8012052:	f110 0f0b 	cmn.w	r0, #11
 8012056:	d005      	beq.n	8012064 <sys_sem_take+0x18>
 8012058:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
 801205c:	bf08      	it	eq
 801205e:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
 8012062:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
 8012064:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
 8012068:	e7fb      	b.n	8012062 <sys_sem_take+0x16>

0801206a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 801206a:	4604      	mov	r4, r0
 801206c:	b508      	push	{r3, lr}
 801206e:	4608      	mov	r0, r1
 8012070:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8012072:	461a      	mov	r2, r3
 8012074:	47a0      	blx	r4
	return z_impl_k_current_get();
 8012076:	f7f3 f979 	bl	800536c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 801207a:	f7f2 f89d 	bl	80041b8 <z_impl_k_thread_abort>

0801207e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 801207e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8012080:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8012084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 8012088:	bf2c      	ite	cs
 801208a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 801208e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8012092:	4770      	bx	lr

08012094 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8012094:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 8012098:	6880      	ldr	r0, [r0, #8]
 801209a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 801209e:	bf2c      	ite	cs
 80120a0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80120a4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 80120a8:	4770      	bx	lr

080120aa <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
 80120aa:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80120ac:	2201      	movs	r2, #1
 80120ae:	f7ff ffe6 	bl	801207e <chunk_field>
}
 80120b2:	0840      	lsrs	r0, r0, #1
 80120b4:	bd08      	pop	{r3, pc}

080120b6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80120b6:	6883      	ldr	r3, [r0, #8]
 80120b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 80120bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80120c0:	d308      	bcc.n	80120d4 <set_chunk_used+0x1e>
		if (used) {
 80120c2:	684b      	ldr	r3, [r1, #4]
 80120c4:	b11a      	cbz	r2, 80120ce <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 80120c6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80120ca:	604b      	str	r3, [r1, #4]
 80120cc:	4770      	bx	lr
 80120ce:	f023 0301 	bic.w	r3, r3, #1
 80120d2:	e7fa      	b.n	80120ca <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 80120d4:	884b      	ldrh	r3, [r1, #2]
 80120d6:	b11a      	cbz	r2, 80120e0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80120d8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80120dc:	804b      	strh	r3, [r1, #2]
		}
	}
}
 80120de:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80120e0:	f023 0301 	bic.w	r3, r3, #1
 80120e4:	e7fa      	b.n	80120dc <set_chunk_used+0x26>

080120e6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80120e6:	0053      	lsls	r3, r2, #1
 80120e8:	2201      	movs	r2, #1
 80120ea:	f7ff bfd3 	b.w	8012094 <chunk_set>

080120ee <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80120ee:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80120f0:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80120f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80120f6:	bf2c      	ite	cs
 80120f8:	2002      	movcs	r0, #2
 80120fa:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80120fc:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 80120fe:	fab0 f080 	clz	r0, r0
}
 8012102:	f1c0 001f 	rsb	r0, r0, #31
 8012106:	4770      	bx	lr

08012108 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 8012108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801210c:	4604      	mov	r4, r0
 801210e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
 8012110:	f7ff ffcb 	bl	80120aa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
 8012114:	68a3      	ldr	r3, [r4, #8]
 8012116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801211a:	4601      	mov	r1, r0
 801211c:	d301      	bcc.n	8012122 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 801211e:	2801      	cmp	r0, #1
 8012120:	d035      	beq.n	801218e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8012122:	4620      	mov	r0, r4
 8012124:	f7ff ffe3 	bl	80120ee <bucket_idx>
	if (b->next == 0U) {
 8012128:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801212c:	6916      	ldr	r6, [r2, #16]
 801212e:	b99e      	cbnz	r6, 8012158 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8012130:	2301      	movs	r3, #1
 8012132:	fa03 f000 	lsl.w	r0, r3, r0
 8012136:	68e3      	ldr	r3, [r4, #12]
 8012138:	4303      	orrs	r3, r0
 801213a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 801213c:	4629      	mov	r1, r5
		b->next = c;
 801213e:	6115      	str	r5, [r2, #16]
 8012140:	462b      	mov	r3, r5
 8012142:	2202      	movs	r2, #2
 8012144:	4620      	mov	r0, r4
 8012146:	f7ff ffa5 	bl	8012094 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 801214a:	2203      	movs	r2, #3
 801214c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 801214e:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8012150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012154:	f7ff bf9e 	b.w	8012094 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 8012158:	2202      	movs	r2, #2
 801215a:	4631      	mov	r1, r6
 801215c:	4620      	mov	r0, r4
 801215e:	f7ff ff8e 	bl	801207e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8012162:	2202      	movs	r2, #2
 8012164:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 8012166:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 8012168:	4629      	mov	r1, r5
 801216a:	4620      	mov	r0, r4
 801216c:	f7ff ff92 	bl	8012094 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8012170:	4633      	mov	r3, r6
 8012172:	2203      	movs	r2, #3
 8012174:	4629      	mov	r1, r5
 8012176:	4620      	mov	r0, r4
 8012178:	f7ff ff8c 	bl	8012094 <chunk_set>
 801217c:	2203      	movs	r2, #3
 801217e:	4639      	mov	r1, r7
 8012180:	462b      	mov	r3, r5
 8012182:	4620      	mov	r0, r4
 8012184:	f7ff ff86 	bl	8012094 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 8012188:	2202      	movs	r2, #2
 801218a:	4631      	mov	r1, r6
 801218c:	e7df      	b.n	801214e <free_list_add+0x46>
 801218e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012192 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8012192:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8012196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012198:	bf2c      	ite	cs
 801219a:	2508      	movcs	r5, #8
 801219c:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 801219e:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80121a0:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80121a2:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 80121a4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 80121a8:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 80121ac:	2200      	movs	r2, #0
 80121ae:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 80121b0:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
 80121b2:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 80121b4:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
 80121b6:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
 80121ba:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80121bc:	4629      	mov	r1, r5
	h->len = buf_sz;
 80121be:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 80121c0:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80121c2:	4620      	mov	r0, r4
 80121c4:	f7ff ff93 	bl	80120ee <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 80121c8:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80121ca:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 80121cc:	1c41      	adds	r1, r0, #1
 80121ce:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 80121d0:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
 80121d4:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 80121d6:	428b      	cmp	r3, r1
 80121d8:	db29      	blt.n	801222e <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 80121da:	4632      	mov	r2, r6
 80121dc:	4620      	mov	r0, r4
 80121de:	2100      	movs	r1, #0
 80121e0:	f7ff ff81 	bl	80120e6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80121e4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
 80121e6:	4620      	mov	r0, r4
 80121e8:	2201      	movs	r2, #1
 80121ea:	2100      	movs	r1, #0
 80121ec:	f7ff ff63 	bl	80120b6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80121f0:	463a      	mov	r2, r7
 80121f2:	4631      	mov	r1, r6
 80121f4:	f7ff ff77 	bl	80120e6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80121f8:	4633      	mov	r3, r6
 80121fa:	4631      	mov	r1, r6
 80121fc:	4620      	mov	r0, r4
 80121fe:	2200      	movs	r2, #0
 8012200:	f7ff ff48 	bl	8012094 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 8012204:	4629      	mov	r1, r5
 8012206:	4620      	mov	r0, r4
 8012208:	2200      	movs	r2, #0
 801220a:	f7ff ff6c 	bl	80120e6 <set_chunk_size>
 801220e:	463b      	mov	r3, r7
 8012210:	4629      	mov	r1, r5
 8012212:	4620      	mov	r0, r4
 8012214:	2200      	movs	r2, #0
 8012216:	f7ff ff3d 	bl	8012094 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 801221a:	4629      	mov	r1, r5
 801221c:	4620      	mov	r0, r4
 801221e:	2201      	movs	r2, #1
 8012220:	f7ff ff49 	bl	80120b6 <set_chunk_used>

	free_list_add(h, chunk0_size);
 8012224:	4631      	mov	r1, r6
}
 8012226:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 801222a:	f7ff bf6d 	b.w	8012108 <free_list_add>
		h->buckets[i].next = 0;
 801222e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8012232:	3301      	adds	r3, #1
 8012234:	e7cf      	b.n	80121d6 <sys_heap_init+0x44>

08012236 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
 8012236:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801223a:	4770      	bx	lr

0801223c <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 801223c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 801223e:	6985      	ldr	r5, [r0, #24]
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
 8012240:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8012242:	6907      	ldr	r7, [r0, #16]
{
 8012244:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 8012246:	b185      	cbz	r5, 801226a <ring_buf_put_claim+0x2e>
 8012248:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	443b      	add	r3, r7
 801224e:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
 8012250:	4290      	cmp	r0, r2
 8012252:	bf28      	it	cs
 8012254:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
 8012256:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
	*data = &buf->buf.buf8[tmp_trail_mod];
 8012258:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
 801225a:	42b8      	cmp	r0, r7
 801225c:	bf28      	it	cs
 801225e:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
 8012260:	441d      	add	r5, r3

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
 8012262:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
 8012264:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
 8012266:	60a6      	str	r6, [r4, #8]

	return allocated;
}
 8012268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 801226a:	fbb6 f5f7 	udiv	r5, r6, r7
 801226e:	fb07 6515 	mls	r5, r7, r5, r6
 8012272:	e7ea      	b.n	801224a <ring_buf_put_claim+0xe>

08012274 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
 8012274:	6843      	ldr	r3, [r0, #4]
 8012276:	6902      	ldr	r2, [r0, #16]
 8012278:	4419      	add	r1, r3
 801227a:	6803      	ldr	r3, [r0, #0]
 801227c:	4413      	add	r3, r2
 801227e:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
 8012280:	bf9a      	itte	ls
 8012282:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
 8012286:	2000      	movls	r0, #0
		return -EINVAL;
 8012288:	f06f 0015 	mvnhi.w	r0, #21
}
 801228c:	4770      	bx	lr

0801228e <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
 801228e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012292:	4680      	mov	r8, r0
 8012294:	460e      	mov	r6, r1
 8012296:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 8012298:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
 801229a:	462a      	mov	r2, r5
 801229c:	a901      	add	r1, sp, #4
 801229e:	4640      	mov	r0, r8
 80122a0:	f7ff ffcc 	bl	801223c <ring_buf_put_claim>
 80122a4:	4631      	mov	r1, r6
 80122a6:	4604      	mov	r4, r0
 80122a8:	4602      	mov	r2, r0
 80122aa:	9801      	ldr	r0, [sp, #4]
 80122ac:	f7ef fa78 	bl	80017a0 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 80122b0:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 80122b2:	4427      	add	r7, r4
		data += partial_size;
 80122b4:	4426      	add	r6, r4
	} while (size && partial_size);
 80122b6:	d001      	beq.n	80122bc <ring_buf_put+0x2e>
 80122b8:	2c00      	cmp	r4, #0
 80122ba:	d1ee      	bne.n	801229a <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
 80122bc:	4639      	mov	r1, r7
 80122be:	4640      	mov	r0, r8
 80122c0:	f7ff ffd8 	bl	8012274 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 80122c4:	4638      	mov	r0, r7
 80122c6:	b002      	add	sp, #8
 80122c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122cc <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
 80122cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 80122ce:	6985      	ldr	r5, [r0, #24]
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
 80122d0:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 80122d2:	6903      	ldr	r3, [r0, #16]
{
 80122d4:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 80122d6:	b185      	cbz	r5, 80122fa <ring_buf_get_claim+0x2e>
 80122d8:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
 80122da:	6867      	ldr	r7, [r4, #4]
 80122dc:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
 80122de:	4290      	cmp	r0, r2
 80122e0:	bf28      	it	cs
 80122e2:	4610      	movcs	r0, r2
 80122e4:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
 80122e6:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
 80122e8:	42b8      	cmp	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
 80122ea:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
 80122ec:	bf28      	it	cs
 80122ee:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_head_mod];
 80122f0:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
 80122f2:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
 80122f4:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
 80122f6:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
 80122f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
 80122fa:	fbb6 f5f3 	udiv	r5, r6, r3
 80122fe:	fb03 6515 	mls	r5, r3, r5, r6
 8012302:	e7ea      	b.n	80122da <ring_buf_get_claim+0xe>

08012304 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
 8012304:	6803      	ldr	r3, [r0, #0]
 8012306:	4419      	add	r1, r3
 8012308:	6843      	ldr	r3, [r0, #4]
 801230a:	4299      	cmp	r1, r3
{
 801230c:	b510      	push	{r4, lr}
 801230e:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
 8012310:	d824      	bhi.n	801235c <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
 8012312:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
 8012314:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
 8012316:	f7ff ff8e 	bl	8012236 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
 801231a:	6823      	ldr	r3, [r4, #0]
 801231c:	4298      	cmp	r0, r3
 801231e:	d81b      	bhi.n	8012358 <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
 8012320:	6923      	ldr	r3, [r4, #16]
 8012322:	fbb0 f0f3 	udiv	r0, r0, r3
 8012326:	4358      	muls	r0, r3
	__asm__ volatile(
 8012328:	f04f 0310 	mov.w	r3, #16
 801232c:	f3ef 8211 	mrs	r2, BASEPRI
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
 8012338:	6863      	ldr	r3, [r4, #4]
 801233a:	1a1b      	subs	r3, r3, r0
 801233c:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	1a1b      	subs	r3, r3, r0
 8012342:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
 8012344:	68e3      	ldr	r3, [r4, #12]
 8012346:	1a1b      	subs	r3, r3, r0
 8012348:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	1a18      	subs	r0, r3, r0
 801234e:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
 8012350:	f382 8811 	msr	BASEPRI, r2
 8012354:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
 8012358:	2000      	movs	r0, #0
 801235a:	e001      	b.n	8012360 <ring_buf_get_finish+0x5c>
		return -EINVAL;
 801235c:	f06f 0015 	mvn.w	r0, #21
}
 8012360:	bd10      	pop	{r4, pc}

08012362 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
 8012362:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012366:	4680      	mov	r8, r0
 8012368:	460e      	mov	r6, r1
 801236a:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
 801236c:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
 801236e:	462a      	mov	r2, r5
 8012370:	a901      	add	r1, sp, #4
 8012372:	4640      	mov	r0, r8
 8012374:	f7ff ffaa 	bl	80122cc <ring_buf_get_claim>
 8012378:	9901      	ldr	r1, [sp, #4]
 801237a:	4604      	mov	r4, r0
 801237c:	4602      	mov	r2, r0
 801237e:	4630      	mov	r0, r6
 8012380:	f7ef fa0e 	bl	80017a0 <memcpy>
		memcpy(data, src, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
 8012384:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
 8012386:	4427      	add	r7, r4
		data += partial_size;
 8012388:	4426      	add	r6, r4
	} while (size && partial_size);
 801238a:	d001      	beq.n	8012390 <ring_buf_get+0x2e>
 801238c:	2c00      	cmp	r4, #0
 801238e:	d1ee      	bne.n	801236e <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
 8012390:	4639      	mov	r1, r7
 8012392:	4640      	mov	r0, r8
 8012394:	f7ff ffb6 	bl	8012304 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
 8012398:	4638      	mov	r0, r7
 801239a:	b002      	add	sp, #8
 801239c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080123a0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80123a0:	4770      	bx	lr

080123a2 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80123a2:	68c2      	ldr	r2, [r0, #12]
 80123a4:	2101      	movs	r1, #1
 80123a6:	2000      	movs	r0, #0
 80123a8:	f7f1 ba0a 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123ac <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80123ac:	68c2      	ldr	r2, [r0, #12]
 80123ae:	2102      	movs	r1, #2
 80123b0:	2001      	movs	r0, #1
 80123b2:	f7f1 ba05 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123b6 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80123b6:	68c2      	ldr	r2, [r0, #12]
 80123b8:	2103      	movs	r1, #3
 80123ba:	2002      	movs	r0, #2
 80123bc:	f7f1 ba00 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123c0 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80123c0:	68c2      	ldr	r2, [r0, #12]
 80123c2:	2104      	movs	r1, #4
 80123c4:	2003      	movs	r0, #3
 80123c6:	f7f1 b9fb 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123ca <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 80123ca:	68c2      	ldr	r2, [r0, #12]
 80123cc:	2105      	movs	r1, #5
 80123ce:	2004      	movs	r0, #4
 80123d0:	f7f1 b9f6 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123d4 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80123d4:	68c2      	ldr	r2, [r0, #12]
 80123d6:	210a      	movs	r1, #10
 80123d8:	2005      	movs	r0, #5
 80123da:	f7f1 b9f1 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123de <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80123de:	68c2      	ldr	r2, [r0, #12]
 80123e0:	2110      	movs	r1, #16
 80123e2:	200a      	movs	r0, #10
 80123e4:	f7f1 b9ec 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123e8 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 80123e8:	68c2      	ldr	r2, [r0, #12]
 80123ea:	2111      	movs	r1, #17
 80123ec:	2010      	movs	r0, #16
 80123ee:	f7f1 b9e7 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123f2 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 80123f2:	68c2      	ldr	r2, [r0, #12]
 80123f4:	2113      	movs	r1, #19
 80123f6:	2012      	movs	r0, #18
 80123f8:	f7f1 b9e2 	b.w	80037c0 <__stm32_exti_isr.isra.0>

080123fc <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 80123fc:	68c2      	ldr	r2, [r0, #12]
 80123fe:	2116      	movs	r1, #22
 8012400:	2015      	movs	r0, #21
 8012402:	f7f1 b9dd 	b.w	80037c0 <__stm32_exti_isr.isra.0>

08012406 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8012406:	68c2      	ldr	r2, [r0, #12]
 8012408:	2117      	movs	r1, #23
 801240a:	2016      	movs	r0, #22
 801240c:	f7f1 b9d8 	b.w	80037c0 <__stm32_exti_isr.isra.0>

08012410 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8012410:	2200      	movs	r2, #0
{
 8012412:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8012414:	4611      	mov	r1, r2
 8012416:	2006      	movs	r0, #6
 8012418:	f7f1 fcf2 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 801241c:	2200      	movs	r2, #0
 801241e:	4611      	mov	r1, r2
 8012420:	2007      	movs	r0, #7
 8012422:	f7f1 fced 	bl	8003e00 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8012426:	2200      	movs	r2, #0
 8012428:	4611      	mov	r1, r2
 801242a:	2008      	movs	r0, #8
 801242c:	f7f1 fce8 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8012430:	2200      	movs	r2, #0
 8012432:	4611      	mov	r1, r2
 8012434:	2009      	movs	r0, #9
 8012436:	f7f1 fce3 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 801243a:	2200      	movs	r2, #0
 801243c:	4611      	mov	r1, r2
 801243e:	200a      	movs	r0, #10
 8012440:	f7f1 fcde 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8012444:	2200      	movs	r2, #0
 8012446:	4611      	mov	r1, r2
 8012448:	2017      	movs	r0, #23
 801244a:	f7f1 fcd9 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 801244e:	2200      	movs	r2, #0
 8012450:	4611      	mov	r1, r2
 8012452:	2028      	movs	r0, #40	; 0x28
 8012454:	f7f1 fcd4 	bl	8003e00 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8012458:	2200      	movs	r2, #0
 801245a:	4611      	mov	r1, r2
 801245c:	2001      	movs	r0, #1
 801245e:	f7f1 fccf 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_STM32F410RX)
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8012462:	2200      	movs	r2, #0
 8012464:	4611      	mov	r1, r2
 8012466:	202a      	movs	r0, #42	; 0x2a
 8012468:	f7f1 fcca 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
#endif
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 801246c:	2200      	movs	r2, #0
 801246e:	4611      	mov	r1, r2
 8012470:	2002      	movs	r0, #2
 8012472:	f7f1 fcc5 	bl	8003e00 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8012476:	2200      	movs	r2, #0
 8012478:	4611      	mov	r1, r2
 801247a:	2003      	movs	r0, #3
 801247c:	f7f1 fcc0 	bl	8003e00 <z_arm_irq_priority_set>
}
 8012480:	2000      	movs	r0, #0
 8012482:	bd08      	pop	{r3, pc}

08012484 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8012484:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8012488:	2208      	movs	r2, #8
 801248a:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 801248e:	2300      	movs	r3, #0
 8012490:	6083      	str	r3, [r0, #8]
}
 8012492:	4770      	bx	lr

08012494 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8012494:	4770      	bx	lr

08012496 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8012496:	2100      	movs	r1, #0
 8012498:	2001      	movs	r0, #1
 801249a:	f000 b800 	b.w	801249e <z_arm_fatal_error>

0801249e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 801249e:	f000 ba90 	b.w	80129c2 <z_fatal_error>

080124a2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 80124a2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 80124a4:	6800      	ldr	r0, [r0, #0]
 80124a6:	f000 ba8c 	b.w	80129c2 <z_fatal_error>

080124aa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 80124aa:	b508      	push	{r3, lr}
	handler();
 80124ac:	f7f1 fd24 	bl	8003ef8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 80124b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80124b4:	f7f1 be66 	b.w	8004184 <z_arm_exc_exit>

080124b8 <_stdout_hook_default>:
}
 80124b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124bc:	4770      	bx	lr

080124be <_isatty>:
}
 80124be:	2802      	cmp	r0, #2
 80124c0:	bfcc      	ite	gt
 80124c2:	2000      	movgt	r0, #0
 80124c4:	2001      	movle	r0, #1
 80124c6:	4770      	bx	lr

080124c8 <_kill>:
}
 80124c8:	2000      	movs	r0, #0
 80124ca:	4770      	bx	lr

080124cc <_getpid>:
}
 80124cc:	2000      	movs	r0, #0
 80124ce:	4770      	bx	lr

080124d0 <_fstat>:
	st->st_mode = S_IFCHR;
 80124d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124d4:	604b      	str	r3, [r1, #4]
}
 80124d6:	2000      	movs	r0, #0
 80124d8:	4770      	bx	lr

080124da <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 80124da:	f7f2 bb21 	b.w	8004b20 <z_impl_z_errno>

080124de <usleep>:
 *
 * See IEEE 1003.1
 */
int usleep(useconds_t useconds)
{
	if (useconds < USEC_PER_MSEC) {
 80124de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
{
 80124e2:	b508      	push	{r3, lr}
 80124e4:	4603      	mov	r3, r0
	if (useconds < USEC_PER_MSEC) {
 80124e6:	d203      	bcs.n	80124f0 <usleep+0x12>
	z_impl_k_busy_wait(usec_to_wait);
 80124e8:	f7f2 ff90 	bl	800540c <z_impl_k_busy_wait>
	} else {
		k_msleep(useconds / USEC_PER_MSEC);
	}

	return 0;
}
 80124ec:	2000      	movs	r0, #0
 80124ee:	bd08      	pop	{r3, pc}
		k_msleep(useconds / USEC_PER_MSEC);
 80124f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124f4:	fbb3 f0f0 	udiv	r0, r3, r0
 80124f8:	230a      	movs	r3, #10
 80124fa:	fba0 0103 	umull	r0, r1, r0, r3
	return z_impl_k_sleep(timeout);
 80124fe:	f7f2 ff15 	bl	800532c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 8012502:	e7f3      	b.n	80124ec <usleep+0xe>

08012504 <gpio_stm32_isr>:
{
 8012504:	460b      	mov	r3, r1
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8012506:	6889      	ldr	r1, [r1, #8]
 8012508:	b570      	push	{r4, r5, r6, lr}
 801250a:	b1a9      	cbz	r1, 8012538 <gpio_stm32_isr+0x34>
 801250c:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 801250e:	685e      	ldr	r6, [r3, #4]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8012510:	2c00      	cmp	r4, #0
 8012512:	f04f 0501 	mov.w	r5, #1
 8012516:	bf38      	it	cc
 8012518:	2400      	movcc	r4, #0
 801251a:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 801251c:	688a      	ldr	r2, [r1, #8]
 801251e:	402a      	ands	r2, r5
 8012520:	d002      	beq.n	8012528 <gpio_stm32_isr+0x24>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8012522:	684b      	ldr	r3, [r1, #4]
 8012524:	4630      	mov	r0, r6
 8012526:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8012528:	b134      	cbz	r4, 8012538 <gpio_stm32_isr+0x34>
 801252a:	6823      	ldr	r3, [r4, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	bf38      	it	cc
 8012530:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8012532:	4621      	mov	r1, r4
 8012534:	461c      	mov	r4, r3
 8012536:	e7f1      	b.n	801251c <gpio_stm32_isr+0x18>
}
 8012538:	bd70      	pop	{r4, r5, r6, pc}

0801253a <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801253a:	6843      	ldr	r3, [r0, #4]
 801253c:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 801253e:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8012540:	600b      	str	r3, [r1, #0]
}
 8012542:	2000      	movs	r0, #0
 8012544:	4770      	bx	lr

08012546 <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012546:	6843      	ldr	r3, [r0, #4]
 8012548:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 801254a:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 801254c:	4042      	eors	r2, r0
 801254e:	400a      	ands	r2, r1
 8012550:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8012552:	615a      	str	r2, [r3, #20]
}
 8012554:	2000      	movs	r0, #0
 8012556:	4770      	bx	lr

08012558 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012558:	6843      	ldr	r3, [r0, #4]
 801255a:	685b      	ldr	r3, [r3, #4]
}
 801255c:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 801255e:	6199      	str	r1, [r3, #24]
}
 8012560:	4770      	bx	lr

08012562 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012562:	6843      	ldr	r3, [r0, #4]
 8012564:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8012566:	0409      	lsls	r1, r1, #16
 8012568:	6199      	str	r1, [r3, #24]
}
 801256a:	2000      	movs	r0, #0
 801256c:	4770      	bx	lr

0801256e <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 801256e:	6843      	ldr	r3, [r0, #4]
 8012570:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8012572:	6953      	ldr	r3, [r2, #20]
 8012574:	404b      	eors	r3, r1
 8012576:	6153      	str	r3, [r2, #20]
}
 8012578:	2000      	movs	r0, #0
 801257a:	4770      	bx	lr

0801257c <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 801257c:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 801257e:	6898      	ldr	r0, [r3, #8]
{
 8012580:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8012582:	b158      	cbz	r0, 801259c <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8012584:	2400      	movs	r4, #0
 8012586:	4281      	cmp	r1, r0
 8012588:	d113      	bne.n	80125b2 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 801258a:	6808      	ldr	r0, [r1, #0]
 801258c:	b95c      	cbnz	r4, 80125a6 <gpio_stm32_manage_callback+0x2a>
 801258e:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8012590:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8012592:	42a1      	cmp	r1, r4
 8012594:	d100      	bne.n	8012598 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8012596:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8012598:	2000      	movs	r0, #0
 801259a:	6008      	str	r0, [r1, #0]
	if (set) {
 801259c:	b972      	cbnz	r2, 80125bc <gpio_stm32_manage_callback+0x40>
	return 0;
 801259e:	2000      	movs	r0, #0
}
 80125a0:	bd30      	pop	{r4, r5, pc}
 80125a2:	4628      	mov	r0, r5
 80125a4:	e7ef      	b.n	8012586 <gpio_stm32_manage_callback+0xa>
 80125a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80125a8:	68d8      	ldr	r0, [r3, #12]
 80125aa:	4281      	cmp	r1, r0
	list->tail = node;
 80125ac:	bf08      	it	eq
 80125ae:	60dc      	streq	r4, [r3, #12]
}
 80125b0:	e7f2      	b.n	8012598 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80125b2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80125b4:	4604      	mov	r4, r0
 80125b6:	2d00      	cmp	r5, #0
 80125b8:	d1f3      	bne.n	80125a2 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 80125ba:	b13a      	cbz	r2, 80125cc <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 80125bc:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 80125be:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 80125c0:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 80125c2:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d1ea      	bne.n	801259e <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 80125c8:	60d9      	str	r1, [r3, #12]
}
 80125ca:	e7e9      	b.n	80125a0 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 80125cc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 80125d0:	e7e6      	b.n	80125a0 <gpio_stm32_manage_callback+0x24>

080125d2 <gpio_stm32_configure>:
{
 80125d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80125d4:	6847      	ldr	r7, [r0, #4]
	pinval = 1 << pin;
 80125d6:	2401      	movs	r4, #1
 80125d8:	408c      	lsls	r4, r1
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 80125da:	f3c2 1680 	ubfx	r6, r2, #6, #1
 80125de:	ea27 0704 	bic.w	r7, r7, r4
 80125e2:	408e      	lsls	r6, r1
 80125e4:	433e      	orrs	r6, r7
 80125e6:	6046      	str	r6, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80125e8:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 80125ec:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80125f0:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80125f4:	f04f 0e03 	mov.w	lr, #3
 80125f8:	007f      	lsls	r7, r7, #1
 80125fa:	fa0e f707 	lsl.w	r7, lr, r7
 80125fe:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012602:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8012606:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 801260a:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 801260e:	007f      	lsls	r7, r7, #1
 8012610:	40be      	lsls	r6, r7
 8012612:	ea46 060c 	orr.w	r6, r6, ip
 8012616:	6086      	str	r6, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012618:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 801261c:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8012620:	68c7      	ldr	r7, [r0, #12]
 8012622:	0076      	lsls	r6, r6, #1
 8012624:	fa0e f606 	lsl.w	r6, lr, r6
 8012628:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801262c:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8012630:	fab6 f686 	clz	r6, r6
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8012634:	f002 0530 	and.w	r5, r2, #48	; 0x30
 8012638:	0076      	lsls	r6, r6, #1
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 801263a:	f3c2 2241 	ubfx	r2, r2, #9, #2
 801263e:	40b2      	lsls	r2, r6
 8012640:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8012642:	2d20      	cmp	r5, #32
 8012644:	60c2      	str	r2, [r0, #12]
 8012646:	d115      	bne.n	8012674 <gpio_stm32_configure+0xa2>
		if (pin < 8) {
 8012648:	2907      	cmp	r1, #7
 801264a:	dc2c      	bgt.n	80126a6 <gpio_stm32_configure+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801264c:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8012650:	6a01      	ldr	r1, [r0, #32]
  if (value == 0U)
 8012652:	b332      	cbz	r2, 80126a2 <gpio_stm32_configure+0xd0>
  return __builtin_clz(value);
 8012654:	fab2 f282 	clz	r2, r2
 8012658:	0092      	lsls	r2, r2, #2
 801265a:	260f      	movs	r6, #15
 801265c:	fa06 f202 	lsl.w	r2, r6, r2
 8012660:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012664:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 8012668:	fab2 f282 	clz	r2, r2
 801266c:	0092      	lsls	r2, r2, #2
 801266e:	4093      	lsls	r3, r2
 8012670:	430b      	orrs	r3, r1
 8012672:	6203      	str	r3, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012674:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8012678:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801267c:	6802      	ldr	r2, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801267e:	fa94 f4a4 	rbit	r4, r4
 8012682:	2103      	movs	r1, #3
 8012684:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8012686:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 801268a:	092d      	lsrs	r5, r5, #4
 801268c:	fa01 f303 	lsl.w	r3, r1, r3
 8012690:	0064      	lsls	r4, r4, #1
 8012692:	ea22 0303 	bic.w	r3, r2, r3
 8012696:	fa05 f404 	lsl.w	r4, r5, r4
 801269a:	431c      	orrs	r4, r3
 801269c:	6004      	str	r4, [r0, #0]
}
 801269e:	2000      	movs	r0, #0
 80126a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80126a2:	462a      	mov	r2, r5
 80126a4:	e7d8      	b.n	8012658 <gpio_stm32_configure+0x86>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80126a6:	0a22      	lsrs	r2, r4, #8
 80126a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126aa:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 80126ae:	b181      	cbz	r1, 80126d2 <gpio_stm32_configure+0x100>
  return __builtin_clz(value);
 80126b0:	fab1 f181 	clz	r1, r1
 80126b4:	0089      	lsls	r1, r1, #2
 80126b6:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80126b8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 80126bc:	fab2 f282 	clz	r2, r2
 80126c0:	fa07 f101 	lsl.w	r1, r7, r1
 80126c4:	0092      	lsls	r2, r2, #2
 80126c6:	ea26 0101 	bic.w	r1, r6, r1
 80126ca:	4093      	lsls	r3, r2
 80126cc:	430b      	orrs	r3, r1
 80126ce:	6243      	str	r3, [r0, #36]	; 0x24
}
 80126d0:	e7d0      	b.n	8012674 <gpio_stm32_configure+0xa2>
    return 32U;
 80126d2:	4629      	mov	r1, r5
 80126d4:	e7ee      	b.n	80126b4 <gpio_stm32_configure+0xe2>

080126d6 <gpio_stm32_config>:
{
 80126d6:	b538      	push	{r3, r4, r5, lr}
 80126d8:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 80126da:	059a      	lsls	r2, r3, #22
	const struct gpio_stm32_config *cfg = dev->config;
 80126dc:	6845      	ldr	r5, [r0, #4]
{
 80126de:	460c      	mov	r4, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 80126e0:	d518      	bpl.n	8012714 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 80126e2:	0799      	lsls	r1, r3, #30
 80126e4:	d50f      	bpl.n	8012706 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 80126e6:	075a      	lsls	r2, r3, #29
 80126e8:	d52e      	bpl.n	8012748 <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 80126ea:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 80126ec:	06d9      	lsls	r1, r3, #27
 80126ee:	d50c      	bpl.n	801270a <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 80126f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 80126f4:	0519      	lsls	r1, r3, #20
 80126f6:	d41d      	bmi.n	8012734 <gpio_stm32_config+0x5e>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 80126f8:	055b      	lsls	r3, r3, #21
 80126fa:	d514      	bpl.n	8012726 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 80126fc:	2101      	movs	r1, #1
 80126fe:	40a1      	lsls	r1, r4
 8012700:	f7ff ff2f 	bl	8012562 <gpio_stm32_port_clear_bits_raw>
 8012704:	e00f      	b.n	8012726 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8012706:	2210      	movs	r2, #16
 8012708:	e7f0      	b.n	80126ec <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 801270a:	0699      	lsls	r1, r3, #26
 801270c:	d5f2      	bpl.n	80126f4 <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801270e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8012712:	e7ef      	b.n	80126f4 <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8012714:	05d9      	lsls	r1, r3, #23
 8012716:	d512      	bpl.n	801273e <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8012718:	06da      	lsls	r2, r3, #27
 801271a:	d412      	bmi.n	8012742 <gpio_stm32_config+0x6c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 801271c:	f013 0220 	ands.w	r2, r3, #32
 8012720:	bf18      	it	ne
 8012722:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 8012726:	6868      	ldr	r0, [r5, #4]
 8012728:	2300      	movs	r3, #0
 801272a:	4621      	mov	r1, r4
 801272c:	f7ff ff51 	bl	80125d2 <gpio_stm32_configure>
 8012730:	2000      	movs	r0, #0
}
 8012732:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8012734:	6869      	ldr	r1, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8012736:	2301      	movs	r3, #1
 8012738:	40a3      	lsls	r3, r4
	WRITE_REG(gpio->BSRR, pins);
 801273a:	618b      	str	r3, [r1, #24]
	return 0;
 801273c:	e7f3      	b.n	8012726 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 801273e:	2230      	movs	r2, #48	; 0x30
 8012740:	e7f1      	b.n	8012726 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8012742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012746:	e7ee      	b.n	8012726 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8012748:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return err;
 801274c:	e7f1      	b.n	8012732 <gpio_stm32_config+0x5c>

0801274e <LL_USART_ClearFlag_FE>:
{
 801274e:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8012750:	6803      	ldr	r3, [r0, #0]
 8012752:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8012754:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8012756:	6843      	ldr	r3, [r0, #4]
 8012758:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 801275a:	9b01      	ldr	r3, [sp, #4]
}
 801275c:	b002      	add	sp, #8
 801275e:	4770      	bx	lr

08012760 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8012760:	68c3      	ldr	r3, [r0, #12]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012766:	6843      	ldr	r3, [r0, #4]
 8012768:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 801276a:	68d3      	ldr	r3, [r2, #12]
 801276c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8012770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012774:	d023      	beq.n	80127be <uart_stm32_config_get+0x5e>
		return UART_CFG_PARITY_NONE;
 8012776:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 801277a:	4243      	negs	r3, r0
 801277c:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 801277e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8012780:	6913      	ldr	r3, [r2, #16]
 8012782:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8012786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801278a:	d01a      	beq.n	80127c2 <uart_stm32_config_get+0x62>
 801278c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012790:	d019      	beq.n	80127c6 <uart_stm32_config_get+0x66>
 8012792:	2b00      	cmp	r3, #0
 8012794:	bf14      	ite	ne
 8012796:	2303      	movne	r3, #3
 8012798:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 801279a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 801279c:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 801279e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 80127a2:	bf14      	ite	ne
 80127a4:	2304      	movne	r3, #4
 80127a6:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 80127a8:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 80127aa:	6953      	ldr	r3, [r2, #20]
 80127ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 80127b0:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 80127b4:	4253      	negs	r3, r2
 80127b6:	4153      	adcs	r3, r2
 80127b8:	71cb      	strb	r3, [r1, #7]
}
 80127ba:	2000      	movs	r0, #0
 80127bc:	4770      	bx	lr
	switch (parity) {
 80127be:	2302      	movs	r3, #2
 80127c0:	e7dd      	b.n	801277e <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 80127c2:	2300      	movs	r3, #0
 80127c4:	e7e9      	b.n	801279a <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 80127c6:	2302      	movs	r3, #2
 80127c8:	e7e7      	b.n	801279a <uart_stm32_config_get+0x3a>

080127ca <uart_stm32_poll_in>:
{
 80127ca:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80127cc:	6843      	ldr	r3, [r0, #4]
 80127ce:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80127d0:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 80127d2:	071a      	lsls	r2, r3, #28
 80127d4:	d501      	bpl.n	80127da <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 80127d6:	f7ff ffba 	bl	801274e <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80127da:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 80127dc:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80127de:	bf43      	ittte	mi
 80127e0:	6843      	ldrmi	r3, [r0, #4]
 80127e2:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80127e4:	2000      	movmi	r0, #0
		return -1;
 80127e6:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80127ea:	bd08      	pop	{r3, pc}

080127ec <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80127ec:	6843      	ldr	r3, [r0, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80127f0:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 80127f2:	0612      	lsls	r2, r2, #24
 80127f4:	d5fc      	bpl.n	80127f0 <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80127f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80127fa:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80127fc:	6059      	str	r1, [r3, #4]
}
 80127fe:	4770      	bx	lr

08012800 <uart_stm32_err_check>:
{
 8012800:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012802:	6843      	ldr	r3, [r0, #4]
 8012804:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8012806:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8012808:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 801280a:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 801280c:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 801280e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8012812:	bf48      	it	mi
 8012814:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8012818:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 801281a:	bf48      	it	mi
 801281c:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8012820:	07d3      	lsls	r3, r2, #31
 8012822:	d501      	bpl.n	8012828 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8012824:	f7ff ff93 	bl	801274e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8012828:	0791      	lsls	r1, r2, #30
 801282a:	d501      	bpl.n	8012830 <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 801282c:	f7ff ff8f 	bl	801274e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8012830:	0753      	lsls	r3, r2, #29
 8012832:	d501      	bpl.n	8012838 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8012834:	f7ff ff8b 	bl	801274e <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8012838:	f7ff ff89 	bl	801274e <LL_USART_ClearFlag_FE>
}
 801283c:	4610      	mov	r0, r2
 801283e:	bd08      	pop	{r3, pc}

08012840 <uart_stm32_fifo_fill>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012840:	6843      	ldr	r3, [r0, #4]
{
 8012842:	b530      	push	{r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012844:	681c      	ldr	r4, [r3, #0]
	while ((size - num_tx > 0) &&
 8012846:	2300      	movs	r3, #0
 8012848:	b2d8      	uxtb	r0, r3
 801284a:	1a15      	subs	r5, r2, r0
 801284c:	2d00      	cmp	r5, #0
 801284e:	dd04      	ble.n	801285a <uart_stm32_fifo_fill+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8012850:	6825      	ldr	r5, [r4, #0]
 8012852:	062d      	lsls	r5, r5, #24
 8012854:	f103 0301 	add.w	r3, r3, #1
 8012858:	d400      	bmi.n	801285c <uart_stm32_fifo_fill+0x1c>
}
 801285a:	bd30      	pop	{r4, r5, pc}
  USARTx->DR = Value;
 801285c:	5c08      	ldrb	r0, [r1, r0]
 801285e:	6060      	str	r0, [r4, #4]
}
 8012860:	e7f2      	b.n	8012848 <uart_stm32_fifo_fill+0x8>

08012862 <uart_stm32_fifo_read>:
{
 8012862:	b538      	push	{r3, r4, r5, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012864:	6843      	ldr	r3, [r0, #4]
 8012866:	681c      	ldr	r4, [r3, #0]
	while ((size - num_rx > 0) &&
 8012868:	2500      	movs	r5, #0
 801286a:	b2e8      	uxtb	r0, r5
 801286c:	1a13      	subs	r3, r2, r0
 801286e:	2b00      	cmp	r3, #0
 8012870:	dd02      	ble.n	8012878 <uart_stm32_fifo_read+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8012872:	6823      	ldr	r3, [r4, #0]
 8012874:	069b      	lsls	r3, r3, #26
 8012876:	d400      	bmi.n	801287a <uart_stm32_fifo_read+0x18>
}
 8012878:	bd38      	pop	{r3, r4, r5, pc}
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 801287a:	6863      	ldr	r3, [r4, #4]
 801287c:	540b      	strb	r3, [r1, r0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 801287e:	6823      	ldr	r3, [r4, #0]
		if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8012880:	0718      	lsls	r0, r3, #28
 8012882:	d502      	bpl.n	801288a <uart_stm32_fifo_read+0x28>
			LL_USART_ClearFlag_ORE(UartInstance);
 8012884:	4620      	mov	r0, r4
 8012886:	f7ff ff62 	bl	801274e <LL_USART_ClearFlag_FE>
 801288a:	3501      	adds	r5, #1
 801288c:	e7ed      	b.n	801286a <uart_stm32_fifo_read+0x8>

0801288e <uart_stm32_irq_tx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801288e:	6843      	ldr	r3, [r0, #4]
 8012890:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8012892:	68d3      	ldr	r3, [r2, #12]
 8012894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012898:	60d3      	str	r3, [r2, #12]
}
 801289a:	4770      	bx	lr

0801289c <uart_stm32_irq_tx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 801289c:	6843      	ldr	r3, [r0, #4]
 801289e:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80128a0:	68d3      	ldr	r3, [r2, #12]
 80128a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128a6:	60d3      	str	r3, [r2, #12]
}
 80128a8:	4770      	bx	lr

080128aa <uart_stm32_irq_tx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128aa:	6843      	ldr	r3, [r0, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80128ae:	6818      	ldr	r0, [r3, #0]
	return LL_USART_IsActiveFlag_TXE(UartInstance) &&
 80128b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80128b4:	bf1c      	itt	ne
 80128b6:	68d8      	ldrne	r0, [r3, #12]
 80128b8:	f3c0 1080 	ubfxne	r0, r0, #6, #1
}
 80128bc:	4770      	bx	lr

080128be <uart_stm32_irq_tx_complete>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128be:	6843      	ldr	r3, [r0, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80128c2:	6818      	ldr	r0, [r3, #0]
}
 80128c4:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80128c8:	4770      	bx	lr

080128ca <uart_stm32_irq_rx_enable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128ca:	6843      	ldr	r3, [r0, #4]
 80128cc:	681a      	ldr	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80128ce:	68d3      	ldr	r3, [r2, #12]
 80128d0:	f043 0320 	orr.w	r3, r3, #32
 80128d4:	60d3      	str	r3, [r2, #12]
}
 80128d6:	4770      	bx	lr

080128d8 <uart_stm32_irq_rx_disable>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128d8:	6843      	ldr	r3, [r0, #4]
 80128da:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80128dc:	68d3      	ldr	r3, [r2, #12]
 80128de:	f023 0320 	bic.w	r3, r3, #32
 80128e2:	60d3      	str	r3, [r2, #12]
}
 80128e4:	4770      	bx	lr

080128e6 <uart_stm32_irq_rx_ready>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128e6:	6843      	ldr	r3, [r0, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80128ea:	6818      	ldr	r0, [r3, #0]
}
 80128ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80128f0:	4770      	bx	lr

080128f2 <uart_stm32_irq_is_pending>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80128f2:	6843      	ldr	r3, [r0, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	681a      	ldr	r2, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 80128f8:	0691      	lsls	r1, r2, #26
 80128fa:	d502      	bpl.n	8012902 <uart_stm32_irq_is_pending+0x10>
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80128fc:	68da      	ldr	r2, [r3, #12]
	return ((LL_USART_IsActiveFlag_RXNE(UartInstance) &&
 80128fe:	0692      	lsls	r2, r2, #26
 8012900:	d407      	bmi.n	8012912 <uart_stm32_irq_is_pending+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8012902:	6818      	ldr	r0, [r3, #0]
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8012904:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8012908:	d004      	beq.n	8012914 <uart_stm32_irq_is_pending+0x22>
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 801290a:	68d8      	ldr	r0, [r3, #12]
		(LL_USART_IsActiveFlag_TC(UartInstance) &&
 801290c:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8012910:	4770      	bx	lr
		 LL_USART_IsEnabledIT_RXNE(UartInstance)) ||
 8012912:	2001      	movs	r0, #1
}
 8012914:	4770      	bx	lr

08012916 <uart_stm32_irq_update>:
}
 8012916:	2001      	movs	r0, #1
 8012918:	4770      	bx	lr

0801291a <uart_stm32_irq_callback_set>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 801291a:	68c3      	ldr	r3, [r0, #12]
	data->user_data = cb_data;
 801291c:	e9c3 1202 	strd	r1, r2, [r3, #8]
}
 8012920:	4770      	bx	lr

08012922 <uart_stm32_isr>:
	struct uart_stm32_data *data = DEV_DATA(dev);
 8012922:	68c2      	ldr	r2, [r0, #12]
	if (data->user_cb) {
 8012924:	6893      	ldr	r3, [r2, #8]
 8012926:	b10b      	cbz	r3, 801292c <uart_stm32_isr+0xa>
		data->user_cb(dev, data->user_data);
 8012928:	68d1      	ldr	r1, [r2, #12]
 801292a:	4718      	bx	r3
}
 801292c:	4770      	bx	lr

0801292e <uart_stm32_irq_config_func_0>:
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,	\
		    &uart_stm32_driver_api);				\
									\
STM32_UART_IRQ_HANDLER(index)

DT_INST_FOREACH_STATUS_OKAY(STM32_UART_INIT)
 801292e:	b508      	push	{r3, lr}
 8012930:	2200      	movs	r2, #0
 8012932:	2025      	movs	r0, #37	; 0x25
 8012934:	4611      	mov	r1, r2
 8012936:	f7f1 fa63 	bl	8003e00 <z_arm_irq_priority_set>
 801293a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801293e:	2025      	movs	r0, #37	; 0x25
 8012940:	f7f1 ba4e 	b.w	8003de0 <arch_irq_enable>

08012944 <uart_stm32_irq_config_func_1>:
 8012944:	b508      	push	{r3, lr}
 8012946:	2200      	movs	r2, #0
 8012948:	2026      	movs	r0, #38	; 0x26
 801294a:	4611      	mov	r1, r2
 801294c:	f7f1 fa58 	bl	8003e00 <z_arm_irq_priority_set>
 8012950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012954:	2026      	movs	r0, #38	; 0x26
 8012956:	f7f1 ba43 	b.w	8003de0 <arch_irq_enable>

0801295a <uart_stm32_set_baudrate>:
	if (clock_control_get_rate(data->clock,
 801295a:	68c3      	ldr	r3, [r0, #12]
{
 801295c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801295e:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012960:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8012962:	6858      	ldr	r0, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8012964:	f851 4b0c 	ldr.w	r4, [r1], #12
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 8012968:	6883      	ldr	r3, [r0, #8]
 801296a:	aa01      	add	r2, sp, #4
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8012970:	2800      	cmp	r0, #0
 8012972:	db18      	blt.n	80129a6 <uart_stm32_set_baudrate+0x4c>
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8012974:	68e3      	ldr	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8012976:	9801      	ldr	r0, [sp, #4]
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 8012978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 801297c:	2119      	movs	r1, #25
  MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 801297e:	60e3      	str	r3, [r4, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8012980:	00aa      	lsls	r2, r5, #2
 8012982:	0fab      	lsrs	r3, r5, #30
 8012984:	fba0 0101 	umull	r0, r1, r0, r1
 8012988:	f7ee fcc6 	bl	8001318 <__aeabi_uldivmod>
 801298c:	2264      	movs	r2, #100	; 0x64
 801298e:	fbb0 f1f2 	udiv	r1, r0, r2
 8012992:	fb02 0311 	mls	r3, r2, r1, r0
 8012996:	011b      	lsls	r3, r3, #4
 8012998:	3332      	adds	r3, #50	; 0x32
 801299a:	fbb3 f3f2 	udiv	r3, r3, r2
 801299e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	60a3      	str	r3, [r4, #8]
}
 80129a6:	b003      	add	sp, #12
 80129a8:	bd30      	pop	{r4, r5, pc}

080129aa <arch_system_halt>:
	__asm__ volatile(
 80129aa:	f04f 0210 	mov.w	r2, #16
 80129ae:	f3ef 8311 	mrs	r3, BASEPRI
 80129b2:	f382 8811 	msr	BASEPRI, r2
 80129b6:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 80129ba:	e7fe      	b.n	80129ba <arch_system_halt+0x10>

080129bc <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80129bc:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80129be:	f7ff fff4 	bl	80129aa <arch_system_halt>

080129c2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80129c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c4:	4605      	mov	r5, r0
 80129c6:	460e      	mov	r6, r1
 80129c8:	f04f 0310 	mov.w	r3, #16
 80129cc:	f3ef 8711 	mrs	r7, BASEPRI
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 80129d8:	f7f2 fcc8 	bl	800536c <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80129dc:	4631      	mov	r1, r6
 80129de:	4604      	mov	r4, r0
 80129e0:	4628      	mov	r0, r5
 80129e2:	f7ff ffeb 	bl	80129bc <k_sys_fatal_error_handler>
	__asm__ volatile(
 80129e6:	f387 8811 	msr	BASEPRI, r7
 80129ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80129ee:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 80129f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80129f4:	f7f1 bbe0 	b.w	80041b8 <z_impl_k_thread_abort>

080129f8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 80129f8:	4603      	mov	r3, r0
 80129fa:	b920      	cbnz	r0, 8012a06 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129fc:	f3ef 8205 	mrs	r2, IPSR
 8012a00:	b90a      	cbnz	r2, 8012a06 <z_reschedule_irqlock+0xe>
 8012a02:	f7f1 b999 	b.w	8003d38 <arch_swap>
 8012a06:	f383 8811 	msr	BASEPRI, r3
 8012a0a:	f3bf 8f6f 	isb	sy
}
 8012a0e:	4770      	bx	lr

08012a10 <z_reschedule_unlocked>:
	__asm__ volatile(
 8012a10:	f04f 0310 	mov.w	r3, #16
 8012a14:	f3ef 8011 	mrs	r0, BASEPRI
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8012a20:	f7ff bfea 	b.w	80129f8 <z_reschedule_irqlock>

08012a24 <unpend_thread_no_timeout>:
{
 8012a24:	4601      	mov	r1, r0
 8012a26:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8012a28:	6880      	ldr	r0, [r0, #8]
 8012a2a:	f7f2 f9b5 	bl	8004d98 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8012a2e:	7b4b      	ldrb	r3, [r1, #13]
 8012a30:	f023 0302 	bic.w	r3, r3, #2
 8012a34:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
 8012a36:	2300      	movs	r3, #0
 8012a38:	608b      	str	r3, [r1, #8]
}
 8012a3a:	bd08      	pop	{r3, pc}

08012a3c <z_priq_dumb_best>:
{
 8012a3c:	4603      	mov	r3, r0
	return list->head == list;
 8012a3e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012a40:	4283      	cmp	r3, r0
 8012a42:	d003      	beq.n	8012a4c <z_priq_dumb_best+0x10>
	if (n != NULL) {
 8012a44:	2800      	cmp	r0, #0
 8012a46:	bf38      	it	cc
 8012a48:	2000      	movcc	r0, #0
 8012a4a:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8012a4c:	2000      	movs	r0, #0
}
 8012a4e:	4770      	bx	lr

08012a50 <z_ready_thread>:
{
 8012a50:	b510      	push	{r4, lr}
 8012a52:	f04f 0310 	mov.w	r3, #16
 8012a56:	f3ef 8411 	mrs	r4, BASEPRI
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8012a62:	f7f2 f9f3 	bl	8004e4c <ready_thread>
	__asm__ volatile(
 8012a66:	f384 8811 	msr	BASEPRI, r4
 8012a6a:	f3bf 8f6f 	isb	sy
}
 8012a6e:	bd10      	pop	{r4, pc}

08012a70 <z_thread_timeout>:
{
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	4604      	mov	r4, r0
	__asm__ volatile(
 8012a74:	f04f 0310 	mov.w	r3, #16
 8012a78:	f3ef 8611 	mrs	r6, BASEPRI
 8012a7c:	f383 8811 	msr	BASEPRI, r3
 8012a80:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8012a84:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
 8012a88:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
 8012a8c:	b113      	cbz	r3, 8012a94 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7ff ffc8 	bl	8012a24 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8012a94:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8012a98:	f023 0314 	bic.w	r3, r3, #20
 8012a9c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f7f2 f9d3 	bl	8004e4c <ready_thread>
	__asm__ volatile(
 8012aa6:	f386 8811 	msr	BASEPRI, r6
 8012aaa:	f3bf 8f6f 	isb	sy
}
 8012aae:	bd70      	pop	{r4, r5, r6, pc}

08012ab0 <add_to_waitq_locked>:
{
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	460d      	mov	r5, r1
	unready_thread(thread);
 8012ab6:	f7f2 fb51 	bl	800515c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 8012aba:	7b63      	ldrb	r3, [r4, #13]
 8012abc:	f043 0302 	orr.w	r3, r3, #2
 8012ac0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8012ac2:	b1c5      	cbz	r5, 8012af6 <add_to_waitq_locked+0x46>
	return list->head == list;
 8012ac4:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8012ac6:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8012ac8:	429d      	cmp	r5, r3
 8012aca:	bf08      	it	eq
 8012acc:	2300      	moveq	r3, #0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	bf38      	it	cc
 8012ad2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8012ad4:	b183      	cbz	r3, 8012af8 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
 8012ad6:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8012ada:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8012ade:	4291      	cmp	r1, r2
 8012ae0:	db04      	blt.n	8012aec <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
 8012ae2:	686a      	ldr	r2, [r5, #4]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d007      	beq.n	8012af8 <add_to_waitq_locked+0x48>
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	e7f3      	b.n	8012ad4 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
 8012aec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8012aee:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8012af2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8012af4:	605c      	str	r4, [r3, #4]
}
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
 8012af8:	686b      	ldr	r3, [r5, #4]
 8012afa:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8012afc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8012afe:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 8012b00:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8012b02:	606c      	str	r4, [r5, #4]
 8012b04:	e7f7      	b.n	8012af6 <add_to_waitq_locked+0x46>

08012b06 <z_unpend_first_thread>:
{
 8012b06:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8012b08:	f04f 0310 	mov.w	r3, #16
 8012b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8012b10:	f383 8811 	msr	BASEPRI, r3
 8012b14:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8012b18:	f7ff ff90 	bl	8012a3c <z_priq_dumb_best>
 8012b1c:	4604      	mov	r4, r0
	__asm__ volatile(
 8012b1e:	f382 8811 	msr	BASEPRI, r2
 8012b22:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8012b26:	b188      	cbz	r0, 8012b4c <z_unpend_first_thread+0x46>
	__asm__ volatile(
 8012b28:	f04f 0310 	mov.w	r3, #16
 8012b2c:	f3ef 8511 	mrs	r5, BASEPRI
 8012b30:	f383 8811 	msr	BASEPRI, r3
 8012b34:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8012b38:	f7ff ff74 	bl	8012a24 <unpend_thread_no_timeout>
	__asm__ volatile(
 8012b3c:	f385 8811 	msr	BASEPRI, r5
 8012b40:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
 8012b44:	f104 0018 	add.w	r0, r4, #24
 8012b48:	f000 f803 	bl	8012b52 <z_abort_timeout>
}
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	bd38      	pop	{r3, r4, r5, pc}

08012b50 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8012b50:	4770      	bx	lr

08012b52 <z_abort_timeout>:
{
 8012b52:	b510      	push	{r4, lr}
	__asm__ volatile(
 8012b54:	f04f 0210 	mov.w	r2, #16
 8012b58:	f3ef 8411 	mrs	r4, BASEPRI
 8012b5c:	f382 8811 	msr	BASEPRI, r2
 8012b60:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8012b64:	6803      	ldr	r3, [r0, #0]
 8012b66:	b13b      	cbz	r3, 8012b78 <z_abort_timeout+0x26>
			remove_timeout(to);
 8012b68:	f7f2 fd2a 	bl	80055c0 <remove_timeout>
			ret = 0;
 8012b6c:	2000      	movs	r0, #0
	__asm__ volatile(
 8012b6e:	f384 8811 	msr	BASEPRI, r4
 8012b72:	f3bf 8f6f 	isb	sy
}
 8012b76:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8012b78:	f06f 0015 	mvn.w	r0, #21
 8012b7c:	e7f7      	b.n	8012b6e <z_abort_timeout+0x1c>

08012b7e <z_get_next_timeout_expiry>:
{
 8012b7e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8012b80:	f04f 0310 	mov.w	r3, #16
 8012b84:	f3ef 8411 	mrs	r4, BASEPRI
 8012b88:	f383 8811 	msr	BASEPRI, r3
 8012b8c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8012b90:	f7f2 fd30 	bl	80055f4 <next_timeout>
	__asm__ volatile(
 8012b94:	f384 8811 	msr	BASEPRI, r4
 8012b98:	f3bf 8f6f 	isb	sy
}
 8012b9c:	bd10      	pop	{r4, pc}

08012b9e <z_set_timeout_expiry>:
{
 8012b9e:	b570      	push	{r4, r5, r6, lr}
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	460d      	mov	r5, r1
	__asm__ volatile(
 8012ba4:	f04f 0310 	mov.w	r3, #16
 8012ba8:	f3ef 8611 	mrs	r6, BASEPRI
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8012bb4:	f7f2 fd1e 	bl	80055f4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8012bb8:	2801      	cmp	r0, #1
 8012bba:	dd05      	ble.n	8012bc8 <z_set_timeout_expiry+0x2a>
 8012bbc:	42a0      	cmp	r0, r4
 8012bbe:	dd03      	ble.n	8012bc8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f7f1 f820 	bl	8003c08 <z_clock_set_timeout>
	__asm__ volatile(
 8012bc8:	f386 8811 	msr	BASEPRI, r6
 8012bcc:	f3bf 8f6f 	isb	sy
}
 8012bd0:	bd70      	pop	{r4, r5, r6, pc}

08012bd2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8012bd2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 8012bd4:	f7f2 fe34 	bl	8005840 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8012bd8:	bd08      	pop	{r3, pc}

08012bda <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
 8012bda:	f7f2 be31 	b.w	8005840 <z_tick_get>

08012bde <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
 8012bde:	b538      	push	{r3, r4, r5, lr}
 8012be0:	4604      	mov	r4, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
 8012be2:	2500      	movs	r5, #0
	__asm__ volatile(
 8012be4:	f04f 0210 	mov.w	r2, #16
 8012be8:	f3ef 8311 	mrs	r3, BASEPRI
 8012bec:	f382 8811 	msr	BASEPRI, r2
 8012bf0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
 8012bf4:	6920      	ldr	r0, [r4, #16]
		if (to_abort) {
 8012bf6:	b188      	cbz	r0, 8012c1c <idle+0x3e>
			cpu->pending_abort = NULL;
 8012bf8:	6125      	str	r5, [r4, #16]
	__asm__ volatile(
 8012bfa:	f383 8811 	msr	BASEPRI, r3
 8012bfe:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
 8012c02:	f7f2 fa29 	bl	8005058 <z_thread_single_abort>
	__asm__ volatile(
 8012c06:	f04f 0310 	mov.w	r3, #16
 8012c0a:	f3ef 8011 	mrs	r0, BASEPRI
 8012c0e:	f383 8811 	msr	BASEPRI, r3
 8012c12:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8012c16:	f7ff feef 	bl	80129f8 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
 8012c1a:	e7e3      	b.n	8012be4 <idle+0x6>
		k_busy_wait(100);
		k_yield();
#else

#ifdef CONFIG_SYS_CLOCK_EXISTS
		int32_t ticks = z_get_next_timeout_expiry();
 8012c1c:	f7ff ffaf 	bl	8012b7e <z_get_next_timeout_expiry>
		 * that the system should not enter a tickless idle for
		 * periods less than that.  This seems... silly, given that it
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8012c20:	2101      	movs	r1, #1
 8012c22:	2802      	cmp	r0, #2
 8012c24:	bfd8      	it	le
 8012c26:	4608      	movle	r0, r1
 8012c28:	f7ff ffb9 	bl	8012b9e <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8012c2c:	f7f1 f956 	bl	8003edc <arch_cpu_idle>
}
 8012c30:	e7d8      	b.n	8012be4 <idle+0x6>

08012c32 <k_heap_init>:
{
 8012c32:	b410      	push	{r4}
 8012c34:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8012c38:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8012c3c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8012c3e:	f7ff baa8 	b.w	8012192 <sys_heap_init>

08012c42 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8012c42:	4770      	bx	lr

08012c44 <rcl_publisher_is_valid_except_context>:
}

bool
rcl_publisher_is_valid_except_context(const rcl_publisher_t * publisher)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(publisher, "publisher pointer is invalid", return false);
 8012c44:	b130      	cbz	r0, 8012c54 <rcl_publisher_is_valid_except_context+0x10>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012c46:	6800      	ldr	r0, [r0, #0]
 8012c48:	b120      	cbz	r0, 8012c54 <rcl_publisher_is_valid_except_context+0x10>
    publisher->impl, "publisher implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012c4a:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8012c4e:	3800      	subs	r0, #0
 8012c50:	bf18      	it	ne
 8012c52:	2001      	movne	r0, #1
    publisher->impl->rmw_handle, "publisher's rmw handle is invalid", return false);
  return true;
}
 8012c54:	4770      	bx	lr

08012c56 <rcl_publisher_is_valid>:
{
 8012c56:	b510      	push	{r4, lr}
 8012c58:	4604      	mov	r4, r0
  if (!rcl_publisher_is_valid_except_context(publisher)) {
 8012c5a:	f7ff fff3 	bl	8012c44 <rcl_publisher_is_valid_except_context>
 8012c5e:	b908      	cbnz	r0, 8012c64 <rcl_publisher_is_valid+0xe>
    return false;  // error already set
 8012c60:	2000      	movs	r0, #0
}
 8012c62:	bd10      	pop	{r4, pc}
  if (!rcl_context_is_valid(publisher->impl->context)) {
 8012c64:	6823      	ldr	r3, [r4, #0]
 8012c66:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8012c6a:	f002 fa1c 	bl	80150a6 <rcl_context_is_valid>
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	d0f6      	beq.n	8012c60 <rcl_publisher_is_valid+0xa>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8012c78:	3800      	subs	r0, #0
 8012c7a:	bf18      	it	ne
 8012c7c:	2001      	movne	r0, #1
 8012c7e:	e7f0      	b.n	8012c62 <rcl_publisher_is_valid+0xc>

08012c80 <rcl_publish>:
{
 8012c80:	b570      	push	{r4, r5, r6, lr}
 8012c82:	4606      	mov	r6, r0
 8012c84:	460c      	mov	r4, r1
 8012c86:	4615      	mov	r5, r2
  if (!rcl_publisher_is_valid(publisher)) {
 8012c88:	f7ff ffe5 	bl	8012c56 <rcl_publisher_is_valid>
 8012c8c:	b158      	cbz	r0, 8012ca6 <rcl_publish+0x26>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 8012c8e:	b16c      	cbz	r4, 8012cac <rcl_publish+0x2c>
  if (rmw_publish(publisher->impl->rmw_handle, ros_message, allocation) != RMW_RET_OK) {
 8012c90:	6833      	ldr	r3, [r6, #0]
 8012c92:	462a      	mov	r2, r5
 8012c94:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8012c98:	4621      	mov	r1, r4
 8012c9a:	f000 fa6a 	bl	8013172 <rmw_publish>
 8012c9e:	3800      	subs	r0, #0
 8012ca0:	bf18      	it	ne
 8012ca2:	2001      	movne	r0, #1
}
 8012ca4:	bd70      	pop	{r4, r5, r6, pc}
    return RCL_RET_PUBLISHER_INVALID;  // error already set
 8012ca6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8012caa:	e7fb      	b.n	8012ca4 <rcl_publish+0x24>
  RCL_CHECK_ARGUMENT_FOR_NULL(ros_message, RCL_RET_INVALID_ARGUMENT);
 8012cac:	200b      	movs	r0, #11
 8012cae:	e7f9      	b.n	8012ca4 <rcl_publish+0x24>

08012cb0 <_rclc_executor_is_valid>:
  RCL_CHECK_FOR_NULL_WITH_MSG(executor, "executor pointer is invalid", return false);
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	b140      	cbz	r0, 8012cc6 <_rclc_executor_is_valid+0x16>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012cb4:	6840      	ldr	r0, [r0, #4]
 8012cb6:	b130      	cbz	r0, 8012cc6 <_rclc_executor_is_valid+0x16>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012cb8:	6918      	ldr	r0, [r3, #16]
 8012cba:	b120      	cbz	r0, 8012cc6 <_rclc_executor_is_valid+0x16>
  if (executor->max_handles == 0) {
 8012cbc:	6898      	ldr	r0, [r3, #8]
 8012cbe:	3800      	subs	r0, #0
 8012cc0:	bf18      	it	ne
 8012cc2:	2001      	movne	r0, #1
 8012cc4:	4770      	bx	lr
}
 8012cc6:	4770      	bx	lr

08012cc8 <rclc_executor_trigger_any>:
  return true;
}

bool rclc_executor_trigger_any(rclc_executor_handle_t * handles, unsigned int size, void * obj)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(handles, "handles is NULL", return false);
 8012cc8:	b120      	cbz	r0, 8012cd4 <rclc_executor_trigger_any+0xc>
 8012cca:	4603      	mov	r3, r0
  RCLC_UNUSED(obj);
  // did not use (i<size && handles[i].initialized) as loop-condition
  // because for last index i==size this would result in out-of-bound access
  for (unsigned int i = 0; i < size; i++) {
 8012ccc:	2200      	movs	r2, #0
 8012cce:	4291      	cmp	r1, r2
 8012cd0:	d101      	bne.n	8012cd6 <rclc_executor_trigger_any+0xe>
  RCL_CHECK_FOR_NULL_WITH_MSG(handles, "handles is NULL", return false);
 8012cd2:	2000      	movs	r0, #0
    } else {
      break;
    }
  }
  return false;
}
 8012cd4:	4770      	bx	lr
    if (handles[i].initialized) {
 8012cd6:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	d0fa      	beq.n	8012cd4 <rclc_executor_trigger_any+0xc>
      if (handles[i].data_available == true) {
 8012cde:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
 8012ce2:	3338      	adds	r3, #56	; 0x38
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d1f5      	bne.n	8012cd4 <rclc_executor_trigger_any+0xc>
  for (unsigned int i = 0; i < size; i++) {
 8012ce8:	3201      	adds	r2, #1
 8012cea:	e7f0      	b.n	8012cce <rclc_executor_trigger_any+0x6>

08012cec <rclc_executor_set_semantics>:
{
 8012cec:	b508      	push	{r3, lr}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012cee:	4602      	mov	r2, r0
 8012cf0:	b130      	cbz	r0, 8012d00 <rclc_executor_set_semantics+0x14>
  if (_rclc_executor_is_valid(executor)) {
 8012cf2:	f7ff ffdd 	bl	8012cb0 <_rclc_executor_is_valid>
 8012cf6:	b128      	cbz	r0, 8012d04 <rclc_executor_set_semantics+0x18>
    executor->data_comm_semantics = semantics;
 8012cf8:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
  return ret;
 8012cfc:	2000      	movs	r0, #0
}
 8012cfe:	bd08      	pop	{r3, pc}
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d00:	200b      	movs	r0, #11
 8012d02:	e7fc      	b.n	8012cfe <rclc_executor_set_semantics+0x12>
    return RCL_RET_ERROR;
 8012d04:	2001      	movs	r0, #1
 8012d06:	e7fa      	b.n	8012cfe <rclc_executor_set_semantics+0x12>

08012d08 <rclc_executor_handle_counters_zero_init>:


// initialization of handle_counters object
rcl_ret_t
rclc_executor_handle_counters_zero_init(rclc_executor_handle_counters_t * handle_counters)
{
 8012d08:	b508      	push	{r3, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(handle_counters, RCL_RET_INVALID_ARGUMENT);
 8012d0a:	b128      	cbz	r0, 8012d18 <rclc_executor_handle_counters_zero_init+0x10>
__ssp_bos_icheck3(memset, void *, int)
 8012d0c:	2218      	movs	r2, #24
 8012d0e:	2100      	movs	r1, #0
 8012d10:	f004 fdb0 	bl	8017874 <memset>
  memset(handle_counters, 0, sizeof(rclc_executor_handle_counters_t));
  return RCL_RET_OK;
 8012d14:	2000      	movs	r0, #0
}
 8012d16:	bd08      	pop	{r3, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(handle_counters, RCL_RET_INVALID_ARGUMENT);
 8012d18:	200b      	movs	r0, #11
 8012d1a:	e7fc      	b.n	8012d16 <rclc_executor_handle_counters_zero_init+0xe>

08012d1c <rclc_executor_handle_init>:
rcl_ret_t
rclc_executor_handle_init(
  rclc_executor_handle_t * handle,
  size_t max_handles)
{
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8012d1c:	b160      	cbz	r0, 8012d38 <rclc_executor_handle_init+0x1c>
  handle->type = NONE;
 8012d1e:	2305      	movs	r3, #5
 8012d20:	8003      	strh	r3, [r0, #0]
  handle->invocation = ON_NEW_DATA;
  // Note, the pointer to subscription, timer, service, client, gc is a union
  // and a single NULL assignment should be sufficient.
  handle->subscription = NULL;
 8012d22:	2300      	movs	r3, #0
  handle->timer = NULL;
  handle->service = NULL;
  handle->client = NULL;
  handle->gc = NULL;

  handle->data = NULL;
 8012d24:	e9c0 3301 	strd	r3, r3, [r0, #4]
  handle->data_response_msg = NULL;

  handle->callback = NULL;
 8012d28:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  //   handle->service_callback == NULL;
  //   handle->client_callback == NULL;
  //   handle->gc_callback == NULL
  //   ...

  handle->index = max_handles;
 8012d2c:	6301      	str	r1, [r0, #48]	; 0x30
  handle->initialized = false;
 8012d2e:	8683      	strh	r3, [r0, #52]	; 0x34
  handle->data_available = false;
  handle->callback_type = CB_UNDEFINED;
 8012d30:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  return RCL_RET_OK;
 8012d34:	4618      	mov	r0, r3
 8012d36:	4770      	bx	lr
  RCL_CHECK_ARGUMENT_FOR_NULL(handle, RCL_RET_INVALID_ARGUMENT);
 8012d38:	200b      	movs	r0, #11
}
 8012d3a:	4770      	bx	lr

08012d3c <rclc_node_init_with_options>:
{
 8012d3c:	b4f0      	push	{r4, r5, r6, r7}
 8012d3e:	9f04      	ldr	r7, [sp, #16]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d40:	b130      	cbz	r0, 8012d50 <rclc_node_init_with_options+0x14>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d42:	b129      	cbz	r1, 8012d50 <rclc_node_init_with_options+0x14>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d44:	b122      	cbz	r2, 8012d50 <rclc_node_init_with_options+0x14>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d46:	b11b      	cbz	r3, 8012d50 <rclc_node_init_with_options+0x14>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8012d48:	b117      	cbz	r7, 8012d50 <rclc_node_init_with_options+0x14>
}
 8012d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8012d4c:	f7f3 be56 	b.w	80069fc <rclc_node_init_with_options.part.0>
 8012d50:	200b      	movs	r0, #11
 8012d52:	bcf0      	pop	{r4, r5, r6, r7}
 8012d54:	4770      	bx	lr

08012d56 <__default_zero_allocate>:
  return calloc(number_of_elements, size_of_element);
 8012d56:	f7f8 baf3 	b.w	800b340 <calloc>

08012d5a <__default_reallocate>:
  return realloc(pointer, size);
 8012d5a:	f7f9 b8f5 	b.w	800bf48 <realloc>

08012d5e <__default_deallocate>:
  free(pointer);
 8012d5e:	f7f8 bc69 	b.w	800b634 <free>

08012d62 <__default_allocate>:
  return malloc(size);
 8012d62:	f7f8 bc55 	b.w	800b610 <malloc>

08012d66 <rcutils_allocator_is_valid>:

bool
rcutils_allocator_is_valid(const rcutils_allocator_t * allocator)
{
  if (
 8012d66:	4603      	mov	r3, r0
 8012d68:	b150      	cbz	r0, 8012d80 <rcutils_allocator_is_valid+0x1a>
    NULL == allocator ||
 8012d6a:	6800      	ldr	r0, [r0, #0]
 8012d6c:	b140      	cbz	r0, 8012d80 <rcutils_allocator_is_valid+0x1a>
    NULL == allocator->allocate ||
 8012d6e:	6858      	ldr	r0, [r3, #4]
 8012d70:	b130      	cbz	r0, 8012d80 <rcutils_allocator_is_valid+0x1a>
    NULL == allocator->deallocate ||
 8012d72:	68d8      	ldr	r0, [r3, #12]
 8012d74:	b120      	cbz	r0, 8012d80 <rcutils_allocator_is_valid+0x1a>
    NULL == allocator->zero_allocate ||
 8012d76:	6898      	ldr	r0, [r3, #8]
 8012d78:	3800      	subs	r0, #0
 8012d7a:	bf18      	it	ne
 8012d7c:	2001      	movne	r0, #1
 8012d7e:	4770      	bx	lr
    NULL == allocator->reallocate)
  {
    return false;
  }
  return true;
}
 8012d80:	4770      	bx	lr

08012d82 <rcutils_reallocf>:

void *
rcutils_reallocf(void * pointer, size_t size, rcutils_allocator_t * allocator)
{
 8012d82:	b570      	push	{r4, r5, r6, lr}
 8012d84:	4606      	mov	r6, r0
  if (!rcutils_allocator_is_valid(allocator)) {
 8012d86:	4610      	mov	r0, r2
{
 8012d88:	4615      	mov	r5, r2
  if (!rcutils_allocator_is_valid(allocator)) {
 8012d8a:	f7ff ffec 	bl	8012d66 <rcutils_allocator_is_valid>
 8012d8e:	4604      	mov	r4, r0
 8012d90:	b148      	cbz	r0, 8012da6 <rcutils_reallocf+0x24>
      "[rcutils|allocator.c:" RCUTILS_STRINGIFY(__LINE__) "] rcutils_reallocf(): "
      "invalid allocator or allocator function pointers, memory leaked\n");
#endif
    return NULL;
  }
  void * new_pointer = allocator->reallocate(pointer, size, allocator->state);
 8012d92:	6893      	ldr	r3, [r2, #8]
 8012d94:	6912      	ldr	r2, [r2, #16]
 8012d96:	4630      	mov	r0, r6
 8012d98:	4798      	blx	r3
  if (NULL == new_pointer) {
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	b918      	cbnz	r0, 8012da6 <rcutils_reallocf+0x24>
    allocator->deallocate(pointer, allocator->state);
 8012d9e:	686b      	ldr	r3, [r5, #4]
 8012da0:	6929      	ldr	r1, [r5, #16]
 8012da2:	4630      	mov	r0, r6
 8012da4:	4798      	blx	r3
  }
  return new_pointer;
}
 8012da6:	4620      	mov	r0, r4
 8012da8:	bd70      	pop	{r4, r5, r6, pc}

08012daa <expand_name>:
{
 8012daa:	b510      	push	{r4, lr}
 8012dac:	460c      	mov	r4, r1
  if (NULL != logging_input->name) {
 8012dae:	6801      	ldr	r1, [r0, #0]
 8012db0:	b139      	cbz	r1, 8012dc2 <expand_name+0x18>
    APPEND_AND_RETURN_LOG_OUTPUT(logging_input->name);
 8012db2:	4620      	mov	r0, r4
 8012db4:	f003 f899 	bl	8015eea <rcutils_char_array_strcat>
 8012db8:	b118      	cbz	r0, 8012dc2 <expand_name+0x18>
 8012dba:	f7f4 f8d5 	bl	8006f68 <rcutils_reset_error>
 8012dbe:	2000      	movs	r0, #0
}
 8012dc0:	bd10      	pop	{r4, pc}
  return logging_output->buffer;
 8012dc2:	6820      	ldr	r0, [r4, #0]
 8012dc4:	e7fc      	b.n	8012dc0 <expand_name+0x16>

08012dc6 <expand_message>:
{
 8012dc6:	b510      	push	{r4, lr}
 8012dc8:	460c      	mov	r4, r1
  OK_OR_RETURN_NULL(rcutils_char_array_strcat(logging_output, logging_input->msg));
 8012dca:	6881      	ldr	r1, [r0, #8]
 8012dcc:	4620      	mov	r0, r4
 8012dce:	f003 f88c 	bl	8015eea <rcutils_char_array_strcat>
 8012dd2:	b118      	cbz	r0, 8012ddc <expand_message+0x16>
 8012dd4:	f7f4 f8c8 	bl	8006f68 <rcutils_reset_error>
 8012dd8:	2000      	movs	r0, #0
}
 8012dda:	bd10      	pop	{r4, pc}
  return logging_output->buffer;
 8012ddc:	6820      	ldr	r0, [r4, #0]
 8012dde:	e7fc      	b.n	8012dda <expand_message+0x14>

08012de0 <expand_function_name>:
  if (logging_input->location) {
 8012de0:	6843      	ldr	r3, [r0, #4]
{
 8012de2:	b510      	push	{r4, lr}
 8012de4:	460c      	mov	r4, r1
  if (logging_input->location) {
 8012de6:	b143      	cbz	r3, 8012dfa <expand_function_name+0x1a>
    APPEND_AND_RETURN_LOG_OUTPUT(logging_input->location->function_name);
 8012de8:	6819      	ldr	r1, [r3, #0]
 8012dea:	4620      	mov	r0, r4
 8012dec:	f003 f87d 	bl	8015eea <rcutils_char_array_strcat>
 8012df0:	b118      	cbz	r0, 8012dfa <expand_function_name+0x1a>
 8012df2:	f7f4 f8b9 	bl	8006f68 <rcutils_reset_error>
 8012df6:	2000      	movs	r0, #0
}
 8012df8:	bd10      	pop	{r4, pc}
  return logging_output->buffer;
 8012dfa:	6820      	ldr	r0, [r4, #0]
 8012dfc:	e7fc      	b.n	8012df8 <expand_function_name+0x18>

08012dfe <expand_file_name>:
  if (logging_input->location) {
 8012dfe:	6843      	ldr	r3, [r0, #4]
{
 8012e00:	b510      	push	{r4, lr}
 8012e02:	460c      	mov	r4, r1
  if (logging_input->location) {
 8012e04:	b143      	cbz	r3, 8012e18 <expand_file_name+0x1a>
    APPEND_AND_RETURN_LOG_OUTPUT(logging_input->location->file_name);
 8012e06:	6859      	ldr	r1, [r3, #4]
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f003 f86e 	bl	8015eea <rcutils_char_array_strcat>
 8012e0e:	b118      	cbz	r0, 8012e18 <expand_file_name+0x1a>
 8012e10:	f7f4 f8aa 	bl	8006f68 <rcutils_reset_error>
 8012e14:	2000      	movs	r0, #0
}
 8012e16:	bd10      	pop	{r4, pc}
  return logging_output->buffer;
 8012e18:	6820      	ldr	r0, [r4, #0]
 8012e1a:	e7fc      	b.n	8012e16 <expand_file_name+0x18>

08012e1c <rcutils_logging_initialize>:
{
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	b088      	sub	sp, #32
  return rcutils_logging_initialize_with_allocator(rcutils_get_default_allocator());
 8012e20:	ac03      	add	r4, sp, #12
 8012e22:	4620      	mov	r0, r4
 8012e24:	f7f3 ffc8 	bl	8006db8 <rcutils_get_default_allocator>
 8012e28:	9b07      	ldr	r3, [sp, #28]
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012e30:	f7f4 f920 	bl	8007074 <rcutils_logging_initialize_with_allocator>
}
 8012e34:	b008      	add	sp, #32
 8012e36:	bd10      	pop	{r4, pc}

08012e38 <expand_time>:
{
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	b088      	sub	sp, #32
 8012e3c:	460c      	mov	r4, r1
 8012e3e:	4613      	mov	r3, r2
  OK_OR_RETURN_NULL(time_func(&logging_input->timestamp, numeric_storage, sizeof(numeric_storage)));
 8012e40:	4669      	mov	r1, sp
 8012e42:	2220      	movs	r2, #32
 8012e44:	3010      	adds	r0, #16
 8012e46:	4798      	blx	r3
 8012e48:	b120      	cbz	r0, 8012e54 <expand_time+0x1c>
 8012e4a:	f7f4 f88d 	bl	8006f68 <rcutils_reset_error>
 8012e4e:	2000      	movs	r0, #0
}
 8012e50:	b008      	add	sp, #32
 8012e52:	bd10      	pop	{r4, pc}
  APPEND_AND_RETURN_LOG_OUTPUT(numeric_storage);
 8012e54:	4669      	mov	r1, sp
 8012e56:	4620      	mov	r0, r4
 8012e58:	f003 f847 	bl	8015eea <rcutils_char_array_strcat>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	d1f4      	bne.n	8012e4a <expand_time+0x12>
 8012e60:	6820      	ldr	r0, [r4, #0]
 8012e62:	e7f5      	b.n	8012e50 <expand_time+0x18>

08012e64 <rcutils_vsnprintf>:
  return ret;
}

int
rcutils_vsnprintf(char * buffer, size_t buffer_size, const char * format, va_list args)
{
 8012e64:	b570      	push	{r4, r5, r6, lr}
  RCUTILS_CAN_FAIL_WITH({errno = EINVAL; return -1;});

  if (NULL == format) {
 8012e66:	b932      	cbnz	r2, 8012e76 <rcutils_vsnprintf+0x12>
#else
    return _vscprintf(format, args);
#endif
  }
  if (NULL == buffer || 0 == buffer_size) {
    errno = EINVAL;
 8012e68:	f7ff fb37 	bl	80124da <__errno>
 8012e6c:	2316      	movs	r3, #22
 8012e6e:	6003      	str	r3, [r0, #0]
    // This is the case where truncation has occurred, return how long it would have been.
    return _vscprintf(format, args);
  }
#endif
  return ret;
}
 8012e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e74:	bd70      	pop	{r4, r5, r6, pc}
  if (NULL == buffer && 0 == buffer_size) {
 8012e76:	b928      	cbnz	r0, 8012e84 <rcutils_vsnprintf+0x20>
 8012e78:	2900      	cmp	r1, #0
 8012e7a:	d1f5      	bne.n	8012e68 <rcutils_vsnprintf+0x4>
}
 8012e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ret = vsnprintf(buffer, buffer_size, format, args);
 8012e80:	f7fd bf3a 	b.w	8010cf8 <vsnprintf>
  if (NULL == buffer || 0 == buffer_size) {
 8012e84:	2900      	cmp	r1, #0
 8012e86:	d1f9      	bne.n	8012e7c <rcutils_vsnprintf+0x18>
 8012e88:	e7ee      	b.n	8012e68 <rcutils_vsnprintf+0x4>

08012e8a <rcutils_snprintf>:
{
 8012e8a:	b40c      	push	{r2, r3}
 8012e8c:	b507      	push	{r0, r1, r2, lr}
 8012e8e:	ab04      	add	r3, sp, #16
 8012e90:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, format);
 8012e94:	9301      	str	r3, [sp, #4]
  int ret = rcutils_vsnprintf(buffer, buffer_size, format, args);
 8012e96:	f7ff ffe5 	bl	8012e64 <rcutils_vsnprintf>
}
 8012e9a:	b003      	add	sp, #12
 8012e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ea0:	b002      	add	sp, #8
 8012ea2:	4770      	bx	lr

08012ea4 <rcutils_strndup>:
  return rcutils_strndup(str, strlen(str), allocator);
}

char *
rcutils_strndup(const char * str, size_t string_length, rcutils_allocator_t allocator)
{
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea8:	460e      	mov	r6, r1
 8012eaa:	a906      	add	r1, sp, #24
 8012eac:	e881 000c 	stmia.w	r1, {r2, r3}
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(NULL);

  if (NULL == str) {
 8012eb0:	4605      	mov	r5, r0
 8012eb2:	b180      	cbz	r0, 8012ed6 <rcutils_strndup+0x32>
    return NULL;
  }
  char * new_string = allocator.allocate(string_length + 1, allocator.state);
 8012eb4:	1c77      	adds	r7, r6, #1
 8012eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012eb8:	4638      	mov	r0, r7
 8012eba:	4790      	blx	r2
  if (NULL == new_string) {
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	b128      	cbz	r0, 8012ecc <rcutils_strndup+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8012ec0:	463a      	mov	r2, r7
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	f7ee fc6c 	bl	80017a0 <memcpy>
    return NULL;
  }
  memcpy(new_string, str, string_length + 1);
  new_string[string_length] = '\0';
 8012ec8:	2300      	movs	r3, #0
 8012eca:	55a3      	strb	r3, [r4, r6]
  return new_string;
}
 8012ecc:	4620      	mov	r0, r4
 8012ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ed2:	b002      	add	sp, #8
 8012ed4:	4770      	bx	lr
    return NULL;
 8012ed6:	4604      	mov	r4, r0
 8012ed8:	e7f8      	b.n	8012ecc <rcutils_strndup+0x28>

08012eda <rcutils_strdup>:
{
 8012eda:	b084      	sub	sp, #16
 8012edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012ede:	ad09      	add	r5, sp, #36	; 0x24
 8012ee0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (NULL == str) {
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	b170      	cbz	r0, 8012f06 <rcutils_strdup+0x2c>
  return rcutils_strndup(str, strlen(str), allocator);
 8012ee8:	f7ed f96a 	bl	80001c0 <strlen>
 8012eec:	ab0b      	add	r3, sp, #44	; 0x2c
 8012eee:	4606      	mov	r6, r0
 8012ef0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ef4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012ef8:	4620      	mov	r0, r4
 8012efa:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012efe:	4631      	mov	r1, r6
 8012f00:	f7ff ffd0 	bl	8012ea4 <rcutils_strndup>
 8012f04:	4604      	mov	r4, r0
}
 8012f06:	4620      	mov	r0, r4
 8012f08:	b004      	add	sp, #16
 8012f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f0e:	b004      	add	sp, #16
 8012f10:	4770      	bx	lr

08012f12 <__remove_key_and_value_at_index>:
  return RCUTILS_RET_OK;
}

static void
__remove_key_and_value_at_index(rcutils_string_map_impl_t * string_map_impl, size_t index)
{
 8012f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rcutils_allocator_t allocator = string_map_impl->allocator;
  allocator.deallocate(string_map_impl->keys[index], allocator.state);
 8012f16:	6803      	ldr	r3, [r0, #0]
  rcutils_allocator_t allocator = string_map_impl->allocator;
 8012f18:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8012f1c:	6947      	ldr	r7, [r0, #20]
{
 8012f1e:	460d      	mov	r5, r1
 8012f20:	4604      	mov	r4, r0
  allocator.deallocate(string_map_impl->keys[index], allocator.state);
 8012f22:	4641      	mov	r1, r8
 8012f24:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f28:	47b8      	blx	r7
  string_map_impl->keys[index] = NULL;
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	2600      	movs	r6, #0
 8012f2e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  allocator.deallocate(string_map_impl->values[index], allocator.state);
 8012f32:	6863      	ldr	r3, [r4, #4]
 8012f34:	4641      	mov	r1, r8
 8012f36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f3a:	47b8      	blx	r7
  string_map_impl->values[index] = NULL;
 8012f3c:	6863      	ldr	r3, [r4, #4]
 8012f3e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
  string_map_impl->size--;
 8012f42:	68e3      	ldr	r3, [r4, #12]
 8012f44:	3b01      	subs	r3, #1
 8012f46:	60e3      	str	r3, [r4, #12]
}
 8012f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012f4c <__get_index_of_key_if_exists>:
__get_index_of_key_if_exists(
  rcutils_string_map_impl_t * string_map_impl,
  const char * key,
  size_t key_length,
  size_t * index)
{
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4605      	mov	r5, r0
 8012f52:	460e      	mov	r6, r1
 8012f54:	4617      	mov	r7, r2
 8012f56:	4698      	mov	r8, r3
  size_t i = 0;
 8012f58:	2400      	movs	r4, #0
  for (; i < string_map_impl->capacity; ++i) {
 8012f5a:	68ab      	ldr	r3, [r5, #8]
 8012f5c:	42a3      	cmp	r3, r4
 8012f5e:	d801      	bhi.n	8012f64 <__get_index_of_key_if_exists+0x18>
    if (strncmp(key, string_map_impl->keys[i], cmp_count) == 0) {
      *index = i;
      return true;
    }
  }
  return false;
 8012f60:	2000      	movs	r0, #0
 8012f62:	e013      	b.n	8012f8c <__get_index_of_key_if_exists+0x40>
    if (NULL == string_map_impl->keys[i]) {
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012f6a:	b188      	cbz	r0, 8012f90 <__get_index_of_key_if_exists+0x44>
    size_t cmp_count = strlen(string_map_impl->keys[i]);
 8012f6c:	f7ed f928 	bl	80001c0 <strlen>
    if (strncmp(key, string_map_impl->keys[i], cmp_count) == 0) {
 8012f70:	682b      	ldr	r3, [r5, #0]
 8012f72:	42b8      	cmp	r0, r7
 8012f74:	4602      	mov	r2, r0
 8012f76:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8012f7a:	bf38      	it	cc
 8012f7c:	463a      	movcc	r2, r7
 8012f7e:	4630      	mov	r0, r6
 8012f80:	f004 fecb 	bl	8017d1a <strncmp>
 8012f84:	b920      	cbnz	r0, 8012f90 <__get_index_of_key_if_exists+0x44>
      *index = i;
 8012f86:	f8c8 4000 	str.w	r4, [r8]
      return true;
 8012f8a:	2001      	movs	r0, #1
}
 8012f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (; i < string_map_impl->capacity; ++i) {
 8012f90:	3401      	adds	r4, #1
 8012f92:	e7e2      	b.n	8012f5a <__get_index_of_key_if_exists+0xe>

08012f94 <rcutils_string_map_reserve>:
{
 8012f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f98:	4605      	mov	r5, r0
 8012f9a:	460c      	mov	r4, r1
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 8012f9c:	2d00      	cmp	r5, #0
 8012f9e:	d045      	beq.n	801302c <rcutils_string_map_reserve+0x98>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d044      	beq.n	8013030 <rcutils_string_map_reserve+0x9c>
  if (capacity < string_map->impl->size) {
 8012fa6:	68da      	ldr	r2, [r3, #12]
 8012fa8:	42a2      	cmp	r2, r4
 8012faa:	d813      	bhi.n	8012fd4 <rcutils_string_map_reserve+0x40>
  if (capacity == string_map->impl->capacity) {
 8012fac:	689a      	ldr	r2, [r3, #8]
 8012fae:	42a2      	cmp	r2, r4
 8012fb0:	d00e      	beq.n	8012fd0 <rcutils_string_map_reserve+0x3c>
  rcutils_allocator_t allocator = string_map->impl->allocator;
 8012fb2:	6a1e      	ldr	r6, [r3, #32]
  } else if (capacity == 0) {
 8012fb4:	b984      	cbnz	r4, 8012fd8 <rcutils_string_map_reserve+0x44>
  rcutils_allocator_t allocator = string_map->impl->allocator;
 8012fb6:	695f      	ldr	r7, [r3, #20]
    allocator.deallocate(string_map->impl->keys, allocator.state);
 8012fb8:	6818      	ldr	r0, [r3, #0]
 8012fba:	4631      	mov	r1, r6
 8012fbc:	47b8      	blx	r7
    string_map->impl->keys = NULL;
 8012fbe:	682b      	ldr	r3, [r5, #0]
    allocator.deallocate(string_map->impl->values, allocator.state);
 8012fc0:	4631      	mov	r1, r6
 8012fc2:	6858      	ldr	r0, [r3, #4]
    string_map->impl->keys = NULL;
 8012fc4:	601c      	str	r4, [r3, #0]
    allocator.deallocate(string_map->impl->values, allocator.state);
 8012fc6:	47b8      	blx	r7
    string_map->impl->values = NULL;
 8012fc8:	682b      	ldr	r3, [r5, #0]
 8012fca:	605c      	str	r4, [r3, #4]
  string_map->impl->capacity = capacity;
 8012fcc:	682b      	ldr	r3, [r5, #0]
 8012fce:	609c      	str	r4, [r3, #8]
    return RCUTILS_RET_OK;
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e005      	b.n	8012fe0 <rcutils_string_map_reserve+0x4c>
 8012fd4:	4614      	mov	r4, r2
 8012fd6:	e7e1      	b.n	8012f9c <rcutils_string_map_reserve+0x8>
    if (capacity > (SIZE_MAX / sizeof(char *))) {
 8012fd8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012fdc:	d302      	bcc.n	8012fe4 <rcutils_string_map_reserve+0x50>
      return RCUTILS_RET_BAD_ALLOC;
 8012fde:	200a      	movs	r0, #10
}
 8012fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      allocator.reallocate(string_map->impl->keys, capacity * sizeof(char *), allocator.state);
 8012fe4:	00a7      	lsls	r7, r4, #2
  rcutils_allocator_t allocator = string_map->impl->allocator;
 8012fe6:	f8d3 8018 	ldr.w	r8, [r3, #24]
      allocator.reallocate(string_map->impl->keys, capacity * sizeof(char *), allocator.state);
 8012fea:	6818      	ldr	r0, [r3, #0]
 8012fec:	4632      	mov	r2, r6
 8012fee:	4639      	mov	r1, r7
 8012ff0:	47c0      	blx	r8
    if (NULL == new_keys) {
 8012ff2:	2800      	cmp	r0, #0
 8012ff4:	d0f3      	beq.n	8012fde <rcutils_string_map_reserve+0x4a>
    string_map->impl->keys = new_keys;
 8012ff6:	682b      	ldr	r3, [r5, #0]
      allocator.reallocate(string_map->impl->values, capacity * sizeof(char *), allocator.state);
 8012ff8:	4632      	mov	r2, r6
    string_map->impl->keys = new_keys;
 8012ffa:	6018      	str	r0, [r3, #0]
      allocator.reallocate(string_map->impl->values, capacity * sizeof(char *), allocator.state);
 8012ffc:	4639      	mov	r1, r7
 8012ffe:	6858      	ldr	r0, [r3, #4]
 8013000:	47c0      	blx	r8
    if (NULL == new_values) {
 8013002:	2800      	cmp	r0, #0
 8013004:	d0eb      	beq.n	8012fde <rcutils_string_map_reserve+0x4a>
    string_map->impl->values = new_values;
 8013006:	682b      	ldr	r3, [r5, #0]
    if (capacity > string_map->impl->capacity) {
 8013008:	6899      	ldr	r1, [r3, #8]
    string_map->impl->values = new_values;
 801300a:	6058      	str	r0, [r3, #4]
    if (capacity > string_map->impl->capacity) {
 801300c:	42a1      	cmp	r1, r4
 801300e:	d2dd      	bcs.n	8012fcc <rcutils_string_map_reserve+0x38>
        string_map->impl->keys[i] = NULL;
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8013016:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 801301a:	443b      	add	r3, r7
 801301c:	2100      	movs	r1, #0
 801301e:	f842 1b04 	str.w	r1, [r2], #4
      for (; i < capacity; ++i) {
 8013022:	4293      	cmp	r3, r2
        string_map->impl->values[i] = NULL;
 8013024:	f840 1b04 	str.w	r1, [r0], #4
      for (; i < capacity; ++i) {
 8013028:	d1f9      	bne.n	801301e <rcutils_string_map_reserve+0x8a>
 801302a:	e7cf      	b.n	8012fcc <rcutils_string_map_reserve+0x38>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 801302c:	200b      	movs	r0, #11
 801302e:	e7d7      	b.n	8012fe0 <rcutils_string_map_reserve+0x4c>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 8013030:	201f      	movs	r0, #31
 8013032:	e7d5      	b.n	8012fe0 <rcutils_string_map_reserve+0x4c>

08013034 <rcutils_string_map_init>:
{
 8013034:	b082      	sub	sp, #8
 8013036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303a:	4688      	mov	r8, r1
 801303c:	a906      	add	r1, sp, #24
 801303e:	e881 000c 	stmia.w	r1, {r2, r3}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 8013042:	4605      	mov	r5, r0
 8013044:	b928      	cbnz	r0, 8013052 <rcutils_string_map_init+0x1e>
 8013046:	240b      	movs	r4, #11
}
 8013048:	4620      	mov	r0, r4
 801304a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801304e:	b002      	add	sp, #8
 8013050:	4770      	bx	lr
  if (string_map->impl != NULL) {
 8013052:	6807      	ldr	r7, [r0, #0]
 8013054:	bb17      	cbnz	r7, 801309c <rcutils_string_map_init+0x68>
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 8013056:	a806      	add	r0, sp, #24
 8013058:	f7ff fe85 	bl	8012d66 <rcutils_allocator_is_valid>
 801305c:	2800      	cmp	r0, #0
 801305e:	d0f2      	beq.n	8013046 <rcutils_string_map_init+0x12>
  string_map->impl = allocator.allocate(sizeof(rcutils_string_map_impl_t), allocator.state);
 8013060:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013062:	9b06      	ldr	r3, [sp, #24]
 8013064:	2024      	movs	r0, #36	; 0x24
 8013066:	4798      	blx	r3
 8013068:	6028      	str	r0, [r5, #0]
  if (NULL == string_map->impl) {
 801306a:	b1c8      	cbz	r0, 80130a0 <rcutils_string_map_init+0x6c>
  string_map->impl->allocator = allocator;
 801306c:	ae06      	add	r6, sp, #24
  string_map->impl->values = NULL;
 801306e:	e9c0 7700 	strd	r7, r7, [r0]
  string_map->impl->size = 0;
 8013072:	e9c0 7702 	strd	r7, r7, [r0, #8]
  string_map->impl->allocator = allocator;
 8013076:	f100 0410 	add.w	r4, r0, #16
 801307a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801307c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801307e:	6833      	ldr	r3, [r6, #0]
 8013080:	6023      	str	r3, [r4, #0]
  rcutils_ret_t ret = rcutils_string_map_reserve(string_map, initial_capacity);
 8013082:	4641      	mov	r1, r8
 8013084:	4628      	mov	r0, r5
 8013086:	f7ff ff85 	bl	8012f94 <rcutils_string_map_reserve>
  if (ret != RCUTILS_RET_OK) {
 801308a:	4604      	mov	r4, r0
 801308c:	2800      	cmp	r0, #0
 801308e:	d0db      	beq.n	8013048 <rcutils_string_map_init+0x14>
    allocator.deallocate(string_map->impl, allocator.state);
 8013090:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013092:	6828      	ldr	r0, [r5, #0]
 8013094:	9b07      	ldr	r3, [sp, #28]
 8013096:	4798      	blx	r3
    string_map->impl = NULL;
 8013098:	602f      	str	r7, [r5, #0]
    return ret;
 801309a:	e7d5      	b.n	8013048 <rcutils_string_map_init+0x14>
    return RCUTILS_RET_STRING_MAP_ALREADY_INIT;
 801309c:	241e      	movs	r4, #30
 801309e:	e7d3      	b.n	8013048 <rcutils_string_map_init+0x14>
    return RCUTILS_RET_BAD_ALLOC;
 80130a0:	240a      	movs	r4, #10
 80130a2:	e7d1      	b.n	8013048 <rcutils_string_map_init+0x14>

080130a4 <rcutils_string_map_clear>:
{
 80130a4:	b538      	push	{r3, r4, r5, lr}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 80130a6:	4605      	mov	r5, r0
 80130a8:	b188      	cbz	r0, 80130ce <rcutils_string_map_clear+0x2a>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 80130aa:	6803      	ldr	r3, [r0, #0]
 80130ac:	b18b      	cbz	r3, 80130d2 <rcutils_string_map_clear+0x2e>
  size_t i = 0;
 80130ae:	2400      	movs	r4, #0
  for (; i < string_map->impl->capacity; ++i) {
 80130b0:	6828      	ldr	r0, [r5, #0]
 80130b2:	6883      	ldr	r3, [r0, #8]
 80130b4:	429c      	cmp	r4, r3
 80130b6:	d301      	bcc.n	80130bc <rcutils_string_map_clear+0x18>
 80130b8:	2000      	movs	r0, #0
}
 80130ba:	bd38      	pop	{r3, r4, r5, pc}
    if (string_map->impl->keys[i] != NULL) {
 80130bc:	6803      	ldr	r3, [r0, #0]
 80130be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80130c2:	b113      	cbz	r3, 80130ca <rcutils_string_map_clear+0x26>
      __remove_key_and_value_at_index(string_map->impl, i);
 80130c4:	4621      	mov	r1, r4
 80130c6:	f7ff ff24 	bl	8012f12 <__remove_key_and_value_at_index>
  for (; i < string_map->impl->capacity; ++i) {
 80130ca:	3401      	adds	r4, #1
 80130cc:	e7f0      	b.n	80130b0 <rcutils_string_map_clear+0xc>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 80130ce:	200b      	movs	r0, #11
 80130d0:	e7f3      	b.n	80130ba <rcutils_string_map_clear+0x16>
  RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 80130d2:	201f      	movs	r0, #31
 80130d4:	e7f1      	b.n	80130ba <rcutils_string_map_clear+0x16>

080130d6 <rcutils_string_map_fini>:
{
 80130d6:	b538      	push	{r3, r4, r5, lr}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 80130d8:	4605      	mov	r5, r0
 80130da:	b190      	cbz	r0, 8013102 <rcutils_string_map_fini+0x2c>
  if (NULL == string_map->impl) {
 80130dc:	6804      	ldr	r4, [r0, #0]
 80130de:	b174      	cbz	r4, 80130fe <rcutils_string_map_fini+0x28>
  rcutils_ret_t ret = rcutils_string_map_clear(string_map);
 80130e0:	f7ff ffe0 	bl	80130a4 <rcutils_string_map_clear>
  if (ret != RCUTILS_RET_OK) {
 80130e4:	4604      	mov	r4, r0
 80130e6:	b950      	cbnz	r0, 80130fe <rcutils_string_map_fini+0x28>
  ret = rcutils_string_map_reserve(string_map, 0);
 80130e8:	4601      	mov	r1, r0
 80130ea:	4628      	mov	r0, r5
 80130ec:	f7ff ff52 	bl	8012f94 <rcutils_string_map_reserve>
  if (ret != RCUTILS_RET_OK) {
 80130f0:	4604      	mov	r4, r0
 80130f2:	b920      	cbnz	r0, 80130fe <rcutils_string_map_fini+0x28>
  rcutils_allocator_t allocator = string_map->impl->allocator;
 80130f4:	6828      	ldr	r0, [r5, #0]
  allocator.deallocate(string_map->impl, allocator.state);
 80130f6:	6943      	ldr	r3, [r0, #20]
 80130f8:	6a01      	ldr	r1, [r0, #32]
 80130fa:	4798      	blx	r3
  string_map->impl = NULL;
 80130fc:	602c      	str	r4, [r5, #0]
}
 80130fe:	4620      	mov	r0, r4
 8013100:	bd38      	pop	{r3, r4, r5, pc}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(string_map, RCUTILS_RET_INVALID_ARGUMENT);
 8013102:	240b      	movs	r4, #11
 8013104:	e7fb      	b.n	80130fe <rcutils_string_map_fini+0x28>

08013106 <rcutils_string_map_key_existsn>:
bool
rcutils_string_map_key_existsn(
  const rcutils_string_map_t * string_map,
  const char * key,
  size_t key_length)
{
 8013106:	b507      	push	{r0, r1, r2, lr}
  if (NULL == string_map || NULL == string_map->impl || NULL == key) {
 8013108:	b128      	cbz	r0, 8013116 <rcutils_string_map_key_existsn+0x10>
 801310a:	6800      	ldr	r0, [r0, #0]
 801310c:	b118      	cbz	r0, 8013116 <rcutils_string_map_key_existsn+0x10>
 801310e:	b129      	cbz	r1, 801311c <rcutils_string_map_key_existsn+0x16>
    return false;
  }
  size_t key_index;
  bool key_exists = __get_index_of_key_if_exists(string_map->impl, key, key_length, &key_index);
 8013110:	ab01      	add	r3, sp, #4
 8013112:	f7ff ff1b 	bl	8012f4c <__get_index_of_key_if_exists>
  return key_exists;
}
 8013116:	b003      	add	sp, #12
 8013118:	f85d fb04 	ldr.w	pc, [sp], #4
    return false;
 801311c:	4608      	mov	r0, r1
 801311e:	e7fa      	b.n	8013116 <rcutils_string_map_key_existsn+0x10>

08013120 <rcutils_string_map_getn>:
const char *
rcutils_string_map_getn(
  const rcutils_string_map_t * string_map,
  const char * key,
  size_t key_length)
{
 8013120:	b513      	push	{r0, r1, r4, lr}
  if (NULL == string_map || NULL == string_map->impl || NULL == key) {
 8013122:	4604      	mov	r4, r0
 8013124:	b910      	cbnz	r0, 801312c <rcutils_string_map_getn+0xc>
    return NULL;
 8013126:	2000      	movs	r0, #0
  size_t key_index;
  if (__get_index_of_key_if_exists(string_map->impl, key, key_length, &key_index)) {
    return string_map->impl->values[key_index];
  }
  return NULL;
}
 8013128:	b002      	add	sp, #8
 801312a:	bd10      	pop	{r4, pc}
  if (NULL == string_map || NULL == string_map->impl || NULL == key) {
 801312c:	6800      	ldr	r0, [r0, #0]
 801312e:	2800      	cmp	r0, #0
 8013130:	d0f9      	beq.n	8013126 <rcutils_string_map_getn+0x6>
 8013132:	2900      	cmp	r1, #0
 8013134:	d0f7      	beq.n	8013126 <rcutils_string_map_getn+0x6>
  if (__get_index_of_key_if_exists(string_map->impl, key, key_length, &key_index)) {
 8013136:	ab01      	add	r3, sp, #4
 8013138:	f7ff ff08 	bl	8012f4c <__get_index_of_key_if_exists>
 801313c:	2800      	cmp	r0, #0
 801313e:	d0f2      	beq.n	8013126 <rcutils_string_map_getn+0x6>
    return string_map->impl->values[key_index];
 8013140:	6823      	ldr	r3, [r4, #0]
 8013142:	9a01      	ldr	r2, [sp, #4]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801314a:	e7ed      	b.n	8013128 <rcutils_string_map_getn+0x8>

0801314c <rmw_get_default_publisher_options>:
{
  rmw_publisher_options_t publisher_options = {
    .rmw_specific_publisher_payload = NULL,
  };
  return publisher_options;
}
 801314c:	2000      	movs	r0, #0
 801314e:	4770      	bx	lr

08013150 <rmw_validate_full_topic_name>:
{
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	460d      	mov	r5, r1
 8013154:	4616      	mov	r6, r2
  if (!topic_name) {
 8013156:	4604      	mov	r4, r0
 8013158:	b148      	cbz	r0, 801316e <rmw_validate_full_topic_name+0x1e>
  return rmw_validate_full_topic_name_with_size(
 801315a:	f7ed f831 	bl	80001c0 <strlen>
 801315e:	4633      	mov	r3, r6
 8013160:	4601      	mov	r1, r0
 8013162:	462a      	mov	r2, r5
 8013164:	4620      	mov	r0, r4
}
 8013166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return rmw_validate_full_topic_name_with_size(
 801316a:	f7f4 bbbb 	b.w	80078e4 <rmw_validate_full_topic_name_with_size>
}
 801316e:	200b      	movs	r0, #11
 8013170:	bd70      	pop	{r4, r5, r6, pc}

08013172 <rmw_publish>:
rmw_ret_t
rmw_publish(
  const rmw_publisher_t * publisher,
  const void * ros_message,
  rmw_publisher_allocation_t * allocation)
{
 8013172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013174:	460c      	mov	r4, r1
 8013176:	b08b      	sub	sp, #44	; 0x2c
  (void) allocation;
  EPROS_PRINT_TRACE()
  rmw_ret_t ret = RMW_RET_OK;
  if (!publisher) {
 8013178:	4605      	mov	r5, r0
 801317a:	b908      	cbnz	r0, 8013180 <rmw_publish+0xe>
          &custom_publisher->owner_node->context->session, RMW_UXRCE_PUBLISH_RELIABLE_TIMEOUT);
      }
    }
    if (!written) {
      RMW_SET_ERROR_MSG("error publishing message");
      ret = RMW_RET_ERROR;
 801317c:	2001      	movs	r0, #1
    }
  }
  return ret;
 801317e:	e02e      	b.n	80131de <rmw_publish+0x6c>
  } else if (!ros_message) {
 8013180:	2900      	cmp	r1, #0
 8013182:	d0fb      	beq.n	801317c <rmw_publish+0xa>
  } else if (!is_uxrce_rmw_identifier_valid(publisher->implementation_identifier))
 8013184:	6800      	ldr	r0, [r0, #0]
 8013186:	f000 f978 	bl	801347a <is_uxrce_rmw_identifier_valid>
 801318a:	2800      	cmp	r0, #0
 801318c:	d0f6      	beq.n	801317c <rmw_publish+0xa>
  } else if (!publisher->data) {
 801318e:	686d      	ldr	r5, [r5, #4]
 8013190:	2d00      	cmp	r5, #0
 8013192:	d0f3      	beq.n	801317c <rmw_publish+0xa>
    const message_type_support_callbacks_t * functions = custom_publisher->type_support_callbacks;
 8013194:	6bae      	ldr	r6, [r5, #56]	; 0x38
    uint32_t topic_length = functions->get_serialized_size(ros_message);
 8013196:	4620      	mov	r0, r4
 8013198:	6933      	ldr	r3, [r6, #16]
 801319a:	4798      	blx	r3
        &custom_publisher->owner_node->context->session,
 801319c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    if (uxr_prepare_output_stream(
 80131a0:	695f      	ldr	r7, [r3, #20]
 80131a2:	9000      	str	r0, [sp, #0]
 80131a4:	69aa      	ldr	r2, [r5, #24]
 80131a6:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 80131aa:	ab02      	add	r3, sp, #8
 80131ac:	f507 7034 	add.w	r0, r7, #720	; 0x2d0
 80131b0:	f001 fb5c 	bl	801486c <uxr_prepare_output_stream>
 80131b4:	2800      	cmp	r0, #0
 80131b6:	d0e1      	beq.n	801317c <rmw_publish+0xa>
      written = functions->cdr_serialize(ros_message, &mb);
 80131b8:	68b3      	ldr	r3, [r6, #8]
 80131ba:	4620      	mov	r0, r4
 80131bc:	a902      	add	r1, sp, #8
 80131be:	4798      	blx	r3
      if (UXR_BEST_EFFORT_STREAM == custom_publisher->stream_id.type) {
 80131c0:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
      written = functions->cdr_serialize(ros_message, &mb);
 80131ca:	4604      	mov	r4, r0
        uxr_flash_output_streams(&custom_publisher->owner_node->context->session);
 80131cc:	6958      	ldr	r0, [r3, #20]
      if (UXR_BEST_EFFORT_STREAM == custom_publisher->stream_id.type) {
 80131ce:	d108      	bne.n	80131e2 <rmw_publish+0x70>
        uxr_flash_output_streams(&custom_publisher->owner_node->context->session);
 80131d0:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80131d4:	f001 f821 	bl	801421a <uxr_flash_output_streams>
    if (!written) {
 80131d8:	f084 0001 	eor.w	r0, r4, #1
  rmw_ret_t ret = RMW_RET_OK;
 80131dc:	b2c0      	uxtb	r0, r0
}
 80131de:	b00b      	add	sp, #44	; 0x2c
 80131e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        written &= uxr_run_session_until_confirm_delivery(
 80131e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80131e6:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80131ea:	f001 f883 	bl	80142f4 <uxr_run_session_until_confirm_delivery>
 80131ee:	4004      	ands	r4, r0
 80131f0:	b2e4      	uxtb	r4, r4
 80131f2:	e7f1      	b.n	80131d8 <rmw_publish+0x66>

080131f4 <rmw_publisher_get_actual_qos>:

  rmw_uxrce_publisher_t * custom_publisher = (rmw_uxrce_publisher_t *)publisher->data;
  qos = &custom_publisher->qos;

  return RMW_RET_OK;
}
 80131f4:	2000      	movs	r0, #0
 80131f6:	4770      	bx	lr

080131f8 <rmw_destroy_publisher>:

rmw_ret_t
rmw_destroy_publisher(
  rmw_node_t * node,
  rmw_publisher_t * publisher)
{
 80131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fc:	460d      	mov	r5, r1
  EPROS_PRINT_TRACE()
  rmw_ret_t result_ret = RMW_RET_OK;
  if (!node) {
 80131fe:	4604      	mov	r4, r0
 8013200:	b918      	cbnz	r0, 801320a <rmw_destroy_publisher+0x12>
    RMW_SET_ERROR_MSG("node handle is null");
    result_ret = RMW_RET_ERROR;
 8013202:	2401      	movs	r4, #1
    
    rmw_uxrce_fini_publisher_memory(publisher);
  }

  return result_ret;
}
 8013204:	4620      	mov	r0, r4
 8013206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801320a:	6800      	ldr	r0, [r0, #0]
 801320c:	f000 f935 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8013210:	2800      	cmp	r0, #0
 8013212:	d0f6      	beq.n	8013202 <rmw_destroy_publisher+0xa>
  } else if (!node->data) {
 8013214:	6863      	ldr	r3, [r4, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d0f3      	beq.n	8013202 <rmw_destroy_publisher+0xa>
  } else if (!publisher) {
 801321a:	2d00      	cmp	r5, #0
 801321c:	d0f1      	beq.n	8013202 <rmw_destroy_publisher+0xa>
  } else if (!is_uxrce_rmw_identifier_valid(publisher->implementation_identifier))
 801321e:	6828      	ldr	r0, [r5, #0]
 8013220:	f000 f92b 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8013224:	2800      	cmp	r0, #0
 8013226:	d0ec      	beq.n	8013202 <rmw_destroy_publisher+0xa>
  } else if (!publisher->data) {
 8013228:	686c      	ldr	r4, [r5, #4]
 801322a:	2c00      	cmp	r4, #0
 801322c:	d0e9      	beq.n	8013202 <rmw_destroy_publisher+0xa>
    destroy_topic(custom_publisher->topic);
 801322e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    rmw_uxrce_node_t * custom_node = custom_publisher->owner_node;
 8013230:	f8d4 8094 	ldr.w	r8, [r4, #148]	; 0x94
    destroy_topic(custom_publisher->topic);
 8013234:	f003 f81d 	bl	8016272 <destroy_topic>
      &custom_publisher->owner_node->context->session,
 8013238:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    uint16_t delete_writer = uxr_buffer_delete_entity(
 801323c:	69a2      	ldr	r2, [r4, #24]
      &custom_publisher->owner_node->context->session,
 801323e:	6958      	ldr	r0, [r3, #20]
    uint16_t delete_writer = uxr_buffer_delete_entity(
 8013240:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 8013244:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8013248:	f000 fc68 	bl	8013b1c <uxr_buffer_delete_entity>
      &custom_publisher->owner_node->context->session,
 801324c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    uint16_t delete_publisher = uxr_buffer_delete_entity(
 8013250:	6962      	ldr	r2, [r4, #20]
    uint16_t delete_writer = uxr_buffer_delete_entity(
 8013252:	4607      	mov	r7, r0
      &custom_publisher->owner_node->context->session,
 8013254:	6958      	ldr	r0, [r3, #20]
    uint16_t delete_publisher = uxr_buffer_delete_entity(
 8013256:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 801325a:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 801325e:	f000 fc5d 	bl	8013b1c <uxr_buffer_delete_entity>
    bool ret = run_xrce_session(custom_node->context, delete_writer);
 8013262:	4639      	mov	r1, r7
    uint16_t delete_publisher = uxr_buffer_delete_entity(
 8013264:	4606      	mov	r6, r0
    bool ret = run_xrce_session(custom_node->context, delete_writer);
 8013266:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801326a:	f000 f8e2 	bl	8013432 <run_xrce_session>
    ret &= run_xrce_session(custom_node->context, delete_publisher);
 801326e:	4631      	mov	r1, r6
    bool ret = run_xrce_session(custom_node->context, delete_writer);
 8013270:	4604      	mov	r4, r0
    ret &= run_xrce_session(custom_node->context, delete_publisher);
 8013272:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8013276:	f000 f8dc 	bl	8013432 <run_xrce_session>
    if (!ret)
 801327a:	4004      	ands	r4, r0
 801327c:	f084 0401 	eor.w	r4, r4, #1
    rmw_uxrce_fini_publisher_memory(publisher);
 8013280:	4628      	mov	r0, r5
  rmw_ret_t result_ret = RMW_RET_OK;
 8013282:	b2e4      	uxtb	r4, r4
    rmw_uxrce_fini_publisher_memory(publisher);
 8013284:	f7f4 fc88 	bl	8007b98 <rmw_uxrce_fini_publisher_memory>
  return result_ret;
 8013288:	e7bc      	b.n	8013204 <rmw_destroy_publisher+0xc>

0801328a <rmw_uxrce_init_service_memory>:
RMW_INIT_MEMORY(service)
 801328a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801328e:	4604      	mov	r4, r0
 8013290:	4688      	mov	r8, r1
 8013292:	b16a      	cbz	r2, 80132b0 <rmw_uxrce_init_service_memory+0x26>
 8013294:	7a07      	ldrb	r7, [r0, #8]
 8013296:	b95f      	cbnz	r7, 80132b0 <rmw_uxrce_init_service_memory+0x26>
 8013298:	e9c0 7700 	strd	r7, r7, [r0]
 801329c:	f640 2564 	movw	r5, #2660	; 0xa64
 80132a0:	2101      	movs	r1, #1
 80132a2:	6105      	str	r5, [r0, #16]
 80132a4:	7201      	strb	r1, [r0, #8]
 80132a6:	4646      	mov	r6, r8
 80132a8:	fb05 8502 	mla	r5, r5, r2, r8
 80132ac:	42ae      	cmp	r6, r5
 80132ae:	d101      	bne.n	80132b4 <rmw_uxrce_init_service_memory+0x2a>
 80132b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b4:	4631      	mov	r1, r6
 80132b6:	4620      	mov	r0, r4
 80132b8:	f002 ff9c 	bl	80161f4 <put_memory>
 80132bc:	60f6      	str	r6, [r6, #12]
 80132be:	f888 7000 	strb.w	r7, [r8]
 80132c2:	f606 2664 	addw	r6, r6, #2660	; 0xa64
 80132c6:	e7f1      	b.n	80132ac <rmw_uxrce_init_service_memory+0x22>

080132c8 <rmw_uxrce_init_client_memory>:
RMW_INIT_MEMORY(client)
 80132c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132cc:	4604      	mov	r4, r0
 80132ce:	4688      	mov	r8, r1
 80132d0:	b16a      	cbz	r2, 80132ee <rmw_uxrce_init_client_memory+0x26>
 80132d2:	7a07      	ldrb	r7, [r0, #8]
 80132d4:	b95f      	cbnz	r7, 80132ee <rmw_uxrce_init_client_memory+0x26>
 80132d6:	e9c0 7700 	strd	r7, r7, [r0]
 80132da:	f640 2558 	movw	r5, #2648	; 0xa58
 80132de:	2101      	movs	r1, #1
 80132e0:	6105      	str	r5, [r0, #16]
 80132e2:	7201      	strb	r1, [r0, #8]
 80132e4:	4646      	mov	r6, r8
 80132e6:	fb05 8502 	mla	r5, r5, r2, r8
 80132ea:	42ae      	cmp	r6, r5
 80132ec:	d101      	bne.n	80132f2 <rmw_uxrce_init_client_memory+0x2a>
 80132ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f2:	4631      	mov	r1, r6
 80132f4:	4620      	mov	r0, r4
 80132f6:	f002 ff7d 	bl	80161f4 <put_memory>
 80132fa:	60f6      	str	r6, [r6, #12]
 80132fc:	f888 7000 	strb.w	r7, [r8]
 8013300:	f606 2658 	addw	r6, r6, #2648	; 0xa58
 8013304:	e7f1      	b.n	80132ea <rmw_uxrce_init_client_memory+0x22>

08013306 <rmw_uxrce_init_publisher_memory>:
RMW_INIT_MEMORY(publisher)
 8013306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330a:	4604      	mov	r4, r0
 801330c:	4688      	mov	r8, r1
 801330e:	b162      	cbz	r2, 801332a <rmw_uxrce_init_publisher_memory+0x24>
 8013310:	7a07      	ldrb	r7, [r0, #8]
 8013312:	b957      	cbnz	r7, 801332a <rmw_uxrce_init_publisher_memory+0x24>
 8013314:	e9c0 7700 	strd	r7, r7, [r0]
 8013318:	2598      	movs	r5, #152	; 0x98
 801331a:	2101      	movs	r1, #1
 801331c:	6105      	str	r5, [r0, #16]
 801331e:	7201      	strb	r1, [r0, #8]
 8013320:	4646      	mov	r6, r8
 8013322:	fb05 8502 	mla	r5, r5, r2, r8
 8013326:	42ae      	cmp	r6, r5
 8013328:	d101      	bne.n	801332e <rmw_uxrce_init_publisher_memory+0x28>
 801332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801332e:	4631      	mov	r1, r6
 8013330:	4620      	mov	r0, r4
 8013332:	f002 ff5f 	bl	80161f4 <put_memory>
 8013336:	60f6      	str	r6, [r6, #12]
 8013338:	f888 7000 	strb.w	r7, [r8]
 801333c:	3698      	adds	r6, #152	; 0x98
 801333e:	e7f2      	b.n	8013326 <rmw_uxrce_init_publisher_memory+0x20>

08013340 <rmw_uxrce_init_subscription_memory>:
RMW_INIT_MEMORY(subscription)
 8013340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013344:	4604      	mov	r4, r0
 8013346:	4688      	mov	r8, r1
 8013348:	b16a      	cbz	r2, 8013366 <rmw_uxrce_init_subscription_memory+0x26>
 801334a:	7a07      	ldrb	r7, [r0, #8]
 801334c:	b95f      	cbnz	r7, 8013366 <rmw_uxrce_init_subscription_memory+0x26>
 801334e:	e9c0 7700 	strd	r7, r7, [r0]
 8013352:	f640 05a8 	movw	r5, #2216	; 0x8a8
 8013356:	2101      	movs	r1, #1
 8013358:	6105      	str	r5, [r0, #16]
 801335a:	7201      	strb	r1, [r0, #8]
 801335c:	4646      	mov	r6, r8
 801335e:	fb05 8502 	mla	r5, r5, r2, r8
 8013362:	42ae      	cmp	r6, r5
 8013364:	d101      	bne.n	801336a <rmw_uxrce_init_subscription_memory+0x2a>
 8013366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801336a:	4631      	mov	r1, r6
 801336c:	4620      	mov	r0, r4
 801336e:	f002 ff41 	bl	80161f4 <put_memory>
 8013372:	60f6      	str	r6, [r6, #12]
 8013374:	f888 7000 	strb.w	r7, [r8]
 8013378:	f606 06a8 	addw	r6, r6, #2216	; 0x8a8
 801337c:	e7f1      	b.n	8013362 <rmw_uxrce_init_subscription_memory+0x22>

0801337e <rmw_uxrce_init_node_memory>:
RMW_INIT_MEMORY(node)
 801337e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013382:	4604      	mov	r4, r0
 8013384:	4688      	mov	r8, r1
 8013386:	b162      	cbz	r2, 80133a2 <rmw_uxrce_init_node_memory+0x24>
 8013388:	7a07      	ldrb	r7, [r0, #8]
 801338a:	b957      	cbnz	r7, 80133a2 <rmw_uxrce_init_node_memory+0x24>
 801338c:	e9c0 7700 	strd	r7, r7, [r0]
 8013390:	251c      	movs	r5, #28
 8013392:	2101      	movs	r1, #1
 8013394:	6105      	str	r5, [r0, #16]
 8013396:	7201      	strb	r1, [r0, #8]
 8013398:	4646      	mov	r6, r8
 801339a:	fb05 8502 	mla	r5, r5, r2, r8
 801339e:	42ae      	cmp	r6, r5
 80133a0:	d101      	bne.n	80133a6 <rmw_uxrce_init_node_memory+0x28>
 80133a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a6:	4631      	mov	r1, r6
 80133a8:	4620      	mov	r0, r4
 80133aa:	f002 ff23 	bl	80161f4 <put_memory>
 80133ae:	60f6      	str	r6, [r6, #12]
 80133b0:	f888 7000 	strb.w	r7, [r8]
 80133b4:	361c      	adds	r6, #28
 80133b6:	e7f2      	b.n	801339e <rmw_uxrce_init_node_memory+0x20>

080133b8 <rmw_uxrce_init_session_memory>:
RMW_INIT_MEMORY(session)
 80133b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133bc:	4604      	mov	r4, r0
 80133be:	4688      	mov	r8, r1
 80133c0:	b172      	cbz	r2, 80133e0 <rmw_uxrce_init_session_memory+0x28>
 80133c2:	7a07      	ldrb	r7, [r0, #8]
 80133c4:	b967      	cbnz	r7, 80133e0 <rmw_uxrce_init_session_memory+0x28>
 80133c6:	2101      	movs	r1, #1
 80133c8:	e9c0 7700 	strd	r7, r7, [r0]
 80133cc:	7201      	strb	r1, [r0, #8]
 80133ce:	f241 51b8 	movw	r1, #5560	; 0x15b8
 80133d2:	6101      	str	r1, [r0, #16]
 80133d4:	4646      	mov	r6, r8
 80133d6:	fb01 8502 	mla	r5, r1, r2, r8
 80133da:	4689      	mov	r9, r1
 80133dc:	42ae      	cmp	r6, r5
 80133de:	d101      	bne.n	80133e4 <rmw_uxrce_init_session_memory+0x2c>
 80133e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133e4:	4631      	mov	r1, r6
 80133e6:	4620      	mov	r0, r4
 80133e8:	f002 ff04 	bl	80161f4 <put_memory>
 80133ec:	60f6      	str	r6, [r6, #12]
 80133ee:	f888 7000 	strb.w	r7, [r8]
 80133f2:	444e      	add	r6, r9
 80133f4:	e7f2      	b.n	80133dc <rmw_uxrce_init_session_memory+0x24>

080133f6 <rmw_uxrce_init_topic_memory>:
RMW_INIT_MEMORY(topic)
 80133f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133fa:	4605      	mov	r5, r0
 80133fc:	4688      	mov	r8, r1
 80133fe:	4617      	mov	r7, r2
 8013400:	b1aa      	cbz	r2, 801342e <rmw_uxrce_init_topic_memory+0x38>
 8013402:	7a04      	ldrb	r4, [r0, #8]
 8013404:	b99c      	cbnz	r4, 801342e <rmw_uxrce_init_topic_memory+0x38>
 8013406:	2301      	movs	r3, #1
 8013408:	e9c0 4400 	strd	r4, r4, [r0]
 801340c:	7203      	strb	r3, [r0, #8]
 801340e:	2320      	movs	r3, #32
 8013410:	6103      	str	r3, [r0, #16]
 8013412:	460e      	mov	r6, r1
 8013414:	46a1      	mov	r9, r4
 8013416:	4631      	mov	r1, r6
 8013418:	4628      	mov	r0, r5
 801341a:	3401      	adds	r4, #1
 801341c:	f002 feea 	bl	80161f4 <put_memory>
 8013420:	42a7      	cmp	r7, r4
 8013422:	60f6      	str	r6, [r6, #12]
 8013424:	f888 9000 	strb.w	r9, [r8]
 8013428:	f106 0620 	add.w	r6, r6, #32
 801342c:	d1f3      	bne.n	8013416 <rmw_uxrce_init_topic_memory+0x20>
 801342e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013432 <run_xrce_session>:
bool run_xrce_session(rmw_context_impl_t * context, uint16_t requests){
 8013432:	b510      	push	{r4, lr}
 8013434:	4603      	mov	r3, r0
 8013436:	b086      	sub	sp, #24
  if (context->creation_destroy_stream->type == UXR_BEST_EFFORT_STREAM)
 8013438:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
bool run_xrce_session(rmw_context_impl_t * context, uint16_t requests){
 801343c:	f8ad 100e 	strh.w	r1, [sp, #14]
  if (context->creation_destroy_stream->type == UXR_BEST_EFFORT_STREAM)
 8013440:	789c      	ldrb	r4, [r3, #2]
 8013442:	2c01      	cmp	r4, #1
 8013444:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8013448:	d104      	bne.n	8013454 <run_xrce_session+0x22>
    uxr_flash_output_streams(&context->session);
 801344a:	f000 fee6 	bl	801421a <uxr_flash_output_streams>
  return true;
 801344e:	4620      	mov	r0, r4
}
 8013450:	b006      	add	sp, #24
 8013452:	bd10      	pop	{r4, pc}
    if (!uxr_run_session_until_all_status(&context->session, 
 8013454:	2301      	movs	r3, #1
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	f10d 020e 	add.w	r2, sp, #14
 801345c:	f10d 0317 	add.w	r3, sp, #23
 8013460:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013464:	f000 ff61 	bl	801432a <uxr_run_session_until_all_status>
 8013468:	e7f2      	b.n	8013450 <run_xrce_session+0x1e>

0801346a <build_publisher_xml>:
  xml[0] = '\0';
 801346a:	2300      	movs	r3, #0
 801346c:	700b      	strb	r3, [r1, #0]
}
 801346e:	2001      	movs	r0, #1
 8013470:	4770      	bx	lr

08013472 <build_subscriber_xml>:
 8013472:	2300      	movs	r3, #0
 8013474:	700b      	strb	r3, [r1, #0]
 8013476:	2001      	movs	r0, #1
 8013478:	4770      	bx	lr

0801347a <is_uxrce_rmw_identifier_valid>:
  ret = (written > 0) && (written < (int)buffer_size);
  return ret;
}

bool is_uxrce_rmw_identifier_valid(const char * id)
{
 801347a:	b510      	push	{r4, lr}
  return id != NULL &&
 801347c:	4604      	mov	r4, r0
 801347e:	b140      	cbz	r0, 8013492 <is_uxrce_rmw_identifier_valid+0x18>
         strcmp(id, rmw_get_implementation_identifier()) == 0;
 8013480:	f7f6 ff92 	bl	800a3a8 <rmw_get_implementation_identifier>
 8013484:	4601      	mov	r1, r0
 8013486:	4620      	mov	r0, r4
 8013488:	f7ec ff0e 	bl	80002a8 <strcmp>
  return id != NULL &&
 801348c:	fab0 f080 	clz	r0, r0
 8013490:	0940      	lsrs	r0, r0, #5
 8013492:	bd10      	pop	{r4, pc}

08013494 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Header>:
#endif

ROSIDL_TYPESUPPORT_C_EXPORT_std_msgs
const rosidl_message_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_c, std_msgs, msg, Header)() {
  return ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_microxrcedds_c, std_msgs, msg, Header)();
 8013494:	f7f4 bdcc 	b.w	8008030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>

08013498 <_Header__get_serialized_size>:
    get_serialized_size_std_msgs__msg__Header(
 8013498:	2100      	movs	r1, #0
 801349a:	f7f4 bd61 	b.w	8007f60 <get_serialized_size_std_msgs__msg__Header>

0801349e <max_serialized_size_std_msgs__msg__Header>:
{
 801349e:	b510      	push	{r4, lr}
  *full_bounded = true;
 80134a0:	2301      	movs	r3, #1
{
 80134a2:	4604      	mov	r4, r0
  *full_bounded = true;
 80134a4:	7003      	strb	r3, [r0, #0]
    max_serialized_size_builtin_interfaces__msg__Time(full_bounded, current_alignment);
 80134a6:	f000 f80f 	bl	80134c8 <max_serialized_size_builtin_interfaces__msg__Time>
  *full_bounded = false;
 80134aa:	2300      	movs	r3, #0
 80134ac:	7023      	strb	r3, [r4, #0]
}
 80134ae:	bd10      	pop	{r4, pc}

080134b0 <_Header__max_serialized_size>:
{
 80134b0:	b507      	push	{r0, r1, r2, lr}
  return max_serialized_size_std_msgs__msg__Header(&full_bounded, 0);
 80134b2:	2100      	movs	r1, #0
 80134b4:	f10d 0007 	add.w	r0, sp, #7
 80134b8:	f7ff fff1 	bl	801349e <max_serialized_size_std_msgs__msg__Header>
}
 80134bc:	b003      	add	sp, #12
 80134be:	f85d fb04 	ldr.w	pc, [sp], #4

080134c2 <_Time__get_serialized_size>:
    get_serialized_size_builtin_interfaces__msg__Time(
 80134c2:	2100      	movs	r1, #0
 80134c4:	f7f4 bdb8 	b.w	8008038 <get_serialized_size_builtin_interfaces__msg__Time>

080134c8 <max_serialized_size_builtin_interfaces__msg__Time>:
{
 80134c8:	b538      	push	{r3, r4, r5, lr}
 80134ca:	460c      	mov	r4, r1
  *full_bounded = true;
 80134cc:	2301      	movs	r3, #1
 80134ce:	7003      	strb	r3, [r0, #0]
  current_alignment += ucdr_alignment(current_alignment, sizeof(int32_t)) + sizeof(int32_t);
 80134d0:	2104      	movs	r1, #4
 80134d2:	4620      	mov	r0, r4
 80134d4:	f000 fa9e 	bl	8013a14 <ucdr_alignment>
 80134d8:	1d25      	adds	r5, r4, #4
 80134da:	4405      	add	r5, r0
  current_alignment += ucdr_alignment(current_alignment, sizeof(uint32_t)) + sizeof(uint32_t);
 80134dc:	2104      	movs	r1, #4
 80134de:	4628      	mov	r0, r5
 80134e0:	f000 fa98 	bl	8013a14 <ucdr_alignment>
  return current_alignment - initial_alignment;
 80134e4:	f1c4 0404 	rsb	r4, r4, #4
 80134e8:	4420      	add	r0, r4
}
 80134ea:	4428      	add	r0, r5
 80134ec:	bd38      	pop	{r3, r4, r5, pc}

080134ee <_Time__max_serialized_size>:
{
 80134ee:	b507      	push	{r0, r1, r2, lr}
  return max_serialized_size_builtin_interfaces__msg__Time(&full_bounded, 0);
 80134f0:	2100      	movs	r1, #0
 80134f2:	f10d 0007 	add.w	r0, sp, #7
 80134f6:	f7ff ffe7 	bl	80134c8 <max_serialized_size_builtin_interfaces__msg__Time>
}
 80134fa:	b003      	add	sp, #12
 80134fc:	f85d fb04 	ldr.w	pc, [sp], #4

08013500 <ucdr_serialize_char>:
    UCDR_BASIC_TYPE_DESERIALIZE_DEFINITION(SUFFIX, TYPE, SIZE) \

// -------------------------------------------------------------------
//              PUBLIC DE-SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_BASIC_TYPE_DEFINITIONS(_char, char, 1)
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	460d      	mov	r5, r1
 8013504:	2101      	movs	r1, #1
 8013506:	4604      	mov	r4, r0
 8013508:	f000 fa47 	bl	801399a <ucdr_check_final_buffer_behavior>
 801350c:	b148      	cbz	r0, 8013522 <ucdr_serialize_char+0x22>
 801350e:	68a3      	ldr	r3, [r4, #8]
 8013510:	701d      	strb	r5, [r3, #0]
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	3301      	adds	r3, #1
 8013516:	60a3      	str	r3, [r4, #8]
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	3301      	adds	r3, #1
 801351c:	6123      	str	r3, [r4, #16]
 801351e:	2301      	movs	r3, #1
 8013520:	7563      	strb	r3, [r4, #21]
 8013522:	7da0      	ldrb	r0, [r4, #22]
 8013524:	f080 0001 	eor.w	r0, r0, #1
 8013528:	bd38      	pop	{r3, r4, r5, pc}

0801352a <ucdr_serialize_bool>:
UCDR_BASIC_TYPE_DEFINITIONS(_bool, bool, 1)
 801352a:	b538      	push	{r3, r4, r5, lr}
 801352c:	460d      	mov	r5, r1
 801352e:	2101      	movs	r1, #1
 8013530:	4604      	mov	r4, r0
 8013532:	f000 fa32 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013536:	b148      	cbz	r0, 801354c <ucdr_serialize_bool+0x22>
 8013538:	68a3      	ldr	r3, [r4, #8]
 801353a:	701d      	strb	r5, [r3, #0]
 801353c:	68a3      	ldr	r3, [r4, #8]
 801353e:	3301      	adds	r3, #1
 8013540:	60a3      	str	r3, [r4, #8]
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	3301      	adds	r3, #1
 8013546:	6123      	str	r3, [r4, #16]
 8013548:	2301      	movs	r3, #1
 801354a:	7563      	strb	r3, [r4, #21]
 801354c:	7da0      	ldrb	r0, [r4, #22]
 801354e:	f080 0001 	eor.w	r0, r0, #1
 8013552:	bd38      	pop	{r3, r4, r5, pc}

08013554 <ucdr_deserialize_bool>:
 8013554:	b538      	push	{r3, r4, r5, lr}
 8013556:	460d      	mov	r5, r1
 8013558:	2101      	movs	r1, #1
 801355a:	4604      	mov	r4, r0
 801355c:	f000 fa1d 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013560:	b160      	cbz	r0, 801357c <ucdr_deserialize_bool+0x28>
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013568:	3a00      	subs	r2, #0
 801356a:	bf18      	it	ne
 801356c:	2201      	movne	r2, #1
 801356e:	702a      	strb	r2, [r5, #0]
 8013570:	60a3      	str	r3, [r4, #8]
 8013572:	6923      	ldr	r3, [r4, #16]
 8013574:	3301      	adds	r3, #1
 8013576:	6123      	str	r3, [r4, #16]
 8013578:	2301      	movs	r3, #1
 801357a:	7563      	strb	r3, [r4, #21]
 801357c:	7da0      	ldrb	r0, [r4, #22]
 801357e:	f080 0001 	eor.w	r0, r0, #1
 8013582:	bd38      	pop	{r3, r4, r5, pc}

08013584 <ucdr_serialize_uint8_t>:
 8013584:	f7ff bfbc 	b.w	8013500 <ucdr_serialize_char>

08013588 <ucdr_deserialize_uint8_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint8_t, uint8_t, 1)
 8013588:	b538      	push	{r3, r4, r5, lr}
 801358a:	460d      	mov	r5, r1
 801358c:	2101      	movs	r1, #1
 801358e:	4604      	mov	r4, r0
 8013590:	f000 fa03 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013594:	b150      	cbz	r0, 80135ac <ucdr_deserialize_uint8_t+0x24>
 8013596:	68a3      	ldr	r3, [r4, #8]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	702b      	strb	r3, [r5, #0]
 801359c:	68a3      	ldr	r3, [r4, #8]
 801359e:	3301      	adds	r3, #1
 80135a0:	60a3      	str	r3, [r4, #8]
 80135a2:	6923      	ldr	r3, [r4, #16]
 80135a4:	3301      	adds	r3, #1
 80135a6:	6123      	str	r3, [r4, #16]
 80135a8:	2301      	movs	r3, #1
 80135aa:	7563      	strb	r3, [r4, #21]
 80135ac:	7da0      	ldrb	r0, [r4, #22]
 80135ae:	f080 0001 	eor.w	r0, r0, #1
 80135b2:	bd38      	pop	{r3, r4, r5, pc}

080135b4 <ucdr_serialize_uint16_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint16_t, uint16_t, 2)
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4604      	mov	r4, r0
 80135b8:	460d      	mov	r5, r1
 80135ba:	2102      	movs	r1, #2
 80135bc:	f000 fa32 	bl	8013a24 <ucdr_buffer_alignment>
 80135c0:	68a3      	ldr	r3, [r4, #8]
 80135c2:	4403      	add	r3, r0
 80135c4:	60a3      	str	r3, [r4, #8]
 80135c6:	6923      	ldr	r3, [r4, #16]
 80135c8:	4418      	add	r0, r3
 80135ca:	6120      	str	r0, [r4, #16]
 80135cc:	2102      	movs	r1, #2
 80135ce:	4620      	mov	r0, r4
 80135d0:	f000 f9e3 	bl	801399a <ucdr_check_final_buffer_behavior>
 80135d4:	b190      	cbz	r0, 80135fc <ucdr_serialize_uint16_t+0x48>
 80135d6:	7d22      	ldrb	r2, [r4, #20]
 80135d8:	68a3      	ldr	r3, [r4, #8]
 80135da:	2a01      	cmp	r2, #1
 80135dc:	bf1d      	ittte	ne
 80135de:	f3c5 2207 	ubfxne	r2, r5, #8, #8
 80135e2:	701a      	strbne	r2, [r3, #0]
 80135e4:	68a3      	ldrne	r3, [r4, #8]
 80135e6:	801d      	strheq	r5, [r3, #0]
 80135e8:	bf18      	it	ne
 80135ea:	705d      	strbne	r5, [r3, #1]
 80135ec:	68a3      	ldr	r3, [r4, #8]
 80135ee:	3302      	adds	r3, #2
 80135f0:	60a3      	str	r3, [r4, #8]
 80135f2:	6923      	ldr	r3, [r4, #16]
 80135f4:	3302      	adds	r3, #2
 80135f6:	6123      	str	r3, [r4, #16]
 80135f8:	2302      	movs	r3, #2
 80135fa:	7563      	strb	r3, [r4, #21]
 80135fc:	7da0      	ldrb	r0, [r4, #22]
 80135fe:	f080 0001 	eor.w	r0, r0, #1
 8013602:	bd38      	pop	{r3, r4, r5, pc}

08013604 <ucdr_serialize_endian_uint16_t>:
 8013604:	b570      	push	{r4, r5, r6, lr}
 8013606:	4604      	mov	r4, r0
 8013608:	460e      	mov	r6, r1
 801360a:	2102      	movs	r1, #2
 801360c:	4615      	mov	r5, r2
 801360e:	f000 fa09 	bl	8013a24 <ucdr_buffer_alignment>
 8013612:	68a3      	ldr	r3, [r4, #8]
 8013614:	4403      	add	r3, r0
 8013616:	60a3      	str	r3, [r4, #8]
 8013618:	6923      	ldr	r3, [r4, #16]
 801361a:	4418      	add	r0, r3
 801361c:	6120      	str	r0, [r4, #16]
 801361e:	2102      	movs	r1, #2
 8013620:	4620      	mov	r0, r4
 8013622:	f000 f9ba 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013626:	b188      	cbz	r0, 801364c <ucdr_serialize_endian_uint16_t+0x48>
 8013628:	68a3      	ldr	r3, [r4, #8]
 801362a:	2e01      	cmp	r6, #1
 801362c:	bf1d      	ittte	ne
 801362e:	f3c5 2207 	ubfxne	r2, r5, #8, #8
 8013632:	701a      	strbne	r2, [r3, #0]
 8013634:	68a3      	ldrne	r3, [r4, #8]
 8013636:	801d      	strheq	r5, [r3, #0]
 8013638:	bf18      	it	ne
 801363a:	705d      	strbne	r5, [r3, #1]
 801363c:	68a3      	ldr	r3, [r4, #8]
 801363e:	3302      	adds	r3, #2
 8013640:	60a3      	str	r3, [r4, #8]
 8013642:	6923      	ldr	r3, [r4, #16]
 8013644:	3302      	adds	r3, #2
 8013646:	6123      	str	r3, [r4, #16]
 8013648:	2302      	movs	r3, #2
 801364a:	7563      	strb	r3, [r4, #21]
 801364c:	7da0      	ldrb	r0, [r4, #22]
 801364e:	f080 0001 	eor.w	r0, r0, #1
 8013652:	bd70      	pop	{r4, r5, r6, pc}

08013654 <ucdr_deserialize_uint16_t>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4604      	mov	r4, r0
 8013658:	460d      	mov	r5, r1
 801365a:	2102      	movs	r1, #2
 801365c:	f000 f9e2 	bl	8013a24 <ucdr_buffer_alignment>
 8013660:	68a3      	ldr	r3, [r4, #8]
 8013662:	4403      	add	r3, r0
 8013664:	60a3      	str	r3, [r4, #8]
 8013666:	6923      	ldr	r3, [r4, #16]
 8013668:	4418      	add	r0, r3
 801366a:	6120      	str	r0, [r4, #16]
 801366c:	2102      	movs	r1, #2
 801366e:	4620      	mov	r0, r4
 8013670:	f000 f993 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013674:	b198      	cbz	r0, 801369e <ucdr_deserialize_uint16_t+0x4a>
 8013676:	7d22      	ldrb	r2, [r4, #20]
 8013678:	68a3      	ldr	r3, [r4, #8]
 801367a:	2a01      	cmp	r2, #1
 801367c:	bf1d      	ittte	ne
 801367e:	785b      	ldrbne	r3, [r3, #1]
 8013680:	702b      	strbne	r3, [r5, #0]
 8013682:	68a3      	ldrne	r3, [r4, #8]
 8013684:	881b      	ldrheq	r3, [r3, #0]
 8013686:	bf16      	itet	ne
 8013688:	781b      	ldrbne	r3, [r3, #0]
 801368a:	802b      	strheq	r3, [r5, #0]
 801368c:	706b      	strbne	r3, [r5, #1]
 801368e:	68a3      	ldr	r3, [r4, #8]
 8013690:	3302      	adds	r3, #2
 8013692:	60a3      	str	r3, [r4, #8]
 8013694:	6923      	ldr	r3, [r4, #16]
 8013696:	3302      	adds	r3, #2
 8013698:	6123      	str	r3, [r4, #16]
 801369a:	2302      	movs	r3, #2
 801369c:	7563      	strb	r3, [r4, #21]
 801369e:	7da0      	ldrb	r0, [r4, #22]
 80136a0:	f080 0001 	eor.w	r0, r0, #1
 80136a4:	bd38      	pop	{r3, r4, r5, pc}

080136a6 <ucdr_deserialize_endian_uint16_t>:
 80136a6:	b570      	push	{r4, r5, r6, lr}
 80136a8:	4604      	mov	r4, r0
 80136aa:	460e      	mov	r6, r1
 80136ac:	2102      	movs	r1, #2
 80136ae:	4615      	mov	r5, r2
 80136b0:	f000 f9b8 	bl	8013a24 <ucdr_buffer_alignment>
 80136b4:	68a3      	ldr	r3, [r4, #8]
 80136b6:	4403      	add	r3, r0
 80136b8:	60a3      	str	r3, [r4, #8]
 80136ba:	6923      	ldr	r3, [r4, #16]
 80136bc:	4418      	add	r0, r3
 80136be:	6120      	str	r0, [r4, #16]
 80136c0:	2102      	movs	r1, #2
 80136c2:	4620      	mov	r0, r4
 80136c4:	f000 f969 	bl	801399a <ucdr_check_final_buffer_behavior>
 80136c8:	b190      	cbz	r0, 80136f0 <ucdr_deserialize_endian_uint16_t+0x4a>
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	2e01      	cmp	r6, #1
 80136ce:	bf1d      	ittte	ne
 80136d0:	785b      	ldrbne	r3, [r3, #1]
 80136d2:	702b      	strbne	r3, [r5, #0]
 80136d4:	68a3      	ldrne	r3, [r4, #8]
 80136d6:	881b      	ldrheq	r3, [r3, #0]
 80136d8:	bf16      	itet	ne
 80136da:	781b      	ldrbne	r3, [r3, #0]
 80136dc:	802b      	strheq	r3, [r5, #0]
 80136de:	706b      	strbne	r3, [r5, #1]
 80136e0:	68a3      	ldr	r3, [r4, #8]
 80136e2:	3302      	adds	r3, #2
 80136e4:	60a3      	str	r3, [r4, #8]
 80136e6:	6923      	ldr	r3, [r4, #16]
 80136e8:	3302      	adds	r3, #2
 80136ea:	6123      	str	r3, [r4, #16]
 80136ec:	2302      	movs	r3, #2
 80136ee:	7563      	strb	r3, [r4, #21]
 80136f0:	7da0      	ldrb	r0, [r4, #22]
 80136f2:	f080 0001 	eor.w	r0, r0, #1
 80136f6:	bd70      	pop	{r4, r5, r6, pc}

080136f8 <ucdr_serialize_uint32_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint32_t, uint32_t, 4)
 80136f8:	b538      	push	{r3, r4, r5, lr}
 80136fa:	4604      	mov	r4, r0
 80136fc:	460d      	mov	r5, r1
 80136fe:	2104      	movs	r1, #4
 8013700:	f000 f990 	bl	8013a24 <ucdr_buffer_alignment>
 8013704:	68a3      	ldr	r3, [r4, #8]
 8013706:	4403      	add	r3, r0
 8013708:	60a3      	str	r3, [r4, #8]
 801370a:	6923      	ldr	r3, [r4, #16]
 801370c:	4418      	add	r0, r3
 801370e:	6120      	str	r0, [r4, #16]
 8013710:	2104      	movs	r1, #4
 8013712:	4620      	mov	r0, r4
 8013714:	f000 f941 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013718:	b160      	cbz	r0, 8013734 <ucdr_serialize_uint32_t+0x3c>
 801371a:	7d22      	ldrb	r2, [r4, #20]
 801371c:	68a3      	ldr	r3, [r4, #8]
 801371e:	2a01      	cmp	r2, #1
 8013720:	d10c      	bne.n	801373c <ucdr_serialize_uint32_t+0x44>
 8013722:	601d      	str	r5, [r3, #0]
 8013724:	68a3      	ldr	r3, [r4, #8]
 8013726:	3304      	adds	r3, #4
 8013728:	60a3      	str	r3, [r4, #8]
 801372a:	6923      	ldr	r3, [r4, #16]
 801372c:	3304      	adds	r3, #4
 801372e:	6123      	str	r3, [r4, #16]
 8013730:	2304      	movs	r3, #4
 8013732:	7563      	strb	r3, [r4, #21]
 8013734:	7da0      	ldrb	r0, [r4, #22]
 8013736:	f080 0001 	eor.w	r0, r0, #1
 801373a:	bd38      	pop	{r3, r4, r5, pc}
 801373c:	f3c5 6207 	ubfx	r2, r5, #24, #8
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	68a3      	ldr	r3, [r4, #8]
 8013744:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8013748:	705a      	strb	r2, [r3, #1]
 801374a:	68a3      	ldr	r3, [r4, #8]
 801374c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8013750:	709a      	strb	r2, [r3, #2]
 8013752:	68a3      	ldr	r3, [r4, #8]
 8013754:	70dd      	strb	r5, [r3, #3]
 8013756:	e7e5      	b.n	8013724 <ucdr_serialize_uint32_t+0x2c>

08013758 <ucdr_serialize_endian_uint32_t>:
 8013758:	b570      	push	{r4, r5, r6, lr}
 801375a:	4604      	mov	r4, r0
 801375c:	460e      	mov	r6, r1
 801375e:	2104      	movs	r1, #4
 8013760:	4615      	mov	r5, r2
 8013762:	f000 f95f 	bl	8013a24 <ucdr_buffer_alignment>
 8013766:	68a3      	ldr	r3, [r4, #8]
 8013768:	4403      	add	r3, r0
 801376a:	60a3      	str	r3, [r4, #8]
 801376c:	6923      	ldr	r3, [r4, #16]
 801376e:	4418      	add	r0, r3
 8013770:	6120      	str	r0, [r4, #16]
 8013772:	2104      	movs	r1, #4
 8013774:	4620      	mov	r0, r4
 8013776:	f000 f910 	bl	801399a <ucdr_check_final_buffer_behavior>
 801377a:	b158      	cbz	r0, 8013794 <ucdr_serialize_endian_uint32_t+0x3c>
 801377c:	2e01      	cmp	r6, #1
 801377e:	68a3      	ldr	r3, [r4, #8]
 8013780:	d10c      	bne.n	801379c <ucdr_serialize_endian_uint32_t+0x44>
 8013782:	601d      	str	r5, [r3, #0]
 8013784:	68a3      	ldr	r3, [r4, #8]
 8013786:	3304      	adds	r3, #4
 8013788:	60a3      	str	r3, [r4, #8]
 801378a:	6923      	ldr	r3, [r4, #16]
 801378c:	3304      	adds	r3, #4
 801378e:	6123      	str	r3, [r4, #16]
 8013790:	2304      	movs	r3, #4
 8013792:	7563      	strb	r3, [r4, #21]
 8013794:	7da0      	ldrb	r0, [r4, #22]
 8013796:	f080 0001 	eor.w	r0, r0, #1
 801379a:	bd70      	pop	{r4, r5, r6, pc}
 801379c:	f3c5 6207 	ubfx	r2, r5, #24, #8
 80137a0:	701a      	strb	r2, [r3, #0]
 80137a2:	68a3      	ldr	r3, [r4, #8]
 80137a4:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80137a8:	705a      	strb	r2, [r3, #1]
 80137aa:	68a3      	ldr	r3, [r4, #8]
 80137ac:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80137b0:	709a      	strb	r2, [r3, #2]
 80137b2:	68a3      	ldr	r3, [r4, #8]
 80137b4:	70dd      	strb	r5, [r3, #3]
 80137b6:	e7e5      	b.n	8013784 <ucdr_serialize_endian_uint32_t+0x2c>

080137b8 <ucdr_deserialize_uint32_t>:
 80137b8:	b538      	push	{r3, r4, r5, lr}
 80137ba:	4604      	mov	r4, r0
 80137bc:	460d      	mov	r5, r1
 80137be:	2104      	movs	r1, #4
 80137c0:	f000 f930 	bl	8013a24 <ucdr_buffer_alignment>
 80137c4:	68a3      	ldr	r3, [r4, #8]
 80137c6:	4403      	add	r3, r0
 80137c8:	60a3      	str	r3, [r4, #8]
 80137ca:	6923      	ldr	r3, [r4, #16]
 80137cc:	4418      	add	r0, r3
 80137ce:	6120      	str	r0, [r4, #16]
 80137d0:	2104      	movs	r1, #4
 80137d2:	4620      	mov	r0, r4
 80137d4:	f000 f8e1 	bl	801399a <ucdr_check_final_buffer_behavior>
 80137d8:	b168      	cbz	r0, 80137f6 <ucdr_deserialize_uint32_t+0x3e>
 80137da:	7d22      	ldrb	r2, [r4, #20]
 80137dc:	68a3      	ldr	r3, [r4, #8]
 80137de:	2a01      	cmp	r2, #1
 80137e0:	d10d      	bne.n	80137fe <ucdr_deserialize_uint32_t+0x46>
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	602b      	str	r3, [r5, #0]
 80137e6:	68a3      	ldr	r3, [r4, #8]
 80137e8:	3304      	adds	r3, #4
 80137ea:	60a3      	str	r3, [r4, #8]
 80137ec:	6923      	ldr	r3, [r4, #16]
 80137ee:	3304      	adds	r3, #4
 80137f0:	6123      	str	r3, [r4, #16]
 80137f2:	2304      	movs	r3, #4
 80137f4:	7563      	strb	r3, [r4, #21]
 80137f6:	7da0      	ldrb	r0, [r4, #22]
 80137f8:	f080 0001 	eor.w	r0, r0, #1
 80137fc:	bd38      	pop	{r3, r4, r5, pc}
 80137fe:	78db      	ldrb	r3, [r3, #3]
 8013800:	702b      	strb	r3, [r5, #0]
 8013802:	68a3      	ldr	r3, [r4, #8]
 8013804:	789b      	ldrb	r3, [r3, #2]
 8013806:	706b      	strb	r3, [r5, #1]
 8013808:	68a3      	ldr	r3, [r4, #8]
 801380a:	785b      	ldrb	r3, [r3, #1]
 801380c:	70ab      	strb	r3, [r5, #2]
 801380e:	68a3      	ldr	r3, [r4, #8]
 8013810:	781b      	ldrb	r3, [r3, #0]
 8013812:	70eb      	strb	r3, [r5, #3]
 8013814:	e7e7      	b.n	80137e6 <ucdr_deserialize_uint32_t+0x2e>

08013816 <ucdr_deserialize_endian_uint32_t>:
 8013816:	b570      	push	{r4, r5, r6, lr}
 8013818:	4604      	mov	r4, r0
 801381a:	460e      	mov	r6, r1
 801381c:	2104      	movs	r1, #4
 801381e:	4615      	mov	r5, r2
 8013820:	f000 f900 	bl	8013a24 <ucdr_buffer_alignment>
 8013824:	68a3      	ldr	r3, [r4, #8]
 8013826:	4403      	add	r3, r0
 8013828:	60a3      	str	r3, [r4, #8]
 801382a:	6923      	ldr	r3, [r4, #16]
 801382c:	4418      	add	r0, r3
 801382e:	6120      	str	r0, [r4, #16]
 8013830:	2104      	movs	r1, #4
 8013832:	4620      	mov	r0, r4
 8013834:	f000 f8b1 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013838:	b160      	cbz	r0, 8013854 <ucdr_deserialize_endian_uint32_t+0x3e>
 801383a:	2e01      	cmp	r6, #1
 801383c:	68a3      	ldr	r3, [r4, #8]
 801383e:	d10d      	bne.n	801385c <ucdr_deserialize_endian_uint32_t+0x46>
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	602b      	str	r3, [r5, #0]
 8013844:	68a3      	ldr	r3, [r4, #8]
 8013846:	3304      	adds	r3, #4
 8013848:	60a3      	str	r3, [r4, #8]
 801384a:	6923      	ldr	r3, [r4, #16]
 801384c:	3304      	adds	r3, #4
 801384e:	6123      	str	r3, [r4, #16]
 8013850:	2304      	movs	r3, #4
 8013852:	7563      	strb	r3, [r4, #21]
 8013854:	7da0      	ldrb	r0, [r4, #22]
 8013856:	f080 0001 	eor.w	r0, r0, #1
 801385a:	bd70      	pop	{r4, r5, r6, pc}
 801385c:	78db      	ldrb	r3, [r3, #3]
 801385e:	702b      	strb	r3, [r5, #0]
 8013860:	68a3      	ldr	r3, [r4, #8]
 8013862:	789b      	ldrb	r3, [r3, #2]
 8013864:	706b      	strb	r3, [r5, #1]
 8013866:	68a3      	ldr	r3, [r4, #8]
 8013868:	785b      	ldrb	r3, [r3, #1]
 801386a:	70ab      	strb	r3, [r5, #2]
 801386c:	68a3      	ldr	r3, [r4, #8]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	70eb      	strb	r3, [r5, #3]
 8013872:	e7e7      	b.n	8013844 <ucdr_deserialize_endian_uint32_t+0x2e>

08013874 <ucdr_serialize_int16_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_uint64_t, uint64_t, 8)
UCDR_BASIC_TYPE_DEFINITIONS(_int8_t, int8_t, 1)
UCDR_BASIC_TYPE_DEFINITIONS(_int16_t, int16_t, 2)
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	4604      	mov	r4, r0
 8013878:	460d      	mov	r5, r1
 801387a:	2102      	movs	r1, #2
 801387c:	f000 f8d2 	bl	8013a24 <ucdr_buffer_alignment>
 8013880:	68a3      	ldr	r3, [r4, #8]
 8013882:	4403      	add	r3, r0
 8013884:	60a3      	str	r3, [r4, #8]
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	4418      	add	r0, r3
 801388a:	6120      	str	r0, [r4, #16]
 801388c:	2102      	movs	r1, #2
 801388e:	4620      	mov	r0, r4
 8013890:	f000 f883 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013894:	b190      	cbz	r0, 80138bc <ucdr_serialize_int16_t+0x48>
 8013896:	7d22      	ldrb	r2, [r4, #20]
 8013898:	68a3      	ldr	r3, [r4, #8]
 801389a:	2a01      	cmp	r2, #1
 801389c:	bf1d      	ittte	ne
 801389e:	f3c5 2207 	ubfxne	r2, r5, #8, #8
 80138a2:	701a      	strbne	r2, [r3, #0]
 80138a4:	68a3      	ldrne	r3, [r4, #8]
 80138a6:	801d      	strheq	r5, [r3, #0]
 80138a8:	bf18      	it	ne
 80138aa:	705d      	strbne	r5, [r3, #1]
 80138ac:	68a3      	ldr	r3, [r4, #8]
 80138ae:	3302      	adds	r3, #2
 80138b0:	60a3      	str	r3, [r4, #8]
 80138b2:	6923      	ldr	r3, [r4, #16]
 80138b4:	3302      	adds	r3, #2
 80138b6:	6123      	str	r3, [r4, #16]
 80138b8:	2302      	movs	r3, #2
 80138ba:	7563      	strb	r3, [r4, #21]
 80138bc:	7da0      	ldrb	r0, [r4, #22]
 80138be:	f080 0001 	eor.w	r0, r0, #1
 80138c2:	bd38      	pop	{r3, r4, r5, pc}

080138c4 <ucdr_serialize_int32_t>:
UCDR_BASIC_TYPE_DEFINITIONS(_int32_t, int32_t, 4)
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4604      	mov	r4, r0
 80138c8:	460d      	mov	r5, r1
 80138ca:	2104      	movs	r1, #4
 80138cc:	f000 f8aa 	bl	8013a24 <ucdr_buffer_alignment>
 80138d0:	68a3      	ldr	r3, [r4, #8]
 80138d2:	4403      	add	r3, r0
 80138d4:	60a3      	str	r3, [r4, #8]
 80138d6:	6923      	ldr	r3, [r4, #16]
 80138d8:	4418      	add	r0, r3
 80138da:	6120      	str	r0, [r4, #16]
 80138dc:	2104      	movs	r1, #4
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 f85b 	bl	801399a <ucdr_check_final_buffer_behavior>
 80138e4:	b160      	cbz	r0, 8013900 <ucdr_serialize_int32_t+0x3c>
 80138e6:	7d22      	ldrb	r2, [r4, #20]
 80138e8:	68a3      	ldr	r3, [r4, #8]
 80138ea:	2a01      	cmp	r2, #1
 80138ec:	d10c      	bne.n	8013908 <ucdr_serialize_int32_t+0x44>
 80138ee:	601d      	str	r5, [r3, #0]
 80138f0:	68a3      	ldr	r3, [r4, #8]
 80138f2:	3304      	adds	r3, #4
 80138f4:	60a3      	str	r3, [r4, #8]
 80138f6:	6923      	ldr	r3, [r4, #16]
 80138f8:	3304      	adds	r3, #4
 80138fa:	6123      	str	r3, [r4, #16]
 80138fc:	2304      	movs	r3, #4
 80138fe:	7563      	strb	r3, [r4, #21]
 8013900:	7da0      	ldrb	r0, [r4, #22]
 8013902:	f080 0001 	eor.w	r0, r0, #1
 8013906:	bd38      	pop	{r3, r4, r5, pc}
 8013908:	f3c5 6207 	ubfx	r2, r5, #24, #8
 801390c:	701a      	strb	r2, [r3, #0]
 801390e:	68a3      	ldr	r3, [r4, #8]
 8013910:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8013914:	705a      	strb	r2, [r3, #1]
 8013916:	68a3      	ldr	r3, [r4, #8]
 8013918:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801391c:	709a      	strb	r2, [r3, #2]
 801391e:	68a3      	ldr	r3, [r4, #8]
 8013920:	70dd      	strb	r5, [r3, #3]
 8013922:	e7e5      	b.n	80138f0 <ucdr_serialize_int32_t+0x2c>

08013924 <ucdr_deserialize_int32_t>:
 8013924:	b538      	push	{r3, r4, r5, lr}
 8013926:	4604      	mov	r4, r0
 8013928:	460d      	mov	r5, r1
 801392a:	2104      	movs	r1, #4
 801392c:	f000 f87a 	bl	8013a24 <ucdr_buffer_alignment>
 8013930:	68a3      	ldr	r3, [r4, #8]
 8013932:	4403      	add	r3, r0
 8013934:	60a3      	str	r3, [r4, #8]
 8013936:	6923      	ldr	r3, [r4, #16]
 8013938:	4418      	add	r0, r3
 801393a:	6120      	str	r0, [r4, #16]
 801393c:	2104      	movs	r1, #4
 801393e:	4620      	mov	r0, r4
 8013940:	f000 f82b 	bl	801399a <ucdr_check_final_buffer_behavior>
 8013944:	b168      	cbz	r0, 8013962 <ucdr_deserialize_int32_t+0x3e>
 8013946:	7d22      	ldrb	r2, [r4, #20]
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	2a01      	cmp	r2, #1
 801394c:	d10d      	bne.n	801396a <ucdr_deserialize_int32_t+0x46>
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	602b      	str	r3, [r5, #0]
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	3304      	adds	r3, #4
 8013956:	60a3      	str	r3, [r4, #8]
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	3304      	adds	r3, #4
 801395c:	6123      	str	r3, [r4, #16]
 801395e:	2304      	movs	r3, #4
 8013960:	7563      	strb	r3, [r4, #21]
 8013962:	7da0      	ldrb	r0, [r4, #22]
 8013964:	f080 0001 	eor.w	r0, r0, #1
 8013968:	bd38      	pop	{r3, r4, r5, pc}
 801396a:	78db      	ldrb	r3, [r3, #3]
 801396c:	702b      	strb	r3, [r5, #0]
 801396e:	68a3      	ldr	r3, [r4, #8]
 8013970:	789b      	ldrb	r3, [r3, #2]
 8013972:	706b      	strb	r3, [r5, #1]
 8013974:	68a3      	ldr	r3, [r4, #8]
 8013976:	785b      	ldrb	r3, [r3, #1]
 8013978:	70ab      	strb	r3, [r5, #2]
 801397a:	68a3      	ldr	r3, [r4, #8]
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	70eb      	strb	r3, [r5, #3]
 8013980:	e7e7      	b.n	8013952 <ucdr_deserialize_int32_t+0x2e>

08013982 <ucdr_check_buffer_available_for>:
//                   INTERNAL UTIL IMPLEMENTATIONS
// -------------------------------------------------------------------

bool ucdr_check_buffer_available_for(ucdrBuffer* ub, size_t bytes)
{
    return !ub->error && (ub->iterator + bytes <= ub->final);
 8013982:	7d83      	ldrb	r3, [r0, #22]
 8013984:	b93b      	cbnz	r3, 8013996 <ucdr_check_buffer_available_for+0x14>
 8013986:	6883      	ldr	r3, [r0, #8]
 8013988:	6840      	ldr	r0, [r0, #4]
 801398a:	440b      	add	r3, r1
 801398c:	4298      	cmp	r0, r3
 801398e:	bf34      	ite	cc
 8013990:	2000      	movcc	r0, #0
 8013992:	2001      	movcs	r0, #1
 8013994:	4770      	bx	lr
 8013996:	2000      	movs	r0, #0
}
 8013998:	4770      	bx	lr

0801399a <ucdr_check_final_buffer_behavior>:

bool ucdr_check_final_buffer_behavior(ucdrBuffer* ub, size_t data_size)
{
    if(!ub->error && ub->iterator + data_size > ub->final)
 801399a:	7d83      	ldrb	r3, [r0, #22]
{
 801399c:	b510      	push	{r4, lr}
 801399e:	4604      	mov	r4, r0
    if(!ub->error && ub->iterator + data_size > ub->final)
 80139a0:	b94b      	cbnz	r3, 80139b6 <ucdr_check_final_buffer_behavior+0x1c>
 80139a2:	6883      	ldr	r3, [r0, #8]
 80139a4:	6842      	ldr	r2, [r0, #4]
 80139a6:	440b      	add	r3, r1
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d204      	bcs.n	80139b6 <ucdr_check_final_buffer_behavior+0x1c>
    {
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub ->args) : true;
 80139ac:	6983      	ldr	r3, [r0, #24]
 80139ae:	b133      	cbz	r3, 80139be <ucdr_check_final_buffer_behavior+0x24>
 80139b0:	69c1      	ldr	r1, [r0, #28]
 80139b2:	4798      	blx	r3
 80139b4:	75a0      	strb	r0, [r4, #22]
    }

    return !ub->error;
 80139b6:	7da0      	ldrb	r0, [r4, #22]
}
 80139b8:	f080 0001 	eor.w	r0, r0, #1
 80139bc:	bd10      	pop	{r4, pc}
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub ->args) : true;
 80139be:	2001      	movs	r0, #1
 80139c0:	e7f8      	b.n	80139b4 <ucdr_check_final_buffer_behavior+0x1a>

080139c2 <ucdr_set_on_full_buffer_callback>:
}

void ucdr_set_on_full_buffer_callback(ucdrBuffer* ub, OnFullBuffer on_full_buffer, void* args)
{
    ub->on_full_buffer = on_full_buffer;
    ub->args = args;
 80139c2:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 80139c6:	4770      	bx	lr

080139c8 <ucdr_init_buffer_origin_offset_endian>:
        uint8_t* data,
        size_t size,
        size_t origin,
        size_t offset,
        ucdrEndianness endianness)
{
 80139c8:	b510      	push	{r4, lr}
 80139ca:	9c02      	ldr	r4, [sp, #8]
    ub->init = data;
 80139cc:	6001      	str	r1, [r0, #0]
    ub->final = ub->init + size;
 80139ce:	440a      	add	r2, r1
    ub->iterator = ub->init + offset;
 80139d0:	4421      	add	r1, r4
    ub->origin = origin;
 80139d2:	e9c0 1302 	strd	r1, r3, [r0, #8]
    ub->offset = origin + offset;
 80139d6:	441c      	add	r4, r3
    ub->endianness = endianness;
 80139d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80139dc:	7503      	strb	r3, [r0, #20]
    ub->last_data_size = 0u;
 80139de:	2300      	movs	r3, #0
    ub->error = false;
    ub->on_full_buffer = NULL;
    ub->args = NULL;
 80139e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
    ub->final = ub->init + size;
 80139e4:	6042      	str	r2, [r0, #4]
    ub->offset = origin + offset;
 80139e6:	6104      	str	r4, [r0, #16]
    ub->last_data_size = 0u;
 80139e8:	7543      	strb	r3, [r0, #21]
    ub->error = false;
 80139ea:	7583      	strb	r3, [r0, #22]
}
 80139ec:	bd10      	pop	{r4, pc}

080139ee <ucdr_init_buffer_origin_offset>:
{
 80139ee:	b513      	push	{r0, r1, r4, lr}
    ucdr_init_buffer_origin_offset_endian(ub, data, size, origin, offset, UCDR_MACHINE_ENDIANNESS);
 80139f0:	2401      	movs	r4, #1
 80139f2:	9401      	str	r4, [sp, #4]
 80139f4:	9c04      	ldr	r4, [sp, #16]
 80139f6:	9400      	str	r4, [sp, #0]
 80139f8:	f7ff ffe6 	bl	80139c8 <ucdr_init_buffer_origin_offset_endian>
}
 80139fc:	b002      	add	sp, #8
 80139fe:	bd10      	pop	{r4, pc}

08013a00 <ucdr_init_buffer_origin>:
{
 8013a00:	b513      	push	{r0, r1, r4, lr}
    ucdr_init_buffer_origin_offset(ub, data, size, origin, 0u);
 8013a02:	2400      	movs	r4, #0
 8013a04:	9400      	str	r4, [sp, #0]
 8013a06:	f7ff fff2 	bl	80139ee <ucdr_init_buffer_origin_offset>
}
 8013a0a:	b002      	add	sp, #8
 8013a0c:	bd10      	pop	{r4, pc}

08013a0e <ucdr_init_buffer>:
    ucdr_init_buffer_origin(ub, data, size, 0u);
 8013a0e:	2300      	movs	r3, #0
 8013a10:	f7ff bff6 	b.w	8013a00 <ucdr_init_buffer_origin>

08013a14 <ucdr_alignment>:
    ub->last_data_size = (uint8_t)size;
}

size_t ucdr_alignment(size_t current_alignment, size_t data_size)
{
    return ((data_size - (current_alignment % data_size)) & (data_size - 1));
 8013a14:	fbb0 f3f1 	udiv	r3, r0, r1
 8013a18:	fb03 0011 	mls	r0, r3, r1, r0
 8013a1c:	1a08      	subs	r0, r1, r0
 8013a1e:	3901      	subs	r1, #1
}
 8013a20:	4008      	ands	r0, r1
 8013a22:	4770      	bx	lr

08013a24 <ucdr_buffer_alignment>:

size_t ucdr_buffer_alignment(const ucdrBuffer* ub, size_t data_size)
{
    return (data_size > ub->last_data_size)
 8013a24:	7d43      	ldrb	r3, [r0, #21]
        ? (data_size - ((uint32_t)(ub->offset - ub->origin) % data_size)) & (data_size - 1)
        : 0;
 8013a26:	428b      	cmp	r3, r1
        ? (data_size - ((uint32_t)(ub->offset - ub->origin) % data_size)) & (data_size - 1)
 8013a28:	bf3f      	itttt	cc
 8013a2a:	e9d0 0303 	ldrdcc	r0, r3, [r0, #12]
 8013a2e:	1a1b      	subcc	r3, r3, r0
 8013a30:	fbb3 f0f1 	udivcc	r0, r3, r1
 8013a34:	fb01 3010 	mlscc	r0, r1, r0, r3
 8013a38:	bf3d      	ittte	cc
 8013a3a:	1a08      	subcc	r0, r1, r0
 8013a3c:	f101 31ff 	addcc.w	r1, r1, #4294967295	; 0xffffffff
        : 0;
 8013a40:	4008      	andcc	r0, r1
 8013a42:	2000      	movcs	r0, #0
}
 8013a44:	4770      	bx	lr

08013a46 <ucdr_align_to>:
{
 8013a46:	b538      	push	{r3, r4, r5, lr}
 8013a48:	4604      	mov	r4, r0
 8013a4a:	460d      	mov	r5, r1
    size_t alignment = ucdr_buffer_alignment(ub, size);
 8013a4c:	f7ff ffea 	bl	8013a24 <ucdr_buffer_alignment>
    ub->offset += alignment;
 8013a50:	6923      	ldr	r3, [r4, #16]
    ub->last_data_size = (uint8_t)size;
 8013a52:	7565      	strb	r5, [r4, #21]
    ub->offset += alignment;
 8013a54:	4403      	add	r3, r0
 8013a56:	6123      	str	r3, [r4, #16]
    ub->iterator += alignment;
 8013a58:	68a3      	ldr	r3, [r4, #8]
 8013a5a:	4418      	add	r0, r3
    if(ub->iterator > ub->final)
 8013a5c:	6863      	ldr	r3, [r4, #4]
        ub->iterator = ub->final;
 8013a5e:	4283      	cmp	r3, r0
 8013a60:	bf94      	ite	ls
 8013a62:	60a3      	strls	r3, [r4, #8]
 8013a64:	60a0      	strhi	r0, [r4, #8]
}
 8013a66:	bd38      	pop	{r3, r4, r5, pc}

08013a68 <ucdr_buffer_length>:
    return (size_t)(ub->final - ub->init);
}

size_t ucdr_buffer_length(const ucdrBuffer* ub)
{
    return (size_t)(ub->iterator - ub->init);
 8013a68:	6882      	ldr	r2, [r0, #8]
 8013a6a:	6800      	ldr	r0, [r0, #0]
}
 8013a6c:	1a10      	subs	r0, r2, r0
 8013a6e:	4770      	bx	lr

08013a70 <ucdr_buffer_remaining>:

size_t ucdr_buffer_remaining(const ucdrBuffer* ub)
{
    return (size_t)(ub->final - ub->iterator);
 8013a70:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8013a74:	1a10      	subs	r0, r2, r0
 8013a76:	4770      	bx	lr

08013a78 <ucdr_check_final_buffer_behavior_array>:
{
 8013a78:	b538      	push	{r3, r4, r5, lr}
    if(!ub->error && ub->iterator + data_size > ub->final && bytes > 0)
 8013a7a:	7d83      	ldrb	r3, [r0, #22]
{
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	460d      	mov	r5, r1
    if(!ub->error && ub->iterator + data_size > ub->final && bytes > 0)
 8013a80:	b10b      	cbz	r3, 8013a86 <ucdr_check_final_buffer_behavior_array+0xe>
    return (!ub->error) ? ucdr_next_remaining_size(ub, bytes, data_size) : 0;
 8013a82:	2000      	movs	r0, #0
}
 8013a84:	bd38      	pop	{r3, r4, r5, pc}
    if(!ub->error && ub->iterator + data_size > ub->final && bytes > 0)
 8013a86:	6883      	ldr	r3, [r0, #8]
 8013a88:	4413      	add	r3, r2
 8013a8a:	6842      	ldr	r2, [r0, #4]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d306      	bcc.n	8013a9e <ucdr_check_final_buffer_behavior_array+0x26>
    size_t remaining = ucdr_buffer_remaining(ub);
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7ff ffed 	bl	8013a70 <ucdr_buffer_remaining>
    return (bytes <= remaining) ? bytes : remaining;
 8013a96:	42a8      	cmp	r0, r5
 8013a98:	bf28      	it	cs
 8013a9a:	4628      	movcs	r0, r5
 8013a9c:	e7f2      	b.n	8013a84 <ucdr_check_final_buffer_behavior_array+0xc>
    if(!ub->error && ub->iterator + data_size > ub->final && bytes > 0)
 8013a9e:	2900      	cmp	r1, #0
 8013aa0:	d0f6      	beq.n	8013a90 <ucdr_check_final_buffer_behavior_array+0x18>
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub->args) : true;
 8013aa2:	6983      	ldr	r3, [r0, #24]
 8013aa4:	b913      	cbnz	r3, 8013aac <ucdr_check_final_buffer_behavior_array+0x34>
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	7583      	strb	r3, [r0, #22]
    return (!ub->error) ? ucdr_next_remaining_size(ub, bytes, data_size) : 0;
 8013aaa:	e7ea      	b.n	8013a82 <ucdr_check_final_buffer_behavior_array+0xa>
        ub->error = (NULL != ub->on_full_buffer) ? ub->on_full_buffer(ub, ub->args) : true;
 8013aac:	69c1      	ldr	r1, [r0, #28]
 8013aae:	4798      	blx	r3
 8013ab0:	75a0      	strb	r0, [r4, #22]
    return (!ub->error) ? ucdr_next_remaining_size(ub, bytes, data_size) : 0;
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d1e5      	bne.n	8013a82 <ucdr_check_final_buffer_behavior_array+0xa>
 8013ab6:	e7eb      	b.n	8013a90 <ucdr_check_final_buffer_behavior_array+0x18>

08013ab8 <ucdr_advance_buffer>:
{
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4604      	mov	r4, r0
 8013abc:	460d      	mov	r5, r1
    if (ucdr_check_buffer_available_for(ub, size))
 8013abe:	f7ff ff60 	bl	8013982 <ucdr_check_buffer_available_for>
 8013ac2:	b178      	cbz	r0, 8013ae4 <ucdr_advance_buffer+0x2c>
        ub->iterator += size;
 8013ac4:	68a3      	ldr	r3, [r4, #8]
        ub->offset += size;
 8013ac6:	6921      	ldr	r1, [r4, #16]
        ub->iterator += size;
 8013ac8:	442b      	add	r3, r5
        ub->offset += size;
 8013aca:	4429      	add	r1, r5
        ub->iterator += size;
 8013acc:	60a3      	str	r3, [r4, #8]
        ub->offset += size;
 8013ace:	6121      	str	r1, [r4, #16]
    ub->last_data_size = 1;
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	7563      	strb	r3, [r4, #21]
}
 8013ad4:	bd38      	pop	{r3, r4, r5, pc}
            ub->iterator += serialization_size;
 8013ad6:	68a3      	ldr	r3, [r4, #8]
 8013ad8:	4403      	add	r3, r0
 8013ada:	60a3      	str	r3, [r4, #8]
            ub->offset += serialization_size;
 8013adc:	6923      	ldr	r3, [r4, #16]
            remaining_size -= serialization_size;
 8013ade:	1a2d      	subs	r5, r5, r0
            ub->offset += serialization_size;
 8013ae0:	4418      	add	r0, r3
 8013ae2:	6120      	str	r0, [r4, #16]
        while(0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, 1)))
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	4629      	mov	r1, r5
 8013ae8:	4620      	mov	r0, r4
 8013aea:	f7ff ffc5 	bl	8013a78 <ucdr_check_final_buffer_behavior_array>
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d1f1      	bne.n	8013ad6 <ucdr_advance_buffer+0x1e>
 8013af2:	e7ed      	b.n	8013ad0 <ucdr_advance_buffer+0x18>

08013af4 <ucdr_serialize_string>:
// -------------------------------------------------------------------
//              PUBLIC SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------

bool ucdr_serialize_string(ucdrBuffer* ub, const char* string)
{
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4605      	mov	r5, r0
    return ucdr_serialize_sequence_char(ub, string, (uint32_t)strlen(string) + 1);
 8013af8:	4608      	mov	r0, r1
{
 8013afa:	460c      	mov	r4, r1
    return ucdr_serialize_sequence_char(ub, string, (uint32_t)strlen(string) + 1);
 8013afc:	f7ec fb60 	bl	80001c0 <strlen>
 8013b00:	4621      	mov	r1, r4
 8013b02:	1c42      	adds	r2, r0, #1
 8013b04:	4628      	mov	r0, r5
}
 8013b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return ucdr_serialize_sequence_char(ub, string, (uint32_t)strlen(string) + 1);
 8013b0a:	f002 be27 	b.w	801675c <ucdr_serialize_sequence_char>

08013b0e <ucdr_deserialize_string>:
{
    return ucdr_serialize_endian_sequence_char(ub, endianness, string, (uint32_t)strlen(string) + 1);
}

bool ucdr_deserialize_string(ucdrBuffer* ub, char* string, size_t string_capacity)
{
 8013b0e:	b507      	push	{r0, r1, r2, lr}
    uint32_t length;
    return ucdr_deserialize_sequence_char(ub, string, string_capacity, &length);
 8013b10:	ab01      	add	r3, sp, #4
 8013b12:	f002 fe36 	bl	8016782 <ucdr_deserialize_sequence_char>
}
 8013b16:	b003      	add	sp, #12
 8013b18:	f85d fb04 	ldr.w	pc, [sp], #4

08013b1c <uxr_buffer_delete_entity>:

//==================================================================
//                              PUBLIC
//==================================================================
uint16_t uxr_buffer_delete_entity(uxrSession* session, uxrStreamId stream_id, uxrObjectId object_id)
{
 8013b1c:	b530      	push	{r4, r5, lr}
 8013b1e:	b08f      	sub	sp, #60	; 0x3c
 8013b20:	e9cd 2102 	strd	r2, r1, [sp, #8]
    // Change this when microcdr supports size_of function.
    size_t payload_length = 0; //DELETE_Payload_size(&payload);
    payload_length = (uint16_t)(payload_length + 4); // delete payload (request id + object_id), no padding.

    ucdrBuffer ub;
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_DELETE, 0))
 8013b24:	2303      	movs	r3, #3
 8013b26:	2200      	movs	r2, #0
 8013b28:	e9cd 3200 	strd	r3, r2, [sp]
 8013b2c:	ab06      	add	r3, sp, #24
 8013b2e:	2204      	movs	r2, #4
{
 8013b30:	4605      	mov	r5, r0
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_DELETE, 0))
 8013b32:	f000 fc3e 	bl	80143b2 <uxr_prepare_stream_to_write_submessage>
 8013b36:	4604      	mov	r4, r0
 8013b38:	b148      	cbz	r0, 8013b4e <uxr_buffer_delete_entity+0x32>
    {
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload.base);
 8013b3a:	9902      	ldr	r1, [sp, #8]
 8013b3c:	aa05      	add	r2, sp, #20
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f000 fcec 	bl	801451c <uxr_init_base_object_request>
        (void) uxr_serialize_DELETE_Payload(&ub, &payload);
 8013b44:	a905      	add	r1, sp, #20
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload.base);
 8013b46:	4604      	mov	r4, r0
        (void) uxr_serialize_DELETE_Payload(&ub, &payload);
 8013b48:	a806      	add	r0, sp, #24
 8013b4a:	f001 f96c 	bl	8014e26 <uxr_serialize_DELETE_Payload>
    }

    return request_id;
}
 8013b4e:	4620      	mov	r0, r4
 8013b50:	b00f      	add	sp, #60	; 0x3c
 8013b52:	bd30      	pop	{r4, r5, pc}

08013b54 <uxr_common_create_entity>:

uint16_t uxr_common_create_entity(uxrSession* session, uxrStreamId stream_id,
                                  uxrObjectId object_id, uint16_t xml_ref_size, uint8_t mode,
                                  CREATE_Payload* payload)
{
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	b08c      	sub	sp, #48	; 0x30
 8013b58:	e9cd 2102 	strd	r2, r1, [sp, #8]
    payload_length = (uint16_t)(payload_length + 1); // objk type
    payload_length = (uint16_t)(payload_length + 1); // base3 type => xml
    payload_length = (uint16_t)(payload_length + 2); // padding
    payload_length = (uint16_t)(payload_length + 4); // xml length
    payload_length = (uint16_t)(payload_length + xml_ref_size); // xml data (note: compiler executes strlen one time this function)
    payload_length = (uint16_t)(payload_length + ((object_id.type == DDS_XRCE_OBJK_PARTICIPANT && payload_length % 2 != 0) ? 1 : 0)); // necessary padding
 8013b5c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8013b60:	2a01      	cmp	r2, #1
 8013b62:	bf0c      	ite	eq
 8013b64:	f003 0201 	andeq.w	r2, r3, #1
 8013b68:	2200      	movne	r2, #0
    payload_length = (uint16_t)(payload_length + 2); //object id ref
 8013b6a:	330e      	adds	r3, #14
 8013b6c:	441a      	add	r2, r3

    ucdrBuffer ub;
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_CREATE, mode))
 8013b6e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8013b72:	9301      	str	r3, [sp, #4]
 8013b74:	2301      	movs	r3, #1
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	9903      	ldr	r1, [sp, #12]
{
 8013b7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_CREATE, mode))
 8013b7c:	ab04      	add	r3, sp, #16
 8013b7e:	b292      	uxth	r2, r2
{
 8013b80:	4605      	mov	r5, r0
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_CREATE, mode))
 8013b82:	f000 fc16 	bl	80143b2 <uxr_prepare_stream_to_write_submessage>
 8013b86:	4604      	mov	r4, r0
 8013b88:	b148      	cbz	r0, 8013b9e <uxr_common_create_entity+0x4a>
    {
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload->base);
 8013b8a:	9902      	ldr	r1, [sp, #8]
 8013b8c:	4632      	mov	r2, r6
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f000 fcc4 	bl	801451c <uxr_init_base_object_request>
        (void) uxr_serialize_CREATE_Payload(&ub, payload);
 8013b94:	4631      	mov	r1, r6
        request_id = uxr_init_base_object_request(&session->info, object_id, &payload->base);
 8013b96:	4604      	mov	r4, r0
        (void) uxr_serialize_CREATE_Payload(&ub, payload);
 8013b98:	a804      	add	r0, sp, #16
 8013b9a:	f001 f937 	bl	8014e0c <uxr_serialize_CREATE_Payload>
    }

    return request_id;
}
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	b00c      	add	sp, #48	; 0x30
 8013ba2:	bd70      	pop	{r4, r5, r6, pc}

08013ba4 <create_entity_xml>:
//==================================================================

inline uint16_t create_entity_xml(uxrSession* session, uxrStreamId stream_id,
                                  uxrObjectId object_id, const char* xml, uint8_t mode,
                                  CREATE_Payload* payload)
{
 8013ba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ba6:	9d07      	ldr	r5, [sp, #28]
 8013ba8:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8013bac:	4604      	mov	r4, r0
 8013bae:	4618      	mov	r0, r3
    // Use participant access to access to the xml base of any object variant. //Future elegant change?
    payload->object_representation._.participant.base.representation.format = DDS_XRCE_REPRESENTATION_AS_XML_STRING;
 8013bb0:	2302      	movs	r3, #2
{
 8013bb2:	e9cd 2100 	strd	r2, r1, [sp]
    payload->object_representation._.participant.base.representation.format = DDS_XRCE_REPRESENTATION_AS_XML_STRING;
 8013bb6:	722b      	strb	r3, [r5, #8]
    payload->object_representation._.participant.base.representation._.xml_string_represenatation = (char*)xml;
 8013bb8:	60e8      	str	r0, [r5, #12]

    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t)(strlen(xml) + 1), mode, payload);
 8013bba:	f7ec fb01 	bl	80001c0 <strlen>
 8013bbe:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	e9cd 6506 	strd	r6, r5, [sp, #24]
}
 8013bcc:	b002      	add	sp, #8
 8013bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return uxr_common_create_entity(session, stream_id, object_id, (uint16_t)(strlen(xml) + 1), mode, payload);
 8013bd2:	f7ff bfbf 	b.w	8013b54 <uxr_common_create_entity>

08013bd6 <uxr_buffer_create_participant_xml>:
{
 8013bd6:	b510      	push	{r4, lr}
 8013bd8:	b08e      	sub	sp, #56	; 0x38
    payload.object_representation.kind = DDS_XRCE_OBJK_PARTICIPANT;
 8013bda:	2401      	movs	r4, #1
    payload.object_representation._.participant.domain_id = (int16_t)domain;
 8013bdc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013be0:	ab04      	add	r3, sp, #16
 8013be2:	9301      	str	r3, [sp, #4]
 8013be4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    payload.object_representation.kind = DDS_XRCE_OBJK_PARTICIPANT;
 8013bec:	f88d 4014 	strb.w	r4, [sp, #20]
{
 8013bf0:	e9cd 2102 	strd	r2, r1, [sp, #8]
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013bf4:	f7ff ffd6 	bl	8013ba4 <create_entity_xml>
}
 8013bf8:	b00e      	add	sp, #56	; 0x38
 8013bfa:	bd10      	pop	{r4, pc}

08013bfc <uxr_buffer_create_topic_xml>:
{
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	b090      	sub	sp, #64	; 0x40
 8013c00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013c04:	4604      	mov	r4, r0
    payload.object_representation.kind = DDS_XRCE_OBJK_TOPIC;
 8013c06:	2202      	movs	r2, #2
    uxr_object_id_to_raw(participant_id, payload.object_representation._.topic.participant_id.data);
 8013c08:	a90c      	add	r1, sp, #48	; 0x30
 8013c0a:	4618      	mov	r0, r3
{
 8013c0c:	9303      	str	r3, [sp, #12]
    payload.object_representation.kind = DDS_XRCE_OBJK_TOPIC;
 8013c0e:	f88d 201c 	strb.w	r2, [sp, #28]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.topic.participant_id.data);
 8013c12:	f000 f895 	bl	8013d40 <uxr_object_id_to_raw>
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013c16:	ab06      	add	r3, sp, #24
 8013c18:	9301      	str	r3, [sp, #4]
 8013c1a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013c24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c26:	4620      	mov	r0, r4
 8013c28:	f7ff ffbc 	bl	8013ba4 <create_entity_xml>
}
 8013c2c:	b010      	add	sp, #64	; 0x40
 8013c2e:	bd10      	pop	{r4, pc}

08013c30 <uxr_buffer_create_publisher_xml>:
{
 8013c30:	b510      	push	{r4, lr}
 8013c32:	b090      	sub	sp, #64	; 0x40
 8013c34:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013c38:	4604      	mov	r4, r0
    payload.object_representation.kind = DDS_XRCE_OBJK_PUBLISHER;
 8013c3a:	2203      	movs	r2, #3
    uxr_object_id_to_raw(participant_id, payload.object_representation._.publisher.participant_id.data);
 8013c3c:	a90c      	add	r1, sp, #48	; 0x30
 8013c3e:	4618      	mov	r0, r3
{
 8013c40:	9303      	str	r3, [sp, #12]
    payload.object_representation.kind = DDS_XRCE_OBJK_PUBLISHER;
 8013c42:	f88d 201c 	strb.w	r2, [sp, #28]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.publisher.participant_id.data);
 8013c46:	f000 f87b 	bl	8013d40 <uxr_object_id_to_raw>
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013c4a:	ab06      	add	r3, sp, #24
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f7ff ffa2 	bl	8013ba4 <create_entity_xml>
}
 8013c60:	b010      	add	sp, #64	; 0x40
 8013c62:	bd10      	pop	{r4, pc}

08013c64 <uxr_buffer_create_subscriber_xml>:
{
 8013c64:	b510      	push	{r4, lr}
 8013c66:	b090      	sub	sp, #64	; 0x40
 8013c68:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013c6c:	4604      	mov	r4, r0
    payload.object_representation.kind = DDS_XRCE_OBJK_SUBSCRIBER;
 8013c6e:	2204      	movs	r2, #4
    uxr_object_id_to_raw(participant_id, payload.object_representation._.subscriber.participant_id.data);
 8013c70:	a90c      	add	r1, sp, #48	; 0x30
 8013c72:	4618      	mov	r0, r3
{
 8013c74:	9303      	str	r3, [sp, #12]
    payload.object_representation.kind = DDS_XRCE_OBJK_SUBSCRIBER;
 8013c76:	f88d 201c 	strb.w	r2, [sp, #28]
    uxr_object_id_to_raw(participant_id, payload.object_representation._.subscriber.participant_id.data);
 8013c7a:	f000 f861 	bl	8013d40 <uxr_object_id_to_raw>
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013c7e:	ab06      	add	r3, sp, #24
 8013c80:	9301      	str	r3, [sp, #4]
 8013c82:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013c86:	9300      	str	r3, [sp, #0]
 8013c88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f7ff ff88 	bl	8013ba4 <create_entity_xml>
}
 8013c94:	b010      	add	sp, #64	; 0x40
 8013c96:	bd10      	pop	{r4, pc}

08013c98 <uxr_buffer_create_datawriter_xml>:
{
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	b090      	sub	sp, #64	; 0x40
 8013c9c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013ca0:	4604      	mov	r4, r0
    payload.object_representation.kind = DDS_XRCE_OBJK_DATAWRITER;
 8013ca2:	2205      	movs	r2, #5
    uxr_object_id_to_raw(publisher_id, payload.object_representation._.data_writer.publisher_id.data);
 8013ca4:	a90c      	add	r1, sp, #48	; 0x30
 8013ca6:	4618      	mov	r0, r3
{
 8013ca8:	9303      	str	r3, [sp, #12]
    payload.object_representation.kind = DDS_XRCE_OBJK_DATAWRITER;
 8013caa:	f88d 201c 	strb.w	r2, [sp, #28]
    uxr_object_id_to_raw(publisher_id, payload.object_representation._.data_writer.publisher_id.data);
 8013cae:	f000 f847 	bl	8013d40 <uxr_object_id_to_raw>
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013cb2:	ab06      	add	r3, sp, #24
 8013cb4:	9301      	str	r3, [sp, #4]
 8013cb6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013cba:	9300      	str	r3, [sp, #0]
 8013cbc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f7ff ff6e 	bl	8013ba4 <create_entity_xml>
}
 8013cc8:	b010      	add	sp, #64	; 0x40
 8013cca:	bd10      	pop	{r4, pc}

08013ccc <uxr_buffer_create_datareader_xml>:
{
 8013ccc:	b510      	push	{r4, lr}
 8013cce:	b090      	sub	sp, #64	; 0x40
 8013cd0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013cd4:	4604      	mov	r4, r0
    payload.object_representation.kind = DDS_XRCE_OBJK_DATAREADER;
 8013cd6:	2206      	movs	r2, #6
    uxr_object_id_to_raw(subscriber_id, payload.object_representation._.data_reader.subscriber_id.data);
 8013cd8:	a90c      	add	r1, sp, #48	; 0x30
 8013cda:	4618      	mov	r0, r3
{
 8013cdc:	9303      	str	r3, [sp, #12]
    payload.object_representation.kind = DDS_XRCE_OBJK_DATAREADER;
 8013cde:	f88d 201c 	strb.w	r2, [sp, #28]
    uxr_object_id_to_raw(subscriber_id, payload.object_representation._.data_reader.subscriber_id.data);
 8013ce2:	f000 f82d 	bl	8013d40 <uxr_object_id_to_raw>
    return create_entity_xml(session, stream_id, object_id, xml, mode, &payload);
 8013ce6:	ab06      	add	r3, sp, #24
 8013ce8:	9301      	str	r3, [sp, #4]
 8013cea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f7ff ff54 	bl	8013ba4 <create_entity_xml>
}
 8013cfc:	b010      	add	sp, #64	; 0x40
 8013cfe:	bd10      	pop	{r4, pc}

08013d00 <uxr_object_id>:

//==================================================================
//                             PUBLIC
//==================================================================
uxrObjectId uxr_object_id(uint16_t id, uint8_t type)
{
 8013d00:	b082      	sub	sp, #8
    uxrObjectId object_id;
    object_id.id = id;
    object_id.type = type;
    return object_id;
 8013d02:	2300      	movs	r3, #0
 8013d04:	f88d 1006 	strb.w	r1, [sp, #6]
 8013d08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013d0c:	f360 030f 	bfi	r3, r0, #0, #16
 8013d10:	f362 431f 	bfi	r3, r2, #16, #16
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	b002      	add	sp, #8
 8013d18:	4770      	bx	lr

08013d1a <uxr_object_id_from_raw>:

uxrObjectId uxr_object_id_from_raw(const uint8_t* raw)
{
    uxrObjectId object_id;
    object_id.id = (uint16_t)((((uint16_t)raw[0]) << 4) + (raw[1] >> 4));
 8013d1a:	7843      	ldrb	r3, [r0, #1]
 8013d1c:	7801      	ldrb	r1, [r0, #0]
{
 8013d1e:	b082      	sub	sp, #8
    object_id.id = (uint16_t)((((uint16_t)raw[0]) << 4) + (raw[1] >> 4));
 8013d20:	091a      	lsrs	r2, r3, #4
    object_id.type = raw[1] & 0x0F;
 8013d22:	f003 030f 	and.w	r3, r3, #15
    return object_id;
 8013d26:	f88d 3006 	strb.w	r3, [sp, #6]
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 8013d30:	f363 000f 	bfi	r0, r3, #0, #16
 8013d34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013d38:	f363 401f 	bfi	r0, r3, #16, #16
}
 8013d3c:	b002      	add	sp, #8
 8013d3e:	4770      	bx	lr

08013d40 <uxr_object_id_to_raw>:

void uxr_object_id_to_raw(uxrObjectId object_id, uint8_t* raw)
{
 8013d40:	4602      	mov	r2, r0
    raw[0] = (uint8_t) (object_id.id >> 4);
 8013d42:	f3c2 130b 	ubfx	r3, r2, #4, #12
 8013d46:	700b      	strb	r3, [r1, #0]
    raw[1] = (uint8_t)((((uint8_t) (object_id.id)) << 4) + (object_id.type & 0x0F));
 8013d48:	f3c0 4303 	ubfx	r3, r0, #16, #4
{
 8013d4c:	b082      	sub	sp, #8
    raw[1] = (uint8_t)((((uint8_t) (object_id.id)) << 4) + (object_id.type & 0x0F));
 8013d4e:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013d52:	7048      	strb	r0, [r1, #1]
}
 8013d54:	b002      	add	sp, #8
 8013d56:	4770      	bx	lr

08013d58 <process_status>:
{
 8013d58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if(session->on_status != NULL)
 8013d5c:	f8d0 7080 	ldr.w	r7, [r0, #128]	; 0x80
{
 8013d60:	9103      	str	r1, [sp, #12]
 8013d62:	4604      	mov	r4, r0
 8013d64:	4690      	mov	r8, r2
 8013d66:	461e      	mov	r6, r3
    if(session->on_status != NULL)
 8013d68:	b11f      	cbz	r7, 8013d72 <process_status+0x1a>
        session->on_status(session, object_id, request_id, status, session->on_status_args);
 8013d6a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8013d6e:	9500      	str	r5, [sp, #0]
 8013d70:	47b8      	blx	r7
    for(unsigned i = 0; i < session->request_status_list_size; ++i)
 8013d72:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8013d74:	2100      	movs	r1, #0
 8013d76:	428b      	cmp	r3, r1
 8013d78:	d006      	beq.n	8013d88 <process_status+0x30>
        if(request_id == session->request_list[i])
 8013d7a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8013d7c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8013d80:	4542      	cmp	r2, r8
 8013d82:	d104      	bne.n	8013d8e <process_status+0x36>
            session->status_list[i] = status;
 8013d84:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013d86:	545e      	strb	r6, [r3, r1]
}
 8013d88:	b004      	add	sp, #16
 8013d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(unsigned i = 0; i < session->request_status_list_size; ++i)
 8013d8e:	3101      	adds	r1, #1
 8013d90:	e7f1      	b.n	8013d76 <process_status+0x1e>

08013d92 <on_get_fragmentation_info>:

    return available;
}

FragmentationInfo on_get_fragmentation_info(uint8_t* submessage_header)
{
 8013d92:	b500      	push	{lr}
 8013d94:	b08b      	sub	sp, #44	; 0x2c
 8013d96:	4601      	mov	r1, r0
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, submessage_header, SUBHEADER_SIZE);
 8013d98:	2204      	movs	r2, #4
 8013d9a:	a802      	add	r0, sp, #8
 8013d9c:	f7ff fe37 	bl	8013a0e <ucdr_init_buffer>

    uint8_t id; uint16_t length; uint8_t flags;
    uxr_read_submessage_header(&ub, &id, &length, &flags);
 8013da0:	f10d 0305 	add.w	r3, sp, #5
 8013da4:	f10d 0206 	add.w	r2, sp, #6
 8013da8:	a901      	add	r1, sp, #4
 8013daa:	a802      	add	r0, sp, #8
 8013dac:	f000 fd09 	bl	80147c2 <uxr_read_submessage_header>

    FragmentationInfo fragmentation_info;
    if(SUBMESSAGE_ID_FRAGMENT == id)
 8013db0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013db4:	2b0d      	cmp	r3, #13
 8013db6:	d109      	bne.n	8013dcc <on_get_fragmentation_info+0x3a>
    {
        fragmentation_info = FLAG_LAST_FRAGMENT & flags ? LAST_FRAGMENT : INTERMEDIATE_FRAGMENT;
 8013db8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dbc:	f013 0f02 	tst.w	r3, #2
 8013dc0:	bf14      	ite	ne
 8013dc2:	2002      	movne	r0, #2
 8013dc4:	2001      	moveq	r0, #1
    else
    {
        fragmentation_info = NO_FRAGMENTED;
    }
    return fragmentation_info;
}
 8013dc6:	b00b      	add	sp, #44	; 0x2c
 8013dc8:	f85d fb04 	ldr.w	pc, [sp], #4
        fragmentation_info = NO_FRAGMENTED;
 8013dcc:	2000      	movs	r0, #0
 8013dce:	e7fa      	b.n	8013dc6 <on_get_fragmentation_info+0x34>

08013dd0 <send_message.isra.0>:
    bool sent = session->comm->send_msg(session->comm->instance, buffer, length);
 8013dd0:	e9d0 0300 	ldrd	r0, r3, [r0]
 8013dd4:	4718      	bx	r3

08013dd6 <write_submessage_acknack.isra.0>:
void write_submessage_acknack(const uxrSession* session, uxrStreamId id)
 8013dd6:	b570      	push	{r4, r5, r6, lr}
 8013dd8:	b092      	sub	sp, #72	; 0x48
 8013dda:	4605      	mov	r5, r0
 8013ddc:	460e      	mov	r6, r1
 8013dde:	4614      	mov	r4, r2
    ucdr_init_buffer_origin_offset(&ub, acknack_buffer, ACKNACK_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 8013de0:	f000 fb95 	bl	801450e <uxr_session_header_offset>
 8013de4:	a905      	add	r1, sp, #20
 8013de6:	9000      	str	r0, [sp, #0]
 8013de8:	2300      	movs	r3, #0
 8013dea:	a80a      	add	r0, sp, #40	; 0x28
 8013dec:	2211      	movs	r2, #17
 8013dee:	f7ff fdfe 	bl	80139ee <ucdr_init_buffer_origin_offset>
    const uxrInputReliableStream* stream = &session->streams.input_reliable[id.index];
 8013df2:	2218      	movs	r2, #24
 8013df4:	fb02 5404 	mla	r4, r2, r4, r5
    uxr_buffer_submessage_header(&ub, SUBMESSAGE_ID_ACKNACK, ACKNACK_PAYLOAD_SIZE, 0);
 8013df8:	2300      	movs	r3, #0
 8013dfa:	2205      	movs	r2, #5
    const uxrInputReliableStream* stream = &session->streams.input_reliable[id.index];
 8013dfc:	3450      	adds	r4, #80	; 0x50
    uxr_buffer_submessage_header(&ub, SUBMESSAGE_ID_ACKNACK, ACKNACK_PAYLOAD_SIZE, 0);
 8013dfe:	210a      	movs	r1, #10
 8013e00:	a80a      	add	r0, sp, #40	; 0x28
 8013e02:	f000 fcc5 	bl	8014790 <uxr_buffer_submessage_header>
    uint16_t nack_bitmap = uxr_compute_acknack(stream, &payload.first_unacked_seq_num);
 8013e06:	a903      	add	r1, sp, #12
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f002 fdb5 	bl	8016978 <uxr_compute_acknack>
    payload.nack_bitmap[0] = (uint8_t)(nack_bitmap >> 8);
 8013e0e:	ba40      	rev16	r0, r0
 8013e10:	f8ad 000e 	strh.w	r0, [sp, #14]
    (void) uxr_serialize_ACKNACK_Payload(&ub, &payload);
 8013e14:	a903      	add	r1, sp, #12
 8013e16:	a80a      	add	r0, sp, #40	; 0x28
    payload.stream_id = id.raw;
 8013e18:	f88d 6010 	strb.w	r6, [sp, #16]
    (void) uxr_serialize_ACKNACK_Payload(&ub, &payload);
 8013e1c:	f001 f823 	bl	8014e66 <uxr_serialize_ACKNACK_Payload>
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 8013e20:	2200      	movs	r2, #0
 8013e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e24:	4611      	mov	r1, r2
 8013e26:	4628      	mov	r0, r5
 8013e28:	f000 fb30 	bl	801448c <uxr_stamp_session_header>
    send_message(session, acknack_buffer, ucdr_buffer_length(&ub));
 8013e2c:	a80a      	add	r0, sp, #40	; 0x28
 8013e2e:	f7ff fe1b 	bl	8013a68 <ucdr_buffer_length>
 8013e32:	a905      	add	r1, sp, #20
 8013e34:	4602      	mov	r2, r0
 8013e36:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8013e38:	f7ff ffca 	bl	8013dd0 <send_message.isra.0>
}
 8013e3c:	b012      	add	sp, #72	; 0x48
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}

08013e40 <listen_message>:
{
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	4605      	mov	r5, r0
    bool must_be_read = recv_message(session, &data, &length, poll_ms);
 8013e46:	6f00      	ldr	r0, [r0, #112]	; 0x70
{
 8013e48:	b099      	sub	sp, #100	; 0x64
    bool received = session->comm->recv_msg(session->comm->instance, buffer, length, poll_ms);
 8013e4a:	6884      	ldr	r4, [r0, #8]
 8013e4c:	6800      	ldr	r0, [r0, #0]
{
 8013e4e:	460b      	mov	r3, r1
    bool received = session->comm->recv_msg(session->comm->instance, buffer, length, poll_ms);
 8013e50:	aa05      	add	r2, sp, #20
 8013e52:	a904      	add	r1, sp, #16
 8013e54:	47a0      	blx	r4
    if(must_be_read)
 8013e56:	4607      	mov	r7, r0
 8013e58:	b338      	cbz	r0, 8013eaa <listen_message+0x6a>
        ucdr_init_buffer(&ub, data, (uint32_t)length);
 8013e5a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8013e5e:	a808      	add	r0, sp, #32
 8013e60:	f7ff fdd5 	bl	8013a0e <ucdr_init_buffer>
    if(uxr_read_session_header(&session->info, ub, &stream_id_raw, &seq_num))
 8013e64:	f10d 030e 	add.w	r3, sp, #14
 8013e68:	aa03      	add	r2, sp, #12
 8013e6a:	a908      	add	r1, sp, #32
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f000 fb22 	bl	80144b6 <uxr_read_session_header>
 8013e72:	b1d0      	cbz	r0, 8013eaa <listen_message+0x6a>
        uxrStreamId id = uxr_stream_id_from_raw(stream_id_raw, UXR_INPUT_STREAM);
 8013e74:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8013e78:	2100      	movs	r1, #0
 8013e7a:	f000 fba8 	bl	80145ce <uxr_stream_id_from_raw>
 8013e7e:	f3c0 4407 	ubfx	r4, r0, #16, #8
    switch(stream_id.type)
 8013e82:	2c01      	cmp	r4, #1
        read_stream(session, ub, id, seq_num);
 8013e84:	f8bd a00e 	ldrh.w	sl, [sp, #14]
        uxrStreamId id = uxr_stream_id_from_raw(stream_id_raw, UXR_INPUT_STREAM);
 8013e88:	9006      	str	r0, [sp, #24]
        read_stream(session, ub, id, seq_num);
 8013e8a:	9007      	str	r0, [sp, #28]
 8013e8c:	f3c0 2807 	ubfx	r8, r0, #8, #8
    switch(stream_id.type)
 8013e90:	d00f      	beq.n	8013eb2 <listen_message+0x72>
 8013e92:	2c02      	cmp	r4, #2
 8013e94:	d01d      	beq.n	8013ed2 <listen_message+0x92>
 8013e96:	b944      	cbnz	r4, 8013eaa <listen_message+0x6a>
            stream_id = uxr_stream_id_from_raw(0x00, UXR_INPUT_STREAM);
 8013e98:	4621      	mov	r1, r4
 8013e9a:	4620      	mov	r0, r4
 8013e9c:	f000 fb97 	bl	80145ce <uxr_stream_id_from_raw>
 8013ea0:	4602      	mov	r2, r0
                read_submessage_list(session, ub, stream_id);
 8013ea2:	a908      	add	r1, sp, #32
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	f7f4 f91d 	bl	80080e4 <read_submessage_list>
}
 8013eaa:	4638      	mov	r0, r7
 8013eac:	b019      	add	sp, #100	; 0x64
 8013eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uxrInputBestEffortStream* stream = uxr_get_input_best_effort_stream(&session->streams, stream_id.index);
 8013eb2:	4641      	mov	r1, r8
 8013eb4:	f105 0008 	add.w	r0, r5, #8
 8013eb8:	f000 fc45 	bl	8014746 <uxr_get_input_best_effort_stream>
            if(stream && uxr_receive_best_effort_message(stream, seq_num))
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d0f4      	beq.n	8013eaa <listen_message+0x6a>
 8013ec0:	4651      	mov	r1, sl
 8013ec2:	f002 fc8c 	bl	80167de <uxr_receive_best_effort_message>
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d0ef      	beq.n	8013eaa <listen_message+0x6a>
                read_submessage_list(session, ub, stream_id);
 8013eca:	f88d 401e 	strb.w	r4, [sp, #30]
 8013ece:	9a07      	ldr	r2, [sp, #28]
 8013ed0:	e7e7      	b.n	8013ea2 <listen_message+0x62>
            uxrInputReliableStream* stream = uxr_get_input_reliable_stream(&session->streams, stream_id.index);
 8013ed2:	4641      	mov	r1, r8
 8013ed4:	f105 0008 	add.w	r0, r5, #8
 8013ed8:	f89d 9018 	ldrb.w	r9, [sp, #24]
 8013edc:	f000 fc3c 	bl	8014758 <uxr_get_input_reliable_stream>
            if(stream && uxr_receive_reliable_message(stream, seq_num, ub->iterator, ucdr_buffer_remaining(ub), &input_buffer_used))
 8013ee0:	4606      	mov	r6, r0
 8013ee2:	b1f8      	cbz	r0, 8013f24 <listen_message+0xe4>
 8013ee4:	a808      	add	r0, sp, #32
 8013ee6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8013eea:	f7ff fdc1 	bl	8013a70 <ucdr_buffer_remaining>
 8013eee:	f10d 020d 	add.w	r2, sp, #13
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	9200      	str	r2, [sp, #0]
 8013ef6:	4651      	mov	r1, sl
 8013ef8:	465a      	mov	r2, fp
 8013efa:	4630      	mov	r0, r6
 8013efc:	f002 fcdd 	bl	80168ba <uxr_receive_reliable_message>
 8013f00:	b180      	cbz	r0, 8013f24 <listen_message+0xe4>
                if(!input_buffer_used)
 8013f02:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8013f06:	b933      	cbnz	r3, 8013f16 <listen_message+0xd6>
                    read_submessage_list(session, ub, stream_id);
 8013f08:	f88d 401e 	strb.w	r4, [sp, #30]
 8013f0c:	9a07      	ldr	r2, [sp, #28]
 8013f0e:	a908      	add	r1, sp, #32
 8013f10:	4628      	mov	r0, r5
 8013f12:	f7f4 f8e7 	bl	80080e4 <read_submessage_list>
                    read_submessage_list(session, &next_mb, stream_id);
 8013f16:	2402      	movs	r4, #2
                while(uxr_next_input_reliable_buffer_available(stream, &next_mb, SUBHEADER_SIZE))
 8013f18:	2204      	movs	r2, #4
 8013f1a:	a910      	add	r1, sp, #64	; 0x40
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f7f6 fe3d 	bl	800ab9c <uxr_next_input_reliable_buffer_available>
 8013f22:	b928      	cbnz	r0, 8013f30 <listen_message+0xf0>
            write_submessage_acknack(session, stream_id);
 8013f24:	4642      	mov	r2, r8
 8013f26:	4649      	mov	r1, r9
 8013f28:	4628      	mov	r0, r5
 8013f2a:	f7ff ff54 	bl	8013dd6 <write_submessage_acknack.isra.0>
            break;
 8013f2e:	e7bc      	b.n	8013eaa <listen_message+0x6a>
                    read_submessage_list(session, &next_mb, stream_id);
 8013f30:	f88d 901c 	strb.w	r9, [sp, #28]
 8013f34:	f88d 801d 	strb.w	r8, [sp, #29]
 8013f38:	f88d 401e 	strb.w	r4, [sp, #30]
 8013f3c:	9a07      	ldr	r2, [sp, #28]
 8013f3e:	a910      	add	r1, sp, #64	; 0x40
 8013f40:	4628      	mov	r0, r5
 8013f42:	f7f4 f8cf 	bl	80080e4 <read_submessage_list>
 8013f46:	e7e7      	b.n	8013f18 <listen_message+0xd8>

08013f48 <wait_session_status>:
{
 8013f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f4c:	4699      	mov	r9, r3
    session->info.last_requested_status = UXR_STATUS_NONE;
 8013f4e:	23ff      	movs	r3, #255	; 0xff
{
 8013f50:	4604      	mov	r4, r0
 8013f52:	460f      	mov	r7, r1
 8013f54:	4690      	mov	r8, r2
    session->info.last_requested_status = UXR_STATUS_NONE;
 8013f56:	7143      	strb	r3, [r0, #5]
    for(size_t i = 0; i < attempts && session->info.last_requested_status == UXR_STATUS_NONE; ++i)
 8013f58:	2600      	movs	r6, #0
    int poll_ms = UXR_CONFIG_MIN_SESSION_CONNECTION_INTERVAL;
 8013f5a:	2519      	movs	r5, #25
    for(size_t i = 0; i < attempts && session->info.last_requested_status == UXR_STATUS_NONE; ++i)
 8013f5c:	454e      	cmp	r6, r9
 8013f5e:	7960      	ldrb	r0, [r4, #5]
 8013f60:	d001      	beq.n	8013f66 <wait_session_status+0x1e>
 8013f62:	28ff      	cmp	r0, #255	; 0xff
 8013f64:	d004      	beq.n	8013f70 <wait_session_status+0x28>
}
 8013f66:	38ff      	subs	r0, #255	; 0xff
 8013f68:	bf18      	it	ne
 8013f6a:	2001      	movne	r0, #1
 8013f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        send_message(session, buffer, length);
 8013f70:	4639      	mov	r1, r7
 8013f72:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8013f74:	4642      	mov	r2, r8
 8013f76:	f7ff ff2b 	bl	8013dd0 <send_message.isra.0>
        poll_ms = listen_message(session, poll_ms) ? UXR_CONFIG_MIN_SESSION_CONNECTION_INTERVAL : poll_ms * 2;
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	f7ff ff5f 	bl	8013e40 <listen_message>
 8013f82:	b910      	cbnz	r0, 8013f8a <wait_session_status+0x42>
 8013f84:	006d      	lsls	r5, r5, #1
    for(size_t i = 0; i < attempts && session->info.last_requested_status == UXR_STATUS_NONE; ++i)
 8013f86:	3601      	adds	r6, #1
 8013f88:	e7e8      	b.n	8013f5c <wait_session_status+0x14>
        poll_ms = listen_message(session, poll_ms) ? UXR_CONFIG_MIN_SESSION_CONNECTION_INTERVAL : poll_ms * 2;
 8013f8a:	2519      	movs	r5, #25
 8013f8c:	e7fb      	b.n	8013f86 <wait_session_status+0x3e>

08013f8e <listen_message_reliably>:
{
 8013f8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int32_t poll = (poll_ms >= 0) ? poll_ms : INT32_MAX;
 8013f92:	1e0c      	subs	r4, r1, #0
{
 8013f94:	b097      	sub	sp, #92	; 0x5c
 8013f96:	4605      	mov	r5, r0
    int32_t poll = (poll_ms >= 0) ? poll_ms : INT32_MAX;
 8013f98:	bfb8      	it	lt
 8013f9a:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
            uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 8013f9e:	f04f 0828 	mov.w	r8, #40	; 0x28
        int64_t timestamp = uxr_millis();
 8013fa2:	f7f4 fa57 	bl	8008454 <uxr_millis>
        int64_t next_heartbeat_timestamp = INT64_MAX;
 8013fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013faa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013fae:	e9cd 2302 	strd	r2, r3, [sp, #8]
        int64_t timestamp = uxr_millis();
 8013fb2:	4681      	mov	r9, r0
 8013fb4:	468b      	mov	fp, r1
        for(uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 8013fb6:	f04f 0a00 	mov.w	sl, #0
 8013fba:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8013fbe:	fa5f f68a 	uxtb.w	r6, sl
 8013fc2:	42b3      	cmp	r3, r6
 8013fc4:	d81e      	bhi.n	8014004 <listen_message_reliably+0x76>
        int32_t poll_to_next_heartbeat = (next_heartbeat_timestamp != INT64_MAX) ? (int32_t)(next_heartbeat_timestamp - timestamp) : poll;
 8013fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013fce:	428b      	cmp	r3, r1
 8013fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fd4:	bf0b      	itete	eq
 8013fd6:	4282      	cmpeq	r2, r0
 8013fd8:	9b02      	ldrne	r3, [sp, #8]
 8013fda:	4621      	moveq	r1, r4
 8013fdc:	eba3 0109 	subne.w	r1, r3, r9
            poll_to_next_heartbeat = 1;
 8013fe0:	2900      	cmp	r1, #0
 8013fe2:	bf08      	it	eq
 8013fe4:	2101      	moveq	r1, #1
        int poll_chosen = (poll_to_next_heartbeat < poll) ? poll_to_next_heartbeat : poll;
 8013fe6:	42a1      	cmp	r1, r4
 8013fe8:	bfa8      	it	ge
 8013fea:	4621      	movge	r1, r4
        received = listen_message(session, poll_chosen);
 8013fec:	4628      	mov	r0, r5
        int poll_chosen = (poll_to_next_heartbeat < poll) ? poll_to_next_heartbeat : poll;
 8013fee:	4689      	mov	r9, r1
        received = listen_message(session, poll_chosen);
 8013ff0:	f7ff ff26 	bl	8013e40 <listen_message>
        if(!received)
 8013ff4:	b918      	cbnz	r0, 8013ffe <listen_message_reliably+0x70>
            poll -= poll_chosen;
 8013ff6:	eba4 0409 	sub.w	r4, r4, r9
    while(!received && poll > 0);
 8013ffa:	2c00      	cmp	r4, #0
 8013ffc:	dcd1      	bgt.n	8013fa2 <listen_message_reliably+0x14>
}
 8013ffe:	b017      	add	sp, #92	; 0x5c
 8014000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 8014004:	2201      	movs	r2, #1
 8014006:	2102      	movs	r1, #2
 8014008:	4630      	mov	r0, r6
 801400a:	f000 fac8 	bl	801459e <uxr_stream_id>
            uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 801400e:	fb08 5706 	mla	r7, r8, r6, r5
 8014012:	3720      	adds	r7, #32
            uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 8014014:	9006      	str	r0, [sp, #24]
            if(uxr_update_output_stream_heartbeat_timestamp(stream, timestamp))
 8014016:	464a      	mov	r2, r9
 8014018:	465b      	mov	r3, fp
 801401a:	4638      	mov	r0, r7
 801401c:	f002 fdb1 	bl	8016b82 <uxr_update_output_stream_heartbeat_timestamp>
 8014020:	2800      	cmp	r0, #0
 8014022:	d035      	beq.n	8014090 <listen_message_reliably+0x102>
                write_submessage_heartbeat(session, id);
 8014024:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8014028:	f89d 7019 	ldrb.w	r7, [sp, #25]
 801402c:	9305      	str	r3, [sp, #20]
    ucdr_init_buffer_origin_offset(&ub, heartbeat_buffer, HEARTBEAT_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 801402e:	4628      	mov	r0, r5
 8014030:	f000 fa6d 	bl	801450e <uxr_session_header_offset>
    payload.first_unacked_seq_nr = uxr_seq_num_add(stream->last_acknown, 1);
 8014034:	fb07 8708 	mla	r7, r7, r8, r8
    ucdr_init_buffer_origin_offset(&ub, heartbeat_buffer, HEARTBEAT_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 8014038:	9000      	str	r0, [sp, #0]
 801403a:	2300      	movs	r3, #0
 801403c:	2211      	movs	r2, #17
 801403e:	a909      	add	r1, sp, #36	; 0x24
 8014040:	a80e      	add	r0, sp, #56	; 0x38
    payload.first_unacked_seq_nr = uxr_seq_num_add(stream->last_acknown, 1);
 8014042:	442f      	add	r7, r5
    ucdr_init_buffer_origin_offset(&ub, heartbeat_buffer, HEARTBEAT_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 8014044:	f7ff fcd3 	bl	80139ee <ucdr_init_buffer_origin_offset>
    uxr_buffer_submessage_header(&ub, SUBMESSAGE_ID_HEARTBEAT, HEARTBEAT_PAYLOAD_SIZE, 0);
 8014048:	2205      	movs	r2, #5
 801404a:	2300      	movs	r3, #0
 801404c:	210b      	movs	r1, #11
 801404e:	a80e      	add	r0, sp, #56	; 0x38
 8014050:	f000 fb9e 	bl	8014790 <uxr_buffer_submessage_header>
    payload.first_unacked_seq_nr = uxr_seq_num_add(stream->last_acknown, 1);
 8014054:	2101      	movs	r1, #1
 8014056:	8978      	ldrh	r0, [r7, #10]
 8014058:	f002 ff1c 	bl	8016e94 <uxr_seq_num_add>
    payload.last_unacked_seq_nr = stream->last_sent;
 801405c:	893b      	ldrh	r3, [r7, #8]
    payload.first_unacked_seq_nr = uxr_seq_num_add(stream->last_acknown, 1);
 801405e:	f8ad 001c 	strh.w	r0, [sp, #28]
    payload.last_unacked_seq_nr = stream->last_sent;
 8014062:	f8ad 301e 	strh.w	r3, [sp, #30]
    (void) uxr_serialize_HEARTBEAT_Payload(&ub, &payload);
 8014066:	a907      	add	r1, sp, #28
    payload.stream_id = id.raw;
 8014068:	9b05      	ldr	r3, [sp, #20]
 801406a:	f88d 3020 	strb.w	r3, [sp, #32]
    (void) uxr_serialize_HEARTBEAT_Payload(&ub, &payload);
 801406e:	a80e      	add	r0, sp, #56	; 0x38
 8014070:	f000 ff22 	bl	8014eb8 <uxr_serialize_HEARTBEAT_Payload>
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 8014074:	2200      	movs	r2, #0
 8014076:	4611      	mov	r1, r2
 8014078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801407a:	4628      	mov	r0, r5
 801407c:	f000 fa06 	bl	801448c <uxr_stamp_session_header>
    send_message(session, heartbeat_buffer, ucdr_buffer_length(&ub));
 8014080:	a80e      	add	r0, sp, #56	; 0x38
 8014082:	f7ff fcf1 	bl	8013a68 <ucdr_buffer_length>
 8014086:	a909      	add	r1, sp, #36	; 0x24
 8014088:	4602      	mov	r2, r0
 801408a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 801408c:	f7ff fea0 	bl	8013dd0 <send_message.isra.0>
            if(stream->next_heartbeat_timestamp < next_heartbeat_timestamp)
 8014090:	fb08 5606 	mla	r6, r8, r6, r5
 8014094:	e9d6 230e 	ldrd	r2, r3, [r6, #56]	; 0x38
 8014098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801409c:	4282      	cmp	r2, r0
 801409e:	eb73 0101 	sbcs.w	r1, r3, r1
 80140a2:	da01      	bge.n	80140a8 <listen_message_reliably+0x11a>
 80140a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        for(uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 80140a8:	f10a 0a01 	add.w	sl, sl, #1
 80140ac:	e785      	b.n	8013fba <listen_message_reliably+0x2c>

080140ae <uxr_init_session>:
{
 80140ae:	b5d0      	push	{r4, r6, r7, lr}
    session->request_list = NULL;
 80140b0:	2300      	movs	r3, #0
    session->time_offset = 0;
 80140b2:	2600      	movs	r6, #0
 80140b4:	2700      	movs	r7, #0
 80140b6:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
{
 80140ba:	4604      	mov	r4, r0
    session->comm = comm;
 80140bc:	6701      	str	r1, [r0, #112]	; 0x70
    session->status_list = NULL;
 80140be:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
    session->on_status = NULL;
 80140c2:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
    session->on_topic = NULL;
 80140c6:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
    session->on_time = NULL;
 80140ca:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
    session->on_time_args = NULL;
 80140ce:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    session->synchronized = false;
 80140d2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    uxr_init_session_info(&session->info, 0x81, key);
 80140d6:	2181      	movs	r1, #129	; 0x81
 80140d8:	f000 f9a9 	bl	801442e <uxr_init_session_info>
    uxr_init_stream_storage(&session->streams);
 80140dc:	f104 0008 	add.w	r0, r4, #8
}
 80140e0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
    uxr_init_stream_storage(&session->streams);
 80140e4:	f000 ba8f 	b.w	8014606 <uxr_init_stream_storage>

080140e8 <uxr_set_status_callback>:
    session->on_status_args = args;
 80140e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
}
 80140ec:	4770      	bx	lr

080140ee <uxr_set_topic_callback>:
    session->on_topic_args = args;
 80140ee:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
}
 80140f2:	4770      	bx	lr

080140f4 <uxr_set_request_callback>:
    session->on_request_args = args;
 80140f4:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
}
 80140f8:	4770      	bx	lr

080140fa <uxr_set_reply_callback>:
    session->on_reply_args = args;
 80140fa:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
}
 80140fe:	4770      	bx	lr

08014100 <uxr_create_session_retries>:
{
 8014100:	b530      	push	{r4, r5, lr}
 8014102:	4604      	mov	r4, r0
 8014104:	b093      	sub	sp, #76	; 0x4c
    uxr_reset_stream_storage(&session->streams);
 8014106:	3008      	adds	r0, #8
{
 8014108:	460d      	mov	r5, r1
    uxr_reset_stream_storage(&session->streams);
 801410a:	f000 fa85 	bl	8014618 <uxr_reset_stream_storage>
    ucdr_init_buffer_origin_offset(&ub, create_session_buffer, CREATE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 801410e:	4620      	mov	r0, r4
 8014110:	f000 f9fd 	bl	801450e <uxr_session_header_offset>
 8014114:	2300      	movs	r3, #0
 8014116:	9000      	str	r0, [sp, #0]
 8014118:	221c      	movs	r2, #28
 801411a:	a903      	add	r1, sp, #12
 801411c:	a80a      	add	r0, sp, #40	; 0x28
 801411e:	f7ff fc66 	bl	80139ee <ucdr_init_buffer_origin_offset>
    uxr_buffer_create_session(&session->info, &ub, (uint16_t)(session->comm->mtu - INTERNAL_RELIABLE_BUFFER_OFFSET));
 8014122:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014124:	8a1a      	ldrh	r2, [r3, #16]
 8014126:	3a04      	subs	r2, #4
 8014128:	b292      	uxth	r2, r2
 801412a:	a90a      	add	r1, sp, #40	; 0x28
 801412c:	4620      	mov	r0, r4
 801412e:	f7f4 f931 	bl	8008394 <uxr_buffer_create_session>
    uxr_stamp_create_session_header(&session->info, ub.init);
 8014132:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014134:	4620      	mov	r0, r4
 8014136:	f000 f995 	bl	8014464 <uxr_stamp_create_session_header>
    bool received = wait_session_status(session, create_session_buffer, ucdr_buffer_length(&ub), (size_t) retries);
 801413a:	a80a      	add	r0, sp, #40	; 0x28
 801413c:	f7ff fc94 	bl	8013a68 <ucdr_buffer_length>
 8014140:	462b      	mov	r3, r5
 8014142:	4602      	mov	r2, r0
 8014144:	a903      	add	r1, sp, #12
 8014146:	4620      	mov	r0, r4
 8014148:	f7ff fefe 	bl	8013f48 <wait_session_status>
    bool created = received && UXR_STATUS_OK == session->info.last_requested_status;
 801414c:	b118      	cbz	r0, 8014156 <uxr_create_session_retries+0x56>
 801414e:	7960      	ldrb	r0, [r4, #5]
 8014150:	fab0 f080 	clz	r0, r0
 8014154:	0940      	lsrs	r0, r0, #5
}
 8014156:	b013      	add	sp, #76	; 0x4c
 8014158:	bd30      	pop	{r4, r5, pc}

0801415a <uxr_create_session>:
    return uxr_create_session_retries(session, UXR_CONFIG_MAX_SESSION_CONNECTION_ATTEMPTS);
 801415a:	210a      	movs	r1, #10
 801415c:	f7ff bfd0 	b.w	8014100 <uxr_create_session_retries>

08014160 <uxr_delete_session>:
{
 8014160:	b510      	push	{r4, lr}
 8014162:	b08e      	sub	sp, #56	; 0x38
 8014164:	4604      	mov	r4, r0
    ucdr_init_buffer_origin_offset(&ub, delete_session_buffer, DELETE_SESSION_MAX_MSG_SIZE, 0u, uxr_session_header_offset(&session->info));
 8014166:	f000 f9d2 	bl	801450e <uxr_session_header_offset>
 801416a:	2300      	movs	r3, #0
 801416c:	2210      	movs	r2, #16
 801416e:	9000      	str	r0, [sp, #0]
 8014170:	a902      	add	r1, sp, #8
 8014172:	a806      	add	r0, sp, #24
 8014174:	f7ff fc3b 	bl	80139ee <ucdr_init_buffer_origin_offset>
    uxr_buffer_delete_session(&session->info, &ub);
 8014178:	a906      	add	r1, sp, #24
 801417a:	4620      	mov	r0, r4
 801417c:	f7f4 f93a 	bl	80083f4 <uxr_buffer_delete_session>
    uxr_stamp_session_header(&session->info, 0, 0, ub.init);
 8014180:	2200      	movs	r2, #0
 8014182:	4611      	mov	r1, r2
 8014184:	9b06      	ldr	r3, [sp, #24]
 8014186:	4620      	mov	r0, r4
 8014188:	f000 f980 	bl	801448c <uxr_stamp_session_header>
    bool received = wait_session_status(session, delete_session_buffer, ucdr_buffer_length(&ub), UXR_CONFIG_MAX_SESSION_CONNECTION_ATTEMPTS);
 801418c:	a806      	add	r0, sp, #24
 801418e:	f7ff fc6b 	bl	8013a68 <ucdr_buffer_length>
 8014192:	230a      	movs	r3, #10
 8014194:	4602      	mov	r2, r0
 8014196:	a902      	add	r1, sp, #8
 8014198:	4620      	mov	r0, r4
 801419a:	f7ff fed5 	bl	8013f48 <wait_session_status>
    return received && UXR_STATUS_OK == session->info.last_requested_status;
 801419e:	b118      	cbz	r0, 80141a8 <uxr_delete_session+0x48>
 80141a0:	7960      	ldrb	r0, [r4, #5]
 80141a2:	fab0 f080 	clz	r0, r0
 80141a6:	0940      	lsrs	r0, r0, #5
}
 80141a8:	b00e      	add	sp, #56	; 0x38
 80141aa:	bd10      	pop	{r4, pc}

080141ac <uxr_create_output_best_effort_stream>:
{
 80141ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141ae:	4604      	mov	r4, r0
 80141b0:	460d      	mov	r5, r1
 80141b2:	4616      	mov	r6, r2
    uint8_t header_offset = uxr_session_header_offset(&session->info);
 80141b4:	f000 f9ab 	bl	801450e <uxr_session_header_offset>
    return uxr_add_output_best_effort_buffer(&session->streams, buffer, size, header_offset);
 80141b8:	4632      	mov	r2, r6
    uint8_t header_offset = uxr_session_header_offset(&session->info);
 80141ba:	4603      	mov	r3, r0
    return uxr_add_output_best_effort_buffer(&session->streams, buffer, size, header_offset);
 80141bc:	4629      	mov	r1, r5
 80141be:	f104 0008 	add.w	r0, r4, #8
}
 80141c2:	b002      	add	sp, #8
 80141c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return uxr_add_output_best_effort_buffer(&session->streams, buffer, size, header_offset);
 80141c8:	f000 ba5a 	b.w	8014680 <uxr_add_output_best_effort_buffer>

080141cc <uxr_create_output_reliable_stream>:
{
 80141cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ce:	b085      	sub	sp, #20
 80141d0:	4604      	mov	r4, r0
 80141d2:	460d      	mov	r5, r1
 80141d4:	4616      	mov	r6, r2
 80141d6:	461f      	mov	r7, r3
    uint8_t header_offset = uxr_session_header_offset(&session->info);
 80141d8:	f000 f999 	bl	801450e <uxr_session_header_offset>
    return uxr_add_output_reliable_buffer(&session->streams, buffer, size, history, header_offset);
 80141dc:	463b      	mov	r3, r7
 80141de:	9000      	str	r0, [sp, #0]
 80141e0:	4632      	mov	r2, r6
 80141e2:	4629      	mov	r1, r5
 80141e4:	f104 0008 	add.w	r0, r4, #8
 80141e8:	f000 fa5a 	bl	80146a0 <uxr_add_output_reliable_buffer>
 80141ec:	4603      	mov	r3, r0
 80141ee:	b2da      	uxtb	r2, r3
 80141f0:	2000      	movs	r0, #0
 80141f2:	f362 0007 	bfi	r0, r2, #0, #8
 80141f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80141fa:	f362 200f 	bfi	r0, r2, #8, #8
 80141fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014202:	f362 4017 	bfi	r0, r2, #16, #8
 8014206:	0e1b      	lsrs	r3, r3, #24
 8014208:	f363 601f 	bfi	r0, r3, #24, #8
}
 801420c:	b005      	add	sp, #20
 801420e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014210 <uxr_create_input_best_effort_stream>:
{
 8014210:	b082      	sub	sp, #8
    return uxr_add_input_best_effort_buffer(&session->streams);
 8014212:	3008      	adds	r0, #8
}
 8014214:	b002      	add	sp, #8
    return uxr_add_input_best_effort_buffer(&session->streams);
 8014216:	f000 ba5a 	b.w	80146ce <uxr_add_input_best_effort_buffer>

0801421a <uxr_flash_output_streams>:
{
 801421a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	b085      	sub	sp, #20
    for(uint8_t i = 0; i < session->streams.output_best_effort_size; ++i)
 8014220:	2500      	movs	r5, #0
 8014222:	7e23      	ldrb	r3, [r4, #24]
 8014224:	b2e8      	uxtb	r0, r5
 8014226:	4283      	cmp	r3, r0
 8014228:	d808      	bhi.n	801423c <uxr_flash_output_streams+0x22>
 801422a:	2500      	movs	r5, #0
        uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 801422c:	2728      	movs	r7, #40	; 0x28
    for(uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 801422e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014232:	b2e8      	uxtb	r0, r5
 8014234:	4283      	cmp	r3, r0
 8014236:	d820      	bhi.n	801427a <uxr_flash_output_streams+0x60>
}
 8014238:	b005      	add	sp, #20
 801423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uxrStreamId id = uxr_stream_id(i, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 801423c:	2201      	movs	r2, #1
 801423e:	4611      	mov	r1, r2
        uxrOutputBestEffortStream* stream = &session->streams.output_best_effort[i];
 8014240:	eb04 1600 	add.w	r6, r4, r0, lsl #4
        uxrStreamId id = uxr_stream_id(i, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 8014244:	f000 f9ab 	bl	801459e <uxr_stream_id>
        uxrOutputBestEffortStream* stream = &session->streams.output_best_effort[i];
 8014248:	3608      	adds	r6, #8
        uxrStreamId id = uxr_stream_id(i, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 801424a:	9001      	str	r0, [sp, #4]
        if(uxr_prepare_best_effort_buffer_to_send(stream, &buffer, &length, &seq_num))
 801424c:	f10d 0302 	add.w	r3, sp, #2
 8014250:	aa03      	add	r2, sp, #12
 8014252:	a902      	add	r1, sp, #8
 8014254:	4630      	mov	r0, r6
 8014256:	f002 fbf5 	bl	8016a44 <uxr_prepare_best_effort_buffer_to_send>
 801425a:	b160      	cbz	r0, 8014276 <uxr_flash_output_streams+0x5c>
            uxr_stamp_session_header(&session->info, id.raw, seq_num, buffer);
 801425c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014260:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014264:	9b02      	ldr	r3, [sp, #8]
 8014266:	4620      	mov	r0, r4
 8014268:	f000 f910 	bl	801448c <uxr_stamp_session_header>
            send_message(session, buffer, length);
 801426c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014270:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8014272:	f7ff fdad 	bl	8013dd0 <send_message.isra.0>
    for(uint8_t i = 0; i < session->streams.output_best_effort_size; ++i)
 8014276:	3501      	adds	r5, #1
 8014278:	e7d3      	b.n	8014222 <uxr_flash_output_streams+0x8>
        uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 801427a:	2201      	movs	r2, #1
 801427c:	2102      	movs	r1, #2
        uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 801427e:	fb07 4600 	mla	r6, r7, r0, r4
        uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 8014282:	f000 f98c 	bl	801459e <uxr_stream_id>
        uxrOutputReliableStream* stream = &session->streams.output_reliable[i];
 8014286:	3620      	adds	r6, #32
        uxrStreamId id = uxr_stream_id(i, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 8014288:	9001      	str	r0, [sp, #4]
        while(uxr_prepare_next_reliable_buffer_to_send(stream, &buffer, &length, &seq_num))
 801428a:	f10d 0302 	add.w	r3, sp, #2
 801428e:	aa03      	add	r2, sp, #12
 8014290:	a902      	add	r1, sp, #8
 8014292:	4630      	mov	r0, r6
 8014294:	f002 fc40 	bl	8016b18 <uxr_prepare_next_reliable_buffer_to_send>
 8014298:	b908      	cbnz	r0, 801429e <uxr_flash_output_streams+0x84>
    for(uint8_t i = 0; i < session->streams.output_reliable_size; ++i)
 801429a:	3501      	adds	r5, #1
 801429c:	e7c7      	b.n	801422e <uxr_flash_output_streams+0x14>
            uxr_stamp_session_header(&session->info, id.raw, seq_num, buffer);
 801429e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80142a2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80142a6:	9b02      	ldr	r3, [sp, #8]
 80142a8:	4620      	mov	r0, r4
 80142aa:	f000 f8ef 	bl	801448c <uxr_stamp_session_header>
            send_message(session, buffer, length);
 80142ae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80142b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80142b4:	f7ff fd8c 	bl	8013dd0 <send_message.isra.0>
 80142b8:	e7e7      	b.n	801428a <uxr_flash_output_streams+0x70>

080142ba <uxr_run_session_until_data>:
{
 80142ba:	b570      	push	{r4, r5, r6, lr}
 80142bc:	4605      	mov	r5, r0
 80142be:	460c      	mov	r4, r1
    int64_t start_timestamp = uxr_millis();
 80142c0:	f7f4 f8c8 	bl	8008454 <uxr_millis>
 80142c4:	4606      	mov	r6, r0
    uxr_flash_output_streams(session);
 80142c6:	4628      	mov	r0, r5
 80142c8:	f7ff ffa7 	bl	801421a <uxr_flash_output_streams>
    session->on_data_flag = false;
 80142cc:	2300      	movs	r3, #0
 80142ce:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    int remaining_time = timeout_ms;
 80142d2:	4621      	mov	r1, r4
        remaining_time = timeout_ms - (int)(uxr_millis() - start_timestamp);
 80142d4:	4426      	add	r6, r4
    while(remaining_time > 0)
 80142d6:	2900      	cmp	r1, #0
 80142d8:	dd05      	ble.n	80142e6 <uxr_run_session_until_data+0x2c>
        listen_message_reliably(session, remaining_time);
 80142da:	4628      	mov	r0, r5
 80142dc:	f7ff fe57 	bl	8013f8e <listen_message_reliably>
        if (session->on_data_flag){
 80142e0:	f895 30b4 	ldrb.w	r3, [r5, #180]	; 0xb4
 80142e4:	b113      	cbz	r3, 80142ec <uxr_run_session_until_data+0x32>
    return session->on_data_flag;
 80142e6:	f895 00b4 	ldrb.w	r0, [r5, #180]	; 0xb4
}
 80142ea:	bd70      	pop	{r4, r5, r6, pc}
        remaining_time = timeout_ms - (int)(uxr_millis() - start_timestamp);
 80142ec:	f7f4 f8b2 	bl	8008454 <uxr_millis>
 80142f0:	1a31      	subs	r1, r6, r0
 80142f2:	e7f0      	b.n	80142d6 <uxr_run_session_until_data+0x1c>

080142f4 <uxr_run_session_until_confirm_delivery>:
{
 80142f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142f6:	4605      	mov	r5, r0
 80142f8:	460e      	mov	r6, r1
    uxr_flash_output_streams(session);
 80142fa:	f7ff ff8e 	bl	801421a <uxr_flash_output_streams>
    bool timeout = false;
 80142fe:	2400      	movs	r4, #0
    while(!uxr_output_streams_confirmed(&session->streams) && !timeout)
 8014300:	f105 0708 	add.w	r7, r5, #8
 8014304:	4638      	mov	r0, r7
 8014306:	f000 fa31 	bl	801476c <uxr_output_streams_confirmed>
 801430a:	b120      	cbz	r0, 8014316 <uxr_run_session_until_confirm_delivery+0x22>
    return uxr_output_streams_confirmed(&session->streams);
 801430c:	4638      	mov	r0, r7
}
 801430e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return uxr_output_streams_confirmed(&session->streams);
 8014312:	f000 ba2b 	b.w	801476c <uxr_output_streams_confirmed>
    while(!uxr_output_streams_confirmed(&session->streams) && !timeout)
 8014316:	2c00      	cmp	r4, #0
 8014318:	d1f8      	bne.n	801430c <uxr_run_session_until_confirm_delivery+0x18>
        timeout = !listen_message_reliably(session, timeout_ms);
 801431a:	4631      	mov	r1, r6
 801431c:	4628      	mov	r0, r5
 801431e:	f7ff fe36 	bl	8013f8e <listen_message_reliably>
 8014322:	f080 0401 	eor.w	r4, r0, #1
 8014326:	b2e4      	uxtb	r4, r4
 8014328:	e7ec      	b.n	8014304 <uxr_run_session_until_confirm_delivery+0x10>

0801432a <uxr_run_session_until_all_status>:
{
 801432a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8014332:	461e      	mov	r6, r3
 8014334:	4617      	mov	r7, r2
 8014336:	4605      	mov	r5, r0
 8014338:	4688      	mov	r8, r1
 801433a:	46b2      	mov	sl, r6
    uxr_flash_output_streams(session);
 801433c:	f7ff ff6d 	bl	801421a <uxr_flash_output_streams>
    for(unsigned i = 0; i < list_size; ++i)
 8014340:	eb09 0b06 	add.w	fp, r9, r6
 8014344:	4633      	mov	r3, r6
        status_list[i] = UXR_STATUS_NONE;
 8014346:	22ff      	movs	r2, #255	; 0xff
    for(unsigned i = 0; i < list_size; ++i)
 8014348:	455b      	cmp	r3, fp
 801434a:	d112      	bne.n	8014372 <uxr_run_session_until_all_status+0x48>
    session->status_list = status_list;
 801434c:	e9c5 761d 	strd	r7, r6, [r5, #116]	; 0x74
    session->request_status_list_size = list_size;
 8014350:	f8c5 907c 	str.w	r9, [r5, #124]	; 0x7c
        timeout = !listen_message_reliably(session, timeout_ms);
 8014354:	4641      	mov	r1, r8
 8014356:	4628      	mov	r0, r5
 8014358:	f7ff fe19 	bl	8013f8e <listen_message_reliably>
 801435c:	f080 0001 	eor.w	r0, r0, #1
 8014360:	b2c0      	uxtb	r0, r0
        for(unsigned i = 0; i < list_size && status_confirmed; ++i)
 8014362:	2300      	movs	r3, #0
        status_confirmed = true;
 8014364:	2401      	movs	r4, #1
        for(unsigned i = 0; i < list_size && status_confirmed; ++i)
 8014366:	454b      	cmp	r3, r9
 8014368:	d011      	beq.n	801438e <uxr_run_session_until_all_status+0x64>
 801436a:	b92c      	cbnz	r4, 8014378 <uxr_run_session_until_all_status+0x4e>
    while(!timeout && !status_confirmed)
 801436c:	2800      	cmp	r0, #0
 801436e:	d0f1      	beq.n	8014354 <uxr_run_session_until_all_status+0x2a>
 8014370:	e010      	b.n	8014394 <uxr_run_session_until_all_status+0x6a>
        status_list[i] = UXR_STATUS_NONE;
 8014372:	f803 2b01 	strb.w	r2, [r3], #1
    for(unsigned i = 0; i < list_size; ++i)
 8014376:	e7e7      	b.n	8014348 <uxr_run_session_until_all_status+0x1e>
                            || request_list[i] == UXR_INVALID_REQUEST_ID; //CHECK: better give an error? an assert?
 8014378:	5cf2      	ldrb	r2, [r6, r3]
 801437a:	2aff      	cmp	r2, #255	; 0xff
 801437c:	bf03      	ittte	eq
 801437e:	f837 4013 	ldrheq.w	r4, [r7, r3, lsl #1]
 8014382:	fab4 f484 	clzeq	r4, r4
 8014386:	0964      	lsreq	r4, r4, #5
 8014388:	2401      	movne	r4, #1
        for(unsigned i = 0; i < list_size && status_confirmed; ++i)
 801438a:	3301      	adds	r3, #1
 801438c:	e7eb      	b.n	8014366 <uxr_run_session_until_all_status+0x3c>
    while(!timeout && !status_confirmed)
 801438e:	b908      	cbnz	r0, 8014394 <uxr_run_session_until_all_status+0x6a>
 8014390:	2c00      	cmp	r4, #0
 8014392:	d0df      	beq.n	8014354 <uxr_run_session_until_all_status+0x2a>
    session->request_status_list_size = 0;
 8014394:	2300      	movs	r3, #0
 8014396:	67eb      	str	r3, [r5, #124]	; 0x7c
    bool status_ok = true;
 8014398:	2001      	movs	r0, #1
    for(unsigned i = 0; i < list_size && status_ok; ++i)
 801439a:	45da      	cmp	sl, fp
 801439c:	d000      	beq.n	80143a0 <uxr_run_session_until_all_status+0x76>
 801439e:	b908      	cbnz	r0, 80143a4 <uxr_run_session_until_all_status+0x7a>
}
 80143a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        status_ok = status_list[i] == UXR_STATUS_OK || status_list[i] == UXR_STATUS_OK_MATCHED;
 80143a4:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80143a8:	2801      	cmp	r0, #1
 80143aa:	bf8c      	ite	hi
 80143ac:	2000      	movhi	r0, #0
 80143ae:	2001      	movls	r0, #1
    for(unsigned i = 0; i < list_size && status_ok; ++i)
 80143b0:	e7f3      	b.n	801439a <uxr_run_session_until_all_status+0x70>

080143b2 <uxr_prepare_stream_to_write_submessage>:
{
 80143b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80143b6:	4680      	mov	r8, r0
    size_t submessage_size = SUBHEADER_SIZE + payload_size + uxr_submessage_padding(payload_size);
 80143b8:	4610      	mov	r0, r2
{
 80143ba:	4616      	mov	r6, r2
 80143bc:	461d      	mov	r5, r3
 80143be:	9101      	str	r1, [sp, #4]
 80143c0:	f3c1 2407 	ubfx	r4, r1, #8, #8
    size_t submessage_size = SUBHEADER_SIZE + payload_size + uxr_submessage_padding(payload_size);
 80143c4:	f000 fa20 	bl	8014808 <uxr_submessage_padding>
    switch(stream_id.type)
 80143c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    size_t submessage_size = SUBHEADER_SIZE + payload_size + uxr_submessage_padding(payload_size);
 80143cc:	1d37      	adds	r7, r6, #4
    switch(stream_id.type)
 80143ce:	2b01      	cmp	r3, #1
    size_t submessage_size = SUBHEADER_SIZE + payload_size + uxr_submessage_padding(payload_size);
 80143d0:	4407      	add	r7, r0
    switch(stream_id.type)
 80143d2:	d006      	beq.n	80143e2 <uxr_prepare_stream_to_write_submessage+0x30>
 80143d4:	2b02      	cmp	r3, #2
 80143d6:	d01d      	beq.n	8014414 <uxr_prepare_stream_to_write_submessage+0x62>
 80143d8:	2400      	movs	r4, #0
}
 80143da:	4620      	mov	r0, r4
 80143dc:	b002      	add	sp, #8
 80143de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            uxrOutputBestEffortStream* stream = uxr_get_output_best_effort_stream(&session->streams, stream_id.index);
 80143e2:	4621      	mov	r1, r4
 80143e4:	f108 0008 	add.w	r0, r8, #8
 80143e8:	f000 f99c 	bl	8014724 <uxr_get_output_best_effort_stream>
 80143ec:	4604      	mov	r4, r0
            available = stream && uxr_prepare_best_effort_buffer_to_write(stream, submessage_size, ub);
 80143ee:	b120      	cbz	r0, 80143fa <uxr_prepare_stream_to_write_submessage+0x48>
 80143f0:	462a      	mov	r2, r5
 80143f2:	4639      	mov	r1, r7
 80143f4:	f002 fb0a 	bl	8016a0c <uxr_prepare_best_effort_buffer_to_write>
            available = stream && uxr_prepare_reliable_buffer_to_write(stream, submessage_size, ub);
 80143f8:	4604      	mov	r4, r0
 80143fa:	f004 0401 	and.w	r4, r4, #1
    if(available)
 80143fe:	2c00      	cmp	r4, #0
 8014400:	d0eb      	beq.n	80143da <uxr_prepare_stream_to_write_submessage+0x28>
        (void) uxr_buffer_submessage_header(ub, submessage_id, (uint16_t)payload_size, mode);
 8014402:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014406:	f89d 1020 	ldrb.w	r1, [sp, #32]
 801440a:	b2b2      	uxth	r2, r6
 801440c:	4628      	mov	r0, r5
 801440e:	f000 f9bf 	bl	8014790 <uxr_buffer_submessage_header>
 8014412:	e7e2      	b.n	80143da <uxr_prepare_stream_to_write_submessage+0x28>
            uxrOutputReliableStream* stream = uxr_get_output_reliable_stream(&session->streams, stream_id.index);
 8014414:	4621      	mov	r1, r4
 8014416:	f108 0008 	add.w	r0, r8, #8
 801441a:	f000 f98a 	bl	8014732 <uxr_get_output_reliable_stream>
 801441e:	4604      	mov	r4, r0
            available = stream && uxr_prepare_reliable_buffer_to_write(stream, submessage_size, ub);
 8014420:	2800      	cmp	r0, #0
 8014422:	d0ea      	beq.n	80143fa <uxr_prepare_stream_to_write_submessage+0x48>
 8014424:	462a      	mov	r2, r5
 8014426:	4639      	mov	r1, r7
 8014428:	f7f6 fc2a 	bl	800ac80 <uxr_prepare_reliable_buffer_to_write>
 801442c:	e7e4      	b.n	80143f8 <uxr_prepare_stream_to_write_submessage+0x46>

0801442e <uxr_init_session_info>:
    info->key[0] = (uint8_t)(key >> 24);
 801442e:	0e13      	lsrs	r3, r2, #24
 8014430:	7043      	strb	r3, [r0, #1]
    info->key[1] = (uint8_t)((key << 8) >> 24);
 8014432:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8014436:	7083      	strb	r3, [r0, #2]
    info->key[2] = (uint8_t)((key << 16) >> 24);
 8014438:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801443c:	70c3      	strb	r3, [r0, #3]
    info->last_request_id = RESERVED_REQUESTS_ID;
 801443e:	2309      	movs	r3, #9
 8014440:	80c3      	strh	r3, [r0, #6]
    info->last_requested_status = UXR_STATUS_NONE;
 8014442:	23ff      	movs	r3, #255	; 0xff
    info->id = id;
 8014444:	7001      	strb	r1, [r0, #0]
    info->key[3] = (uint8_t)((key << 24) >> 24);
 8014446:	7102      	strb	r2, [r0, #4]
    info->last_requested_status = UXR_STATUS_NONE;
 8014448:	7143      	strb	r3, [r0, #5]
}
 801444a:	4770      	bx	lr

0801444c <uxr_read_create_session_status>:

void uxr_read_create_session_status(uxrSessionInfo* info, ucdrBuffer* ub)
{
 801444c:	b510      	push	{r4, lr}
 801444e:	b088      	sub	sp, #32
 8014450:	4604      	mov	r4, r0
 8014452:	4608      	mov	r0, r1
    STATUS_AGENT_Payload payload;
    (void) uxr_deserialize_STATUS_AGENT_Payload(ub, &payload);
 8014454:	a901      	add	r1, sp, #4
 8014456:	f000 fce8 	bl	8014e2a <uxr_deserialize_STATUS_AGENT_Payload>
    info->last_requested_status = payload.result.status;
 801445a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801445e:	7163      	strb	r3, [r4, #5]
}
 8014460:	b008      	add	sp, #32
 8014462:	bd10      	pop	{r4, pc}

08014464 <uxr_stamp_create_session_header>:
        process_delete_session_status(info, payload.base.result.status, request_id);
    }
}

void uxr_stamp_create_session_header(const uxrSessionInfo* info, uint8_t* buffer)
{
 8014464:	b510      	push	{r4, lr}
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 8014466:	2208      	movs	r2, #8
{
 8014468:	b08a      	sub	sp, #40	; 0x28
 801446a:	4604      	mov	r4, r0
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 801446c:	eb0d 0002 	add.w	r0, sp, r2
 8014470:	f7ff facd 	bl	8013a0e <ucdr_init_buffer>

    uxr_serialize_message_header(&ub, info->id & SESSION_ID_WITHOUT_CLIENT_KEY, 0, 0, info->key);
 8014474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014478:	9400      	str	r4, [sp, #0]
 801447a:	2300      	movs	r3, #0
 801447c:	461a      	mov	r2, r3
 801447e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014482:	a802      	add	r0, sp, #8
 8014484:	f000 fa20 	bl	80148c8 <uxr_serialize_message_header>
}
 8014488:	b00a      	add	sp, #40	; 0x28
 801448a:	bd10      	pop	{r4, pc}

0801448c <uxr_stamp_session_header>:

void uxr_stamp_session_header(const uxrSessionInfo* info, uint8_t stream_id_raw, uxrSeqNum seq_num, uint8_t* buffer)
{
 801448c:	b570      	push	{r4, r5, r6, lr}
 801448e:	4604      	mov	r4, r0
 8014490:	b08a      	sub	sp, #40	; 0x28
 8014492:	4616      	mov	r6, r2
    ucdrBuffer ub;
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 8014494:	2208      	movs	r2, #8
 8014496:	eb0d 0002 	add.w	r0, sp, r2
{
 801449a:	460d      	mov	r5, r1
    ucdr_init_buffer(&ub, buffer, MAX_HEADER_SIZE);
 801449c:	4619      	mov	r1, r3
 801449e:	f7ff fab6 	bl	8013a0e <ucdr_init_buffer>

    uxr_serialize_message_header(&ub, info->id, stream_id_raw, seq_num, info->key);
 80144a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a6:	9400      	str	r4, [sp, #0]
 80144a8:	4633      	mov	r3, r6
 80144aa:	462a      	mov	r2, r5
 80144ac:	a802      	add	r0, sp, #8
 80144ae:	f000 fa0b 	bl	80148c8 <uxr_serialize_message_header>
}
 80144b2:	b00a      	add	sp, #40	; 0x28
 80144b4:	bd70      	pop	{r4, r5, r6, pc}

080144b6 <uxr_read_session_header>:

bool uxr_read_session_header(const uxrSessionInfo* info, ucdrBuffer* ub, uint8_t* stream_id_raw, uxrSeqNum* seq_num)
{
 80144b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80144ba:	4604      	mov	r4, r0
    bool must_be_read = ucdr_buffer_remaining(ub) > MAX_HEADER_SIZE;
 80144bc:	4608      	mov	r0, r1
{
 80144be:	460d      	mov	r5, r1
 80144c0:	4616      	mov	r6, r2
 80144c2:	461f      	mov	r7, r3
    bool must_be_read = ucdr_buffer_remaining(ub) > MAX_HEADER_SIZE;
 80144c4:	f7ff fad4 	bl	8013a70 <ucdr_buffer_remaining>
    if(must_be_read)
 80144c8:	2808      	cmp	r0, #8
 80144ca:	d91e      	bls.n	801450a <uxr_read_session_header+0x54>
    {
        uint8_t session_id; uint8_t key[CLIENT_KEY_SIZE];
        uxr_deserialize_message_header(ub, &session_id, stream_id_raw, seq_num, key);
 80144cc:	f10d 080c 	add.w	r8, sp, #12
 80144d0:	463b      	mov	r3, r7
 80144d2:	4632      	mov	r2, r6
 80144d4:	f8cd 8000 	str.w	r8, [sp]
 80144d8:	f10d 010b 	add.w	r1, sp, #11
 80144dc:	4628      	mov	r0, r5
 80144de:	f000 fa11 	bl	8014904 <uxr_deserialize_message_header>

        must_be_read = session_id == info->id;
 80144e2:	7822      	ldrb	r2, [r4, #0]
        if(must_be_read)
 80144e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80144e8:	4293      	cmp	r3, r2
 80144ea:	d10e      	bne.n	801450a <uxr_read_session_header+0x54>
        {
            if (SESSION_ID_WITHOUT_CLIENT_KEY > info->id)
 80144ec:	061b      	lsls	r3, r3, #24
 80144ee:	d40a      	bmi.n	8014506 <uxr_read_session_header+0x50>
            {
                must_be_read = (0 == memcmp(key, info->key, CLIENT_KEY_SIZE));
 80144f0:	2204      	movs	r2, #4
 80144f2:	1c61      	adds	r1, r4, #1
 80144f4:	4640      	mov	r0, r8
 80144f6:	f003 f8b7 	bl	8017668 <memcmp>
 80144fa:	fab0 f080 	clz	r0, r0
 80144fe:	0940      	lsrs	r0, r0, #5
            }
        }
    }

    return must_be_read;
}
 8014500:	b004      	add	sp, #16
 8014502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        must_be_read = session_id == info->id;
 8014506:	2001      	movs	r0, #1
 8014508:	e7fa      	b.n	8014500 <uxr_read_session_header+0x4a>
    bool must_be_read = ucdr_buffer_remaining(ub) > MAX_HEADER_SIZE;
 801450a:	2000      	movs	r0, #0
 801450c:	e7f8      	b.n	8014500 <uxr_read_session_header+0x4a>

0801450e <uxr_session_header_offset>:

uint8_t uxr_session_header_offset(const uxrSessionInfo* info)
{
    return (SESSION_ID_WITHOUT_CLIENT_KEY > info->id) ? MAX_HEADER_SIZE : MIN_HEADER_SIZE;
 801450e:	f990 3000 	ldrsb.w	r3, [r0]
 8014512:	2b00      	cmp	r3, #0
}
 8014514:	bfac      	ite	ge
 8014516:	2008      	movge	r0, #8
 8014518:	2004      	movlt	r0, #4
 801451a:	4770      	bx	lr

0801451c <uxr_init_base_object_request>:

uint16_t uxr_init_base_object_request(uxrSessionInfo* info, uxrObjectId object_id, BaseObjectRequest* base)
{
 801451c:	b513      	push	{r0, r1, r4, lr}
 801451e:	9101      	str	r1, [sp, #4]
//==================================================================
//                            PRIVATE
//==================================================================
inline uint16_t generate_request_id(uxrSessionInfo* session)
{
    bool out_of_bounds = (UINT16_MAX == session->last_request_id || RESERVED_REQUESTS_ID >= session->last_request_id);
 8014520:	88c4      	ldrh	r4, [r0, #6]
 8014522:	f1a4 030a 	sub.w	r3, r4, #10
    session->last_request_id = (uint16_t)((out_of_bounds ? RESERVED_REQUESTS_ID : session->last_request_id) + 1);
 8014526:	b29b      	uxth	r3, r3
 8014528:	f64f 71f4 	movw	r1, #65524	; 0xfff4
 801452c:	428b      	cmp	r3, r1
 801452e:	bf9a      	itte	ls
 8014530:	3401      	addls	r4, #1
 8014532:	b2a4      	uxthls	r4, r4
 8014534:	240a      	movhi	r4, #10
    base->request_id.data[0] = (uint8_t) (request_id >> 8);
 8014536:	0a23      	lsrs	r3, r4, #8
    session->last_request_id = (uint16_t)((out_of_bounds ? RESERVED_REQUESTS_ID : session->last_request_id) + 1);
 8014538:	80c4      	strh	r4, [r0, #6]
    uxr_object_id_to_raw(object_id, base->object_id.data);
 801453a:	1c91      	adds	r1, r2, #2
 801453c:	9801      	ldr	r0, [sp, #4]
    base->request_id.data[0] = (uint8_t) (request_id >> 8);
 801453e:	7013      	strb	r3, [r2, #0]
    base->request_id.data[1] = (uint8_t) request_id;
 8014540:	7054      	strb	r4, [r2, #1]
    uxr_object_id_to_raw(object_id, base->object_id.data);
 8014542:	f7ff fbfd 	bl	8013d40 <uxr_object_id_to_raw>
}
 8014546:	4620      	mov	r0, r4
 8014548:	b002      	add	sp, #8
 801454a:	bd10      	pop	{r4, pc}

0801454c <uxr_parse_base_object_request>:
{
 801454c:	b570      	push	{r4, r5, r6, lr}
 801454e:	4604      	mov	r4, r0
    *object_id = uxr_object_id_from_raw(base->object_id.data);
 8014550:	3002      	adds	r0, #2
{
 8014552:	460d      	mov	r5, r1
 8014554:	4616      	mov	r6, r2
    *object_id = uxr_object_id_from_raw(base->object_id.data);
 8014556:	f7ff fbe0 	bl	8013d1a <uxr_object_id_from_raw>
 801455a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801455e:	8028      	strh	r0, [r5, #0]
 8014560:	806b      	strh	r3, [r5, #2]
    *request_id = (uint16_t)((((uint16_t) base->request_id.data[0]) << 8)
 8014562:	7822      	ldrb	r2, [r4, #0]
                            + base->request_id.data[1]);
 8014564:	7863      	ldrb	r3, [r4, #1]
 8014566:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    *request_id = (uint16_t)((((uint16_t) base->request_id.data[0]) << 8)
 801456a:	8033      	strh	r3, [r6, #0]
}
 801456c:	bd70      	pop	{r4, r5, r6, pc}

0801456e <uxr_read_delete_session_status>:
{
 801456e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014570:	4604      	mov	r4, r0
 8014572:	4608      	mov	r0, r1
    (void) uxr_deserialize_STATUS_Payload(ub, &payload);
 8014574:	a902      	add	r1, sp, #8
 8014576:	f000 fc65 	bl	8014e44 <uxr_deserialize_STATUS_Payload>
    if(UXR_REQUEST_LOGOUT == info->last_request_id)
 801457a:	88e3      	ldrh	r3, [r4, #6]
 801457c:	2b02      	cmp	r3, #2
 801457e:	d10c      	bne.n	801459a <uxr_read_delete_session_status+0x2c>
        uxr_parse_base_object_request(&payload.base.related_request, &object_id, &request_id);
 8014580:	f10d 0202 	add.w	r2, sp, #2
 8014584:	a901      	add	r1, sp, #4
 8014586:	a802      	add	r0, sp, #8
 8014588:	f7ff ffe0 	bl	801454c <uxr_parse_base_object_request>
    return session->last_request_id;
}

inline void process_delete_session_status(uxrSessionInfo* info, uint8_t status, uint16_t request_id)
{
    if(UXR_REQUEST_LOGOUT == request_id)
 801458c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014590:	2b02      	cmp	r3, #2
    {
        info->last_requested_status = status;
 8014592:	bf04      	itt	eq
 8014594:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014598:	7163      	strbeq	r3, [r4, #5]
}
 801459a:	b004      	add	sp, #16
 801459c:	bd10      	pop	{r4, pc}

0801459e <uxr_stream_id>:
    uxrStreamId stream_id;
    stream_id.direction = (uint8_t)direction;
    stream_id.index = index;
    stream_id.type = (uint8_t)type;

    switch(type)
 801459e:	2901      	cmp	r1, #1
{
 80145a0:	b513      	push	{r0, r1, r4, lr}
 80145a2:	4603      	mov	r3, r0
 80145a4:	f04f 0400 	mov.w	r4, #0
    switch(type)
 80145a8:	d004      	beq.n	80145b4 <uxr_stream_id+0x16>
 80145aa:	2902      	cmp	r1, #2
 80145ac:	d104      	bne.n	80145b8 <uxr_stream_id+0x1a>
            break;
        case UXR_BEST_EFFORT_STREAM:
            stream_id.raw = (uint8_t)(index + BEST_EFFORT_STREAM_THRESHOLD);
            break;
        case UXR_RELIABLE_STREAM:
            stream_id.raw = (uint8_t)(index + RELIABLE_STREAM_THRESHOLD);
 80145ae:	f080 0480 	eor.w	r4, r0, #128	; 0x80
            break;
 80145b2:	e001      	b.n	80145b8 <uxr_stream_id+0x1a>
            stream_id.raw = (uint8_t)(index + BEST_EFFORT_STREAM_THRESHOLD);
 80145b4:	1c44      	adds	r4, r0, #1
 80145b6:	b2e4      	uxtb	r4, r4
    }

    return stream_id;
 80145b8:	2000      	movs	r0, #0
 80145ba:	f364 0007 	bfi	r0, r4, #0, #8
 80145be:	f363 200f 	bfi	r0, r3, #8, #8
 80145c2:	f361 4017 	bfi	r0, r1, #16, #8
 80145c6:	f362 601f 	bfi	r0, r2, #24, #8
}
 80145ca:	b002      	add	sp, #8
 80145cc:	bd10      	pop	{r4, pc}

080145ce <uxr_stream_id_from_raw>:

uxrStreamId uxr_stream_id_from_raw(uint8_t stream_id_raw, uxrStreamDirection direction)
{
 80145ce:	b513      	push	{r0, r1, r4, lr}
    uxrStreamId stream_id;
    stream_id.raw = stream_id_raw;
    stream_id.direction = (uint8_t)direction;

    if(BEST_EFFORT_STREAM_THRESHOLD > stream_id_raw)
 80145d0:	4602      	mov	r2, r0
 80145d2:	b1a8      	cbz	r0, 8014600 <uxr_stream_id_from_raw+0x32>
    {
        stream_id.index = stream_id_raw;
        stream_id.type = UXR_NONE_STREAM;
    }
    else if(RELIABLE_STREAM_THRESHOLD > stream_id_raw)
 80145d4:	b243      	sxtb	r3, r0
 80145d6:	2b00      	cmp	r3, #0
    {
        stream_id.index = (uint8_t)(stream_id_raw - BEST_EFFORT_STREAM_THRESHOLD);
 80145d8:	bfa9      	itett	ge
 80145da:	f103 33ff 	addge.w	r3, r3, #4294967295	; 0xffffffff
        stream_id.type = UXR_BEST_EFFORT_STREAM;
    }
    else
    {
        stream_id.index = (uint8_t)(stream_id_raw - RELIABLE_STREAM_THRESHOLD);
 80145de:	3b80      	sublt	r3, #128	; 0x80
        stream_id.index = (uint8_t)(stream_id_raw - BEST_EFFORT_STREAM_THRESHOLD);
 80145e0:	b2db      	uxtbge	r3, r3
        stream_id.type = UXR_BEST_EFFORT_STREAM;
 80145e2:	2401      	movge	r4, #1
        stream_id.index = (uint8_t)(stream_id_raw - RELIABLE_STREAM_THRESHOLD);
 80145e4:	bfbc      	itt	lt
 80145e6:	b2db      	uxtblt	r3, r3
        stream_id.type = UXR_RELIABLE_STREAM;
 80145e8:	2402      	movlt	r4, #2
    }

    return stream_id;
 80145ea:	2000      	movs	r0, #0
 80145ec:	f362 0007 	bfi	r0, r2, #0, #8
 80145f0:	f363 200f 	bfi	r0, r3, #8, #8
 80145f4:	f364 4017 	bfi	r0, r4, #16, #8
 80145f8:	f361 601f 	bfi	r0, r1, #24, #8
}
 80145fc:	b002      	add	sp, #8
 80145fe:	bd10      	pop	{r4, pc}
        stream_id.type = UXR_NONE_STREAM;
 8014600:	4604      	mov	r4, r0
 8014602:	4603      	mov	r3, r0
 8014604:	e7f1      	b.n	80145ea <uxr_stream_id_from_raw+0x1c>

08014606 <uxr_init_stream_storage>:
//==================================================================
//                             PUBLIC
//==================================================================
void uxr_init_stream_storage(uxrStreamStorage* storage)
{
    storage->output_best_effort_size = 0;
 8014606:	2300      	movs	r3, #0
 8014608:	7403      	strb	r3, [r0, #16]
    storage->output_reliable_size = 0;
 801460a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    storage->input_best_effort_size = 0;
 801460e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    storage->input_reliable_size = 0;
 8014612:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8014616:	4770      	bx	lr

08014618 <uxr_reset_stream_storage>:

void uxr_reset_stream_storage(uxrStreamStorage* storage)
{
 8014618:	b570      	push	{r4, r5, r6, lr}
 801461a:	4604      	mov	r4, r0
    for(unsigned i = 0; i < storage->output_best_effort_size; ++i)
 801461c:	2500      	movs	r5, #0
 801461e:	7c23      	ldrb	r3, [r4, #16]
 8014620:	42ab      	cmp	r3, r5
 8014622:	d815      	bhi.n	8014650 <uxr_reset_stream_storage+0x38>
 8014624:	f104 0642 	add.w	r6, r4, #66	; 0x42
    {
        uxr_reset_output_best_effort_stream(&storage->output_best_effort[i]);
    }

    for(unsigned i = 0; i < storage->input_best_effort_size; ++i)
 8014628:	2500      	movs	r5, #0
 801462a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801462e:	42ab      	cmp	r3, r5
 8014630:	d814      	bhi.n	801465c <uxr_reset_stream_storage+0x44>
 8014632:	f104 0618 	add.w	r6, r4, #24
    {
        uxr_reset_input_best_effort_stream(&storage->input_best_effort[i]);
    }

    for(unsigned i = 0; i < storage->output_reliable_size; ++i)
 8014636:	2500      	movs	r5, #0
 8014638:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801463c:	42ab      	cmp	r3, r5
 801463e:	d813      	bhi.n	8014668 <uxr_reset_stream_storage+0x50>
 8014640:	f104 0648 	add.w	r6, r4, #72	; 0x48
    {
        uxr_reset_output_reliable_stream(&storage->output_reliable[i]);
    }

    for(unsigned i = 0; i < storage->input_reliable_size; ++i)
 8014644:	2500      	movs	r5, #0
 8014646:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801464a:	42ab      	cmp	r3, r5
 801464c:	d812      	bhi.n	8014674 <uxr_reset_stream_storage+0x5c>
    {
        uxr_reset_input_reliable_stream(&storage->input_reliable[i]);
    }
}
 801464e:	bd70      	pop	{r4, r5, r6, pc}
        uxr_reset_output_best_effort_stream(&storage->output_best_effort[i]);
 8014650:	eb04 1005 	add.w	r0, r4, r5, lsl #4
 8014654:	f002 f9d4 	bl	8016a00 <uxr_reset_output_best_effort_stream>
    for(unsigned i = 0; i < storage->output_best_effort_size; ++i)
 8014658:	3501      	adds	r5, #1
 801465a:	e7e0      	b.n	801461e <uxr_reset_stream_storage+0x6>
        uxr_reset_input_best_effort_stream(&storage->input_best_effort[i]);
 801465c:	4630      	mov	r0, r6
 801465e:	f002 f8ba 	bl	80167d6 <uxr_reset_input_best_effort_stream>
    for(unsigned i = 0; i < storage->input_best_effort_size; ++i)
 8014662:	3501      	adds	r5, #1
 8014664:	3602      	adds	r6, #2
 8014666:	e7e0      	b.n	801462a <uxr_reset_stream_storage+0x12>
        uxr_reset_output_reliable_stream(&storage->output_reliable[i]);
 8014668:	4630      	mov	r0, r6
 801466a:	f002 fa31 	bl	8016ad0 <uxr_reset_output_reliable_stream>
    for(unsigned i = 0; i < storage->output_reliable_size; ++i)
 801466e:	3501      	adds	r5, #1
 8014670:	3628      	adds	r6, #40	; 0x28
 8014672:	e7e1      	b.n	8014638 <uxr_reset_stream_storage+0x20>
        uxr_reset_input_reliable_stream(&storage->input_reliable[i]);
 8014674:	4630      	mov	r0, r6
 8014676:	f002 f904 	bl	8016882 <uxr_reset_input_reliable_stream>
    for(unsigned i = 0; i < storage->input_reliable_size; ++i)
 801467a:	3501      	adds	r5, #1
 801467c:	3618      	adds	r6, #24
 801467e:	e7e2      	b.n	8014646 <uxr_reset_stream_storage+0x2e>

08014680 <uxr_add_output_best_effort_buffer>:

uxrStreamId uxr_add_output_best_effort_buffer(uxrStreamStorage* storage, uint8_t* buffer, size_t size, uint8_t header_offset)
{
 8014680:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t index = storage->output_best_effort_size++;
 8014682:	7c04      	ldrb	r4, [r0, #16]
 8014684:	1c65      	adds	r5, r4, #1
 8014686:	7405      	strb	r5, [r0, #16]
    //TODO: assert for index
    uxrOutputBestEffortStream* stream = &storage->output_best_effort[index];
    uxr_init_output_best_effort_stream(stream, buffer, size, header_offset);
 8014688:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801468c:	f002 f9b0 	bl	80169f0 <uxr_init_output_best_effort_stream>
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 8014690:	2201      	movs	r2, #1
 8014692:	4611      	mov	r1, r2
 8014694:	4620      	mov	r0, r4
}
 8014696:	b003      	add	sp, #12
 8014698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_OUTPUT_STREAM);
 801469c:	f7ff bf7f 	b.w	801459e <uxr_stream_id>

080146a0 <uxr_add_output_reliable_buffer>:

uxrStreamId uxr_add_output_reliable_buffer(uxrStreamStorage* storage, uint8_t* buffer, size_t size, uint16_t history, uint8_t header_offset)
{
 80146a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t index = storage->output_reliable_size++;
 80146a2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
{
 80146a6:	f89d 6020 	ldrb.w	r6, [sp, #32]
    uint8_t index = storage->output_reliable_size++;
 80146aa:	1c65      	adds	r5, r4, #1
 80146ac:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    //TODO: assert for index
    uxrOutputReliableStream* stream = &storage->output_reliable[index];
 80146b0:	2528      	movs	r5, #40	; 0x28
 80146b2:	fb05 0004 	mla	r0, r5, r4, r0
    uxr_init_output_reliable_stream(stream, buffer, size, history, header_offset);
 80146b6:	9600      	str	r6, [sp, #0]
 80146b8:	3018      	adds	r0, #24
 80146ba:	f002 fa23 	bl	8016b04 <uxr_init_output_reliable_stream>
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 80146be:	2201      	movs	r2, #1
 80146c0:	2102      	movs	r1, #2
 80146c2:	4620      	mov	r0, r4
}
 80146c4:	b004      	add	sp, #16
 80146c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_OUTPUT_STREAM);
 80146ca:	f7ff bf68 	b.w	801459e <uxr_stream_id>

080146ce <uxr_add_input_best_effort_buffer>:

uxrStreamId uxr_add_input_best_effort_buffer(uxrStreamStorage* storage)
{
 80146ce:	b513      	push	{r0, r1, r4, lr}
    uint8_t index = storage->input_best_effort_size++;
 80146d0:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80146d4:	1c63      	adds	r3, r4, #1
 80146d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    //TODO: assert for index
    uxrInputBestEffortStream* stream = &storage->input_best_effort[index];
 80146da:	f104 0321 	add.w	r3, r4, #33	; 0x21
    uxr_init_input_best_effort_stream(stream);
 80146de:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80146e2:	f002 f874 	bl	80167ce <uxr_init_input_best_effort_stream>
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_INPUT_STREAM);
 80146e6:	2200      	movs	r2, #0
 80146e8:	2101      	movs	r1, #1
 80146ea:	4620      	mov	r0, r4
}
 80146ec:	b002      	add	sp, #8
 80146ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return uxr_stream_id(index, UXR_BEST_EFFORT_STREAM, UXR_INPUT_STREAM);
 80146f2:	f7ff bf54 	b.w	801459e <uxr_stream_id>

080146f6 <uxr_add_input_reliable_buffer>:

uxrStreamId uxr_add_input_reliable_buffer(uxrStreamStorage* storage, uint8_t* buffer, size_t size, uint16_t history, OnGetFragmentationInfo on_get_fragmentation_info)
{
 80146f6:	b530      	push	{r4, r5, lr}
    uint8_t index = storage->input_reliable_size++;
 80146f8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
{
 80146fc:	b085      	sub	sp, #20
    uint8_t index = storage->input_reliable_size++;
 80146fe:	1c65      	adds	r5, r4, #1
 8014700:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    //TODO: assert for index
    uxrInputReliableStream* stream = &storage->input_reliable[index];
 8014704:	2518      	movs	r5, #24
 8014706:	fb05 0004 	mla	r0, r5, r4, r0
    uxr_init_input_reliable_stream(stream, buffer, size, history, on_get_fragmentation_info);
 801470a:	9d08      	ldr	r5, [sp, #32]
 801470c:	9500      	str	r5, [sp, #0]
 801470e:	3048      	adds	r0, #72	; 0x48
 8014710:	f002 f8c8 	bl	80168a4 <uxr_init_input_reliable_stream>
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_INPUT_STREAM);
 8014714:	2200      	movs	r2, #0
 8014716:	2102      	movs	r1, #2
 8014718:	4620      	mov	r0, r4
}
 801471a:	b005      	add	sp, #20
 801471c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return uxr_stream_id(index, UXR_RELIABLE_STREAM, UXR_INPUT_STREAM);
 8014720:	f7ff bf3d 	b.w	801459e <uxr_stream_id>

08014724 <uxr_get_output_best_effort_stream>:

uxrOutputBestEffortStream* uxr_get_output_best_effort_stream(uxrStreamStorage* storage, uint8_t index)
{
    if(index < storage->output_best_effort_size)
 8014724:	7c03      	ldrb	r3, [r0, #16]
 8014726:	428b      	cmp	r3, r1
    {
        return &storage->output_best_effort[index];
 8014728:	bf8c      	ite	hi
 801472a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
    }
    return NULL;
 801472e:	2000      	movls	r0, #0
}
 8014730:	4770      	bx	lr

08014732 <uxr_get_output_reliable_stream>:

uxrOutputReliableStream* uxr_get_output_reliable_stream(uxrStreamStorage* storage, uint8_t index)
{
    if(index < storage->output_reliable_size)
 8014732:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014736:	428b      	cmp	r3, r1
    {
        return &storage->output_reliable[index];
 8014738:	bf83      	ittte	hi
 801473a:	2328      	movhi	r3, #40	; 0x28
 801473c:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014740:	3018      	addhi	r0, #24
    }
    return NULL;
 8014742:	2000      	movls	r0, #0
}
 8014744:	4770      	bx	lr

08014746 <uxr_get_input_best_effort_stream>:

uxrInputBestEffortStream* uxr_get_input_best_effort_stream(uxrStreamStorage* storage, uint8_t index)
{
    if(index < storage->input_best_effort_size)
 8014746:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801474a:	428b      	cmp	r3, r1
    {
        return &storage->input_best_effort[index];
 801474c:	bf86      	itte	hi
 801474e:	3121      	addhi	r1, #33	; 0x21
 8014750:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
    }
    return NULL;
 8014754:	2000      	movls	r0, #0
}
 8014756:	4770      	bx	lr

08014758 <uxr_get_input_reliable_stream>:

uxrInputReliableStream* uxr_get_input_reliable_stream(uxrStreamStorage* storage, uint8_t index)
{
    if(index < storage->input_reliable_size)
 8014758:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 801475c:	428b      	cmp	r3, r1
    {
        return &storage->input_reliable[index];
 801475e:	bf83      	ittte	hi
 8014760:	2318      	movhi	r3, #24
 8014762:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014766:	3048      	addhi	r0, #72	; 0x48
    }
    return NULL;
 8014768:	2000      	movls	r0, #0
}
 801476a:	4770      	bx	lr

0801476c <uxr_output_streams_confirmed>:

bool uxr_output_streams_confirmed(const uxrStreamStorage* storage)
{
 801476c:	b570      	push	{r4, r5, r6, lr}
 801476e:	4604      	mov	r4, r0
 8014770:	f100 0618 	add.w	r6, r0, #24
    bool up_to_date = true;
    for(unsigned i = 0; i < storage->output_reliable_size && up_to_date; ++i)
 8014774:	2500      	movs	r5, #0
    bool up_to_date = true;
 8014776:	2001      	movs	r0, #1
    for(unsigned i = 0; i < storage->output_reliable_size && up_to_date; ++i)
 8014778:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801477c:	42ab      	cmp	r3, r5
 801477e:	d900      	bls.n	8014782 <uxr_output_streams_confirmed+0x16>
 8014780:	b900      	cbnz	r0, 8014784 <uxr_output_streams_confirmed+0x18>
    {
        up_to_date = uxr_is_output_up_to_date(&storage->output_reliable[i]);
    }
    return up_to_date;
}
 8014782:	bd70      	pop	{r4, r5, r6, pc}
        up_to_date = uxr_is_output_up_to_date(&storage->output_reliable[i]);
 8014784:	4630      	mov	r0, r6
 8014786:	f002 fa9a 	bl	8016cbe <uxr_is_output_up_to_date>
    for(unsigned i = 0; i < storage->output_reliable_size && up_to_date; ++i)
 801478a:	3501      	adds	r5, #1
 801478c:	3628      	adds	r6, #40	; 0x28
 801478e:	e7f3      	b.n	8014778 <uxr_output_streams_confirmed+0xc>

08014790 <uxr_buffer_submessage_header>:

//==================================================================
//                             PUBLIC
//==================================================================
bool uxr_buffer_submessage_header(ucdrBuffer* ub, uint8_t submessage_id, uint16_t length, uint8_t flags)
{
 8014790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014792:	4604      	mov	r4, r0
 8014794:	460e      	mov	r6, r1
    ucdr_align_to(ub, 4);
 8014796:	2104      	movs	r1, #4
{
 8014798:	4615      	mov	r5, r2
 801479a:	461f      	mov	r7, r3
    ucdr_align_to(ub, 4);
 801479c:	f7ff f953 	bl	8013a46 <ucdr_align_to>
    ub->endianness = UCDR_MACHINE_ENDIANNESS;
 80147a0:	2301      	movs	r3, #1
 80147a2:	7523      	strb	r3, [r4, #20]
    flags = (uint8_t)(flags | ub->endianness);
    uxr_serialize_submessage_header(ub, submessage_id, flags, length);
 80147a4:	f047 0201 	orr.w	r2, r7, #1
 80147a8:	462b      	mov	r3, r5
 80147aa:	4631      	mov	r1, r6
 80147ac:	4620      	mov	r0, r4
 80147ae:	f000 f8c9 	bl	8014944 <uxr_serialize_submessage_header>

    return ucdr_buffer_remaining(ub) >= length;
 80147b2:	4620      	mov	r0, r4
 80147b4:	f7ff f95c 	bl	8013a70 <ucdr_buffer_remaining>
}
 80147b8:	42a8      	cmp	r0, r5
 80147ba:	bf34      	ite	cc
 80147bc:	2000      	movcc	r0, #0
 80147be:	2001      	movcs	r0, #1
 80147c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147c2 <uxr_read_submessage_header>:

bool uxr_read_submessage_header(ucdrBuffer* ub, uint8_t* submessage_id, uint16_t* length, uint8_t* flags)
{
 80147c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	460e      	mov	r6, r1
    ucdr_align_to(ub, 4);
 80147ca:	2104      	movs	r1, #4
{
 80147cc:	4617      	mov	r7, r2
 80147ce:	461d      	mov	r5, r3
    ucdr_align_to(ub, 4);
 80147d0:	f7ff f939 	bl	8013a46 <ucdr_align_to>
    bool ready_to_read = ucdr_buffer_remaining(ub) >= SUBHEADER_SIZE;
 80147d4:	4620      	mov	r0, r4
 80147d6:	f7ff f94b 	bl	8013a70 <ucdr_buffer_remaining>
 80147da:	2803      	cmp	r0, #3
 80147dc:	bf8c      	ite	hi
 80147de:	f04f 0801 	movhi.w	r8, #1
 80147e2:	f04f 0800 	movls.w	r8, #0
    if(ready_to_read)
 80147e6:	d90c      	bls.n	8014802 <uxr_read_submessage_header+0x40>
    {
        uxr_deserialize_submessage_header(ub, submessage_id, flags, length);
 80147e8:	463b      	mov	r3, r7
 80147ea:	462a      	mov	r2, r5
 80147ec:	4631      	mov	r1, r6
 80147ee:	4620      	mov	r0, r4
 80147f0:	f000 f8b9 	bl	8014966 <uxr_deserialize_submessage_header>

        uint8_t endiannes_flag = *flags & FLAG_ENDIANNESS;
 80147f4:	782b      	ldrb	r3, [r5, #0]
 80147f6:	f003 0201 	and.w	r2, r3, #1
        *flags = (uint8_t)(*flags & ~endiannes_flag);
 80147fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80147fe:	702b      	strb	r3, [r5, #0]
        ub->endianness = endiannes_flag ? UCDR_LITTLE_ENDIANNESS : UCDR_BIG_ENDIANNESS;
 8014800:	7522      	strb	r2, [r4, #20]
    }

    return ready_to_read;
}
 8014802:	4640      	mov	r0, r8
 8014804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014808 <uxr_submessage_padding>:

size_t uxr_submessage_padding(size_t length)
{
    return (length % SUBHEADER_SIZE != 0) ? SUBHEADER_SIZE - (length % SUBHEADER_SIZE) : 0;
 8014808:	f010 0003 	ands.w	r0, r0, #3
 801480c:	bf18      	it	ne
 801480e:	f1c0 0004 	rsbne	r0, r0, #4
}
 8014812:	4770      	bx	lr

08014814 <uxr_buffer_reply>:
    uxrStreamId stream_id,
    uxrObjectId replier_id,
    SampleIdentity* sample_id,
    uint8_t* buffer,
    size_t len)
{
 8014814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014816:	b08f      	sub	sp, #60	; 0x3c
 8014818:	461d      	mov	r5, r3
 801481a:	9e15      	ldr	r6, [sp, #84]	; 0x54
    uint16_t rv = UXR_INVALID_REQUEST_ID;
    ucdrBuffer ub;
    size_t payload_size = WRITE_DATA_PAYLOAD_SIZE + SAMPLE_IDENTITY_SIZE + len;

    ub.error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, &ub, SUBMESSAGE_ID_WRITE_DATA, FORMAT_DATA);
 801481c:	2307      	movs	r3, #7
 801481e:	2400      	movs	r4, #0
{
 8014820:	e9cd 2102 	strd	r2, r1, [sp, #8]
    ub.error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, &ub, SUBMESSAGE_ID_WRITE_DATA, FORMAT_DATA);
 8014824:	e9cd 3400 	strd	r3, r4, [sp]
 8014828:	f106 021c 	add.w	r2, r6, #28
 801482c:	ab06      	add	r3, sp, #24
{
 801482e:	4607      	mov	r7, r0
    ub.error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, &ub, SUBMESSAGE_ID_WRITE_DATA, FORMAT_DATA);
 8014830:	f7ff fdbf 	bl	80143b2 <uxr_prepare_stream_to_write_submessage>
 8014834:	f080 0201 	eor.w	r2, r0, #1
 8014838:	b2d2      	uxtb	r2, r2
 801483a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
    if (!ub.error)
 801483e:	b992      	cbnz	r2, 8014866 <uxr_buffer_reply+0x52>
    {
        WRITE_DATA_Payload_Data payload;
        rv = uxr_init_base_object_request(&session->info, replier_id, &payload.base);
 8014840:	aa05      	add	r2, sp, #20
 8014842:	9902      	ldr	r1, [sp, #8]
 8014844:	4638      	mov	r0, r7
 8014846:	f7ff fe69 	bl	801451c <uxr_init_base_object_request>
        uxr_serialize_WRITE_DATA_Payload_Data(&ub, &payload);
 801484a:	a905      	add	r1, sp, #20
        rv = uxr_init_base_object_request(&session->info, replier_id, &payload.base);
 801484c:	4604      	mov	r4, r0
        uxr_serialize_WRITE_DATA_Payload_Data(&ub, &payload);
 801484e:	a806      	add	r0, sp, #24
 8014850:	f000 fb07 	bl	8014e62 <uxr_serialize_WRITE_DATA_Payload_Data>
        uxr_serialize_SampleIdentity(&ub, sample_id);
 8014854:	4629      	mov	r1, r5
 8014856:	a806      	add	r0, sp, #24
 8014858:	f000 fbc0 	bl	8014fdc <uxr_serialize_SampleIdentity>
        ucdr_serialize_array_uint8_t(&ub, buffer, len);
 801485c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801485e:	4632      	mov	r2, r6
 8014860:	a806      	add	r0, sp, #24
 8014862:	f001 ff51 	bl	8016708 <ucdr_serialize_array_uint8_t>
    }

    return rv;
}
 8014866:	4620      	mov	r0, r4
 8014868:	b00f      	add	sp, #60	; 0x3c
 801486a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801486c <uxr_prepare_output_stream>:

bool uxr_prepare_output_stream(uxrSession* session, uxrStreamId stream_id, uxrObjectId datawriter_id,
                               ucdrBuffer* ub, uint32_t topic_size)
{
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	e9cd 2102 	strd	r2, r1, [sp, #8]
    size_t payload_size = WRITE_DATA_PAYLOAD_SIZE + topic_size;
    ub->error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, ub, SUBMESSAGE_ID_WRITE_DATA, FORMAT_DATA);
 8014874:	2600      	movs	r6, #0
 8014876:	2207      	movs	r2, #7
 8014878:	e9cd 2600 	strd	r2, r6, [sp]
 801487c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801487e:	3204      	adds	r2, #4
{
 8014880:	461c      	mov	r4, r3
 8014882:	4605      	mov	r5, r0
    ub->error = !uxr_prepare_stream_to_write_submessage(session, stream_id, payload_size, ub, SUBMESSAGE_ID_WRITE_DATA, FORMAT_DATA);
 8014884:	f7ff fd95 	bl	80143b2 <uxr_prepare_stream_to_write_submessage>
 8014888:	f080 0301 	eor.w	r3, r0, #1
 801488c:	b2db      	uxtb	r3, r3
 801488e:	75a3      	strb	r3, [r4, #22]
    if(!ub->error)
 8014890:	b9ab      	cbnz	r3, 80148be <uxr_prepare_output_stream+0x52>
    {
        WRITE_DATA_Payload_Data payload;
        uxr_init_base_object_request(&session->info, datawriter_id, &payload.base);
 8014892:	aa05      	add	r2, sp, #20
 8014894:	9902      	ldr	r1, [sp, #8]
 8014896:	4628      	mov	r0, r5
 8014898:	f7ff fe40 	bl	801451c <uxr_init_base_object_request>
        (void) uxr_serialize_WRITE_DATA_Payload_Data(ub, &payload);
 801489c:	a905      	add	r1, sp, #20
 801489e:	4620      	mov	r0, r4
 80148a0:	f000 fadf 	bl	8014e62 <uxr_serialize_WRITE_DATA_Payload_Data>

        OnFullBuffer on_full_buffer = ub->on_full_buffer;
        void* args = ub->args;
        ucdr_init_buffer(ub, ub->iterator, (size_t)(ub->final - ub->iterator));
 80148a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
        void* args = ub->args;
 80148a8:	e9d4 5606 	ldrd	r5, r6, [r4, #24]
        ucdr_init_buffer(ub, ub->iterator, (size_t)(ub->final - ub->iterator));
 80148ac:	1a52      	subs	r2, r2, r1
 80148ae:	4620      	mov	r0, r4
 80148b0:	f7ff f8ad 	bl	8013a0e <ucdr_init_buffer>
        ucdr_set_on_full_buffer_callback(ub, on_full_buffer, args);
 80148b4:	4632      	mov	r2, r6
 80148b6:	4629      	mov	r1, r5
 80148b8:	4620      	mov	r0, r4
 80148ba:	f7ff f882 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
    }

    return !ub->error;
 80148be:	7da0      	ldrb	r0, [r4, #22]
}
 80148c0:	f080 0001 	eor.w	r0, r0, #1
 80148c4:	b006      	add	sp, #24
 80148c6:	bd70      	pop	{r4, r5, r6, pc}

080148c8 <uxr_serialize_message_header>:

//==================================================================
//                             PUBLIC
//==================================================================
void uxr_serialize_message_header(ucdrBuffer* ub, uint8_t session_id, uint8_t stream_id, uint16_t seq_num, const uint8_t* key)
{
 80148c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148cc:	4617      	mov	r7, r2
 80148ce:	4604      	mov	r4, r0
 80148d0:	461e      	mov	r6, r3
 80148d2:	460d      	mov	r5, r1
 80148d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
    (void) ucdr_serialize_uint8_t(ub, session_id);
 80148d8:	f7fe fe54 	bl	8013584 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_uint8_t(ub, stream_id);
 80148dc:	4639      	mov	r1, r7
 80148de:	4620      	mov	r0, r4
 80148e0:	f7fe fe50 	bl	8013584 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, seq_num);
 80148e4:	4632      	mov	r2, r6
 80148e6:	2101      	movs	r1, #1
 80148e8:	4620      	mov	r0, r4
 80148ea:	f7fe fe8b 	bl	8013604 <ucdr_serialize_endian_uint16_t>
    if(SESSION_ID_WITHOUT_CLIENT_KEY > session_id)
 80148ee:	062b      	lsls	r3, r5, #24
 80148f0:	d406      	bmi.n	8014900 <uxr_serialize_message_header+0x38>
    {
        (void) ucdr_serialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 80148f2:	4641      	mov	r1, r8
 80148f4:	4620      	mov	r0, r4
 80148f6:	2204      	movs	r2, #4
    }
}
 80148f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void) ucdr_serialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 80148fc:	f001 bf04 	b.w	8016708 <ucdr_serialize_array_uint8_t>
}
 8014900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014904 <uxr_deserialize_message_header>:

void uxr_deserialize_message_header(ucdrBuffer* ub, uint8_t* session_id, uint8_t* stream_id, uint16_t* seq_num, uint8_t* key)
{
 8014904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014908:	4617      	mov	r7, r2
 801490a:	4604      	mov	r4, r0
 801490c:	461e      	mov	r6, r3
 801490e:	460d      	mov	r5, r1
 8014910:	f8dd 8018 	ldr.w	r8, [sp, #24]
    (void) ucdr_deserialize_uint8_t(ub, session_id);
 8014914:	f7fe fe38 	bl	8013588 <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_uint8_t(ub, stream_id);
 8014918:	4639      	mov	r1, r7
 801491a:	4620      	mov	r0, r4
 801491c:	f7fe fe34 	bl	8013588 <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, seq_num);
 8014920:	4632      	mov	r2, r6
 8014922:	2101      	movs	r1, #1
 8014924:	4620      	mov	r0, r4
 8014926:	f7fe febe 	bl	80136a6 <ucdr_deserialize_endian_uint16_t>
    if(SESSION_ID_WITHOUT_CLIENT_KEY > *session_id)
 801492a:	f995 3000 	ldrsb.w	r3, [r5]
 801492e:	2b00      	cmp	r3, #0
 8014930:	db06      	blt.n	8014940 <uxr_deserialize_message_header+0x3c>
    {
        (void) ucdr_deserialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 8014932:	4641      	mov	r1, r8
 8014934:	4620      	mov	r0, r4
 8014936:	2204      	movs	r2, #4
    }
}
 8014938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        (void) ucdr_deserialize_array_uint8_t(ub, key, CLIENT_KEY_SIZE);
 801493c:	f001 bef8 	b.w	8016730 <ucdr_deserialize_array_uint8_t>
}
 8014940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014944 <uxr_serialize_submessage_header>:

//==================================================================
//                             PUBLIC
//==================================================================
void uxr_serialize_submessage_header(ucdrBuffer* ub, uint8_t id, uint8_t flags, uint16_t length)
{
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	4616      	mov	r6, r2
 8014948:	4604      	mov	r4, r0
 801494a:	461d      	mov	r5, r3
    (void) ucdr_serialize_uint8_t(ub, id);
 801494c:	f7fe fe1a 	bl	8013584 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_uint8_t(ub, flags);
 8014950:	4631      	mov	r1, r6
 8014952:	4620      	mov	r0, r4
 8014954:	f7fe fe16 	bl	8013584 <ucdr_serialize_uint8_t>
    (void) ucdr_serialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 8014958:	462a      	mov	r2, r5
 801495a:	4620      	mov	r0, r4
 801495c:	2101      	movs	r1, #1
}
 801495e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void) ucdr_serialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 8014962:	f7fe be4f 	b.w	8013604 <ucdr_serialize_endian_uint16_t>

08014966 <uxr_deserialize_submessage_header>:

void uxr_deserialize_submessage_header(ucdrBuffer* ub, uint8_t* id, uint8_t* flags, uint16_t* length)
{
 8014966:	b570      	push	{r4, r5, r6, lr}
 8014968:	4616      	mov	r6, r2
 801496a:	4604      	mov	r4, r0
 801496c:	461d      	mov	r5, r3
    (void) ucdr_deserialize_uint8_t(ub, id);
 801496e:	f7fe fe0b 	bl	8013588 <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_uint8_t(ub, flags);
 8014972:	4631      	mov	r1, r6
 8014974:	4620      	mov	r0, r4
 8014976:	f7fe fe07 	bl	8013588 <ucdr_deserialize_uint8_t>
    (void) ucdr_deserialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 801497a:	462a      	mov	r2, r5
 801497c:	4620      	mov	r0, r4
 801497e:	2101      	movs	r1, #1
}
 8014980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void) ucdr_deserialize_endian_uint16_t(ub, UCDR_LITTLE_ENDIANNESS, length);
 8014984:	f7fe be8f 	b.w	80136a6 <ucdr_deserialize_endian_uint16_t>

08014988 <uxr_deserialize_Time_t>:
    ret &= ucdr_serialize_uint32_t(buffer, input->nanoseconds);
    return ret;
}

bool uxr_deserialize_Time_t(ucdrBuffer* buffer, Time_t* output)
{
 8014988:	b570      	push	{r4, r5, r6, lr}
 801498a:	4605      	mov	r5, r0
 801498c:	460e      	mov	r6, r1
    bool ret = true;
    ret &= ucdr_deserialize_int32_t(buffer, &output->seconds);
 801498e:	f7fe ffc9 	bl	8013924 <ucdr_deserialize_int32_t>
    ret &= ucdr_deserialize_uint32_t(buffer, &output->nanoseconds);
 8014992:	1d31      	adds	r1, r6, #4
    ret &= ucdr_deserialize_int32_t(buffer, &output->seconds);
 8014994:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_uint32_t(buffer, &output->nanoseconds);
 8014996:	4628      	mov	r0, r5
 8014998:	f7fe ff0e 	bl	80137b8 <ucdr_deserialize_uint32_t>
    return ret;
 801499c:	4020      	ands	r0, r4
}
 801499e:	b2c0      	uxtb	r0, r0
 80149a0:	bd70      	pop	{r4, r5, r6, pc}

080149a2 <uxr_serialize_BinarySequence_t>:

bool uxr_serialize_BinarySequence_t(ucdrBuffer* buffer, const BinarySequence_t* input)
{
    return ucdr_serialize_sequence_uint8_t(buffer, input->data, input->size);
 80149a2:	f851 2b04 	ldr.w	r2, [r1], #4
 80149a6:	f001 beff 	b.w	80167a8 <ucdr_serialize_sequence_uint8_t>

080149aa <uxr_serialize_ClientKey>:
}

bool uxr_serialize_ClientKey(ucdrBuffer* buffer, const ClientKey* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 4);
 80149aa:	2204      	movs	r2, #4
 80149ac:	f001 beac 	b.w	8016708 <ucdr_serialize_array_uint8_t>

080149b0 <uxr_serialize_ObjectId>:
}

bool uxr_serialize_ObjectId(ucdrBuffer* buffer, const ObjectId* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 80149b0:	2202      	movs	r2, #2
 80149b2:	f001 bea9 	b.w	8016708 <ucdr_serialize_array_uint8_t>

080149b6 <uxr_deserialize_ObjectId>:
}

bool uxr_deserialize_ObjectId(ucdrBuffer* buffer, ObjectId* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 80149b6:	2202      	movs	r2, #2
 80149b8:	f001 beba 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

080149bc <uxr_serialize_XrceCookie>:
}

bool uxr_serialize_XrceCookie(ucdrBuffer* buffer, const XrceCookie* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 4);
 80149bc:	2204      	movs	r2, #4
 80149be:	f001 bea3 	b.w	8016708 <ucdr_serialize_array_uint8_t>

080149c2 <uxr_deserialize_XrceCookie>:
}

bool uxr_deserialize_XrceCookie(ucdrBuffer* buffer, XrceCookie* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 4);
 80149c2:	2204      	movs	r2, #4
 80149c4:	f001 beb4 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

080149c8 <uxr_serialize_XrceVersion>:
}

bool uxr_serialize_XrceVersion(ucdrBuffer* buffer, const XrceVersion* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 80149c8:	2202      	movs	r2, #2
 80149ca:	f001 be9d 	b.w	8016708 <ucdr_serialize_array_uint8_t>

080149ce <uxr_deserialize_XrceVersion>:
}

bool uxr_deserialize_XrceVersion(ucdrBuffer* buffer, XrceVersion* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 80149ce:	2202      	movs	r2, #2
 80149d0:	f001 beae 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

080149d4 <uxr_serialize_XrceVendorId>:
}

bool uxr_serialize_XrceVendorId(ucdrBuffer* buffer, const XrceVendorId* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 80149d4:	2202      	movs	r2, #2
 80149d6:	f001 be97 	b.w	8016708 <ucdr_serialize_array_uint8_t>

080149da <uxr_deserialize_XrceVendorId>:
}

bool uxr_deserialize_XrceVendorId(ucdrBuffer* buffer, XrceVendorId* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 80149da:	2202      	movs	r2, #2
 80149dc:	f001 bea8 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

080149e0 <uxr_serialize_Property>:
    }
    return ret;
}

bool uxr_serialize_Property(ucdrBuffer* buffer, const Property* input)
{
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	460d      	mov	r5, r1
    bool ret = true;
    ret &= ucdr_serialize_string(buffer, input->name);
 80149e4:	6809      	ldr	r1, [r1, #0]
{
 80149e6:	4606      	mov	r6, r0
    ret &= ucdr_serialize_string(buffer, input->name);
 80149e8:	f7ff f884 	bl	8013af4 <ucdr_serialize_string>
    ret &= ucdr_serialize_string(buffer, input->value);
 80149ec:	6869      	ldr	r1, [r5, #4]
    ret &= ucdr_serialize_string(buffer, input->name);
 80149ee:	4604      	mov	r4, r0
    ret &= ucdr_serialize_string(buffer, input->value);
 80149f0:	4630      	mov	r0, r6
 80149f2:	f7ff f87f 	bl	8013af4 <ucdr_serialize_string>
    return ret;
 80149f6:	4020      	ands	r0, r4
}
 80149f8:	b2c0      	uxtb	r0, r0
 80149fa:	bd70      	pop	{r4, r5, r6, pc}

080149fc <uxr_serialize_PropertySeq>:
    ret &= ucdr_deserialize_string(buffer, output->value, UXR_STRING_SIZE_MAX);
    return ret;
}

bool uxr_serialize_PropertySeq(ucdrBuffer* buffer, const PropertySeq* input)
{
 80149fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool ret = ucdr_serialize_uint32_t(buffer, input->size);
 80149fe:	460c      	mov	r4, r1
{
 8014a00:	460d      	mov	r5, r1
    bool ret = ucdr_serialize_uint32_t(buffer, input->size);
 8014a02:	f854 1b04 	ldr.w	r1, [r4], #4
{
 8014a06:	4607      	mov	r7, r0
    bool ret = ucdr_serialize_uint32_t(buffer, input->size);
 8014a08:	f7fe fe76 	bl	80136f8 <ucdr_serialize_uint32_t>
    for(uint32_t i = 0; i < input->size && ret; i++)
 8014a0c:	2600      	movs	r6, #0
 8014a0e:	682b      	ldr	r3, [r5, #0]
 8014a10:	42b3      	cmp	r3, r6
 8014a12:	d900      	bls.n	8014a16 <uxr_serialize_PropertySeq+0x1a>
 8014a14:	b900      	cbnz	r0, 8014a18 <uxr_serialize_PropertySeq+0x1c>
    {
        ret = uxr_serialize_Property(buffer, input->data + i);
    }
    return ret;
}
 8014a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = uxr_serialize_Property(buffer, input->data + i);
 8014a18:	4621      	mov	r1, r4
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f7ff ffe0 	bl	80149e0 <uxr_serialize_Property>
    for(uint32_t i = 0; i < input->size && ret; i++)
 8014a20:	3601      	adds	r6, #1
 8014a22:	3408      	adds	r4, #8
 8014a24:	e7f3      	b.n	8014a0e <uxr_serialize_PropertySeq+0x12>

08014a26 <uxr_serialize_CLIENT_Representation>:
    }
    return ret;
}

bool uxr_serialize_CLIENT_Representation(ucdrBuffer* buffer, const CLIENT_Representation* input)
{
 8014a26:	b570      	push	{r4, r5, r6, lr}
 8014a28:	460d      	mov	r5, r1
 8014a2a:	4606      	mov	r6, r0
    bool ret = true;
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 8014a2c:	f7ff ffc6 	bl	80149bc <uxr_serialize_XrceCookie>
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 8014a30:	1d29      	adds	r1, r5, #4
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 8014a32:	4604      	mov	r4, r0
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 8014a34:	4630      	mov	r0, r6
 8014a36:	f7ff ffc7 	bl	80149c8 <uxr_serialize_XrceVersion>
    ret &= uxr_serialize_XrceVendorId(buffer, &input->xrce_vendor_id);
 8014a3a:	1da9      	adds	r1, r5, #6
 8014a3c:	4004      	ands	r4, r0
 8014a3e:	4630      	mov	r0, r6
 8014a40:	f7ff ffc8 	bl	80149d4 <uxr_serialize_XrceVendorId>
 8014a44:	b2e4      	uxtb	r4, r4
 8014a46:	4004      	ands	r4, r0
    ret &= uxr_serialize_ClientKey(buffer, &input->client_key);
 8014a48:	f105 0108 	add.w	r1, r5, #8
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f7ff ffac 	bl	80149aa <uxr_serialize_ClientKey>
    ret &= ucdr_serialize_uint8_t(buffer, input->session_id);
 8014a52:	7b29      	ldrb	r1, [r5, #12]
 8014a54:	4004      	ands	r4, r0
 8014a56:	4630      	mov	r0, r6
 8014a58:	f7fe fd94 	bl	8013584 <ucdr_serialize_uint8_t>
    ret &= ucdr_serialize_bool(buffer, input->optional_properties);
 8014a5c:	7b69      	ldrb	r1, [r5, #13]
 8014a5e:	4004      	ands	r4, r0
 8014a60:	4630      	mov	r0, r6
 8014a62:	f7fe fd62 	bl	801352a <ucdr_serialize_bool>
    if(input->optional_properties == true)
 8014a66:	7b6b      	ldrb	r3, [r5, #13]
 8014a68:	4004      	ands	r4, r0
 8014a6a:	b12b      	cbz	r3, 8014a78 <uxr_serialize_CLIENT_Representation+0x52>
    {
        ret &= uxr_serialize_PropertySeq(buffer, &input->properties);
 8014a6c:	f105 0110 	add.w	r1, r5, #16
 8014a70:	4630      	mov	r0, r6
 8014a72:	f7ff ffc3 	bl	80149fc <uxr_serialize_PropertySeq>
 8014a76:	4004      	ands	r4, r0
    }
    ret &= ucdr_serialize_uint16_t(buffer, input->mtu);
 8014a78:	8ba9      	ldrh	r1, [r5, #28]
 8014a7a:	4630      	mov	r0, r6
 8014a7c:	f7fe fd9a 	bl	80135b4 <ucdr_serialize_uint16_t>

    return ret;
}
 8014a80:	4020      	ands	r0, r4
 8014a82:	bd70      	pop	{r4, r5, r6, pc}

08014a84 <uxr_serialize_AGENT_Representation>:

    return ret;
}

bool uxr_serialize_AGENT_Representation(ucdrBuffer* buffer, const AGENT_Representation* input)
{
 8014a84:	b570      	push	{r4, r5, r6, lr}
 8014a86:	460d      	mov	r5, r1
 8014a88:	4606      	mov	r6, r0
    bool ret = true;
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 8014a8a:	f7ff ff97 	bl	80149bc <uxr_serialize_XrceCookie>
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 8014a8e:	1d29      	adds	r1, r5, #4
    ret &= uxr_serialize_XrceCookie(buffer, &input->xrce_cookie);
 8014a90:	4604      	mov	r4, r0
    ret &= uxr_serialize_XrceVersion(buffer, &input->xrce_version);
 8014a92:	4630      	mov	r0, r6
 8014a94:	f7ff ff98 	bl	80149c8 <uxr_serialize_XrceVersion>
    ret &= uxr_serialize_XrceVendorId(buffer, &input->xrce_vendor_id);
 8014a98:	1da9      	adds	r1, r5, #6
 8014a9a:	4004      	ands	r4, r0
 8014a9c:	4630      	mov	r0, r6
 8014a9e:	f7ff ff99 	bl	80149d4 <uxr_serialize_XrceVendorId>
 8014aa2:	b2e4      	uxtb	r4, r4
 8014aa4:	4004      	ands	r4, r0
    ret &= ucdr_serialize_bool(buffer, input->optional_properties);
 8014aa6:	7a29      	ldrb	r1, [r5, #8]
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f7fe fd3e 	bl	801352a <ucdr_serialize_bool>
    if(input->optional_properties == true)
 8014aae:	7a2b      	ldrb	r3, [r5, #8]
 8014ab0:	4004      	ands	r4, r0
 8014ab2:	b12b      	cbz	r3, 8014ac0 <uxr_serialize_AGENT_Representation+0x3c>
    {
        ret &= uxr_serialize_PropertySeq(buffer, &input->properties);
 8014ab4:	f105 010c 	add.w	r1, r5, #12
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f7ff ff9f 	bl	80149fc <uxr_serialize_PropertySeq>
 8014abe:	4004      	ands	r4, r0
    }

    return ret;
}
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}

08014ac4 <uxr_deserialize_AGENT_Representation>:

bool uxr_deserialize_AGENT_Representation(ucdrBuffer* buffer, AGENT_Representation* output)
{
 8014ac4:	b570      	push	{r4, r5, r6, lr}
 8014ac6:	4605      	mov	r5, r0
 8014ac8:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_XrceCookie(buffer, &output->xrce_cookie);
 8014aca:	f7ff ff7a 	bl	80149c2 <uxr_deserialize_XrceCookie>
    ret &= uxr_deserialize_XrceVersion(buffer, &output->xrce_version);
 8014ace:	1d31      	adds	r1, r6, #4
    ret &= uxr_deserialize_XrceCookie(buffer, &output->xrce_cookie);
 8014ad0:	4604      	mov	r4, r0
    ret &= uxr_deserialize_XrceVersion(buffer, &output->xrce_version);
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	f7ff ff7b 	bl	80149ce <uxr_deserialize_XrceVersion>
    ret &= uxr_deserialize_XrceVendorId(buffer, &output->xrce_vendor_id);
 8014ad8:	1db1      	adds	r1, r6, #6
 8014ada:	4004      	ands	r4, r0
 8014adc:	4628      	mov	r0, r5
 8014ade:	f7ff ff7c 	bl	80149da <uxr_deserialize_XrceVendorId>
 8014ae2:	b2e4      	uxtb	r4, r4
 8014ae4:	4004      	ands	r4, r0
    ret &= ucdr_deserialize_bool(buffer, &output->optional_properties);
 8014ae6:	f106 0108 	add.w	r1, r6, #8
 8014aea:	4628      	mov	r0, r5
 8014aec:	f7fe fd32 	bl	8013554 <ucdr_deserialize_bool>
    //{
    //        ret &= uxr_deserialize_PropertySeq(buffer, &output->properties);
    //}

    return ret;
}
 8014af0:	4020      	ands	r0, r4
 8014af2:	bd70      	pop	{r4, r5, r6, pc}

08014af4 <uxr_serialize_OBJK_Representation3Formats>:

bool uxr_serialize_OBJK_Representation3Formats(ucdrBuffer* buffer, const OBJK_Representation3Formats* input)
{
 8014af4:	b538      	push	{r3, r4, r5, lr}
 8014af6:	460c      	mov	r4, r1
    bool ret = true;
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014af8:	7809      	ldrb	r1, [r1, #0]
{
 8014afa:	4605      	mov	r5, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014afc:	f7fe fd42 	bl	8013584 <ucdr_serialize_uint8_t>
    if (ret)
 8014b00:	b190      	cbz	r0, 8014b28 <uxr_serialize_OBJK_Representation3Formats+0x34>
    {
        switch(input->format)
 8014b02:	7823      	ldrb	r3, [r4, #0]
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	d003      	beq.n	8014b10 <uxr_serialize_OBJK_Representation3Formats+0x1c>
 8014b08:	2b03      	cmp	r3, #3
 8014b0a:	d007      	beq.n	8014b1c <uxr_serialize_OBJK_Representation3Formats+0x28>
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d10b      	bne.n	8014b28 <uxr_serialize_OBJK_Representation3Formats+0x34>
        {
            case DDS_XRCE_REPRESENTATION_BY_REFERENCE:
                ret &= ucdr_serialize_string(buffer, input->_.object_reference);
                break;
            case DDS_XRCE_REPRESENTATION_AS_XML_STRING:
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 8014b10:	6861      	ldr	r1, [r4, #4]
 8014b12:	4628      	mov	r0, r5
            default:
                break;
        }
    }
    return ret;
}
 8014b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 8014b18:	f7fe bfec 	b.w	8013af4 <ucdr_serialize_string>
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 8014b1c:	1d21      	adds	r1, r4, #4
 8014b1e:	4628      	mov	r0, r5
}
 8014b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 8014b24:	f7ff bf3d 	b.w	80149a2 <uxr_serialize_BinarySequence_t>
}
 8014b28:	bd38      	pop	{r3, r4, r5, pc}

08014b2a <uxr_serialize_OBJK_RepresentationRefAndXMLFormats>:
    }
    return ret;
}

bool uxr_serialize_OBJK_RepresentationRefAndXMLFormats(ucdrBuffer* buffer, const OBJK_RepresentationRefAndXMLFormats* input)
{
 8014b2a:	b538      	push	{r3, r4, r5, lr}
 8014b2c:	460c      	mov	r4, r1
    bool ret = true;
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014b2e:	7809      	ldrb	r1, [r1, #0]
{
 8014b30:	4605      	mov	r5, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014b32:	f7fe fd27 	bl	8013584 <ucdr_serialize_uint8_t>
    if (ret)
 8014b36:	b120      	cbz	r0, 8014b42 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x18>
    {
        switch(input->format)
 8014b38:	7823      	ldrb	r3, [r4, #0]
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d002      	beq.n	8014b44 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x1a>
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d000      	beq.n	8014b44 <uxr_serialize_OBJK_RepresentationRefAndXMLFormats+0x1a>
            default:
                break;
        }
    }
    return ret;
}
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 8014b44:	6861      	ldr	r1, [r4, #4]
 8014b46:	4628      	mov	r0, r5
}
 8014b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= ucdr_serialize_string(buffer, input->_.xml_string_represenatation);
 8014b4c:	f7fe bfd2 	b.w	8013af4 <ucdr_serialize_string>

08014b50 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats>:
    }
    return ret;
}

bool uxr_serialize_OBJK_RepresentationBinAndXMLFormats(ucdrBuffer* buffer, const OBJK_RepresentationBinAndXMLFormats* input)
{
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	460c      	mov	r4, r1
    bool ret = true;
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014b54:	7809      	ldrb	r1, [r1, #0]
{
 8014b56:	4605      	mov	r5, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->format);
 8014b58:	f7fe fd14 	bl	8013584 <ucdr_serialize_uint8_t>
    if (ret)
 8014b5c:	b180      	cbz	r0, 8014b80 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x30>
    {
        switch(input->format)
 8014b5e:	7823      	ldrb	r3, [r4, #0]
 8014b60:	2b02      	cmp	r3, #2
 8014b62:	d007      	beq.n	8014b74 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x24>
 8014b64:	2b03      	cmp	r3, #3
 8014b66:	d10b      	bne.n	8014b80 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats+0x30>
        {
            case DDS_XRCE_REPRESENTATION_IN_BINARY:
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 8014b68:	1d21      	adds	r1, r4, #4
 8014b6a:	4628      	mov	r0, r5
            default:
                break;
        }
    }
    return ret;
}
 8014b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_BinarySequence_t(buffer, &input->_.binary_representation);
 8014b70:	f7ff bf17 	b.w	80149a2 <uxr_serialize_BinarySequence_t>
                ret &= ucdr_serialize_string(buffer, input->_.string_represenatation);
 8014b74:	6861      	ldr	r1, [r4, #4]
 8014b76:	4628      	mov	r0, r5
}
 8014b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= ucdr_serialize_string(buffer, input->_.string_represenatation);
 8014b7c:	f7fe bfba 	b.w	8013af4 <ucdr_serialize_string>
}
 8014b80:	bd38      	pop	{r3, r4, r5, pc}

08014b82 <uxr_serialize_OBJK_PUBLISHER_Representation>:
    ret &= uxr_deserialize_OBJK_RepresentationRefAndXML_Base(buffer, &output->base);
    return ret;
}

bool uxr_serialize_OBJK_PUBLISHER_Representation(ucdrBuffer* buffer, const OBJK_PUBLISHER_Representation* input)
{
 8014b82:	b570      	push	{r4, r5, r6, lr}
 8014b84:	4605      	mov	r5, r0
 8014b86:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_RepresentationBinAndXMLFormats(buffer, &input->representation);
 8014b88:	f7ff ffe2 	bl	8014b50 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_RepresentationBinAndXML_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014b8c:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_RepresentationBinAndXMLFormats(buffer, &input->representation);
 8014b90:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014b92:	4628      	mov	r0, r5
 8014b94:	f7ff ff0c 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014b98:	4020      	ands	r0, r4
}
 8014b9a:	b2c0      	uxtb	r0, r0
 8014b9c:	bd70      	pop	{r4, r5, r6, pc}

08014b9e <uxr_serialize_OBJK_SUBSCRIBER_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
    return ret;
}

bool uxr_serialize_OBJK_SUBSCRIBER_Representation(ucdrBuffer* buffer, const OBJK_SUBSCRIBER_Representation* input)
{
 8014b9e:	b570      	push	{r4, r5, r6, lr}
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_RepresentationBinAndXMLFormats(buffer, &input->representation);
 8014ba4:	f7ff ffd4 	bl	8014b50 <uxr_serialize_OBJK_RepresentationBinAndXMLFormats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_RepresentationBinAndXML_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014ba8:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_RepresentationBinAndXMLFormats(buffer, &input->representation);
 8014bac:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014bae:	4628      	mov	r0, r5
 8014bb0:	f7ff fefe 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014bb4:	4020      	ands	r0, r4
}
 8014bb6:	b2c0      	uxtb	r0, r0
 8014bb8:	bd70      	pop	{r4, r5, r6, pc}

08014bba <uxr_serialize_DATAWRITER_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
    return ret;
}

bool uxr_serialize_DATAWRITER_Representation(ucdrBuffer* buffer, const DATAWRITER_Representation* input)
{
 8014bba:	b570      	push	{r4, r5, r6, lr}
 8014bbc:	4605      	mov	r5, r0
 8014bbe:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014bc0:	f7ff ff98 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->publisher_id);
 8014bc4:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014bc8:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->publisher_id);
 8014bca:	4628      	mov	r0, r5
 8014bcc:	f7ff fef0 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014bd0:	4020      	ands	r0, r4
}
 8014bd2:	b2c0      	uxtb	r0, r0
 8014bd4:	bd70      	pop	{r4, r5, r6, pc}

08014bd6 <uxr_serialize_DATAREADER_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->publisher_id);
    return ret;
}

bool uxr_serialize_DATAREADER_Representation(ucdrBuffer* buffer, const DATAREADER_Representation* input)
{
 8014bd6:	b570      	push	{r4, r5, r6, lr}
 8014bd8:	4605      	mov	r5, r0
 8014bda:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014bdc:	f7ff ff8a 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->subscriber_id);
 8014be0:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014be4:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->subscriber_id);
 8014be6:	4628      	mov	r0, r5
 8014be8:	f7ff fee2 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014bec:	4020      	ands	r0, r4
}
 8014bee:	b2c0      	uxtb	r0, r0
 8014bf0:	bd70      	pop	{r4, r5, r6, pc}

08014bf2 <uxr_serialize_OBJK_PARTICIPANT_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->subscriber_id);
    return ret;
}

bool uxr_serialize_OBJK_PARTICIPANT_Representation(ucdrBuffer* buffer, const OBJK_PARTICIPANT_Representation* input)
{
 8014bf2:	b570      	push	{r4, r5, r6, lr}
 8014bf4:	4605      	mov	r5, r0
 8014bf6:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014bf8:	f7ff ff7c 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= ucdr_serialize_int16_t(buffer, input->domain_id);
 8014bfc:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c00:	4604      	mov	r4, r0
    ret &= ucdr_serialize_int16_t(buffer, input->domain_id);
 8014c02:	4628      	mov	r0, r5
 8014c04:	f7fe fe36 	bl	8013874 <ucdr_serialize_int16_t>
    return ret;
 8014c08:	4020      	ands	r0, r4
}
 8014c0a:	b2c0      	uxtb	r0, r0
 8014c0c:	bd70      	pop	{r4, r5, r6, pc}

08014c0e <uxr_serialize_OBJK_TOPIC_Representation>:
    ret &= ucdr_deserialize_int16_t(buffer, &output->domain_id);
    return ret;
}

bool uxr_serialize_OBJK_TOPIC_Representation(ucdrBuffer* buffer, const OBJK_TOPIC_Representation* input)
{
 8014c0e:	b570      	push	{r4, r5, r6, lr}
 8014c10:	4605      	mov	r5, r0
 8014c12:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c14:	f7ff ff6e 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c18:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c1c:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f7ff fec6 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014c24:	4020      	ands	r0, r4
}
 8014c26:	b2c0      	uxtb	r0, r0
 8014c28:	bd70      	pop	{r4, r5, r6, pc}

08014c2a <uxr_serialize_OBJK_REQUESTER_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
    return ret;
}

bool uxr_serialize_OBJK_REQUESTER_Representation(ucdrBuffer* buffer, const OBJK_REQUESTER_Representation* input)
{
 8014c2a:	b570      	push	{r4, r5, r6, lr}
 8014c2c:	4605      	mov	r5, r0
 8014c2e:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c30:	f7ff ff60 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c34:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c38:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f7ff feb8 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014c40:	4020      	ands	r0, r4
}
 8014c42:	b2c0      	uxtb	r0, r0
 8014c44:	bd70      	pop	{r4, r5, r6, pc}

08014c46 <uxr_serialize_OBJK_REPLIER_Representation>:
    ret &= uxr_deserialize_ObjectId(buffer, &output->participant_id);
    return ret;
}

bool uxr_serialize_OBJK_REPLIER_Representation(ucdrBuffer* buffer, const OBJK_REPLIER_Representation* input)
{
 8014c46:	b570      	push	{r4, r5, r6, lr}
 8014c48:	4605      	mov	r5, r0
 8014c4a:	460e      	mov	r6, r1
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c4c:	f7ff ff52 	bl	8014af4 <uxr_serialize_OBJK_Representation3Formats>
    bool ret = true;
    ret &= uxr_serialize_OBJK_Representation3_Base(buffer, &input->base);
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c50:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_OBJK_Representation3Formats(buffer, &input->representation);
 8014c54:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->participant_id);
 8014c56:	4628      	mov	r0, r5
 8014c58:	f7ff feaa 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014c5c:	4020      	ands	r0, r4
}
 8014c5e:	b2c0      	uxtb	r0, r0
 8014c60:	bd70      	pop	{r4, r5, r6, pc}

08014c62 <uxr_serialize_ObjectVariant>:

    return ret;
}

bool uxr_serialize_ObjectVariant(ucdrBuffer* buffer, const ObjectVariant* input)
{
 8014c62:	b538      	push	{r3, r4, r5, lr}
 8014c64:	460c      	mov	r4, r1
    bool ret = true;
    ret &= ucdr_serialize_uint8_t(buffer, input->kind);
 8014c66:	7809      	ldrb	r1, [r1, #0]
{
 8014c68:	4605      	mov	r5, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->kind);
 8014c6a:	f7fe fc8b 	bl	8013584 <ucdr_serialize_uint8_t>
    if (ret)
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	d04e      	beq.n	8014d10 <uxr_serialize_ObjectVariant+0xae>
    {
        switch(input->kind)
 8014c72:	7823      	ldrb	r3, [r4, #0]
 8014c74:	3b01      	subs	r3, #1
 8014c76:	2b0d      	cmp	r3, #13
 8014c78:	d84a      	bhi.n	8014d10 <uxr_serialize_ObjectVariant+0xae>
 8014c7a:	e8df f003 	tbb	[pc, r3]
 8014c7e:	1f19      	.short	0x1f19
 8014c80:	37312b25 	.word	0x37312b25
 8014c84:	1349433d 	.word	0x1349433d
 8014c88:	0d071313 	.word	0x0d071313
        {
            case DDS_XRCE_OBJK_AGENT:
                ret &= uxr_serialize_AGENT_Representation(buffer, &input->_.agent);
 8014c8c:	1d21      	adds	r1, r4, #4
 8014c8e:	4628      	mov	r0, r5
            default:
                break;
        }
    }
    return ret;
}
 8014c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_AGENT_Representation(buffer, &input->_.agent);
 8014c94:	f7ff bef6 	b.w	8014a84 <uxr_serialize_AGENT_Representation>
                ret &= uxr_serialize_CLIENT_Representation(buffer, &input->_.client);
 8014c98:	1d21      	adds	r1, r4, #4
 8014c9a:	4628      	mov	r0, r5
}
 8014c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_CLIENT_Representation(buffer, &input->_.client);
 8014ca0:	f7ff bec1 	b.w	8014a26 <uxr_serialize_CLIENT_Representation>
    ret &= uxr_serialize_OBJK_RepresentationRefAndXMLFormats(buffer, &input->representation);
 8014ca4:	1d21      	adds	r1, r4, #4
 8014ca6:	4628      	mov	r0, r5
}
 8014ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret &= uxr_serialize_OBJK_RepresentationRefAndXMLFormats(buffer, &input->representation);
 8014cac:	f7ff bf3d 	b.w	8014b2a <uxr_serialize_OBJK_RepresentationRefAndXMLFormats>
                ret &= uxr_serialize_OBJK_PARTICIPANT_Representation(buffer, &input->_.participant);
 8014cb0:	1d21      	adds	r1, r4, #4
 8014cb2:	4628      	mov	r0, r5
}
 8014cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_PARTICIPANT_Representation(buffer, &input->_.participant);
 8014cb8:	f7ff bf9b 	b.w	8014bf2 <uxr_serialize_OBJK_PARTICIPANT_Representation>
                ret &= uxr_serialize_OBJK_TOPIC_Representation(buffer, &input->_.topic);
 8014cbc:	1d21      	adds	r1, r4, #4
 8014cbe:	4628      	mov	r0, r5
}
 8014cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_TOPIC_Representation(buffer, &input->_.topic);
 8014cc4:	f7ff bfa3 	b.w	8014c0e <uxr_serialize_OBJK_TOPIC_Representation>
                ret &= uxr_serialize_OBJK_PUBLISHER_Representation(buffer, &input->_.publisher);
 8014cc8:	1d21      	adds	r1, r4, #4
 8014cca:	4628      	mov	r0, r5
}
 8014ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_PUBLISHER_Representation(buffer, &input->_.publisher);
 8014cd0:	f7ff bf57 	b.w	8014b82 <uxr_serialize_OBJK_PUBLISHER_Representation>
                ret &= uxr_serialize_OBJK_SUBSCRIBER_Representation(buffer, &input->_.subscriber);
 8014cd4:	1d21      	adds	r1, r4, #4
 8014cd6:	4628      	mov	r0, r5
}
 8014cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_SUBSCRIBER_Representation(buffer, &input->_.subscriber);
 8014cdc:	f7ff bf5f 	b.w	8014b9e <uxr_serialize_OBJK_SUBSCRIBER_Representation>
                ret &= uxr_serialize_DATAWRITER_Representation(buffer, &input->_.data_writer);
 8014ce0:	1d21      	adds	r1, r4, #4
 8014ce2:	4628      	mov	r0, r5
}
 8014ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_DATAWRITER_Representation(buffer, &input->_.data_writer);
 8014ce8:	f7ff bf67 	b.w	8014bba <uxr_serialize_DATAWRITER_Representation>
                ret &= uxr_serialize_DATAREADER_Representation(buffer, &input->_.data_reader);
 8014cec:	1d21      	adds	r1, r4, #4
 8014cee:	4628      	mov	r0, r5
}
 8014cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_DATAREADER_Representation(buffer, &input->_.data_reader);
 8014cf4:	f7ff bf6f 	b.w	8014bd6 <uxr_serialize_DATAREADER_Representation>
                ret &= uxr_serialize_OBJK_REQUESTER_Representation(buffer, &input->_.requester);
 8014cf8:	1d21      	adds	r1, r4, #4
 8014cfa:	4628      	mov	r0, r5
}
 8014cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_REQUESTER_Representation(buffer, &input->_.requester);
 8014d00:	f7ff bf93 	b.w	8014c2a <uxr_serialize_OBJK_REQUESTER_Representation>
                ret &= uxr_serialize_OBJK_REPLIER_Representation(buffer, &input->_.replier);
 8014d04:	1d21      	adds	r1, r4, #4
 8014d06:	4628      	mov	r0, r5
}
 8014d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                ret &= uxr_serialize_OBJK_REPLIER_Representation(buffer, &input->_.replier);
 8014d0c:	f7ff bf9b 	b.w	8014c46 <uxr_serialize_OBJK_REPLIER_Representation>
}
 8014d10:	bd38      	pop	{r3, r4, r5, pc}

08014d12 <uxr_serialize_RequestId>:
}

bool uxr_serialize_RequestId(ucdrBuffer* buffer, const RequestId* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, 2);
 8014d12:	2202      	movs	r2, #2
 8014d14:	f001 bcf8 	b.w	8016708 <ucdr_serialize_array_uint8_t>

08014d18 <uxr_deserialize_RequestId>:
}

bool uxr_deserialize_RequestId(ucdrBuffer* buffer, RequestId* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, 2);
 8014d18:	2202      	movs	r2, #2
 8014d1a:	f001 bd09 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

08014d1e <uxr_deserialize_ResultStatus>:
    ret &= ucdr_serialize_uint8_t(buffer, input->implementation_status);
    return ret;
}

bool uxr_deserialize_ResultStatus(ucdrBuffer* buffer, ResultStatus* output)
{
 8014d1e:	b570      	push	{r4, r5, r6, lr}
 8014d20:	4605      	mov	r5, r0
 8014d22:	460e      	mov	r6, r1
    bool ret = true;
    ret &= ucdr_deserialize_uint8_t(buffer, &output->status);
 8014d24:	f7fe fc30 	bl	8013588 <ucdr_deserialize_uint8_t>
    ret &= ucdr_deserialize_uint8_t(buffer, &output->implementation_status);
 8014d28:	1c71      	adds	r1, r6, #1
    ret &= ucdr_deserialize_uint8_t(buffer, &output->status);
 8014d2a:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_uint8_t(buffer, &output->implementation_status);
 8014d2c:	4628      	mov	r0, r5
 8014d2e:	f7fe fc2b 	bl	8013588 <ucdr_deserialize_uint8_t>
    return ret;
 8014d32:	4020      	ands	r0, r4
}
 8014d34:	b2c0      	uxtb	r0, r0
 8014d36:	bd70      	pop	{r4, r5, r6, pc}

08014d38 <uxr_serialize_BaseObjectRequest>:

bool uxr_serialize_BaseObjectRequest(ucdrBuffer* buffer, const BaseObjectRequest* input)
{
 8014d38:	b570      	push	{r4, r5, r6, lr}
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_serialize_RequestId(buffer, &input->request_id);
 8014d3e:	f7ff ffe8 	bl	8014d12 <uxr_serialize_RequestId>
    ret &= uxr_serialize_ObjectId(buffer, &input->object_id);
 8014d42:	1cb1      	adds	r1, r6, #2
    ret &= uxr_serialize_RequestId(buffer, &input->request_id);
 8014d44:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectId(buffer, &input->object_id);
 8014d46:	4628      	mov	r0, r5
 8014d48:	f7ff fe32 	bl	80149b0 <uxr_serialize_ObjectId>
    return ret;
 8014d4c:	4020      	ands	r0, r4
}
 8014d4e:	b2c0      	uxtb	r0, r0
 8014d50:	bd70      	pop	{r4, r5, r6, pc}

08014d52 <uxr_deserialize_BaseObjectRequest>:

bool uxr_deserialize_BaseObjectRequest(ucdrBuffer* buffer, BaseObjectRequest* output)
{
 8014d52:	b570      	push	{r4, r5, r6, lr}
 8014d54:	4605      	mov	r5, r0
 8014d56:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_RequestId(buffer, &output->request_id);
 8014d58:	f7ff ffde 	bl	8014d18 <uxr_deserialize_RequestId>
    ret &= uxr_deserialize_ObjectId(buffer, &output->object_id);
 8014d5c:	1cb1      	adds	r1, r6, #2
    ret &= uxr_deserialize_RequestId(buffer, &output->request_id);
 8014d5e:	4604      	mov	r4, r0
    ret &= uxr_deserialize_ObjectId(buffer, &output->object_id);
 8014d60:	4628      	mov	r0, r5
 8014d62:	f7ff fe28 	bl	80149b6 <uxr_deserialize_ObjectId>
    return ret;
 8014d66:	4020      	ands	r0, r4
}
 8014d68:	b2c0      	uxtb	r0, r0
 8014d6a:	bd70      	pop	{r4, r5, r6, pc}

08014d6c <uxr_deserialize_BaseObjectReply>:
    ret &= uxr_serialize_ResultStatus(buffer, &input->result);
    return ret;
}

bool uxr_deserialize_BaseObjectReply(ucdrBuffer* buffer, BaseObjectReply* output)
{
 8014d6c:	b570      	push	{r4, r5, r6, lr}
 8014d6e:	4605      	mov	r5, r0
 8014d70:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_BaseObjectRequest(buffer, &output->related_request);
 8014d72:	f7ff ffee 	bl	8014d52 <uxr_deserialize_BaseObjectRequest>
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 8014d76:	1d31      	adds	r1, r6, #4
    ret &= uxr_deserialize_BaseObjectRequest(buffer, &output->related_request);
 8014d78:	4604      	mov	r4, r0
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f7ff ffcf 	bl	8014d1e <uxr_deserialize_ResultStatus>
    return ret;
 8014d80:	4020      	ands	r0, r4
}
 8014d82:	b2c0      	uxtb	r0, r0
 8014d84:	bd70      	pop	{r4, r5, r6, pc}

08014d86 <uxr_serialize_DataDeliveryControl>:

bool uxr_serialize_DataDeliveryControl(ucdrBuffer* buffer, const DataDeliveryControl* input)
{
 8014d86:	b570      	push	{r4, r5, r6, lr}
 8014d88:	460d      	mov	r5, r1
    bool ret = true;
    ret &= ucdr_serialize_uint16_t(buffer, input->max_samples);
 8014d8a:	8809      	ldrh	r1, [r1, #0]
{
 8014d8c:	4606      	mov	r6, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->max_samples);
 8014d8e:	f7fe fc11 	bl	80135b4 <ucdr_serialize_uint16_t>
    ret &= ucdr_serialize_uint16_t(buffer, input->max_elapsed_time);
 8014d92:	8869      	ldrh	r1, [r5, #2]
    ret &= ucdr_serialize_uint16_t(buffer, input->max_samples);
 8014d94:	4604      	mov	r4, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->max_elapsed_time);
 8014d96:	4630      	mov	r0, r6
 8014d98:	f7fe fc0c 	bl	80135b4 <ucdr_serialize_uint16_t>
    ret &= ucdr_serialize_uint16_t(buffer, input->max_bytes_per_seconds);
 8014d9c:	88a9      	ldrh	r1, [r5, #4]
 8014d9e:	4004      	ands	r4, r0
 8014da0:	4630      	mov	r0, r6
 8014da2:	f7fe fc07 	bl	80135b4 <ucdr_serialize_uint16_t>
 8014da6:	b2e4      	uxtb	r4, r4
 8014da8:	4004      	ands	r4, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->min_pace_period);
 8014daa:	88e9      	ldrh	r1, [r5, #6]
 8014dac:	4630      	mov	r0, r6
 8014dae:	f7fe fc01 	bl	80135b4 <ucdr_serialize_uint16_t>
    return ret;
}
 8014db2:	4020      	ands	r0, r4
 8014db4:	bd70      	pop	{r4, r5, r6, pc}

08014db6 <uxr_serialize_ReadSpecification>:
    ret &= ucdr_deserialize_uint16_t(buffer, &output->min_pace_period);
    return ret;
}

bool uxr_serialize_ReadSpecification(ucdrBuffer* buffer, const ReadSpecification* input)
{
 8014db6:	b570      	push	{r4, r5, r6, lr}
 8014db8:	460d      	mov	r5, r1
    bool ret = true;
    ret &= ucdr_serialize_uint8_t(buffer, input->preferred_stream_id);
 8014dba:	7809      	ldrb	r1, [r1, #0]
{
 8014dbc:	4606      	mov	r6, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->preferred_stream_id);
 8014dbe:	f7fe fbe1 	bl	8013584 <ucdr_serialize_uint8_t>
    ret &= ucdr_serialize_uint8_t(buffer, input->data_format);
 8014dc2:	7869      	ldrb	r1, [r5, #1]
    ret &= ucdr_serialize_uint8_t(buffer, input->preferred_stream_id);
 8014dc4:	4604      	mov	r4, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->data_format);
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	f7fe fbdc 	bl	8013584 <ucdr_serialize_uint8_t>
    ret &= ucdr_serialize_bool(buffer, input->optional_content_filter_expression);
 8014dcc:	78a9      	ldrb	r1, [r5, #2]
 8014dce:	4004      	ands	r4, r0
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f7fe fbaa 	bl	801352a <ucdr_serialize_bool>
    if(input->optional_content_filter_expression == true)
 8014dd6:	78ab      	ldrb	r3, [r5, #2]
 8014dd8:	b2e4      	uxtb	r4, r4
    ret &= ucdr_serialize_bool(buffer, input->optional_content_filter_expression);
 8014dda:	4004      	ands	r4, r0
    if(input->optional_content_filter_expression == true)
 8014ddc:	b123      	cbz	r3, 8014de8 <uxr_serialize_ReadSpecification+0x32>
    {
        ret &= ucdr_serialize_string(buffer, input->content_filter_expression);
 8014dde:	6869      	ldr	r1, [r5, #4]
 8014de0:	4630      	mov	r0, r6
 8014de2:	f7fe fe87 	bl	8013af4 <ucdr_serialize_string>
 8014de6:	4004      	ands	r4, r0
    }

    ret &= ucdr_serialize_bool(buffer, input->optional_delivery_control);
 8014de8:	7a29      	ldrb	r1, [r5, #8]
 8014dea:	4630      	mov	r0, r6
 8014dec:	f7fe fb9d 	bl	801352a <ucdr_serialize_bool>
    if(input->optional_delivery_control == true)
 8014df0:	7a2b      	ldrb	r3, [r5, #8]
 8014df2:	4004      	ands	r4, r0
 8014df4:	b133      	cbz	r3, 8014e04 <uxr_serialize_ReadSpecification+0x4e>
    {
        ret &= uxr_serialize_DataDeliveryControl(buffer, &input->delivery_control);
 8014df6:	f105 010a 	add.w	r1, r5, #10
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	f7ff ffc3 	bl	8014d86 <uxr_serialize_DataDeliveryControl>
 8014e00:	4004      	ands	r4, r0
 8014e02:	b2e4      	uxtb	r4, r4
    }

    return ret;
}
 8014e04:	4620      	mov	r0, r4
 8014e06:	bd70      	pop	{r4, r5, r6, pc}

08014e08 <uxr_serialize_CREATE_CLIENT_Payload>:
}

bool uxr_serialize_CREATE_CLIENT_Payload(ucdrBuffer* buffer, const CREATE_CLIENT_Payload* input)
{
    bool ret = true;
    ret &= uxr_serialize_CLIENT_Representation(buffer, &input->client_representation);
 8014e08:	f7ff be0d 	b.w	8014a26 <uxr_serialize_CLIENT_Representation>

08014e0c <uxr_serialize_CREATE_Payload>:
    ret &= uxr_deserialize_CLIENT_Representation(buffer, &output->client_representation);
    return ret;
}

bool uxr_serialize_CREATE_Payload(ucdrBuffer* buffer, const CREATE_Payload* input)
{
 8014e0c:	b570      	push	{r4, r5, r6, lr}
 8014e0e:	4605      	mov	r5, r0
 8014e10:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e12:	f7ff ff91 	bl	8014d38 <uxr_serialize_BaseObjectRequest>
    ret &= uxr_serialize_ObjectVariant(buffer, &input->object_representation);
 8014e16:	1d31      	adds	r1, r6, #4
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e18:	4604      	mov	r4, r0
    ret &= uxr_serialize_ObjectVariant(buffer, &input->object_representation);
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f7ff ff21 	bl	8014c62 <uxr_serialize_ObjectVariant>
    return ret;
 8014e20:	4020      	ands	r0, r4
}
 8014e22:	b2c0      	uxtb	r0, r0
 8014e24:	bd70      	pop	{r4, r5, r6, pc}

08014e26 <uxr_serialize_DELETE_Payload>:
}

bool uxr_serialize_DELETE_Payload(ucdrBuffer* buffer, const DELETE_Payload* input)
{
    bool ret = true;
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e26:	f7ff bf87 	b.w	8014d38 <uxr_serialize_BaseObjectRequest>

08014e2a <uxr_deserialize_STATUS_AGENT_Payload>:
    ret &= uxr_serialize_AGENT_Representation(buffer, &input->agent_info);
    return ret;
}

bool uxr_deserialize_STATUS_AGENT_Payload(ucdrBuffer* buffer, STATUS_AGENT_Payload* output)
{
 8014e2a:	b570      	push	{r4, r5, r6, lr}
 8014e2c:	4605      	mov	r5, r0
 8014e2e:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 8014e30:	f7ff ff75 	bl	8014d1e <uxr_deserialize_ResultStatus>
    ret &= uxr_deserialize_AGENT_Representation(buffer, &output->agent_info);
 8014e34:	1d31      	adds	r1, r6, #4
    ret &= uxr_deserialize_ResultStatus(buffer, &output->result);
 8014e36:	4604      	mov	r4, r0
    ret &= uxr_deserialize_AGENT_Representation(buffer, &output->agent_info);
 8014e38:	4628      	mov	r0, r5
 8014e3a:	f7ff fe43 	bl	8014ac4 <uxr_deserialize_AGENT_Representation>
    return ret;
 8014e3e:	4020      	ands	r0, r4
}
 8014e40:	b2c0      	uxtb	r0, r0
 8014e42:	bd70      	pop	{r4, r5, r6, pc}

08014e44 <uxr_deserialize_STATUS_Payload>:
}

bool uxr_deserialize_STATUS_Payload(ucdrBuffer* buffer, STATUS_Payload* output)
{
    bool ret = true;
    ret &= uxr_deserialize_BaseObjectReply(buffer, &output->base);
 8014e44:	f7ff bf92 	b.w	8014d6c <uxr_deserialize_BaseObjectReply>

08014e48 <uxr_serialize_READ_DATA_Payload>:
    ret &= uxr_deserialize_ObjectInfo(buffer, &output->object_info);
    return ret;
}

bool uxr_serialize_READ_DATA_Payload(ucdrBuffer* buffer, const READ_DATA_Payload* input)
{
 8014e48:	b570      	push	{r4, r5, r6, lr}
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e4e:	f7ff ff73 	bl	8014d38 <uxr_serialize_BaseObjectRequest>
    ret &= uxr_serialize_ReadSpecification(buffer, &input->read_specification);
 8014e52:	1d31      	adds	r1, r6, #4
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e54:	4604      	mov	r4, r0
    ret &= uxr_serialize_ReadSpecification(buffer, &input->read_specification);
 8014e56:	4628      	mov	r0, r5
 8014e58:	f7ff ffad 	bl	8014db6 <uxr_serialize_ReadSpecification>
    return ret;
 8014e5c:	4020      	ands	r0, r4
}
 8014e5e:	b2c0      	uxtb	r0, r0
 8014e60:	bd70      	pop	{r4, r5, r6, pc}

08014e62 <uxr_serialize_WRITE_DATA_Payload_Data>:
}

bool uxr_serialize_WRITE_DATA_Payload_Data(ucdrBuffer* buffer, const WRITE_DATA_Payload_Data* input)
{
    bool ret = true;
    ret &= uxr_serialize_BaseObjectRequest(buffer, &input->base);
 8014e62:	f7ff bf69 	b.w	8014d38 <uxr_serialize_BaseObjectRequest>

08014e66 <uxr_serialize_ACKNACK_Payload>:
    ret &= uxr_deserialize_PackedSamples(buffer, &output->packed_samples);
    return ret;
}

bool uxr_serialize_ACKNACK_Payload(ucdrBuffer* buffer, const ACKNACK_Payload* input)
{
 8014e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool ret = true;
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_num);
 8014e68:	460f      	mov	r7, r1
{
 8014e6a:	460e      	mov	r6, r1
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_num);
 8014e6c:	f837 1b02 	ldrh.w	r1, [r7], #2
{
 8014e70:	4605      	mov	r5, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_num);
 8014e72:	f7fe fb9f 	bl	80135b4 <ucdr_serialize_uint16_t>
    ret &= ucdr_serialize_array_uint8_t(buffer, input->nack_bitmap, 2);
 8014e76:	2202      	movs	r2, #2
 8014e78:	4639      	mov	r1, r7
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_num);
 8014e7a:	4604      	mov	r4, r0
    ret &= ucdr_serialize_array_uint8_t(buffer, input->nack_bitmap, 2);
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f001 fc43 	bl	8016708 <ucdr_serialize_array_uint8_t>
    ret &= ucdr_serialize_uint8_t(buffer, input->stream_id);
 8014e82:	7931      	ldrb	r1, [r6, #4]
 8014e84:	4004      	ands	r4, r0
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7fe fb7c 	bl	8013584 <ucdr_serialize_uint8_t>
 8014e8c:	b2e4      	uxtb	r4, r4
    return ret;
}
 8014e8e:	4020      	ands	r0, r4
 8014e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e92 <uxr_deserialize_ACKNACK_Payload>:

bool uxr_deserialize_ACKNACK_Payload(ucdrBuffer* buffer, ACKNACK_Payload* output)
{
 8014e92:	b570      	push	{r4, r5, r6, lr}
 8014e94:	4605      	mov	r5, r0
 8014e96:	460e      	mov	r6, r1
    bool ret = true;
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_num);
 8014e98:	f7fe fbdc 	bl	8013654 <ucdr_deserialize_uint16_t>
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->nack_bitmap, 2);
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	18b1      	adds	r1, r6, r2
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_num);
 8014ea0:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->nack_bitmap, 2);
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	f001 fc44 	bl	8016730 <ucdr_deserialize_array_uint8_t>
    ret &= ucdr_deserialize_uint8_t(buffer, &output->stream_id);
 8014ea8:	1d31      	adds	r1, r6, #4
 8014eaa:	4004      	ands	r4, r0
 8014eac:	4628      	mov	r0, r5
 8014eae:	f7fe fb6b 	bl	8013588 <ucdr_deserialize_uint8_t>
 8014eb2:	b2e4      	uxtb	r4, r4
    return ret;
}
 8014eb4:	4020      	ands	r0, r4
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}

08014eb8 <uxr_serialize_HEARTBEAT_Payload>:

bool uxr_serialize_HEARTBEAT_Payload(ucdrBuffer* buffer, const HEARTBEAT_Payload* input)
{
 8014eb8:	b570      	push	{r4, r5, r6, lr}
 8014eba:	460d      	mov	r5, r1
    bool ret = true;
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_nr);
 8014ebc:	8809      	ldrh	r1, [r1, #0]
{
 8014ebe:	4606      	mov	r6, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_nr);
 8014ec0:	f7fe fb78 	bl	80135b4 <ucdr_serialize_uint16_t>
    ret &= ucdr_serialize_uint16_t(buffer, input->last_unacked_seq_nr);
 8014ec4:	8869      	ldrh	r1, [r5, #2]
    ret &= ucdr_serialize_uint16_t(buffer, input->first_unacked_seq_nr);
 8014ec6:	4604      	mov	r4, r0
    ret &= ucdr_serialize_uint16_t(buffer, input->last_unacked_seq_nr);
 8014ec8:	4630      	mov	r0, r6
 8014eca:	f7fe fb73 	bl	80135b4 <ucdr_serialize_uint16_t>
    ret &= ucdr_serialize_uint8_t(buffer, input->stream_id);
 8014ece:	7929      	ldrb	r1, [r5, #4]
 8014ed0:	4004      	ands	r4, r0
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f7fe fb56 	bl	8013584 <ucdr_serialize_uint8_t>
 8014ed8:	b2e4      	uxtb	r4, r4
    return ret;
}
 8014eda:	4020      	ands	r0, r4
 8014edc:	bd70      	pop	{r4, r5, r6, pc}

08014ede <uxr_deserialize_HEARTBEAT_Payload>:

bool uxr_deserialize_HEARTBEAT_Payload(ucdrBuffer* buffer, HEARTBEAT_Payload* output)
{
 8014ede:	b570      	push	{r4, r5, r6, lr}
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	460e      	mov	r6, r1
    bool ret = true;
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_nr);
 8014ee4:	f7fe fbb6 	bl	8013654 <ucdr_deserialize_uint16_t>
    ret &= ucdr_deserialize_uint16_t(buffer, &output->last_unacked_seq_nr);
 8014ee8:	1cb1      	adds	r1, r6, #2
    ret &= ucdr_deserialize_uint16_t(buffer, &output->first_unacked_seq_nr);
 8014eea:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_uint16_t(buffer, &output->last_unacked_seq_nr);
 8014eec:	4628      	mov	r0, r5
 8014eee:	f7fe fbb1 	bl	8013654 <ucdr_deserialize_uint16_t>
    ret &= ucdr_deserialize_uint8_t(buffer, &output->stream_id);
 8014ef2:	1d31      	adds	r1, r6, #4
 8014ef4:	4004      	ands	r4, r0
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	f7fe fb46 	bl	8013588 <ucdr_deserialize_uint8_t>
 8014efc:	b2e4      	uxtb	r4, r4
    return ret;
}
 8014efe:	4020      	ands	r0, r4
 8014f00:	bd70      	pop	{r4, r5, r6, pc}

08014f02 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
    ret &= uxr_serialize_Time_t(buffer, &input->originate_timestamp);
    return ret;
}

bool uxr_deserialize_TIMESTAMP_REPLY_Payload(ucdrBuffer* buffer, TIMESTAMP_REPLY_Payload* output)
{
 8014f02:	b570      	push	{r4, r5, r6, lr}
 8014f04:	4605      	mov	r5, r0
 8014f06:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_Time_t(buffer, &output->transmit_timestamp);
 8014f08:	f7ff fd3e 	bl	8014988 <uxr_deserialize_Time_t>
    ret &= uxr_deserialize_Time_t(buffer, &output->receive_timestamp);
 8014f0c:	f106 0108 	add.w	r1, r6, #8
    ret &= uxr_deserialize_Time_t(buffer, &output->transmit_timestamp);
 8014f10:	4604      	mov	r4, r0
    ret &= uxr_deserialize_Time_t(buffer, &output->receive_timestamp);
 8014f12:	4628      	mov	r0, r5
 8014f14:	f7ff fd38 	bl	8014988 <uxr_deserialize_Time_t>
    ret &= uxr_deserialize_Time_t(buffer, &output->originate_timestamp);
 8014f18:	f106 0110 	add.w	r1, r6, #16
 8014f1c:	4004      	ands	r4, r0
 8014f1e:	4628      	mov	r0, r5
 8014f20:	f7ff fd32 	bl	8014988 <uxr_deserialize_Time_t>
 8014f24:	b2e4      	uxtb	r4, r4
    return ret;
}
 8014f26:	4020      	ands	r0, r4
 8014f28:	bd70      	pop	{r4, r5, r6, pc}

08014f2a <uxr_serialize_GuidPrefix_t>:

bool uxr_serialize_GuidPrefix_t(ucdrBuffer* buffer, const GuidPrefix_t* input)
{
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->data, sizeof(GuidPrefix_t));
 8014f2a:	220c      	movs	r2, #12
 8014f2c:	f001 bbec 	b.w	8016708 <ucdr_serialize_array_uint8_t>

08014f30 <uxr_deserialize_GuidPrefix_t>:
}

bool uxr_deserialize_GuidPrefix_t(ucdrBuffer* buffer, GuidPrefix_t* output)
{
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->data, sizeof(GuidPrefix_t));
 8014f30:	220c      	movs	r2, #12
 8014f32:	f001 bbfd 	b.w	8016730 <ucdr_deserialize_array_uint8_t>

08014f36 <uxr_serialize_EntityId_t>:
    return ret;
}

bool uxr_serialize_EntityId_t(ucdrBuffer* buffer, const EntityId_t* input)
{
 8014f36:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;
    ret &= ucdr_serialize_array_uint8_t(buffer, input->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f38:	2203      	movs	r2, #3
{
 8014f3a:	4605      	mov	r5, r0
 8014f3c:	460e      	mov	r6, r1
    ret &= ucdr_serialize_array_uint8_t(buffer, input->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f3e:	f001 fbe3 	bl	8016708 <ucdr_serialize_array_uint8_t>
    ret &= ucdr_serialize_uint8_t(buffer, input->entityKind);
 8014f42:	78f1      	ldrb	r1, [r6, #3]
    ret &= ucdr_serialize_array_uint8_t(buffer, input->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f44:	4604      	mov	r4, r0
    ret &= ucdr_serialize_uint8_t(buffer, input->entityKind);
 8014f46:	4628      	mov	r0, r5
 8014f48:	f7fe fb1c 	bl	8013584 <ucdr_serialize_uint8_t>
    return ret;
 8014f4c:	4020      	ands	r0, r4
}
 8014f4e:	b2c0      	uxtb	r0, r0
 8014f50:	bd70      	pop	{r4, r5, r6, pc}

08014f52 <uxr_deserialize_EntityId_t>:

bool uxr_deserialize_EntityId_t(ucdrBuffer* buffer, EntityId_t* output)
{
 8014f52:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f54:	2203      	movs	r2, #3
{
 8014f56:	4605      	mov	r5, r0
 8014f58:	460e      	mov	r6, r1
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f5a:	f001 fbe9 	bl	8016730 <ucdr_deserialize_array_uint8_t>
    ret &= ucdr_deserialize_uint8_t(buffer, &output->entityKind);
 8014f5e:	1cf1      	adds	r1, r6, #3
    ret &= ucdr_deserialize_array_uint8_t(buffer, output->entityKey, sizeof(((EntityId_t *)0)->entityKey));
 8014f60:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_uint8_t(buffer, &output->entityKind);
 8014f62:	4628      	mov	r0, r5
 8014f64:	f7fe fb10 	bl	8013588 <ucdr_deserialize_uint8_t>
    return ret;
 8014f68:	4020      	ands	r0, r4
}
 8014f6a:	b2c0      	uxtb	r0, r0
 8014f6c:	bd70      	pop	{r4, r5, r6, pc}

08014f6e <uxr_serialize_GUID_t>:

bool uxr_serialize_GUID_t(ucdrBuffer* buffer, const GUID_t* input)
{
 8014f6e:	b570      	push	{r4, r5, r6, lr}
 8014f70:	4605      	mov	r5, r0
 8014f72:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_serialize_GuidPrefix_t(buffer, &input->guidPrefix);
 8014f74:	f7ff ffd9 	bl	8014f2a <uxr_serialize_GuidPrefix_t>
    ret &= uxr_serialize_EntityId_t(buffer, &input->entityId);
 8014f78:	f106 010c 	add.w	r1, r6, #12
    ret &= uxr_serialize_GuidPrefix_t(buffer, &input->guidPrefix);
 8014f7c:	4604      	mov	r4, r0
    ret &= uxr_serialize_EntityId_t(buffer, &input->entityId);
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f7ff ffd9 	bl	8014f36 <uxr_serialize_EntityId_t>
    return ret;
 8014f84:	4020      	ands	r0, r4
}
 8014f86:	b2c0      	uxtb	r0, r0
 8014f88:	bd70      	pop	{r4, r5, r6, pc}

08014f8a <uxr_deserialize_GUID_t>:

bool uxr_deserialize_GUID_t(ucdrBuffer* buffer, GUID_t* output)
{
 8014f8a:	b570      	push	{r4, r5, r6, lr}
 8014f8c:	4605      	mov	r5, r0
 8014f8e:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_GuidPrefix_t(buffer, &output->guidPrefix);
 8014f90:	f7ff ffce 	bl	8014f30 <uxr_deserialize_GuidPrefix_t>
    ret &= uxr_deserialize_EntityId_t(buffer, &output->entityId);
 8014f94:	f106 010c 	add.w	r1, r6, #12
    ret &= uxr_deserialize_GuidPrefix_t(buffer, &output->guidPrefix);
 8014f98:	4604      	mov	r4, r0
    ret &= uxr_deserialize_EntityId_t(buffer, &output->entityId);
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	f7ff ffd9 	bl	8014f52 <uxr_deserialize_EntityId_t>
    return ret;
 8014fa0:	4020      	ands	r0, r4
}
 8014fa2:	b2c0      	uxtb	r0, r0
 8014fa4:	bd70      	pop	{r4, r5, r6, pc}

08014fa6 <uxr_serialize_SequenceNumber_t>:

bool uxr_serialize_SequenceNumber_t(ucdrBuffer* buffer, const SequenceNumber_t* input)
{
 8014fa6:	b570      	push	{r4, r5, r6, lr}
 8014fa8:	460d      	mov	r5, r1
    bool ret = true;
    ret &= ucdr_serialize_int32_t(buffer, input->high);
 8014faa:	6809      	ldr	r1, [r1, #0]
{
 8014fac:	4606      	mov	r6, r0
    ret &= ucdr_serialize_int32_t(buffer, input->high);
 8014fae:	f7fe fc89 	bl	80138c4 <ucdr_serialize_int32_t>
    ret &= ucdr_serialize_uint32_t(buffer, input->low);
 8014fb2:	6869      	ldr	r1, [r5, #4]
    ret &= ucdr_serialize_int32_t(buffer, input->high);
 8014fb4:	4604      	mov	r4, r0
    ret &= ucdr_serialize_uint32_t(buffer, input->low);
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	f7fe fb9e 	bl	80136f8 <ucdr_serialize_uint32_t>
    return ret;
 8014fbc:	4020      	ands	r0, r4
}
 8014fbe:	b2c0      	uxtb	r0, r0
 8014fc0:	bd70      	pop	{r4, r5, r6, pc}

08014fc2 <uxr_deserialize_SequenceNumber_t>:

bool uxr_deserialize_SequenceNumber_t(ucdrBuffer* buffer, SequenceNumber_t* output)
{
 8014fc2:	b570      	push	{r4, r5, r6, lr}
 8014fc4:	4605      	mov	r5, r0
 8014fc6:	460e      	mov	r6, r1
    bool ret = true;
    ret &= ucdr_deserialize_int32_t(buffer, &output->high);
 8014fc8:	f7fe fcac 	bl	8013924 <ucdr_deserialize_int32_t>
    ret &= ucdr_deserialize_uint32_t(buffer, &output->low);
 8014fcc:	1d31      	adds	r1, r6, #4
    ret &= ucdr_deserialize_int32_t(buffer, &output->high);
 8014fce:	4604      	mov	r4, r0
    ret &= ucdr_deserialize_uint32_t(buffer, &output->low);
 8014fd0:	4628      	mov	r0, r5
 8014fd2:	f7fe fbf1 	bl	80137b8 <ucdr_deserialize_uint32_t>
    return ret;
 8014fd6:	4020      	ands	r0, r4
}
 8014fd8:	b2c0      	uxtb	r0, r0
 8014fda:	bd70      	pop	{r4, r5, r6, pc}

08014fdc <uxr_serialize_SampleIdentity>:

bool uxr_serialize_SampleIdentity(ucdrBuffer* buffer, const SampleIdentity* input)
{
 8014fdc:	b570      	push	{r4, r5, r6, lr}
 8014fde:	4605      	mov	r5, r0
 8014fe0:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_serialize_GUID_t(buffer, &input->writer_guid);
 8014fe2:	f7ff ffc4 	bl	8014f6e <uxr_serialize_GUID_t>
    ret &= uxr_serialize_SequenceNumber_t(buffer, &input->sequence_number);
 8014fe6:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_serialize_GUID_t(buffer, &input->writer_guid);
 8014fea:	4604      	mov	r4, r0
    ret &= uxr_serialize_SequenceNumber_t(buffer, &input->sequence_number);
 8014fec:	4628      	mov	r0, r5
 8014fee:	f7ff ffda 	bl	8014fa6 <uxr_serialize_SequenceNumber_t>
    return ret;
 8014ff2:	4020      	ands	r0, r4
}
 8014ff4:	b2c0      	uxtb	r0, r0
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}

08014ff8 <uxr_deserialize_SampleIdentity>:

bool uxr_deserialize_SampleIdentity(ucdrBuffer* buffer, SampleIdentity* output)
{
 8014ff8:	b570      	push	{r4, r5, r6, lr}
 8014ffa:	4605      	mov	r5, r0
 8014ffc:	460e      	mov	r6, r1
    bool ret = true;
    ret &= uxr_deserialize_GUID_t(buffer, &output->writer_guid);
 8014ffe:	f7ff ffc4 	bl	8014f8a <uxr_deserialize_GUID_t>
    ret &= uxr_deserialize_SequenceNumber_t(buffer, &output->sequence_number);
 8015002:	f106 0110 	add.w	r1, r6, #16
    ret &= uxr_deserialize_GUID_t(buffer, &output->writer_guid);
 8015006:	4604      	mov	r4, r0
    ret &= uxr_deserialize_SequenceNumber_t(buffer, &output->sequence_number);
 8015008:	4628      	mov	r0, r5
 801500a:	f7ff ffda 	bl	8014fc2 <uxr_deserialize_SequenceNumber_t>
    return ret;
 801500e:	4020      	ands	r0, r4
}
 8015010:	b2c0      	uxtb	r0, r0
 8015012:	bd70      	pop	{r4, r5, r6, pc}

08015014 <rcl_client_is_valid>:
}

bool
rcl_client_is_valid(const rcl_client_t * client)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(client, "client pointer is invalid", return false);
 8015014:	b128      	cbz	r0, 8015022 <rcl_client_is_valid+0xe>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8015016:	6800      	ldr	r0, [r0, #0]
 8015018:	b118      	cbz	r0, 8015022 <rcl_client_is_valid+0xe>
    client->impl, "client's rmw implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801501a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801501c:	3800      	subs	r0, #0
 801501e:	bf18      	it	ne
 8015020:	2001      	movne	r0, #1
    client->impl->rmw_handle, "client's rmw handle is invalid", return false);
  return true;
}
 8015022:	4770      	bx	lr

08015024 <rcl_client_get_rmw_handle>:
{
 8015024:	b508      	push	{r3, lr}
 8015026:	4603      	mov	r3, r0
  if (!rcl_client_is_valid(client)) {
 8015028:	f7ff fff4 	bl	8015014 <rcl_client_is_valid>
 801502c:	b108      	cbz	r0, 8015032 <rcl_client_get_rmw_handle+0xe>
  return client->impl->rmw_handle;
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
 8015032:	bd08      	pop	{r3, pc}

08015034 <rcl_take_response>:
{
 8015034:	b5f0      	push	{r4, r5, r6, r7, lr}
  header.request_id = *request_header;
 8015036:	460e      	mov	r6, r1
{
 8015038:	4694      	mov	ip, r2
 801503a:	4607      	mov	r7, r0
 801503c:	460c      	mov	r4, r1
  header.request_id = *request_header;
 801503e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8015040:	b08b      	sub	sp, #44	; 0x2c
  header.request_id = *request_header;
 8015042:	ad04      	add	r5, sp, #16
 8015044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015046:	e896 0003 	ldmia.w	r6, {r0, r1}
  rcl_ret_t ret = rcl_take_response_with_info(client, &header, ros_response);
 801504a:	4662      	mov	r2, ip
  header.request_id = *request_header;
 801504c:	e885 0003 	stmia.w	r5, {r0, r1}
  rcl_ret_t ret = rcl_take_response_with_info(client, &header, ros_response);
 8015050:	4669      	mov	r1, sp
 8015052:	4638      	mov	r0, r7
 8015054:	f7f3 fa08 	bl	8008468 <rcl_take_response_with_info>
  *request_header = header.request_id;
 8015058:	ad04      	add	r5, sp, #16
  rcl_ret_t ret = rcl_take_response_with_info(client, &header, ros_response);
 801505a:	4606      	mov	r6, r0
  *request_header = header.request_id;
 801505c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801505e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015060:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015064:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8015068:	4630      	mov	r0, r6
 801506a:	b00b      	add	sp, #44	; 0x2c
 801506c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801506e <rcl_convert_rmw_ret_to_rcl_ret>:
#include "rcl/error_handling.h"

rcl_ret_t
rcl_convert_rmw_ret_to_rcl_ret(rmw_ret_t rmw_ret)
{
  switch (rmw_ret) {
 801506e:	280b      	cmp	r0, #11
 8015070:	dc0b      	bgt.n	801508a <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015072:	2800      	cmp	r0, #0
 8015074:	db0d      	blt.n	8015092 <rcl_convert_rmw_ret_to_rcl_ret+0x24>
 8015076:	280b      	cmp	r0, #11
 8015078:	d80b      	bhi.n	8015092 <rcl_convert_rmw_ret_to_rcl_ret+0x24>
 801507a:	e8df f000 	tbb	[pc, r0]
 801507e:	0a0b      	.short	0x0a0b
 8015080:	0a0a0b0a 	.word	0x0a0a0b0a
 8015084:	0a0a0a0a 	.word	0x0a0a0a0a
 8015088:	0b0b      	.short	0x0b0b
 801508a:	28cb      	cmp	r0, #203	; 0xcb
    case RMW_RET_UNSUPPORTED:
      return RCL_RET_UNSUPPORTED;
    case RMW_RET_NODE_NAME_NON_EXISTENT:
      return RCL_RET_NODE_NAME_NON_EXISTENT;
    default:
      return RCL_RET_ERROR;
 801508c:	bf18      	it	ne
 801508e:	2001      	movne	r0, #1
 8015090:	4770      	bx	lr
 8015092:	2001      	movs	r0, #1
  }
}
 8015094:	4770      	bx	lr

08015096 <rcl_context_get_instance_id>:
}

rcl_context_instance_id_t
rcl_context_get_instance_id(rcl_context_t * context)
{
  RCL_CHECK_ARGUMENT_FOR_NULL(context, 0);
 8015096:	b118      	cbz	r0, 80150a0 <rcl_context_get_instance_id+0xa>
 8015098:	2105      	movs	r1, #5
 801509a:	3008      	adds	r0, #8
 801509c:	f000 bdf7 	b.w	8015c8e <__atomic_load_8>
  return rcutils_atomic_load_uint64_t((atomic_uint_least64_t *)(&context->instance_id_storage));
}
 80150a0:	2000      	movs	r0, #0
 80150a2:	2100      	movs	r1, #0
 80150a4:	4770      	bx	lr

080150a6 <rcl_context_is_valid>:

bool
rcl_context_is_valid(rcl_context_t * context)
{
 80150a6:	b508      	push	{r3, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(context, false);
 80150a8:	b130      	cbz	r0, 80150b8 <rcl_context_is_valid+0x12>
  return 0 != rcl_context_get_instance_id(context);
 80150aa:	f7ff fff4 	bl	8015096 <rcl_context_get_instance_id>
 80150ae:	ea50 0301 	orrs.w	r3, r0, r1
 80150b2:	bf14      	ite	ne
 80150b4:	2001      	movne	r0, #1
 80150b6:	2000      	moveq	r0, #0
}
 80150b8:	bd08      	pop	{r3, pc}

080150ba <__cleanup_context>:
  return &(context->impl->rmw_context);
}

rcl_ret_t
__cleanup_context(rcl_context_t * context)
{
 80150ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150be:	b087      	sub	sp, #28
 80150c0:	4605      	mov	r5, r0
  rcl_ret_t ret = RCL_RET_OK;
  // reset the instance id to 0 to indicate "invalid" (should already be 0, but this is defensive)
  rcutils_atomic_store((atomic_uint_least64_t *)(&context->instance_id_storage), 0);
 80150c2:	2305      	movs	r3, #5
 80150c4:	9300      	str	r3, [sp, #0]
 80150c6:	2200      	movs	r2, #0
 80150c8:	2300      	movs	r3, #0
 80150ca:	3008      	adds	r0, #8
 80150cc:	f000 fdeb 	bl	8015ca6 <__atomic_store_8>
    }
  }
#endif // RCL_COMMAND_LINE_ENABLED

  // if impl is null, nothing else can be cleaned up
  if (NULL != context->impl) {
 80150d0:	682c      	ldr	r4, [r5, #0]
 80150d2:	b1fc      	cbz	r4, 8015114 <__cleanup_context+0x5a>
    // pull allocator out for use during deallocation
    rcl_allocator_t allocator = context->impl->allocator;

    // finalize init options if valid
    if (NULL != context->impl->init_options.impl) {
 80150d4:	e9d4 9004 	ldrd	r9, r0, [r4, #16]
    rcl_allocator_t allocator = context->impl->allocator;
 80150d8:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if (NULL != context->impl->init_options.impl) {
 80150dc:	b330      	cbz	r0, 801512c <__cleanup_context+0x72>
      rcl_ret_t init_options_fini_ret = rcl_init_options_fini(&(context->impl->init_options));
 80150de:	f104 0014 	add.w	r0, r4, #20
 80150e2:	f000 f893 	bl	801520c <rcl_init_options_fini>
      if (RCL_RET_OK != init_options_fini_ret) {
 80150e6:	4604      	mov	r4, r0
 80150e8:	b108      	cbz	r0, 80150ee <__cleanup_context+0x34>
        RCUTILS_SAFE_FWRITE_TO_STDERR(
          "[rcl|context.c:" RCUTILS_STRINGIFY(__LINE__)
          "] failed to finalize init options while cleaning up context, memory may be leaked: ");
        RCUTILS_SAFE_FWRITE_TO_STDERR(rcl_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
        rcl_reset_error();
 80150ea:	f7f1 ff3d 	bl	8006f68 <rcutils_reset_error>
      }
    }

    // clean up rmw_context
    if (NULL != context->impl->rmw_context.implementation_identifier) {
 80150ee:	6828      	ldr	r0, [r5, #0]
 80150f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80150f2:	b14b      	cbz	r3, 8015108 <__cleanup_context+0x4e>
      rmw_ret_t rmw_context_fini_ret = rmw_context_fini(&(context->impl->rmw_context));
 80150f4:	3028      	adds	r0, #40	; 0x28
 80150f6:	f7f5 faef 	bl	800a6d8 <rmw_context_fini>
      if (RMW_RET_OK != rmw_context_fini_ret) {
 80150fa:	b128      	cbz	r0, 8015108 <__cleanup_context+0x4e>
        if (RCL_RET_OK == ret) {
 80150fc:	b914      	cbnz	r4, 8015104 <__cleanup_context+0x4a>
          ret = rcl_convert_rmw_ret_to_rcl_ret(rmw_context_fini_ret);
 80150fe:	f7ff ffb6 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8015102:	4604      	mov	r4, r0
        RCUTILS_SAFE_FWRITE_TO_STDERR(
          "[rcl|context.c:" RCUTILS_STRINGIFY(__LINE__)
          "] failed to finalize rmw context while cleaning up context, memory may be leaked: ");
        RCUTILS_SAFE_FWRITE_TO_STDERR(rcutils_get_error_string().str);
        RCUTILS_SAFE_FWRITE_TO_STDERR("\n");
        rcutils_reset_error();
 8015104:	f7f1 ff30 	bl	8006f68 <rcutils_reset_error>
      }
    }

    // clean up copy of argv if valid
    if (NULL != context->impl->argv) {
 8015108:	682b      	ldr	r3, [r5, #0]
 801510a:	6a1b      	ldr	r3, [r3, #32]
 801510c:	bb1b      	cbnz	r3, 8015156 <__cleanup_context+0x9c>
          allocator.deallocate(context->impl->argv[i], allocator.state);
        }
      }
      allocator.deallocate(context->impl->argv, allocator.state);
    }
    allocator.deallocate(context->impl, allocator.state);
 801510e:	6828      	ldr	r0, [r5, #0]
 8015110:	4649      	mov	r1, r9
 8015112:	47c0      	blx	r8
  }  // if (NULL != context->impl)

  // zero-initialize the context
  *context = rcl_get_zero_initialized_context();
 8015114:	ae02      	add	r6, sp, #8
 8015116:	4630      	mov	r0, r6
 8015118:	f7f3 fa16 	bl	8008548 <rcl_get_zero_initialized_context>
 801511c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8015120:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  return ret;
}
 8015124:	4620      	mov	r0, r4
 8015126:	b007      	add	sp, #28
 8015128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  rcl_ret_t ret = RCL_RET_OK;
 801512c:	4604      	mov	r4, r0
 801512e:	e7de      	b.n	80150ee <__cleanup_context+0x34>
        if (NULL != context->impl->argv[i]) {
 8015130:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8015134:	b108      	cbz	r0, 801513a <__cleanup_context+0x80>
          allocator.deallocate(context->impl->argv[i], allocator.state);
 8015136:	4649      	mov	r1, r9
 8015138:	47c0      	blx	r8
      for (i = 0; i < context->impl->argc; ++i) {
 801513a:	3601      	adds	r6, #1
 801513c:	f147 0700 	adc.w	r7, r7, #0
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	6a18      	ldr	r0, [r3, #32]
 8015144:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8015148:	4296      	cmp	r6, r2
 801514a:	eb77 0303 	sbcs.w	r3, r7, r3
 801514e:	dbef      	blt.n	8015130 <__cleanup_context+0x76>
      allocator.deallocate(context->impl->argv, allocator.state);
 8015150:	4649      	mov	r1, r9
 8015152:	47c0      	blx	r8
 8015154:	e7db      	b.n	801510e <__cleanup_context+0x54>
      for (i = 0; i < context->impl->argc; ++i) {
 8015156:	2600      	movs	r6, #0
 8015158:	2700      	movs	r7, #0
 801515a:	e7f1      	b.n	8015140 <__cleanup_context+0x86>

0801515c <rcl_get_default_topic_name_substitutions>:

rcl_ret_t
rcl_get_default_topic_name_substitutions(rcutils_string_map_t * string_map)
{
  RCL_CHECK_ARGUMENT_FOR_NULL(string_map, RCL_RET_INVALID_ARGUMENT);
 801515c:	2800      	cmp	r0, #0

  // right now there are no default substitutions

  return RCL_RET_OK;
}
 801515e:	bf0c      	ite	eq
 8015160:	200b      	moveq	r0, #11
 8015162:	2000      	movne	r0, #0
 8015164:	4770      	bx	lr

08015166 <rcl_get_zero_initialized_init_options>:
}
 8015166:	2000      	movs	r0, #0
 8015168:	4770      	bx	lr

0801516a <rcl_init_options_init>:
{
 801516a:	b084      	sub	sp, #16
 801516c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801516e:	b091      	sub	sp, #68	; 0x44
 8015170:	ae17      	add	r6, sp, #92	; 0x5c
 8015172:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options, RCL_RET_INVALID_ARGUMENT);
 8015176:	4607      	mov	r7, r0
 8015178:	b930      	cbnz	r0, 8015188 <rcl_init_options_init+0x1e>
 801517a:	240b      	movs	r4, #11
}
 801517c:	4620      	mov	r0, r4
 801517e:	b011      	add	sp, #68	; 0x44
 8015180:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015184:	b004      	add	sp, #16
 8015186:	4770      	bx	lr
  if (NULL != init_options->impl) {
 8015188:	6803      	ldr	r3, [r0, #0]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d13a      	bne.n	8015204 <rcl_init_options_init+0x9a>
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 801518e:	4630      	mov	r0, r6
 8015190:	f7fd fde9 	bl	8012d66 <rcutils_allocator_is_valid>
 8015194:	2800      	cmp	r0, #0
 8015196:	d0f0      	beq.n	801517a <rcl_init_options_init+0x10>
  init_options->impl = allocator.allocate(sizeof(rcl_init_options_impl_t), allocator.state);
 8015198:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801519a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801519c:	2050      	movs	r0, #80	; 0x50
 801519e:	4798      	blx	r3
 80151a0:	4604      	mov	r4, r0
 80151a2:	6038      	str	r0, [r7, #0]
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80151a4:	2800      	cmp	r0, #0
 80151a6:	d02f      	beq.n	8015208 <rcl_init_options_init+0x9e>
  init_options->impl->allocator = allocator;
 80151a8:	46b4      	mov	ip, r6
 80151aa:	4605      	mov	r5, r0
 80151ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80151b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80151b2:	f8dc 3000 	ldr.w	r3, [ip]
 80151b6:	602b      	str	r3, [r5, #0]
  init_options->impl->rmw_init_options = rmw_get_zero_initialized_init_options();
 80151b8:	a802      	add	r0, sp, #8
 80151ba:	ad02      	add	r5, sp, #8
 80151bc:	f000 ffd1 	bl	8016162 <rmw_get_zero_initialized_init_options>
 80151c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151c2:	3418      	adds	r4, #24
 80151c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80151d2:	e884 0003 	stmia.w	r4, {r0, r1}
  rmw_ret_t rmw_ret = rmw_init_options_init(&(init_options->impl->rmw_init_options), allocator);
 80151d6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80151da:	683c      	ldr	r4, [r7, #0]
 80151dc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80151e0:	f104 0018 	add.w	r0, r4, #24
 80151e4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80151e8:	f7f5 f8e4 	bl	800a3b4 <rmw_init_options_init>
  if (RMW_RET_OK != rmw_ret) {
 80151ec:	4604      	mov	r4, r0
 80151ee:	2800      	cmp	r0, #0
 80151f0:	d0c4      	beq.n	801517c <rcl_init_options_init+0x12>
    allocator.deallocate(init_options->impl, allocator.state);
 80151f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80151f4:	6838      	ldr	r0, [r7, #0]
 80151f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80151f8:	4798      	blx	r3
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 80151fa:	4620      	mov	r0, r4
 80151fc:	f7ff ff37 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8015200:	4604      	mov	r4, r0
 8015202:	e7bb      	b.n	801517c <rcl_init_options_init+0x12>
    return RCL_RET_ALREADY_INIT;
 8015204:	2464      	movs	r4, #100	; 0x64
 8015206:	e7b9      	b.n	801517c <rcl_init_options_init+0x12>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8015208:	240a      	movs	r4, #10
 801520a:	e7b7      	b.n	801517c <rcl_init_options_init+0x12>

0801520c <rcl_init_options_fini>:

rcl_ret_t
rcl_init_options_fini(rcl_init_options_t * init_options)
{
 801520c:	b570      	push	{r4, r5, r6, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options, RCL_RET_INVALID_ARGUMENT);
 801520e:	4606      	mov	r6, r0
{
 8015210:	b086      	sub	sp, #24
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options, RCL_RET_INVALID_ARGUMENT);
 8015212:	b918      	cbnz	r0, 801521c <rcl_init_options_fini+0x10>
 8015214:	240b      	movs	r4, #11
    RCL_SET_ERROR_MSG(rmw_get_error_string().str);
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
  }
  allocator.deallocate(init_options->impl, allocator.state);
  return RCL_RET_OK;
}
 8015216:	4620      	mov	r0, r4
 8015218:	b006      	add	sp, #24
 801521a:	bd70      	pop	{r4, r5, r6, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(init_options->impl, RCL_RET_INVALID_ARGUMENT);
 801521c:	6804      	ldr	r4, [r0, #0]
 801521e:	2c00      	cmp	r4, #0
 8015220:	d0f8      	beq.n	8015214 <rcl_init_options_fini+0x8>
  rcl_allocator_t allocator = init_options->impl->allocator;
 8015222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015224:	ad01      	add	r5, sp, #4
 8015226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015228:	6823      	ldr	r3, [r4, #0]
 801522a:	602b      	str	r3, [r5, #0]
  RCL_CHECK_ALLOCATOR(&allocator, return RCL_RET_INVALID_ARGUMENT);
 801522c:	a801      	add	r0, sp, #4
 801522e:	f7fd fd9a 	bl	8012d66 <rcutils_allocator_is_valid>
 8015232:	2800      	cmp	r0, #0
 8015234:	d0ee      	beq.n	8015214 <rcl_init_options_fini+0x8>
  rmw_ret_t rmw_ret = rmw_init_options_fini(&(init_options->impl->rmw_init_options));
 8015236:	6830      	ldr	r0, [r6, #0]
 8015238:	3018      	adds	r0, #24
 801523a:	f7f5 f92f 	bl	800a49c <rmw_init_options_fini>
  if (RMW_RET_OK != rmw_ret) {
 801523e:	4604      	mov	r4, r0
 8015240:	b118      	cbz	r0, 801524a <rcl_init_options_fini+0x3e>
    return rcl_convert_rmw_ret_to_rcl_ret(rmw_ret);
 8015242:	f7ff ff14 	bl	801506e <rcl_convert_rmw_ret_to_rcl_ret>
 8015246:	4604      	mov	r4, r0
 8015248:	e7e5      	b.n	8015216 <rcl_init_options_fini+0xa>
  allocator.deallocate(init_options->impl, allocator.state);
 801524a:	9905      	ldr	r1, [sp, #20]
 801524c:	6830      	ldr	r0, [r6, #0]
 801524e:	9b02      	ldr	r3, [sp, #8]
 8015250:	4798      	blx	r3
  return RCL_RET_OK;
 8015252:	e7e0      	b.n	8015216 <rcl_init_options_fini+0xa>

08015254 <rcl_node_is_valid_except_context>:
}

bool
rcl_node_is_valid_except_context(const rcl_node_t * node)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(node, "rcl node pointer is invalid", return false);
 8015254:	b128      	cbz	r0, 8015262 <rcl_node_is_valid_except_context+0xe>
  RCL_CHECK_FOR_NULL_WITH_MSG(node->impl, "rcl node implementation is invalid", return false);
 8015256:	6840      	ldr	r0, [r0, #4]
 8015258:	b118      	cbz	r0, 8015262 <rcl_node_is_valid_except_context+0xe>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801525a:	6a00      	ldr	r0, [r0, #32]
 801525c:	3800      	subs	r0, #0
 801525e:	bf18      	it	ne
 8015260:	2001      	movne	r0, #1
    node->impl->rmw_node_handle, "rcl node's rmw handle is invalid", return false);
  return true;
}
 8015262:	4770      	bx	lr

08015264 <rcl_node_is_valid>:

bool
rcl_node_is_valid(const rcl_node_t * node)
{
 8015264:	b508      	push	{r3, lr}
 8015266:	4603      	mov	r3, r0
  bool result = rcl_node_is_valid_except_context(node);
 8015268:	f7ff fff4 	bl	8015254 <rcl_node_is_valid_except_context>
  if (!result) {
 801526c:	b120      	cbz	r0, 8015278 <rcl_node_is_valid+0x14>
    return result;
  }
  if (!rcl_context_is_valid(node->context)) {
 801526e:	6818      	ldr	r0, [r3, #0]
    RCL_SET_ERROR_MSG("rcl node's context is invalid");
    return false;
  }
  return true;
}
 8015270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (!rcl_context_is_valid(node->context)) {
 8015274:	f7ff bf17 	b.w	80150a6 <rcl_context_is_valid>
}
 8015278:	bd08      	pop	{r3, pc}

0801527a <rcl_node_get_name>:

const char *
rcl_node_get_name(const rcl_node_t * node)
{
 801527a:	b508      	push	{r3, lr}
 801527c:	4603      	mov	r3, r0
  if (!rcl_node_is_valid_except_context(node)) {
 801527e:	f7ff ffe9 	bl	8015254 <rcl_node_is_valid_except_context>
 8015282:	b110      	cbz	r0, 801528a <rcl_node_get_name+0x10>
    return NULL;  // error already set
  }
  return node->impl->rmw_node_handle->name;
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	6a1b      	ldr	r3, [r3, #32]
 8015288:	6898      	ldr	r0, [r3, #8]
}
 801528a:	bd08      	pop	{r3, pc}

0801528c <rcl_node_get_namespace>:

const char *
rcl_node_get_namespace(const rcl_node_t * node)
{
 801528c:	b508      	push	{r3, lr}
 801528e:	4603      	mov	r3, r0
  if (!rcl_node_is_valid_except_context(node)) {
 8015290:	f7ff ffe0 	bl	8015254 <rcl_node_is_valid_except_context>
 8015294:	b110      	cbz	r0, 801529c <rcl_node_get_namespace+0x10>
    return NULL;  // error already set
  }
  return node->impl->rmw_node_handle->namespace_;
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	6a1b      	ldr	r3, [r3, #32]
 801529a:	68d8      	ldr	r0, [r3, #12]
}
 801529c:	bd08      	pop	{r3, pc}

0801529e <rcl_node_get_options>:
  return node->impl->fq_name;
}

const rcl_node_options_t *
rcl_node_get_options(const rcl_node_t * node)
{
 801529e:	b508      	push	{r3, lr}
 80152a0:	4603      	mov	r3, r0
  if (!rcl_node_is_valid_except_context(node)) {
 80152a2:	f7ff ffd7 	bl	8015254 <rcl_node_is_valid_except_context>
 80152a6:	b100      	cbz	r0, 80152aa <rcl_node_get_options+0xc>
    return NULL;  // error already set
  }
  return &node->impl->options;
 80152a8:	6858      	ldr	r0, [r3, #4]
}
 80152aa:	bd08      	pop	{r3, pc}

080152ac <rcl_node_get_rmw_handle>:
  return RCL_RET_OK;
}

rmw_node_t *
rcl_node_get_rmw_handle(const rcl_node_t * node)
{
 80152ac:	b508      	push	{r3, lr}
 80152ae:	4603      	mov	r3, r0
  if (!rcl_node_is_valid_except_context(node)) {
 80152b0:	f7ff ffd0 	bl	8015254 <rcl_node_is_valid_except_context>
 80152b4:	b108      	cbz	r0, 80152ba <rcl_node_get_rmw_handle+0xe>
    return NULL;  // error already set
  }
  return node->impl->rmw_node_handle;
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	6a18      	ldr	r0, [r3, #32]
}
 80152ba:	bd08      	pop	{r3, pc}

080152bc <rcl_node_options_copy>:

rcl_ret_t
rcl_node_options_copy(
  const rcl_node_options_t * options,
  rcl_node_options_t * options_out)
{
 80152bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80152be:	460e      	mov	r6, r1
  RCUTILS_CAN_SET_MSG_AND_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);

  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 80152c0:	4607      	mov	r7, r0
 80152c2:	b190      	cbz	r0, 80152ea <rcl_node_options_copy+0x2e>
  RCL_CHECK_ARGUMENT_FOR_NULL(options_out, RCL_RET_INVALID_ARGUMENT);
 80152c4:	b189      	cbz	r1, 80152ea <rcl_node_options_copy+0x2e>
  if (options_out == options) {
 80152c6:	4288      	cmp	r0, r1
 80152c8:	d00f      	beq.n	80152ea <rcl_node_options_copy+0x2e>
    RCL_SET_ERROR_MSG("Options out must be zero initialized");
    return RCL_RET_INVALID_ARGUMENT;
  }
#endif // RCL_COMMAND_LINE_ENABLED

  options_out->domain_id = options->domain_id;
 80152ca:	4605      	mov	r5, r0
 80152cc:	460c      	mov	r4, r1
 80152ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80152d2:	f844 3b04 	str.w	r3, [r4], #4
  options_out->allocator = options->allocator;
 80152d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152da:	682b      	ldr	r3, [r5, #0]
 80152dc:	6023      	str	r3, [r4, #0]
  options_out->use_global_arguments = options->use_global_arguments;
 80152de:	7e3b      	ldrb	r3, [r7, #24]
 80152e0:	7633      	strb	r3, [r6, #24]
  options_out->enable_rosout = options->enable_rosout;
 80152e2:	7e7b      	ldrb	r3, [r7, #25]
 80152e4:	7673      	strb	r3, [r6, #25]
#ifdef RCL_COMMAND_LINE_ENABLED
  if (NULL != options->arguments.impl) {
    return rcl_arguments_copy(&(options->arguments), &(options_out->arguments));
  }
#endif // RCL_COMMAND_LINE_ENABLED
  return RCL_RET_OK;
 80152e6:	2000      	movs	r0, #0
}
 80152e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(options, RCL_RET_INVALID_ARGUMENT);
 80152ea:	200b      	movs	r0, #11
 80152ec:	e7fc      	b.n	80152e8 <rcl_node_options_copy+0x2c>

080152ee <rcl_service_is_valid>:

bool
rcl_service_is_valid(const rcl_service_t * service)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(service, "service pointer is invalid", return false);
 80152ee:	b128      	cbz	r0, 80152fc <rcl_service_is_valid+0xe>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80152f0:	6800      	ldr	r0, [r0, #0]
 80152f2:	b118      	cbz	r0, 80152fc <rcl_service_is_valid+0xe>
    service->impl, "service's implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 80152f4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80152f6:	3800      	subs	r0, #0
 80152f8:	bf18      	it	ne
 80152fa:	2001      	movne	r0, #1
    service->impl->rmw_handle, "service's rmw handle is invalid", return false);
  return true;
}
 80152fc:	4770      	bx	lr

080152fe <rcl_service_get_options>:
{
 80152fe:	b508      	push	{r3, lr}
 8015300:	4603      	mov	r3, r0
  if (!rcl_service_is_valid(service)) {
 8015302:	f7ff fff4 	bl	80152ee <rcl_service_is_valid>
 8015306:	b100      	cbz	r0, 801530a <rcl_service_get_options+0xc>
  return _service_get_options(service);
 8015308:	6818      	ldr	r0, [r3, #0]
}
 801530a:	bd08      	pop	{r3, pc}

0801530c <rcl_service_get_rmw_handle>:
{
 801530c:	b508      	push	{r3, lr}
 801530e:	4603      	mov	r3, r0
  if (!rcl_service_is_valid(service)) {
 8015310:	f7ff ffed 	bl	80152ee <rcl_service_is_valid>
 8015314:	b108      	cbz	r0, 801531a <rcl_service_get_rmw_handle+0xe>
  return service->impl->rmw_handle;
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
 801531a:	bd08      	pop	{r3, pc}

0801531c <rcl_take_request>:
{
 801531c:	b5f0      	push	{r4, r5, r6, r7, lr}
  header.request_id = *request_header;
 801531e:	460e      	mov	r6, r1
{
 8015320:	4694      	mov	ip, r2
 8015322:	4607      	mov	r7, r0
 8015324:	460c      	mov	r4, r1
  header.request_id = *request_header;
 8015326:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8015328:	b08b      	sub	sp, #44	; 0x2c
  header.request_id = *request_header;
 801532a:	ad04      	add	r5, sp, #16
 801532c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801532e:	e896 0003 	ldmia.w	r6, {r0, r1}
  rcl_ret_t ret = rcl_take_request_with_info(service, &header, ros_request);
 8015332:	4662      	mov	r2, ip
  header.request_id = *request_header;
 8015334:	e885 0003 	stmia.w	r5, {r0, r1}
  rcl_ret_t ret = rcl_take_request_with_info(service, &header, ros_request);
 8015338:	4669      	mov	r1, sp
 801533a:	4638      	mov	r0, r7
 801533c:	f7f3 ffac 	bl	8009298 <rcl_take_request_with_info>
  *request_header = header.request_id;
 8015340:	ad04      	add	r5, sp, #16
  rcl_ret_t ret = rcl_take_request_with_info(service, &header, ros_request);
 8015342:	4606      	mov	r6, r0
  *request_header = header.request_id;
 8015344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015348:	e895 0003 	ldmia.w	r5, {r0, r1}
 801534c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8015350:	4630      	mov	r0, r6
 8015352:	b00b      	add	sp, #44	; 0x2c
 8015354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015356 <rcl_subscription_is_valid>:
}

bool
rcl_subscription_is_valid(const rcl_subscription_t * subscription)
{
  RCL_CHECK_FOR_NULL_WITH_MSG(subscription, "subscription pointer is invalid", return false);
 8015356:	b130      	cbz	r0, 8015366 <rcl_subscription_is_valid+0x10>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8015358:	6800      	ldr	r0, [r0, #0]
 801535a:	b120      	cbz	r0, 8015366 <rcl_subscription_is_valid+0x10>
    subscription->impl, "subscription's implementation is invalid", return false);
  RCL_CHECK_FOR_NULL_WITH_MSG(
 801535c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8015360:	3800      	subs	r0, #0
 8015362:	bf18      	it	ne
 8015364:	2001      	movne	r0, #1
    subscription->impl->rmw_handle, "subscription's rmw handle is invalid", return false);
  return true;
}
 8015366:	4770      	bx	lr

08015368 <rcl_subscription_get_rmw_handle>:
{
 8015368:	b508      	push	{r3, lr}
 801536a:	4603      	mov	r3, r0
  if (!rcl_subscription_is_valid(subscription)) {
 801536c:	f7ff fff3 	bl	8015356 <rcl_subscription_is_valid>
 8015370:	b110      	cbz	r0, 8015378 <rcl_subscription_get_rmw_handle+0x10>
  return subscription->impl->rmw_handle;
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
}
 8015378:	bd08      	pop	{r3, pc}

0801537a <rcl_get_system_time>:
  return rcutils_system_time_now(current_time);
 801537a:	4608      	mov	r0, r1
 801537c:	f7f2 ba66 	b.w	800784c <rcutils_system_time_now>

08015380 <rcl_get_steady_time>:
  return rcutils_steady_time_now(current_time);
 8015380:	4608      	mov	r0, r1
 8015382:	f7f2 ba89 	b.w	8007898 <rcutils_steady_time_now>

08015386 <rcl_get_ros_time>:
  if (!t->active) {
 8015386:	7a03      	ldrb	r3, [r0, #8]
{
 8015388:	b510      	push	{r4, lr}
 801538a:	460c      	mov	r4, r1
  if (!t->active) {
 801538c:	b923      	cbnz	r3, 8015398 <rcl_get_ros_time+0x12>
}
 801538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return rcutils_system_time_now(current_time);
 8015392:	4608      	mov	r0, r1
 8015394:	f7f2 ba5a 	b.w	800784c <rcutils_system_time_now>
 8015398:	2105      	movs	r1, #5
 801539a:	f000 fc78 	bl	8015c8e <__atomic_load_8>
  *current_time = rcutils_atomic_load_uint64_t(&(t->current_time));
 801539e:	e9c4 0100 	strd	r0, r1, [r4]
}
 80153a2:	2000      	movs	r0, #0
 80153a4:	bd10      	pop	{r4, pc}

080153a6 <rcl_clock_init>:
{
 80153a6:	b570      	push	{r4, r5, r6, lr}
 80153a8:	4606      	mov	r6, r0
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 80153aa:	4610      	mov	r0, r2
{
 80153ac:	460c      	mov	r4, r1
 80153ae:	4615      	mov	r5, r2
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 80153b0:	f7fd fcd9 	bl	8012d66 <rcutils_allocator_is_valid>
 80153b4:	b328      	cbz	r0, 8015402 <rcl_clock_init+0x5c>
  switch (clock_type) {
 80153b6:	2e03      	cmp	r6, #3
 80153b8:	d823      	bhi.n	8015402 <rcl_clock_init+0x5c>
 80153ba:	e8df f006 	tbb	[pc, r6]
 80153be:	1002      	.short	0x1002
 80153c0:	1c16      	.short	0x1c16
      RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80153c2:	b1f4      	cbz	r4, 8015402 <rcl_clock_init+0x5c>
  clock->type = RCL_CLOCK_UNINITIALIZED;
 80153c4:	2600      	movs	r6, #0
 80153c6:	7026      	strb	r6, [r4, #0]
  clock->allocator = *allocator;
 80153c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  clock->num_jump_callbacks = 0u;
 80153ca:	e9c4 6601 	strd	r6, r6, [r4, #4]
  clock->data = NULL;
 80153ce:	e9c4 6603 	strd	r6, r6, [r4, #12]
  clock->allocator = *allocator;
 80153d2:	3414      	adds	r4, #20
 80153d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153d6:	682b      	ldr	r3, [r5, #0]
 80153d8:	6023      	str	r3, [r4, #0]
      return RCL_RET_OK;
 80153da:	4630      	mov	r0, r6
}
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
      return rcl_ros_clock_init(clock, allocator);
 80153de:	4629      	mov	r1, r5
 80153e0:	4620      	mov	r0, r4
}
 80153e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return rcl_ros_clock_init(clock, allocator);
 80153e6:	f7f4 ba13 	b.w	8009810 <rcl_ros_clock_init>
      return rcl_system_clock_init(clock, allocator);
 80153ea:	4629      	mov	r1, r5
 80153ec:	4620      	mov	r0, r4
}
 80153ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return rcl_system_clock_init(clock, allocator);
 80153f2:	f7f4 ba53 	b.w	800989c <rcl_system_clock_init>
      return rcl_steady_clock_init(clock, allocator);
 80153f6:	4629      	mov	r1, r5
 80153f8:	4620      	mov	r0, r4
}
 80153fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return rcl_steady_clock_init(clock, allocator);
 80153fe:	f7f4 ba33 	b.w	8009868 <rcl_steady_clock_init>
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8015402:	200b      	movs	r0, #11
 8015404:	e7ea      	b.n	80153dc <rcl_clock_init+0x36>

08015406 <rcl_clock_get_now>:
rcl_clock_get_now(rcl_clock_t * clock, rcl_time_point_value_t * time_point_value)
{
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_INVALID_ARGUMENT);
  RCUTILS_CAN_RETURN_WITH_ERROR_OF(RCL_RET_ERROR);

  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8015406:	b130      	cbz	r0, 8015416 <rcl_clock_get_now+0x10>
  RCL_CHECK_ARGUMENT_FOR_NULL(time_point_value, RCL_RET_INVALID_ARGUMENT);
 8015408:	b129      	cbz	r1, 8015416 <rcl_clock_get_now+0x10>
  if (clock->type && clock->get_now) {
 801540a:	7803      	ldrb	r3, [r0, #0]
 801540c:	b12b      	cbz	r3, 801541a <rcl_clock_get_now+0x14>
 801540e:	68c3      	ldr	r3, [r0, #12]
 8015410:	b11b      	cbz	r3, 801541a <rcl_clock_get_now+0x14>
    return clock->get_now(clock->data, time_point_value);
 8015412:	6900      	ldr	r0, [r0, #16]
 8015414:	4718      	bx	r3
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 8015416:	200b      	movs	r0, #11
 8015418:	4770      	bx	lr
  }
  RCL_SET_ERROR_MSG("Clock is not initialized or does not have get_now registered.");
  return RCL_RET_ERROR;
 801541a:	2001      	movs	r0, #1
}
 801541c:	4770      	bx	lr

0801541e <rcl_clock_add_jump_callback>:

rcl_ret_t
rcl_clock_add_jump_callback(
  rcl_clock_t * clock, rcl_jump_threshold_t threshold, rcl_jump_callback_t callback,
  void * user_data)
{
 801541e:	b082      	sub	sp, #8
 8015420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015422:	a906      	add	r1, sp, #24
 8015424:	e881 000c 	stmia.w	r1, {r2, r3}
 8015428:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
  // Make sure parameters are valid
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 801542c:	4604      	mov	r4, r0
 801542e:	b920      	cbnz	r0, 801543a <rcl_clock_add_jump_callback+0x1c>
 8015430:	200b      	movs	r0, #11
  clock->jump_callbacks[clock->num_jump_callbacks].callback = callback;
  clock->jump_callbacks[clock->num_jump_callbacks].threshold = threshold;
  clock->jump_callbacks[clock->num_jump_callbacks].user_data = user_data;
  ++(clock->num_jump_callbacks);
  return RCL_RET_OK;
}
 8015432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015436:	b002      	add	sp, #8
 8015438:	4770      	bx	lr
  RCL_CHECK_ALLOCATOR_WITH_MSG(
 801543a:	3014      	adds	r0, #20
 801543c:	f7fd fc93 	bl	8012d66 <rcutils_allocator_is_valid>
 8015440:	2800      	cmp	r0, #0
 8015442:	d0f5      	beq.n	8015430 <rcl_clock_add_jump_callback+0x12>
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 8015444:	2e00      	cmp	r6, #0
 8015446:	d0f3      	beq.n	8015430 <rcl_clock_add_jump_callback+0x12>
  if (threshold.min_forward.nanoseconds < 0) {
 8015448:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801544c:	2a00      	cmp	r2, #0
 801544e:	f173 0300 	sbcs.w	r3, r3, #0
 8015452:	dbed      	blt.n	8015430 <rcl_clock_add_jump_callback+0x12>
  if (threshold.min_backward.nanoseconds > 0) {
 8015454:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015458:	2a01      	cmp	r2, #1
 801545a:	f173 0300 	sbcs.w	r3, r3, #0
 801545e:	dae7      	bge.n	8015430 <rcl_clock_add_jump_callback+0x12>
 8015460:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 8015464:	2300      	movs	r3, #0
 8015466:	2528      	movs	r5, #40	; 0x28
 8015468:	4299      	cmp	r1, r3
 801546a:	d11d      	bne.n	80154a8 <rcl_clock_add_jump_callback+0x8a>
  rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 801546c:	69e3      	ldr	r3, [r4, #28]
 801546e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015470:	fb01 5105 	mla	r1, r1, r5, r5
 8015474:	4798      	blx	r3
  if (NULL == callbacks) {
 8015476:	b330      	cbz	r0, 80154c6 <rcl_clock_add_jump_callback+0xa8>
  clock->jump_callbacks[clock->num_jump_callbacks].callback = callback;
 8015478:	f8d4 c008 	ldr.w	ip, [r4, #8]
  clock->jump_callbacks = callbacks;
 801547c:	6060      	str	r0, [r4, #4]
  clock->jump_callbacks[clock->num_jump_callbacks].callback = callback;
 801547e:	fb05 f50c 	mul.w	r5, r5, ip
 8015482:	eb00 0e05 	add.w	lr, r0, r5
 8015486:	5146      	str	r6, [r0, r5]
  clock->jump_callbacks[clock->num_jump_callbacks].threshold = threshold;
 8015488:	ae06      	add	r6, sp, #24
 801548a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801548c:	f10e 0508 	add.w	r5, lr, #8
 8015490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015492:	e896 0003 	ldmia.w	r6, {r0, r1}
  ++(clock->num_jump_callbacks);
 8015496:	f10c 0301 	add.w	r3, ip, #1
  clock->jump_callbacks[clock->num_jump_callbacks].threshold = threshold;
 801549a:	e885 0003 	stmia.w	r5, {r0, r1}
  clock->jump_callbacks[clock->num_jump_callbacks].user_data = user_data;
 801549e:	f8ce 7020 	str.w	r7, [lr, #32]
  return RCL_RET_OK;
 80154a2:	2000      	movs	r0, #0
  ++(clock->num_jump_callbacks);
 80154a4:	60a3      	str	r3, [r4, #8]
  return RCL_RET_OK;
 80154a6:	e7c4      	b.n	8015432 <rcl_clock_add_jump_callback+0x14>
    const rcl_jump_callback_info_t * info = &(clock->jump_callbacks[cb_idx]);
 80154a8:	fb05 f203 	mul.w	r2, r5, r3
 80154ac:	eb00 0c02 	add.w	ip, r0, r2
    if (info->callback == callback && info->user_data == user_data) {
 80154b0:	5882      	ldr	r2, [r0, r2]
 80154b2:	42b2      	cmp	r2, r6
 80154b4:	d103      	bne.n	80154be <rcl_clock_add_jump_callback+0xa0>
 80154b6:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80154ba:	42ba      	cmp	r2, r7
 80154bc:	d001      	beq.n	80154c2 <rcl_clock_add_jump_callback+0xa4>
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 80154be:	3301      	adds	r3, #1
 80154c0:	e7d2      	b.n	8015468 <rcl_clock_add_jump_callback+0x4a>
      return RCL_RET_ERROR;
 80154c2:	2001      	movs	r0, #1
 80154c4:	e7b5      	b.n	8015432 <rcl_clock_add_jump_callback+0x14>
    return RCL_RET_BAD_ALLOC;
 80154c6:	200a      	movs	r0, #10
 80154c8:	e7b3      	b.n	8015432 <rcl_clock_add_jump_callback+0x14>

080154ca <rcl_clock_remove_jump_callback>:

rcl_ret_t
rcl_clock_remove_jump_callback(
  rcl_clock_t * clock, rcl_jump_callback_t callback, void * user_data)
{
 80154ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154ce:	4688      	mov	r8, r1
 80154d0:	4691      	mov	r9, r2
  // Make sure parameters are valid
  RCL_CHECK_ARGUMENT_FOR_NULL(clock, RCL_RET_INVALID_ARGUMENT);
 80154d2:	4606      	mov	r6, r0
 80154d4:	b910      	cbnz	r0, 80154dc <rcl_clock_remove_jump_callback+0x12>
 80154d6:	200b      	movs	r0, #11
      return RCL_RET_BAD_ALLOC;
    }
    clock->jump_callbacks = callbacks;
  }
  return RCL_RET_OK;
}
 80154d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  RCL_CHECK_ALLOCATOR_WITH_MSG(
 80154dc:	3014      	adds	r0, #20
 80154de:	f7fd fc42 	bl	8012d66 <rcutils_allocator_is_valid>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	d0f7      	beq.n	80154d6 <rcl_clock_remove_jump_callback+0xc>
  RCL_CHECK_ARGUMENT_FOR_NULL(callback, RCL_RET_INVALID_ARGUMENT);
 80154e6:	f1b8 0f00 	cmp.w	r8, #0
 80154ea:	d0f4      	beq.n	80154d6 <rcl_clock_remove_jump_callback+0xc>
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 80154ec:	f04f 0c00 	mov.w	ip, #0
  bool found_callback = false;
 80154f0:	4667      	mov	r7, ip
 80154f2:	f04f 0e28 	mov.w	lr, #40	; 0x28
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 80154f6:	68b4      	ldr	r4, [r6, #8]
 80154f8:	4564      	cmp	r4, ip
 80154fa:	d80b      	bhi.n	8015514 <rcl_clock_remove_jump_callback+0x4a>
  if (!found_callback) {
 80154fc:	b367      	cbz	r7, 8015558 <rcl_clock_remove_jump_callback+0x8e>
  if (--(clock->num_jump_callbacks) == 0) {
 80154fe:	3c01      	subs	r4, #1
 8015500:	6870      	ldr	r0, [r6, #4]
 8015502:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015504:	60b4      	str	r4, [r6, #8]
 8015506:	bb04      	cbnz	r4, 801554a <rcl_clock_remove_jump_callback+0x80>
    clock->allocator.deallocate(clock->jump_callbacks, clock->allocator.state);
 8015508:	69b3      	ldr	r3, [r6, #24]
 801550a:	4611      	mov	r1, r2
 801550c:	4798      	blx	r3
    clock->jump_callbacks = NULL;
 801550e:	6074      	str	r4, [r6, #4]
  return RCL_RET_OK;
 8015510:	2000      	movs	r0, #0
 8015512:	e7e1      	b.n	80154d8 <rcl_clock_remove_jump_callback+0xe>
    const rcl_jump_callback_info_t * info = &(clock->jump_callbacks[cb_idx]);
 8015514:	6872      	ldr	r2, [r6, #4]
 8015516:	fb0e f30c 	mul.w	r3, lr, ip
 801551a:	18d4      	adds	r4, r2, r3
    if (found_callback) {
 801551c:	b167      	cbz	r7, 8015538 <rcl_clock_remove_jump_callback+0x6e>
      clock->jump_callbacks[cb_idx - 1] = *info;
 801551e:	f1a4 0528 	sub.w	r5, r4, #40	; 0x28
 8015522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801552a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801552e:	e885 0003 	stmia.w	r5, {r0, r1}
  for (size_t cb_idx = 0; cb_idx < clock->num_jump_callbacks; ++cb_idx) {
 8015532:	f10c 0c01 	add.w	ip, ip, #1
 8015536:	e7de      	b.n	80154f6 <rcl_clock_remove_jump_callback+0x2c>
    } else if (info->callback == callback && info->user_data == user_data) {
 8015538:	58d3      	ldr	r3, [r2, r3]
 801553a:	4543      	cmp	r3, r8
 801553c:	d1f9      	bne.n	8015532 <rcl_clock_remove_jump_callback+0x68>
 801553e:	6a27      	ldr	r7, [r4, #32]
 8015540:	eba7 0309 	sub.w	r3, r7, r9
 8015544:	425f      	negs	r7, r3
 8015546:	415f      	adcs	r7, r3
 8015548:	e7f3      	b.n	8015532 <rcl_clock_remove_jump_callback+0x68>
    rcl_jump_callback_info_t * callbacks = clock->allocator.reallocate(
 801554a:	2128      	movs	r1, #40	; 0x28
 801554c:	69f3      	ldr	r3, [r6, #28]
 801554e:	4361      	muls	r1, r4
 8015550:	4798      	blx	r3
    if (NULL == callbacks) {
 8015552:	b118      	cbz	r0, 801555c <rcl_clock_remove_jump_callback+0x92>
    clock->jump_callbacks = callbacks;
 8015554:	6070      	str	r0, [r6, #4]
 8015556:	e7db      	b.n	8015510 <rcl_clock_remove_jump_callback+0x46>
    return RCL_RET_ERROR;
 8015558:	2001      	movs	r0, #1
 801555a:	e7bd      	b.n	80154d8 <rcl_clock_remove_jump_callback+0xe>
      return RCL_RET_BAD_ALLOC;
 801555c:	200a      	movs	r0, #10
 801555e:	e7bb      	b.n	80154d8 <rcl_clock_remove_jump_callback+0xe>

08015560 <rcl_timer_get_time_until_next_call>:
  return RCL_RET_OK;
}

rcl_ret_t
rcl_timer_get_time_until_next_call(const rcl_timer_t * timer, int64_t * time_until_next_call)
{
 8015560:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015562:	460d      	mov	r5, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8015564:	4606      	mov	r6, r0
 8015566:	b1b0      	cbz	r0, 8015596 <rcl_timer_get_time_until_next_call+0x36>
  RCL_CHECK_ARGUMENT_FOR_NULL(time_until_next_call, RCL_RET_INVALID_ARGUMENT);
 8015568:	b1a9      	cbz	r1, 8015596 <rcl_timer_get_time_until_next_call+0x36>
  rcl_time_point_value_t now;
  rcl_ret_t ret = rcl_clock_get_now(timer->impl->clock, &now);
 801556a:	6803      	ldr	r3, [r0, #0]
 801556c:	4669      	mov	r1, sp
 801556e:	6818      	ldr	r0, [r3, #0]
 8015570:	f7ff ff49 	bl	8015406 <rcl_clock_get_now>
  if (ret != RCL_RET_OK) {
 8015574:	4604      	mov	r4, r0
 8015576:	b958      	cbnz	r0, 8015590 <rcl_timer_get_time_until_next_call+0x30>
  rcutils_atomic_load(a_int64_t, result);
 8015578:	6830      	ldr	r0, [r6, #0]
 801557a:	2105      	movs	r1, #5
 801557c:	3028      	adds	r0, #40	; 0x28
 801557e:	f000 fb86 	bl	8015c8e <__atomic_load_8>
    return ret;  // rcl error state should already be set.
  }
  *time_until_next_call =
    rcutils_atomic_load_int64_t(&timer->impl->next_call_time) - now;
 8015582:	9b00      	ldr	r3, [sp, #0]
 8015584:	1ac0      	subs	r0, r0, r3
 8015586:	9b01      	ldr	r3, [sp, #4]
 8015588:	eb61 0103 	sbc.w	r1, r1, r3
  *time_until_next_call =
 801558c:	e9c5 0100 	strd	r0, r1, [r5]
  return RCL_RET_OK;
}
 8015590:	4620      	mov	r0, r4
 8015592:	b002      	add	sp, #8
 8015594:	bd70      	pop	{r4, r5, r6, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 8015596:	240b      	movs	r4, #11
 8015598:	e7fa      	b.n	8015590 <rcl_timer_get_time_until_next_call+0x30>

0801559a <rcl_timer_is_ready>:
{
 801559a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801559c:	460c      	mov	r4, r1
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 801559e:	4605      	mov	r5, r0
 80155a0:	b1c8      	cbz	r0, 80155d6 <rcl_timer_is_ready+0x3c>
  RCL_CHECK_ARGUMENT_FOR_NULL(is_ready, RCL_RET_INVALID_ARGUMENT);
 80155a2:	b1c1      	cbz	r1, 80155d6 <rcl_timer_is_ready+0x3c>
  rcl_ret_t ret = rcl_timer_get_time_until_next_call(timer, &time_until_next_call);
 80155a4:	4669      	mov	r1, sp
 80155a6:	f7ff ffdb 	bl	8015560 <rcl_timer_get_time_until_next_call>
  if (ret != RCL_RET_OK) {
 80155aa:	b980      	cbnz	r0, 80155ce <rcl_timer_is_ready+0x34>
  *is_ready = (time_until_next_call <= 0) && !rcutils_atomic_load_bool(&timer->impl->canceled);
 80155ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155b0:	2a01      	cmp	r2, #1
 80155b2:	f173 0300 	sbcs.w	r3, r3, #0
 80155b6:	da0c      	bge.n	80155d2 <rcl_timer_is_ready+0x38>
  rcutils_atomic_load(a_bool, result);
 80155b8:	682b      	ldr	r3, [r5, #0]
 80155ba:	f3bf 8f5b 	dmb	ish
 80155be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80155c2:	f3bf 8f5b 	dmb	ish
 80155c6:	fab3 f383 	clz	r3, r3
 80155ca:	095b      	lsrs	r3, r3, #5
 80155cc:	7023      	strb	r3, [r4, #0]
}
 80155ce:	b003      	add	sp, #12
 80155d0:	bd30      	pop	{r4, r5, pc}
  *is_ready = (time_until_next_call <= 0) && !rcutils_atomic_load_bool(&timer->impl->canceled);
 80155d2:	4603      	mov	r3, r0
 80155d4:	e7fa      	b.n	80155cc <rcl_timer_is_ready+0x32>
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 80155d6:	200b      	movs	r0, #11
 80155d8:	e7f9      	b.n	80155ce <rcl_timer_is_ready+0x34>

080155da <rcl_timer_is_canceled>:
}

rcl_ret_t
rcl_timer_is_canceled(const rcl_timer_t * timer, bool * is_canceled)
{
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 80155da:	b168      	cbz	r0, 80155f8 <rcl_timer_is_canceled+0x1e>
  RCL_CHECK_ARGUMENT_FOR_NULL(is_canceled, RCL_RET_INVALID_ARGUMENT);
 80155dc:	b161      	cbz	r1, 80155f8 <rcl_timer_is_canceled+0x1e>
 80155de:	6803      	ldr	r3, [r0, #0]
 80155e0:	f3bf 8f5b 	dmb	ish
 80155e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80155e8:	f3bf 8f5b 	dmb	ish
 80155ec:	3b00      	subs	r3, #0
 80155ee:	bf18      	it	ne
 80155f0:	2301      	movne	r3, #1
 80155f2:	700b      	strb	r3, [r1, #0]
  *is_canceled = rcutils_atomic_load_bool(&timer->impl->canceled);
  return RCL_RET_OK;
 80155f4:	2000      	movs	r0, #0
 80155f6:	4770      	bx	lr
  RCL_CHECK_ARGUMENT_FOR_NULL(timer, RCL_RET_INVALID_ARGUMENT);
 80155f8:	200b      	movs	r0, #11
}
 80155fa:	4770      	bx	lr

080155fc <rcl_timer_get_guard_condition>:
}

rcl_guard_condition_t *
rcl_timer_get_guard_condition(const rcl_timer_t * timer)
{
  if (NULL == timer || NULL == timer->impl || NULL == timer->impl->guard_condition.impl) {
 80155fc:	b130      	cbz	r0, 801560c <rcl_timer_get_guard_condition+0x10>
 80155fe:	6800      	ldr	r0, [r0, #0]
 8015600:	b120      	cbz	r0, 801560c <rcl_timer_get_guard_condition+0x10>
 8015602:	68c3      	ldr	r3, [r0, #12]
 8015604:	b10b      	cbz	r3, 801560a <rcl_timer_get_guard_condition+0xe>
    return NULL;
  }
  return &timer->impl->guard_condition;
 8015606:	3008      	adds	r0, #8
 8015608:	4770      	bx	lr
    return NULL;
 801560a:	4618      	mov	r0, r3
}
 801560c:	4770      	bx	lr

0801560e <rcl_validate_enclave_name>:
{
 801560e:	b570      	push	{r4, r5, r6, lr}
 8015610:	460d      	mov	r5, r1
 8015612:	4616      	mov	r6, r2
  RCL_CHECK_ARGUMENT_FOR_NULL(enclave, RCL_RET_INVALID_ARGUMENT);
 8015614:	4604      	mov	r4, r0
 8015616:	b148      	cbz	r0, 801562c <rcl_validate_enclave_name+0x1e>
  return rcl_validate_enclave_name_with_size(
 8015618:	f7ea fdd2 	bl	80001c0 <strlen>
 801561c:	4633      	mov	r3, r6
 801561e:	4601      	mov	r1, r0
 8015620:	462a      	mov	r2, r5
 8015622:	4620      	mov	r0, r4
}
 8015624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return rcl_validate_enclave_name_with_size(
 8015628:	f7f4 bbe8 	b.w	8009dfc <rcl_validate_enclave_name_with_size>
}
 801562c:	200b      	movs	r0, #11
 801562e:	bd70      	pop	{r4, r5, r6, pc}

08015630 <rcl_validate_topic_name>:
{
 8015630:	b570      	push	{r4, r5, r6, lr}
 8015632:	460d      	mov	r5, r1
 8015634:	4616      	mov	r6, r2
  RCL_CHECK_ARGUMENT_FOR_NULL(topic_name, RCL_RET_INVALID_ARGUMENT);
 8015636:	4604      	mov	r4, r0
 8015638:	b148      	cbz	r0, 801564e <rcl_validate_topic_name+0x1e>
  return rcl_validate_topic_name_with_size(
 801563a:	f7ea fdc1 	bl	80001c0 <strlen>
 801563e:	4633      	mov	r3, r6
 8015640:	4601      	mov	r1, r0
 8015642:	462a      	mov	r2, r5
 8015644:	4620      	mov	r0, r4
}
 8015646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return rcl_validate_topic_name_with_size(
 801564a:	f7f4 bc1f 	b.w	8009e8c <rcl_validate_topic_name_with_size>
}
 801564e:	200b      	movs	r0, #11
 8015650:	bd70      	pop	{r4, r5, r6, pc}

08015652 <rcl_wait_set_is_valid>:
  return wait_set && wait_set->impl;
 8015652:	b118      	cbz	r0, 801565c <rcl_wait_set_is_valid+0xa>
 8015654:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015656:	3800      	subs	r0, #0
 8015658:	bf18      	it	ne
 801565a:	2001      	movne	r0, #1
}
 801565c:	4770      	bx	lr

0801565e <rcl_wait_set_add_subscription>:
{
 801565e:	b538      	push	{r3, r4, r5, lr}
  SET_ADD(subscription)
 8015660:	4604      	mov	r4, r0
 8015662:	b308      	cbz	r0, 80156a8 <rcl_wait_set_add_subscription+0x4a>
 8015664:	f7ff fff5 	bl	8015652 <rcl_wait_set_is_valid>
 8015668:	b1d8      	cbz	r0, 80156a2 <rcl_wait_set_add_subscription+0x44>
 801566a:	b1e9      	cbz	r1, 80156a8 <rcl_wait_set_add_subscription+0x4a>
 801566c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801566e:	6860      	ldr	r0, [r4, #4]
 8015670:	681d      	ldr	r5, [r3, #0]
 8015672:	4285      	cmp	r5, r0
 8015674:	d21a      	bcs.n	80156ac <rcl_wait_set_add_subscription+0x4e>
 8015676:	1c68      	adds	r0, r5, #1
 8015678:	6018      	str	r0, [r3, #0]
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015680:	b102      	cbz	r2, 8015684 <rcl_wait_set_add_subscription+0x26>
 8015682:	6015      	str	r5, [r2, #0]
  SET_ADD_RMW(subscription, rmw_subscriptions.subscribers, rmw_subscriptions.subscriber_count)
 8015684:	4608      	mov	r0, r1
 8015686:	f7ff fe6f 	bl	8015368 <rcl_subscription_get_rmw_handle>
 801568a:	b190      	cbz	r0, 80156b2 <rcl_wait_set_add_subscription+0x54>
 801568c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801568e:	6842      	ldr	r2, [r0, #4]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015696:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015698:	6853      	ldr	r3, [r2, #4]
 801569a:	3301      	adds	r3, #1
 801569c:	6053      	str	r3, [r2, #4]
  return RCL_RET_OK;
 801569e:	2000      	movs	r0, #0
}
 80156a0:	bd38      	pop	{r3, r4, r5, pc}
  SET_ADD(subscription)
 80156a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80156a6:	e7fb      	b.n	80156a0 <rcl_wait_set_add_subscription+0x42>
 80156a8:	200b      	movs	r0, #11
 80156aa:	e7f9      	b.n	80156a0 <rcl_wait_set_add_subscription+0x42>
 80156ac:	f240 3086 	movw	r0, #902	; 0x386
 80156b0:	e7f6      	b.n	80156a0 <rcl_wait_set_add_subscription+0x42>
  SET_ADD_RMW(subscription, rmw_subscriptions.subscribers, rmw_subscriptions.subscriber_count)
 80156b2:	2001      	movs	r0, #1
 80156b4:	e7f4      	b.n	80156a0 <rcl_wait_set_add_subscription+0x42>

080156b6 <rcl_wait_set_clear>:
{
 80156b6:	b510      	push	{r4, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 80156b8:	4604      	mov	r4, r0
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d076      	beq.n	80157ac <rcl_wait_set_clear+0xf6>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 80156be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d075      	beq.n	80157b0 <rcl_wait_set_clear+0xfa>
  SET_CLEAR(subscription);
 80156c4:	6800      	ldr	r0, [r0, #0]
 80156c6:	b138      	cbz	r0, 80156d8 <rcl_wait_set_clear+0x22>
 80156c8:	6862      	ldr	r2, [r4, #4]
__ssp_bos_icheck3(memset, void *, int)
 80156ca:	2100      	movs	r1, #0
 80156cc:	0092      	lsls	r2, r2, #2
 80156ce:	f002 f8d1 	bl	8017874 <memset>
 80156d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156d4:	2200      	movs	r2, #0
 80156d6:	601a      	str	r2, [r3, #0]
  SET_CLEAR(guard_condition);
 80156d8:	68a0      	ldr	r0, [r4, #8]
 80156da:	b138      	cbz	r0, 80156ec <rcl_wait_set_clear+0x36>
 80156dc:	68e2      	ldr	r2, [r4, #12]
 80156de:	2100      	movs	r1, #0
 80156e0:	0092      	lsls	r2, r2, #2
 80156e2:	f002 f8c7 	bl	8017874 <memset>
 80156e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156e8:	2200      	movs	r2, #0
 80156ea:	60da      	str	r2, [r3, #12]
  SET_CLEAR(client);
 80156ec:	69a0      	ldr	r0, [r4, #24]
 80156ee:	b138      	cbz	r0, 8015700 <rcl_wait_set_clear+0x4a>
 80156f0:	69e2      	ldr	r2, [r4, #28]
 80156f2:	2100      	movs	r1, #0
 80156f4:	0092      	lsls	r2, r2, #2
 80156f6:	f002 f8bd 	bl	8017874 <memset>
 80156fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156fc:	2200      	movs	r2, #0
 80156fe:	619a      	str	r2, [r3, #24]
  SET_CLEAR(service);
 8015700:	6a20      	ldr	r0, [r4, #32]
 8015702:	b138      	cbz	r0, 8015714 <rcl_wait_set_clear+0x5e>
 8015704:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015706:	2100      	movs	r1, #0
 8015708:	0092      	lsls	r2, r2, #2
 801570a:	f002 f8b3 	bl	8017874 <memset>
 801570e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015710:	2200      	movs	r2, #0
 8015712:	625a      	str	r2, [r3, #36]	; 0x24
  SET_CLEAR(event);
 8015714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015716:	b138      	cbz	r0, 8015728 <rcl_wait_set_clear+0x72>
 8015718:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801571a:	2100      	movs	r1, #0
 801571c:	0092      	lsls	r2, r2, #2
 801571e:	f002 f8a9 	bl	8017874 <memset>
 8015722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015724:	2200      	movs	r2, #0
 8015726:	631a      	str	r2, [r3, #48]	; 0x30
  SET_CLEAR(timer);
 8015728:	6920      	ldr	r0, [r4, #16]
 801572a:	b138      	cbz	r0, 801573c <rcl_wait_set_clear+0x86>
 801572c:	6962      	ldr	r2, [r4, #20]
 801572e:	2100      	movs	r1, #0
 8015730:	0092      	lsls	r2, r2, #2
 8015732:	f002 f89f 	bl	8017874 <memset>
 8015736:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015738:	2200      	movs	r2, #0
 801573a:	641a      	str	r2, [r3, #64]	; 0x40
  SET_CLEAR_RMW(
 801573c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801573e:	6898      	ldr	r0, [r3, #8]
 8015740:	b138      	cbz	r0, 8015752 <rcl_wait_set_clear+0x9c>
 8015742:	685a      	ldr	r2, [r3, #4]
 8015744:	2100      	movs	r1, #0
 8015746:	0092      	lsls	r2, r2, #2
 8015748:	f002 f894 	bl	8017874 <memset>
 801574c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801574e:	2200      	movs	r2, #0
 8015750:	605a      	str	r2, [r3, #4]
  SET_CLEAR_RMW(
 8015752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015754:	6958      	ldr	r0, [r3, #20]
 8015756:	b138      	cbz	r0, 8015768 <rcl_wait_set_clear+0xb2>
 8015758:	691a      	ldr	r2, [r3, #16]
 801575a:	2100      	movs	r1, #0
 801575c:	0092      	lsls	r2, r2, #2
 801575e:	f002 f889 	bl	8017874 <memset>
 8015762:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015764:	2200      	movs	r2, #0
 8015766:	611a      	str	r2, [r3, #16]
  SET_CLEAR_RMW(
 8015768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801576a:	6a18      	ldr	r0, [r3, #32]
 801576c:	b138      	cbz	r0, 801577e <rcl_wait_set_clear+0xc8>
 801576e:	69da      	ldr	r2, [r3, #28]
 8015770:	2100      	movs	r1, #0
 8015772:	0092      	lsls	r2, r2, #2
 8015774:	f002 f87e 	bl	8017874 <memset>
 8015778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801577a:	2200      	movs	r2, #0
 801577c:	61da      	str	r2, [r3, #28]
  SET_CLEAR_RMW(
 801577e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015780:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015782:	b138      	cbz	r0, 8015794 <rcl_wait_set_clear+0xde>
 8015784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015786:	2100      	movs	r1, #0
 8015788:	0092      	lsls	r2, r2, #2
 801578a:	f002 f873 	bl	8017874 <memset>
 801578e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015790:	2200      	movs	r2, #0
 8015792:	629a      	str	r2, [r3, #40]	; 0x28
  SET_CLEAR_RMW(
 8015794:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015798:	b138      	cbz	r0, 80157aa <rcl_wait_set_clear+0xf4>
 801579a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801579c:	2100      	movs	r1, #0
 801579e:	0092      	lsls	r2, r2, #2
 80157a0:	f002 f868 	bl	8017874 <memset>
 80157a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80157a6:	2000      	movs	r0, #0
 80157a8:	6358      	str	r0, [r3, #52]	; 0x34
}
 80157aa:	bd10      	pop	{r4, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 80157ac:	200b      	movs	r0, #11
 80157ae:	e7fc      	b.n	80157aa <rcl_wait_set_clear+0xf4>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 80157b0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80157b4:	e7f9      	b.n	80157aa <rcl_wait_set_clear+0xf4>

080157b6 <rcl_wait_set_resize>:
{
 80157b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ba:	460f      	mov	r7, r1
 80157bc:	4615      	mov	r5, r2
 80157be:	461e      	mov	r6, r3
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 80157c0:	4604      	mov	r4, r0
 80157c2:	2800      	cmp	r0, #0
 80157c4:	f000 817b 	beq.w	8015abe <rcl_wait_set_resize+0x308>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 80157c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f000 8179 	beq.w	8015ac2 <rcl_wait_set_resize+0x30c>
  SET_RESIZE(
 80157d0:	e9d3 a213 	ldrd	sl, r2, [r3, #76]	; 0x4c
 80157d4:	f04f 0800 	mov.w	r8, #0
 80157d8:	f8d3 9058 	ldr.w	r9, [r3, #88]	; 0x58
 80157dc:	9201      	str	r2, [sp, #4]
 80157de:	f8c0 8004 	str.w	r8, [r0, #4]
 80157e2:	6800      	ldr	r0, [r0, #0]
 80157e4:	f8c3 8000 	str.w	r8, [r3]
 80157e8:	2900      	cmp	r1, #0
 80157ea:	f040 8089 	bne.w	8015900 <rcl_wait_set_resize+0x14a>
 80157ee:	b110      	cbz	r0, 80157f6 <rcl_wait_set_resize+0x40>
 80157f0:	4649      	mov	r1, r9
 80157f2:	47d0      	blx	sl
 80157f4:	6027      	str	r7, [r4, #0]
 80157f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80157f8:	6898      	ldr	r0, [r3, #8]
 80157fa:	b128      	cbz	r0, 8015808 <rcl_wait_set_resize+0x52>
 80157fc:	4649      	mov	r1, r9
 80157fe:	47d0      	blx	sl
 8015800:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015802:	2200      	movs	r2, #0
 8015804:	e9c3 2201 	strd	r2, r2, [r3, #4]
  SET_RESIZE(guard_condition,;,;);  // NOLINT
 8015808:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801580a:	2700      	movs	r7, #0
 801580c:	e9d0 8313 	ldrd	r8, r3, [r0, #76]	; 0x4c
 8015810:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8015812:	60e7      	str	r7, [r4, #12]
 8015814:	60c7      	str	r7, [r0, #12]
 8015816:	68a0      	ldr	r0, [r4, #8]
 8015818:	2d00      	cmp	r5, #0
 801581a:	f040 809a 	bne.w	8015952 <rcl_wait_set_resize+0x19c>
 801581e:	b110      	cbz	r0, 8015826 <rcl_wait_set_resize+0x70>
 8015820:	4611      	mov	r1, r2
 8015822:	47c0      	blx	r8
 8015824:	60a5      	str	r5, [r4, #8]
  rmw_guard_conditions_t * rmw_gcs = &(wait_set->impl->rmw_guard_conditions);
 8015826:	6b27      	ldr	r7, [r4, #48]	; 0x30
  rmw_gcs->guard_condition_count = 0u;
 8015828:	f04f 0800 	mov.w	r8, #0
  if (0u == num_rmw_gc) {
 801582c:	19ad      	adds	r5, r5, r6
 801582e:	6978      	ldr	r0, [r7, #20]
 8015830:	6dba      	ldr	r2, [r7, #88]	; 0x58
  rmw_gcs->guard_condition_count = 0u;
 8015832:	f8c7 8010 	str.w	r8, [r7, #16]
  if (0u == num_rmw_gc) {
 8015836:	f040 8099 	bne.w	801596c <rcl_wait_set_resize+0x1b6>
    if (rmw_gcs->guard_conditions) {
 801583a:	b118      	cbz	r0, 8015844 <rcl_wait_set_resize+0x8e>
      wait_set->impl->allocator.deallocate(
 801583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801583e:	4611      	mov	r1, r2
 8015840:	4798      	blx	r3
      rmw_gcs->guard_conditions = NULL;
 8015842:	617d      	str	r5, [r7, #20]
  SET_RESIZE(timer,;,;);  // NOLINT
 8015844:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015846:	6920      	ldr	r0, [r4, #16]
 8015848:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801584a:	2500      	movs	r5, #0
 801584c:	e9d3 7813 	ldrd	r7, r8, [r3, #76]	; 0x4c
 8015850:	6165      	str	r5, [r4, #20]
 8015852:	641d      	str	r5, [r3, #64]	; 0x40
 8015854:	2e00      	cmp	r6, #0
 8015856:	f040 80a5 	bne.w	80159a4 <rcl_wait_set_resize+0x1ee>
 801585a:	b110      	cbz	r0, 8015862 <rcl_wait_set_resize+0xac>
 801585c:	4611      	mov	r1, r2
 801585e:	47b8      	blx	r7
 8015860:	6126      	str	r6, [r4, #16]
  SET_RESIZE(
 8015862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015864:	69a0      	ldr	r0, [r4, #24]
 8015866:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 8015868:	2500      	movs	r5, #0
 801586a:	e9d3 7813 	ldrd	r7, r8, [r3, #76]	; 0x4c
 801586e:	61e5      	str	r5, [r4, #28]
 8015870:	619d      	str	r5, [r3, #24]
 8015872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015874:	2b00      	cmp	r3, #0
 8015876:	f040 80a1 	bne.w	80159bc <rcl_wait_set_resize+0x206>
 801587a:	b118      	cbz	r0, 8015884 <rcl_wait_set_resize+0xce>
 801587c:	4631      	mov	r1, r6
 801587e:	47b8      	blx	r7
 8015880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015882:	61a3      	str	r3, [r4, #24]
 8015884:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015886:	6a18      	ldr	r0, [r3, #32]
 8015888:	b128      	cbz	r0, 8015896 <rcl_wait_set_resize+0xe0>
 801588a:	4631      	mov	r1, r6
 801588c:	47b8      	blx	r7
 801588e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015890:	2200      	movs	r2, #0
 8015892:	e9c3 2207 	strd	r2, r2, [r3, #28]
  SET_RESIZE(
 8015896:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015898:	6a20      	ldr	r0, [r4, #32]
 801589a:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 801589c:	2500      	movs	r5, #0
 801589e:	e9d3 9713 	ldrd	r9, r7, [r3, #76]	; 0x4c
 80158a2:	6265      	str	r5, [r4, #36]	; 0x24
 80158a4:	625d      	str	r5, [r3, #36]	; 0x24
 80158a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	f040 80b3 	bne.w	8015a14 <rcl_wait_set_resize+0x25e>
 80158ae:	b118      	cbz	r0, 80158b8 <rcl_wait_set_resize+0x102>
 80158b0:	4631      	mov	r1, r6
 80158b2:	47c8      	blx	r9
 80158b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158b6:	6223      	str	r3, [r4, #32]
 80158b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80158bc:	b128      	cbz	r0, 80158ca <rcl_wait_set_resize+0x114>
 80158be:	4631      	mov	r1, r6
 80158c0:	47c8      	blx	r9
 80158c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158c4:	2200      	movs	r2, #0
 80158c6:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
  SET_RESIZE(
 80158ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80158ce:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 80158d0:	2500      	movs	r5, #0
 80158d2:	e9d3 9713 	ldrd	r9, r7, [r3, #76]	; 0x4c
 80158d6:	62e5      	str	r5, [r4, #44]	; 0x2c
 80158d8:	631d      	str	r5, [r3, #48]	; 0x30
 80158da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158dc:	2b00      	cmp	r3, #0
 80158de:	f040 80c3 	bne.w	8015a68 <rcl_wait_set_resize+0x2b2>
 80158e2:	b118      	cbz	r0, 80158ec <rcl_wait_set_resize+0x136>
 80158e4:	4631      	mov	r1, r6
 80158e6:	47c8      	blx	r9
 80158e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80158ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80158f0:	b178      	cbz	r0, 8015912 <rcl_wait_set_resize+0x15c>
 80158f2:	4631      	mov	r1, r6
 80158f4:	47c8      	blx	r9
 80158f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158f8:	2000      	movs	r0, #0
 80158fa:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80158fe:	e008      	b.n	8015912 <rcl_wait_set_resize+0x15c>
  SET_RESIZE(
 8015900:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 8015904:	9b01      	ldr	r3, [sp, #4]
 8015906:	464a      	mov	r2, r9
 8015908:	4659      	mov	r1, fp
 801590a:	4798      	blx	r3
 801590c:	6020      	str	r0, [r4, #0]
 801590e:	b918      	cbnz	r0, 8015918 <rcl_wait_set_resize+0x162>
 8015910:	200a      	movs	r0, #10
}
 8015912:	b003      	add	sp, #12
 8015914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015918:	465a      	mov	r2, fp
 801591a:	4641      	mov	r1, r8
 801591c:	f001 ffaa 	bl	8017874 <memset>
  SET_RESIZE(
 8015920:	6067      	str	r7, [r4, #4]
 8015922:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8015924:	9b01      	ldr	r3, [sp, #4]
 8015926:	68b8      	ldr	r0, [r7, #8]
 8015928:	f8c7 8004 	str.w	r8, [r7, #4]
 801592c:	464a      	mov	r2, r9
 801592e:	4659      	mov	r1, fp
 8015930:	4798      	blx	r3
 8015932:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015934:	60b8      	str	r0, [r7, #8]
 8015936:	6897      	ldr	r7, [r2, #8]
 8015938:	b92f      	cbnz	r7, 8015946 <rcl_wait_set_resize+0x190>
 801593a:	6820      	ldr	r0, [r4, #0]
 801593c:	4649      	mov	r1, r9
 801593e:	47d0      	blx	sl
 8015940:	e9c4 7700 	strd	r7, r7, [r4]
 8015944:	e7e4      	b.n	8015910 <rcl_wait_set_resize+0x15a>
 8015946:	465a      	mov	r2, fp
 8015948:	4641      	mov	r1, r8
 801594a:	4638      	mov	r0, r7
 801594c:	f001 ff92 	bl	8017874 <memset>
 8015950:	e75a      	b.n	8015808 <rcl_wait_set_resize+0x52>
  SET_RESIZE(guard_condition,;,;);  // NOLINT
 8015952:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8015956:	4641      	mov	r1, r8
 8015958:	4798      	blx	r3
 801595a:	60a0      	str	r0, [r4, #8]
 801595c:	2800      	cmp	r0, #0
 801595e:	d0d7      	beq.n	8015910 <rcl_wait_set_resize+0x15a>
 8015960:	4642      	mov	r2, r8
 8015962:	4639      	mov	r1, r7
 8015964:	f001 ff86 	bl	8017874 <memset>
 8015968:	60e5      	str	r5, [r4, #12]
 801596a:	e75c      	b.n	8015826 <rcl_wait_set_resize+0x70>
    rmw_gcs->guard_conditions = (void **)wait_set->impl->allocator.reallocate(
 801596c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8015970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015972:	4649      	mov	r1, r9
 8015974:	4798      	blx	r3
 8015976:	4605      	mov	r5, r0
 8015978:	6178      	str	r0, [r7, #20]
    if (!rmw_gcs->guard_conditions) {
 801597a:	b970      	cbnz	r0, 801599a <rcl_wait_set_resize+0x1e4>
      wait_set->impl->allocator.deallocate(
 801597c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801597e:	68a0      	ldr	r0, [r4, #8]
 8015980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015982:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015984:	4790      	blx	r2
      wait_set->impl->allocator.deallocate(
 8015986:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015988:	6920      	ldr	r0, [r4, #16]
 801598a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801598c:	6d99      	ldr	r1, [r3, #88]	; 0x58
      wait_set->guard_conditions = NULL;
 801598e:	e9c4 5502 	strd	r5, r5, [r4, #8]
      wait_set->impl->allocator.deallocate(
 8015992:	4790      	blx	r2
      wait_set->timers = NULL;
 8015994:	e9c4 5504 	strd	r5, r5, [r4, #16]
      return RCL_RET_BAD_ALLOC;
 8015998:	e7ba      	b.n	8015910 <rcl_wait_set_resize+0x15a>
 801599a:	464a      	mov	r2, r9
 801599c:	4641      	mov	r1, r8
 801599e:	f001 ff69 	bl	8017874 <memset>
 80159a2:	e74f      	b.n	8015844 <rcl_wait_set_resize+0x8e>
  SET_RESIZE(timer,;,;);  // NOLINT
 80159a4:	00b7      	lsls	r7, r6, #2
 80159a6:	4639      	mov	r1, r7
 80159a8:	47c0      	blx	r8
 80159aa:	6120      	str	r0, [r4, #16]
 80159ac:	2800      	cmp	r0, #0
 80159ae:	d0af      	beq.n	8015910 <rcl_wait_set_resize+0x15a>
 80159b0:	463a      	mov	r2, r7
 80159b2:	4629      	mov	r1, r5
 80159b4:	f001 ff5e 	bl	8017874 <memset>
 80159b8:	6166      	str	r6, [r4, #20]
 80159ba:	e752      	b.n	8015862 <rcl_wait_set_resize+0xac>
  SET_RESIZE(
 80159bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159be:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80159c2:	4632      	mov	r2, r6
 80159c4:	4649      	mov	r1, r9
 80159c6:	47c0      	blx	r8
 80159c8:	61a0      	str	r0, [r4, #24]
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d0a0      	beq.n	8015910 <rcl_wait_set_resize+0x15a>
 80159ce:	464a      	mov	r2, r9
 80159d0:	4629      	mov	r1, r5
 80159d2:	f001 ff4f 	bl	8017874 <memset>
 80159d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80159da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159dc:	61e3      	str	r3, [r4, #28]
 80159de:	f8da 0020 	ldr.w	r0, [sl, #32]
 80159e2:	f8ca 501c 	str.w	r5, [sl, #28]
 80159e6:	4632      	mov	r2, r6
 80159e8:	4649      	mov	r1, r9
 80159ea:	47c0      	blx	r8
 80159ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80159ee:	f8ca 0020 	str.w	r0, [sl, #32]
 80159f2:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80159f6:	f1b8 0f00 	cmp.w	r8, #0
 80159fa:	d105      	bne.n	8015a08 <rcl_wait_set_resize+0x252>
 80159fc:	69a0      	ldr	r0, [r4, #24]
 80159fe:	4631      	mov	r1, r6
 8015a00:	47b8      	blx	r7
 8015a02:	e9c4 8806 	strd	r8, r8, [r4, #24]
 8015a06:	e783      	b.n	8015910 <rcl_wait_set_resize+0x15a>
 8015a08:	464a      	mov	r2, r9
 8015a0a:	4629      	mov	r1, r5
 8015a0c:	4640      	mov	r0, r8
 8015a0e:	f001 ff31 	bl	8017874 <memset>
 8015a12:	e740      	b.n	8015896 <rcl_wait_set_resize+0xe0>
  SET_RESIZE(
 8015a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a16:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015a1a:	4632      	mov	r2, r6
 8015a1c:	4641      	mov	r1, r8
 8015a1e:	47b8      	blx	r7
 8015a20:	6220      	str	r0, [r4, #32]
 8015a22:	2800      	cmp	r0, #0
 8015a24:	f43f af74 	beq.w	8015910 <rcl_wait_set_resize+0x15a>
 8015a28:	4642      	mov	r2, r8
 8015a2a:	4629      	mov	r1, r5
 8015a2c:	f001 ff22 	bl	8017874 <memset>
 8015a30:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a36:	6263      	str	r3, [r4, #36]	; 0x24
 8015a38:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8015a3c:	f8ca 5028 	str.w	r5, [sl, #40]	; 0x28
 8015a40:	4632      	mov	r2, r6
 8015a42:	4641      	mov	r1, r8
 8015a44:	47b8      	blx	r7
 8015a46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a48:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
 8015a4c:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8015a4e:	b92f      	cbnz	r7, 8015a5c <rcl_wait_set_resize+0x2a6>
 8015a50:	6a20      	ldr	r0, [r4, #32]
 8015a52:	4631      	mov	r1, r6
 8015a54:	47c8      	blx	r9
 8015a56:	e9c4 7708 	strd	r7, r7, [r4, #32]
 8015a5a:	e759      	b.n	8015910 <rcl_wait_set_resize+0x15a>
 8015a5c:	4642      	mov	r2, r8
 8015a5e:	4629      	mov	r1, r5
 8015a60:	4638      	mov	r0, r7
 8015a62:	f001 ff07 	bl	8017874 <memset>
 8015a66:	e730      	b.n	80158ca <rcl_wait_set_resize+0x114>
  SET_RESIZE(
 8015a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a6a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015a6e:	4632      	mov	r2, r6
 8015a70:	4641      	mov	r1, r8
 8015a72:	47b8      	blx	r7
 8015a74:	62a0      	str	r0, [r4, #40]	; 0x28
 8015a76:	2800      	cmp	r0, #0
 8015a78:	f43f af4a 	beq.w	8015910 <rcl_wait_set_resize+0x15a>
 8015a7c:	4642      	mov	r2, r8
 8015a7e:	4629      	mov	r1, r5
 8015a80:	f001 fef8 	bl	8017874 <memset>
 8015a84:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a8c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8015a90:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8015a94:	4632      	mov	r2, r6
 8015a96:	4641      	mov	r1, r8
 8015a98:	47b8      	blx	r7
 8015a9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a9c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8015aa0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8015aa2:	b92f      	cbnz	r7, 8015ab0 <rcl_wait_set_resize+0x2fa>
 8015aa4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015aa6:	4631      	mov	r1, r6
 8015aa8:	47c8      	blx	r9
 8015aaa:	e9c4 770a 	strd	r7, r7, [r4, #40]	; 0x28
 8015aae:	e72f      	b.n	8015910 <rcl_wait_set_resize+0x15a>
 8015ab0:	4642      	mov	r2, r8
 8015ab2:	4629      	mov	r1, r5
 8015ab4:	4638      	mov	r0, r7
 8015ab6:	f001 fedd 	bl	8017874 <memset>
  return RCL_RET_OK;
 8015aba:	4628      	mov	r0, r5
 8015abc:	e729      	b.n	8015912 <rcl_wait_set_resize+0x15c>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8015abe:	200b      	movs	r0, #11
 8015ac0:	e727      	b.n	8015912 <rcl_wait_set_resize+0x15c>
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set->impl, RCL_RET_WAIT_SET_INVALID);
 8015ac2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015ac6:	e724      	b.n	8015912 <rcl_wait_set_resize+0x15c>

08015ac8 <rcl_wait_set_fini>:
{
 8015ac8:	b538      	push	{r3, r4, r5, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8015aca:	4605      	mov	r5, r0
 8015acc:	b180      	cbz	r0, 8015af0 <rcl_wait_set_fini+0x28>
  if (rcl_wait_set_is_valid(wait_set)) {
 8015ace:	f7ff fdc0 	bl	8015652 <rcl_wait_set_is_valid>
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	b150      	cbz	r0, 8015aec <rcl_wait_set_fini+0x24>
    rmw_ret_t ret = rmw_destroy_wait_set(wait_set->impl->rmw_wait_set);
 8015ad6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015ad8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015ada:	f000 fd96 	bl	801660a <rmw_destroy_wait_set>
    if (ret != RMW_RET_OK) {
 8015ade:	1e04      	subs	r4, r0, #0
    __wait_set_clean_up(wait_set);
 8015ae0:	4628      	mov	r0, r5
      result = RCL_RET_WAIT_SET_INVALID;
 8015ae2:	bf18      	it	ne
 8015ae4:	f44f 7461 	movne.w	r4, #900	; 0x384
    __wait_set_clean_up(wait_set);
 8015ae8:	f7f4 fa86 	bl	8009ff8 <__wait_set_clean_up>
}
 8015aec:	4620      	mov	r0, r4
 8015aee:	bd38      	pop	{r3, r4, r5, pc}
  RCL_CHECK_ARGUMENT_FOR_NULL(wait_set, RCL_RET_INVALID_ARGUMENT);
 8015af0:	240b      	movs	r4, #11
 8015af2:	e7fb      	b.n	8015aec <rcl_wait_set_fini+0x24>

08015af4 <rcl_wait_set_add_guard_condition>:
{
 8015af4:	b538      	push	{r3, r4, r5, lr}
  SET_ADD(guard_condition)
 8015af6:	4604      	mov	r4, r0
 8015af8:	b308      	cbz	r0, 8015b3e <rcl_wait_set_add_guard_condition+0x4a>
 8015afa:	f7ff fdaa 	bl	8015652 <rcl_wait_set_is_valid>
 8015afe:	b1d8      	cbz	r0, 8015b38 <rcl_wait_set_add_guard_condition+0x44>
 8015b00:	b1e9      	cbz	r1, 8015b3e <rcl_wait_set_add_guard_condition+0x4a>
 8015b02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015b04:	68e0      	ldr	r0, [r4, #12]
 8015b06:	68dd      	ldr	r5, [r3, #12]
 8015b08:	4285      	cmp	r5, r0
 8015b0a:	d21a      	bcs.n	8015b42 <rcl_wait_set_add_guard_condition+0x4e>
 8015b0c:	1c68      	adds	r0, r5, #1
 8015b0e:	60d8      	str	r0, [r3, #12]
 8015b10:	68a3      	ldr	r3, [r4, #8]
 8015b12:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015b16:	b102      	cbz	r2, 8015b1a <rcl_wait_set_add_guard_condition+0x26>
 8015b18:	6015      	str	r5, [r2, #0]
  SET_ADD_RMW(
 8015b1a:	4608      	mov	r0, r1
 8015b1c:	f001 fa9e 	bl	801705c <rcl_guard_condition_get_rmw_handle>
 8015b20:	b190      	cbz	r0, 8015b48 <rcl_wait_set_add_guard_condition+0x54>
 8015b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015b24:	6842      	ldr	r2, [r0, #4]
 8015b26:	695b      	ldr	r3, [r3, #20]
 8015b28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015b2e:	6913      	ldr	r3, [r2, #16]
 8015b30:	3301      	adds	r3, #1
 8015b32:	6113      	str	r3, [r2, #16]
  return RCL_RET_OK;
 8015b34:	2000      	movs	r0, #0
}
 8015b36:	bd38      	pop	{r3, r4, r5, pc}
  SET_ADD(guard_condition)
 8015b38:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015b3c:	e7fb      	b.n	8015b36 <rcl_wait_set_add_guard_condition+0x42>
 8015b3e:	200b      	movs	r0, #11
 8015b40:	e7f9      	b.n	8015b36 <rcl_wait_set_add_guard_condition+0x42>
 8015b42:	f240 3086 	movw	r0, #902	; 0x386
 8015b46:	e7f6      	b.n	8015b36 <rcl_wait_set_add_guard_condition+0x42>
  SET_ADD_RMW(
 8015b48:	2001      	movs	r0, #1
 8015b4a:	e7f4      	b.n	8015b36 <rcl_wait_set_add_guard_condition+0x42>

08015b4c <rcl_wait_set_add_timer>:
{
 8015b4c:	b538      	push	{r3, r4, r5, lr}
  SET_ADD(timer)
 8015b4e:	4604      	mov	r4, r0
 8015b50:	b328      	cbz	r0, 8015b9e <rcl_wait_set_add_timer+0x52>
 8015b52:	f7ff fd7e 	bl	8015652 <rcl_wait_set_is_valid>
 8015b56:	b1f8      	cbz	r0, 8015b98 <rcl_wait_set_add_timer+0x4c>
 8015b58:	b309      	cbz	r1, 8015b9e <rcl_wait_set_add_timer+0x52>
 8015b5a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015b5c:	6965      	ldr	r5, [r4, #20]
 8015b5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015b60:	42ab      	cmp	r3, r5
 8015b62:	d21e      	bcs.n	8015ba2 <rcl_wait_set_add_timer+0x56>
 8015b64:	1c5d      	adds	r5, r3, #1
 8015b66:	6405      	str	r5, [r0, #64]	; 0x40
 8015b68:	6920      	ldr	r0, [r4, #16]
 8015b6a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8015b6e:	b102      	cbz	r2, 8015b72 <rcl_wait_set_add_timer+0x26>
 8015b70:	6013      	str	r3, [r2, #0]
  rcl_guard_condition_t * guard_condition = rcl_timer_get_guard_condition(timer);
 8015b72:	4608      	mov	r0, r1
 8015b74:	f7ff fd42 	bl	80155fc <rcl_timer_get_guard_condition>
  if (NULL != guard_condition) {
 8015b78:	b160      	cbz	r0, 8015b94 <rcl_wait_set_add_timer+0x48>
    const size_t index = wait_set->size_of_guard_conditions + (wait_set->impl->timer_index - 1);
 8015b7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015b7c:	68e3      	ldr	r3, [r4, #12]
 8015b7e:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8015b80:	3b01      	subs	r3, #1
 8015b82:	441d      	add	r5, r3
    rmw_guard_condition_t * rmw_handle = rcl_guard_condition_get_rmw_handle(guard_condition);
 8015b84:	f001 fa6a 	bl	801705c <rcl_guard_condition_get_rmw_handle>
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8015b88:	b170      	cbz	r0, 8015ba8 <rcl_wait_set_add_timer+0x5c>
    wait_set->impl->rmw_guard_conditions.guard_conditions[index] = rmw_handle->data;
 8015b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015b8c:	6842      	ldr	r2, [r0, #4]
 8015b8e:	695b      	ldr	r3, [r3, #20]
 8015b90:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
  return RCL_RET_OK;
 8015b94:	2000      	movs	r0, #0
}
 8015b96:	bd38      	pop	{r3, r4, r5, pc}
  SET_ADD(timer)
 8015b98:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015b9c:	e7fb      	b.n	8015b96 <rcl_wait_set_add_timer+0x4a>
 8015b9e:	200b      	movs	r0, #11
 8015ba0:	e7f9      	b.n	8015b96 <rcl_wait_set_add_timer+0x4a>
 8015ba2:	f240 3086 	movw	r0, #902	; 0x386
 8015ba6:	e7f6      	b.n	8015b96 <rcl_wait_set_add_timer+0x4a>
    RCL_CHECK_FOR_NULL_WITH_MSG(
 8015ba8:	2001      	movs	r0, #1
 8015baa:	e7f4      	b.n	8015b96 <rcl_wait_set_add_timer+0x4a>

08015bac <rcl_wait_set_add_client>:
{
 8015bac:	b538      	push	{r3, r4, r5, lr}
  SET_ADD(client)
 8015bae:	4604      	mov	r4, r0
 8015bb0:	b308      	cbz	r0, 8015bf6 <rcl_wait_set_add_client+0x4a>
 8015bb2:	f7ff fd4e 	bl	8015652 <rcl_wait_set_is_valid>
 8015bb6:	b1d8      	cbz	r0, 8015bf0 <rcl_wait_set_add_client+0x44>
 8015bb8:	b1e9      	cbz	r1, 8015bf6 <rcl_wait_set_add_client+0x4a>
 8015bba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015bbc:	69e0      	ldr	r0, [r4, #28]
 8015bbe:	699d      	ldr	r5, [r3, #24]
 8015bc0:	4285      	cmp	r5, r0
 8015bc2:	d21a      	bcs.n	8015bfa <rcl_wait_set_add_client+0x4e>
 8015bc4:	1c68      	adds	r0, r5, #1
 8015bc6:	6198      	str	r0, [r3, #24]
 8015bc8:	69a3      	ldr	r3, [r4, #24]
 8015bca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015bce:	b102      	cbz	r2, 8015bd2 <rcl_wait_set_add_client+0x26>
 8015bd0:	6015      	str	r5, [r2, #0]
  SET_ADD_RMW(client, rmw_clients.clients, rmw_clients.client_count)
 8015bd2:	4608      	mov	r0, r1
 8015bd4:	f7ff fa26 	bl	8015024 <rcl_client_get_rmw_handle>
 8015bd8:	b190      	cbz	r0, 8015c00 <rcl_wait_set_add_client+0x54>
 8015bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015bdc:	6842      	ldr	r2, [r0, #4]
 8015bde:	6a1b      	ldr	r3, [r3, #32]
 8015be0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015be4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015be6:	69d3      	ldr	r3, [r2, #28]
 8015be8:	3301      	adds	r3, #1
 8015bea:	61d3      	str	r3, [r2, #28]
  return RCL_RET_OK;
 8015bec:	2000      	movs	r0, #0
}
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
  SET_ADD(client)
 8015bf0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015bf4:	e7fb      	b.n	8015bee <rcl_wait_set_add_client+0x42>
 8015bf6:	200b      	movs	r0, #11
 8015bf8:	e7f9      	b.n	8015bee <rcl_wait_set_add_client+0x42>
 8015bfa:	f240 3086 	movw	r0, #902	; 0x386
 8015bfe:	e7f6      	b.n	8015bee <rcl_wait_set_add_client+0x42>
  SET_ADD_RMW(client, rmw_clients.clients, rmw_clients.client_count)
 8015c00:	2001      	movs	r0, #1
 8015c02:	e7f4      	b.n	8015bee <rcl_wait_set_add_client+0x42>

08015c04 <rcl_wait_set_add_service>:
{
 8015c04:	b538      	push	{r3, r4, r5, lr}
  SET_ADD(service)
 8015c06:	4604      	mov	r4, r0
 8015c08:	b308      	cbz	r0, 8015c4e <rcl_wait_set_add_service+0x4a>
 8015c0a:	f7ff fd22 	bl	8015652 <rcl_wait_set_is_valid>
 8015c0e:	b1d8      	cbz	r0, 8015c48 <rcl_wait_set_add_service+0x44>
 8015c10:	b1e9      	cbz	r1, 8015c4e <rcl_wait_set_add_service+0x4a>
 8015c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015c16:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015c18:	4285      	cmp	r5, r0
 8015c1a:	d21a      	bcs.n	8015c52 <rcl_wait_set_add_service+0x4e>
 8015c1c:	1c68      	adds	r0, r5, #1
 8015c1e:	6258      	str	r0, [r3, #36]	; 0x24
 8015c20:	6a23      	ldr	r3, [r4, #32]
 8015c22:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015c26:	b102      	cbz	r2, 8015c2a <rcl_wait_set_add_service+0x26>
 8015c28:	6015      	str	r5, [r2, #0]
  SET_ADD_RMW(service, rmw_services.services, rmw_services.service_count)
 8015c2a:	4608      	mov	r0, r1
 8015c2c:	f7ff fb6e 	bl	801530c <rcl_service_get_rmw_handle>
 8015c30:	b190      	cbz	r0, 8015c58 <rcl_wait_set_add_service+0x54>
 8015c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c34:	6842      	ldr	r2, [r0, #4]
 8015c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c38:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015c3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015c40:	3301      	adds	r3, #1
 8015c42:	6293      	str	r3, [r2, #40]	; 0x28
  return RCL_RET_OK;
 8015c44:	2000      	movs	r0, #0
}
 8015c46:	bd38      	pop	{r3, r4, r5, pc}
  SET_ADD(service)
 8015c48:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015c4c:	e7fb      	b.n	8015c46 <rcl_wait_set_add_service+0x42>
 8015c4e:	200b      	movs	r0, #11
 8015c50:	e7f9      	b.n	8015c46 <rcl_wait_set_add_service+0x42>
 8015c52:	f240 3086 	movw	r0, #902	; 0x386
 8015c56:	e7f6      	b.n	8015c46 <rcl_wait_set_add_service+0x42>
  SET_ADD_RMW(service, rmw_services.services, rmw_services.service_count)
 8015c58:	2001      	movs	r0, #1
 8015c5a:	e7f4      	b.n	8015c46 <rcl_wait_set_add_service+0x42>

08015c5c <lock_memory>:

void lock_memory(uint64_t *address){
 8015c5c:	b508      	push	{r3, lr}
  bool * memory_lock = get_memory_lock(address);
 8015c5e:	f7f4 fa8f 	bl	800a180 <get_memory_lock>

  while (__atomic_test_and_set(memory_lock, __ATOMIC_ACQUIRE) == 1);
 8015c62:	f04f 0201 	mov.w	r2, #1
 8015c66:	e8d0 3f4f 	ldrexb	r3, [r0]
 8015c6a:	e8c0 2f41 	strexb	r1, r2, [r0]
 8015c6e:	2900      	cmp	r1, #0
 8015c70:	d1f9      	bne.n	8015c66 <lock_memory+0xa>
 8015c72:	f3bf 8f5b 	dmb	ish
 8015c76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015c7a:	d1f4      	bne.n	8015c66 <lock_memory+0xa>
}
 8015c7c:	bd08      	pop	{r3, pc}

08015c7e <unlock_memory>:

void unlock_memory(uint64_t *address){
 8015c7e:	b508      	push	{r3, lr}
  bool * memory_lock = get_memory_lock(address);
 8015c80:	f7f4 fa7e 	bl	800a180 <get_memory_lock>

  __atomic_clear(memory_lock, __ATOMIC_RELEASE);
 8015c84:	f3bf 8f5b 	dmb	ish
 8015c88:	2300      	movs	r3, #0
 8015c8a:	7003      	strb	r3, [r0, #0]
}
 8015c8c:	bd08      	pop	{r3, pc}

08015c8e <__atomic_load_8>:

uint64_t __atomic_load_8(uint64_t *mem, int model) { 
 8015c8e:	b5d0      	push	{r4, r6, r7, lr}
 8015c90:	4604      	mov	r4, r0
  (void) model;

  lock_memory(mem); 
 8015c92:	f7ff ffe3 	bl	8015c5c <lock_memory>
  uint64_t ret = *mem; 
 8015c96:	e9d4 6700 	ldrd	r6, r7, [r4]
  unlock_memory(mem); 
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f7ff ffef 	bl	8015c7e <unlock_memory>
  return ret; 
}
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	4639      	mov	r1, r7
 8015ca4:	bdd0      	pop	{r4, r6, r7, pc}

08015ca6 <__atomic_store_8>:

void __atomic_store_8(uint64_t *mem, uint64_t val, int model) { 
 8015ca6:	b570      	push	{r4, r5, r6, lr}
 8015ca8:	4604      	mov	r4, r0
 8015caa:	4616      	mov	r6, r2
 8015cac:	461d      	mov	r5, r3
  (void) model;

  lock_memory(mem); 
 8015cae:	f7ff ffd5 	bl	8015c5c <lock_memory>
  *mem = val; 
 8015cb2:	e9c4 6500 	strd	r6, r5, [r4]
  unlock_memory(mem); 
 8015cb6:	4620      	mov	r0, r4
}
 8015cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  unlock_memory(mem); 
 8015cbc:	f7ff bfdf 	b.w	8015c7e <unlock_memory>

08015cc0 <__atomic_exchange_8>:

uint64_t __atomic_exchange_8(uint64_t *mem, uint64_t val, int model) { 
 8015cc0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015cc4:	4604      	mov	r4, r0
 8015cc6:	4616      	mov	r6, r2
 8015cc8:	461d      	mov	r5, r3
  (void) model;

  lock_memory(mem); 
 8015cca:	f7ff ffc7 	bl	8015c5c <lock_memory>
  uint64_t ret = *mem; 
 8015cce:	e9d4 8900 	ldrd	r8, r9, [r4]
  *mem = val; 
  unlock_memory(mem); 
 8015cd2:	4620      	mov	r0, r4
  *mem = val; 
 8015cd4:	e9c4 6500 	strd	r6, r5, [r4]
  unlock_memory(mem); 
 8015cd8:	f7ff ffd1 	bl	8015c7e <unlock_memory>
  return ret; 
}
 8015cdc:	4640      	mov	r0, r8
 8015cde:	4649      	mov	r1, r9
 8015ce0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08015ce4 <__atomic_fetch_add_8>:

uint64_t __atomic_fetch_add_8(uint64_t *mem, uint64_t val, int model) { 
 8015ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	4615      	mov	r5, r2
 8015cea:	461e      	mov	r6, r3
  (void) model;

  lock_memory(mem); 
 8015cec:	f7ff ffb6 	bl	8015c5c <lock_memory>
  uint64_t ret = *mem; 
 8015cf0:	e9d4 7100 	ldrd	r7, r1, [r4]
  *mem += val; 
 8015cf4:	197d      	adds	r5, r7, r5
 8015cf6:	eb41 0606 	adc.w	r6, r1, r6
  unlock_memory(mem); 
 8015cfa:	4620      	mov	r0, r4
  *mem += val; 
 8015cfc:	e9c4 5600 	strd	r5, r6, [r4]
  unlock_memory(mem); 
 8015d00:	f7ff ffbd 	bl	8015c7e <unlock_memory>
  return ret; 
}
 8015d04:	4638      	mov	r0, r7
 8015d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d08 <_rcutils_char_array_vsprintf>:
  return rcutils_char_array_resize(char_array, new_size);
}

static int
_rcutils_char_array_vsprintf(rcutils_char_array_t * char_array, const char * format, va_list args)
{
 8015d08:	b507      	push	{r0, r1, r2, lr}
 8015d0a:	4613      	mov	r3, r2
  va_list args_clone;
  va_copy(args_clone, args);
 8015d0c:	9201      	str	r2, [sp, #4]

  // when doing size calculation, remember the return value of vsnprintf excludes terminating null
  // byte
  int size = vsnprintf(char_array->buffer, char_array->buffer_capacity, format, args_clone);
 8015d0e:	460a      	mov	r2, r1
 8015d10:	68c1      	ldr	r1, [r0, #12]
 8015d12:	6800      	ldr	r0, [r0, #0]
 8015d14:	f7fa fff0 	bl	8010cf8 <vsnprintf>

  va_end(args_clone);

  return size;
}
 8015d18:	b003      	add	sp, #12
 8015d1a:	f85d fb04 	ldr.w	pc, [sp], #4

08015d1e <rcutils_char_array_init>:
{
 8015d1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d22:	460c      	mov	r4, r1
 8015d24:	4690      	mov	r8, r2
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(char_array, RCUTILS_RET_ERROR);
 8015d26:	4605      	mov	r5, r0
 8015d28:	b910      	cbnz	r0, 8015d30 <rcutils_char_array_init+0x12>
 8015d2a:	2002      	movs	r0, #2
}
 8015d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 8015d30:	4610      	mov	r0, r2
 8015d32:	f7fd f818 	bl	8012d66 <rcutils_allocator_is_valid>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d0f7      	beq.n	8015d2a <rcutils_char_array_init+0xc>
  char_array->owns_buffer = true;
 8015d3a:	2301      	movs	r3, #1
  char_array->allocator = *allocator;
 8015d3c:	4647      	mov	r7, r8
  char_array->owns_buffer = true;
 8015d3e:	712b      	strb	r3, [r5, #4]
  char_array->allocator = *allocator;
 8015d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  char_array->buffer_length = 0lu;
 8015d42:	f04f 0900 	mov.w	r9, #0
  char_array->allocator = *allocator;
 8015d46:	f105 0610 	add.w	r6, r5, #16
  char_array->buffer_capacity = buffer_capacity;
 8015d4a:	e9c5 9402 	strd	r9, r4, [r5, #8]
  char_array->allocator = *allocator;
 8015d4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015d50:	683b      	ldr	r3, [r7, #0]
 8015d52:	6033      	str	r3, [r6, #0]
  if (buffer_capacity > 0lu) {
 8015d54:	b17c      	cbz	r4, 8015d76 <rcutils_char_array_init+0x58>
      (char *)allocator->allocate(buffer_capacity * sizeof(char), allocator->state);
 8015d56:	f8d8 3000 	ldr.w	r3, [r8]
 8015d5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015d5e:	4620      	mov	r0, r4
 8015d60:	4798      	blx	r3
    char_array->buffer =
 8015d62:	6028      	str	r0, [r5, #0]
    RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 8015d64:	b918      	cbnz	r0, 8015d6e <rcutils_char_array_init+0x50>
 8015d66:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8015d6a:	200a      	movs	r0, #10
 8015d6c:	e7de      	b.n	8015d2c <rcutils_char_array_init+0xe>
    char_array->buffer[0] = '\0';
 8015d6e:	f880 9000 	strb.w	r9, [r0]
  return RCUTILS_RET_OK;
 8015d72:	4648      	mov	r0, r9
 8015d74:	e7da      	b.n	8015d2c <rcutils_char_array_init+0xe>
 8015d76:	4620      	mov	r0, r4
 8015d78:	e7d8      	b.n	8015d2c <rcutils_char_array_init+0xe>

08015d7a <rcutils_char_array_fini>:
{
 8015d7a:	b510      	push	{r4, lr}
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(char_array, RCUTILS_RET_ERROR);
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	b908      	cbnz	r0, 8015d84 <rcutils_char_array_fini+0xa>
 8015d80:	2002      	movs	r0, #2
}
 8015d82:	bd10      	pop	{r4, pc}
  if (char_array->owns_buffer) {
 8015d84:	7903      	ldrb	r3, [r0, #4]
 8015d86:	b143      	cbz	r3, 8015d9a <rcutils_char_array_fini+0x20>
    RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 8015d88:	3010      	adds	r0, #16
 8015d8a:	f7fc ffec 	bl	8012d66 <rcutils_allocator_is_valid>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d0f6      	beq.n	8015d80 <rcutils_char_array_fini+0x6>
    allocator->deallocate(char_array->buffer, allocator->state);
 8015d92:	6963      	ldr	r3, [r4, #20]
 8015d94:	6a21      	ldr	r1, [r4, #32]
 8015d96:	6820      	ldr	r0, [r4, #0]
 8015d98:	4798      	blx	r3
  char_array->buffer = NULL;
 8015d9a:	2000      	movs	r0, #0
  char_array->buffer_capacity = 0lu;
 8015d9c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  char_array->buffer = NULL;
 8015da0:	6020      	str	r0, [r4, #0]
  return RCUTILS_RET_OK;
 8015da2:	e7ee      	b.n	8015d82 <rcutils_char_array_fini+0x8>

08015da4 <rcutils_char_array_resize>:
{
 8015da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015da8:	460e      	mov	r6, r1
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(char_array, RCUTILS_RET_ERROR);
 8015daa:	4604      	mov	r4, r0
 8015dac:	b918      	cbnz	r0, 8015db6 <rcutils_char_array_resize+0x12>
 8015dae:	2502      	movs	r5, #2
}
 8015db0:	4628      	mov	r0, r5
 8015db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (0lu == new_size) {
 8015db6:	b389      	cbz	r1, 8015e1c <rcutils_char_array_resize+0x78>
  rcutils_allocator_t * allocator = &char_array->allocator;
 8015db8:	f100 0510 	add.w	r5, r0, #16
  RCUTILS_CHECK_ALLOCATOR_WITH_MSG(
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	f7fc ffd2 	bl	8012d66 <rcutils_allocator_is_valid>
 8015dc2:	2800      	cmp	r0, #0
 8015dc4:	d0f3      	beq.n	8015dae <rcutils_char_array_resize+0xa>
  if (new_size == char_array->buffer_capacity) {
 8015dc6:	68e7      	ldr	r7, [r4, #12]
 8015dc8:	42be      	cmp	r6, r7
 8015dca:	d012      	beq.n	8015df2 <rcutils_char_array_resize+0x4e>
  if (char_array->owns_buffer) {  // we own the buffer, we can do whatever we want
 8015dcc:	7923      	ldrb	r3, [r4, #4]
  char * old_buf = char_array->buffer;
 8015dce:	f8d4 9000 	ldr.w	r9, [r4]
  size_t old_length = char_array->buffer_length;
 8015dd2:	f8d4 8008 	ldr.w	r8, [r4, #8]
    char * new_buf = rcutils_reallocf(char_array->buffer, new_size * sizeof(char), allocator);
 8015dd6:	462a      	mov	r2, r5
 8015dd8:	4631      	mov	r1, r6
  if (char_array->owns_buffer) {  // we own the buffer, we can do whatever we want
 8015dda:	b163      	cbz	r3, 8015df6 <rcutils_char_array_resize+0x52>
    char * new_buf = rcutils_reallocf(char_array->buffer, new_size * sizeof(char), allocator);
 8015ddc:	4648      	mov	r0, r9
 8015dde:	f7fc ffd0 	bl	8012d82 <rcutils_reallocf>
    RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 8015de2:	b1e8      	cbz	r0, 8015e20 <rcutils_char_array_resize+0x7c>
    char_array->buffer = new_buf;
 8015de4:	6020      	str	r0, [r4, #0]
  char_array->buffer_capacity = new_size;
 8015de6:	60e6      	str	r6, [r4, #12]
  char_array->buffer_length = MIN(new_size, old_length);
 8015de8:	4546      	cmp	r6, r8
 8015dea:	bf94      	ite	ls
 8015dec:	60a6      	strls	r6, [r4, #8]
 8015dee:	f8c4 8008 	strhi.w	r8, [r4, #8]
    return RCUTILS_RET_OK;
 8015df2:	2500      	movs	r5, #0
 8015df4:	e7dc      	b.n	8015db0 <rcutils_char_array_resize+0xc>
    rcutils_ret_t ret = rcutils_char_array_init(char_array, new_size, allocator);
 8015df6:	4620      	mov	r0, r4
 8015df8:	f7ff ff91 	bl	8015d1e <rcutils_char_array_init>
    if (ret != RCUTILS_RET_OK) {
 8015dfc:	4605      	mov	r5, r0
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	d1d6      	bne.n	8015db0 <rcutils_char_array_resize+0xc>
    size_t n = MIN(new_size, old_size);
 8015e02:	42b7      	cmp	r7, r6
 8015e04:	bf28      	it	cs
 8015e06:	4637      	movcs	r7, r6
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8015e08:	463a      	mov	r2, r7
 8015e0a:	6820      	ldr	r0, [r4, #0]
 8015e0c:	4649      	mov	r1, r9
 8015e0e:	f7eb fcc7 	bl	80017a0 <memcpy>
    char_array->buffer[n - 1] = '\0';  // always have an ending
 8015e12:	6822      	ldr	r2, [r4, #0]
 8015e14:	4417      	add	r7, r2
 8015e16:	f807 5c01 	strb.w	r5, [r7, #-1]
 8015e1a:	e7e4      	b.n	8015de6 <rcutils_char_array_resize+0x42>
    return RCUTILS_RET_INVALID_ARGUMENT;
 8015e1c:	250b      	movs	r5, #11
 8015e1e:	e7c7      	b.n	8015db0 <rcutils_char_array_resize+0xc>
    RCUTILS_CHECK_FOR_NULL_WITH_MSG(
 8015e20:	250a      	movs	r5, #10
 8015e22:	e7c5      	b.n	8015db0 <rcutils_char_array_resize+0xc>

08015e24 <rcutils_char_array_expand_as_needed>:
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(char_array, RCUTILS_RET_ERROR);
 8015e24:	b120      	cbz	r0, 8015e30 <rcutils_char_array_expand_as_needed+0xc>
  if (new_size <= char_array->buffer_capacity) {
 8015e26:	68c3      	ldr	r3, [r0, #12]
 8015e28:	428b      	cmp	r3, r1
 8015e2a:	d203      	bcs.n	8015e34 <rcutils_char_array_expand_as_needed+0x10>
  return rcutils_char_array_resize(char_array, new_size);
 8015e2c:	f7ff bfba 	b.w	8015da4 <rcutils_char_array_resize>
  RCUTILS_CHECK_ARGUMENT_FOR_NULL(char_array, RCUTILS_RET_ERROR);
 8015e30:	2002      	movs	r0, #2
 8015e32:	4770      	bx	lr
    return RCUTILS_RET_OK;
 8015e34:	2000      	movs	r0, #0
}
 8015e36:	4770      	bx	lr

08015e38 <rcutils_char_array_vsprintf>:

rcutils_ret_t
rcutils_char_array_vsprintf(rcutils_char_array_t * char_array, const char * format, va_list args)
{
 8015e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	460f      	mov	r7, r1
 8015e40:	4690      	mov	r8, r2
  int size = _rcutils_char_array_vsprintf(char_array, format, args);
 8015e42:	f7ff ff61 	bl	8015d08 <_rcutils_char_array_vsprintf>

  if (size < 0) {
 8015e46:	1e05      	subs	r5, r0, #0
 8015e48:	db12      	blt.n	8015e70 <rcutils_char_array_vsprintf+0x38>
    return RCUTILS_RET_ERROR;
  }

  size_t new_size = (size_t) size + 1;  // with the terminating null byte

  if (new_size > char_array->buffer_capacity) {
 8015e4a:	68e3      	ldr	r3, [r4, #12]
  size_t new_size = (size_t) size + 1;  // with the terminating null byte
 8015e4c:	1c6e      	adds	r6, r5, #1
  if (new_size > char_array->buffer_capacity) {
 8015e4e:	42b3      	cmp	r3, r6
 8015e50:	d210      	bcs.n	8015e74 <rcutils_char_array_vsprintf+0x3c>
    rcutils_ret_t ret = rcutils_char_array_expand_as_needed(char_array, new_size);
 8015e52:	4631      	mov	r1, r6
 8015e54:	4620      	mov	r0, r4
 8015e56:	f7ff ffe5 	bl	8015e24 <rcutils_char_array_expand_as_needed>
    if (ret != RCUTILS_RET_OK) {
 8015e5a:	b968      	cbnz	r0, 8015e78 <rcutils_char_array_vsprintf+0x40>
      RCUTILS_SET_ERROR_MSG("char array failed to expand");
      return ret;
    }

    if (_rcutils_char_array_vsprintf(char_array, format, args) != size) {
 8015e5c:	4642      	mov	r2, r8
 8015e5e:	4639      	mov	r1, r7
 8015e60:	4620      	mov	r0, r4
 8015e62:	f7ff ff51 	bl	8015d08 <_rcutils_char_array_vsprintf>
 8015e66:	42a8      	cmp	r0, r5
 8015e68:	d004      	beq.n	8015e74 <rcutils_char_array_vsprintf+0x3c>
      if (rcutils_char_array_fini(char_array) == RCUTILS_RET_OK) {
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	f7ff ff85 	bl	8015d7a <rcutils_char_array_fini>
    return RCUTILS_RET_ERROR;
 8015e70:	2002      	movs	r0, #2
 8015e72:	e001      	b.n	8015e78 <rcutils_char_array_vsprintf+0x40>
      }
      return RCUTILS_RET_ERROR;
    }
  }

  char_array->buffer_length = new_size;
 8015e74:	60a6      	str	r6, [r4, #8]

  return RCUTILS_RET_OK;
 8015e76:	2000      	movs	r0, #0
}
 8015e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e7c <rcutils_char_array_memcpy>:

rcutils_ret_t
rcutils_char_array_memcpy(rcutils_char_array_t * char_array, const char * src, size_t n)
{
 8015e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e7e:	460f      	mov	r7, r1
  rcutils_ret_t ret = rcutils_char_array_expand_as_needed(char_array, n);
 8015e80:	4611      	mov	r1, r2
{
 8015e82:	4606      	mov	r6, r0
 8015e84:	4614      	mov	r4, r2
  rcutils_ret_t ret = rcutils_char_array_expand_as_needed(char_array, n);
 8015e86:	f7ff ffcd 	bl	8015e24 <rcutils_char_array_expand_as_needed>
  if (ret != RCUTILS_RET_OK) {
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	b928      	cbnz	r0, 8015e9a <rcutils_char_array_memcpy+0x1e>
 8015e8e:	6830      	ldr	r0, [r6, #0]
 8015e90:	4622      	mov	r2, r4
 8015e92:	4639      	mov	r1, r7
 8015e94:	f7eb fc84 	bl	80017a0 <memcpy>
    RCUTILS_SET_ERROR_MSG("char array failed to expand");
    return ret;
  }
  memcpy(char_array->buffer, src, n);
  char_array->buffer_length = n;
 8015e98:	60b4      	str	r4, [r6, #8]
  return RCUTILS_RET_OK;
}
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015e9e <rcutils_char_array_strcpy>:

rcutils_ret_t
rcutils_char_array_strcpy(rcutils_char_array_t * char_array, const char * src)
{
 8015e9e:	b538      	push	{r3, r4, r5, lr}
 8015ea0:	4605      	mov	r5, r0
  return rcutils_char_array_memcpy(char_array, src, strlen(src) + 1);
 8015ea2:	4608      	mov	r0, r1
{
 8015ea4:	460c      	mov	r4, r1
  return rcutils_char_array_memcpy(char_array, src, strlen(src) + 1);
 8015ea6:	f7ea f98b 	bl	80001c0 <strlen>
 8015eaa:	4621      	mov	r1, r4
 8015eac:	1c42      	adds	r2, r0, #1
 8015eae:	4628      	mov	r0, r5
}
 8015eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return rcutils_char_array_memcpy(char_array, src, strlen(src) + 1);
 8015eb4:	f7ff bfe2 	b.w	8015e7c <rcutils_char_array_memcpy>

08015eb8 <rcutils_char_array_strncat>:

rcutils_ret_t
rcutils_char_array_strncat(rcutils_char_array_t * char_array, const char * src, size_t n)
{
 8015eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ebc:	4604      	mov	r4, r0
  size_t current_strlen = strlen(char_array->buffer);
 8015ebe:	6800      	ldr	r0, [r0, #0]
{
 8015ec0:	4617      	mov	r7, r2
 8015ec2:	4688      	mov	r8, r1
  size_t current_strlen = strlen(char_array->buffer);
 8015ec4:	f7ea f97c 	bl	80001c0 <strlen>
  size_t new_length = current_strlen + n + 1;
 8015ec8:	1c7e      	adds	r6, r7, #1
 8015eca:	4406      	add	r6, r0
  rcutils_ret_t ret = rcutils_char_array_expand_as_needed(char_array, new_length);
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4620      	mov	r0, r4
 8015ed0:	f7ff ffa8 	bl	8015e24 <rcutils_char_array_expand_as_needed>
  if (ret != RCUTILS_RET_OK) {
 8015ed4:	4605      	mov	r5, r0
 8015ed6:	b928      	cbnz	r0, 8015ee4 <rcutils_char_array_strncat+0x2c>
__ssp_bos_icheck3_restrict(strncat, char *, const char *)
 8015ed8:	6820      	ldr	r0, [r4, #0]
 8015eda:	463a      	mov	r2, r7
 8015edc:	4641      	mov	r1, r8
 8015ede:	f001 fed6 	bl	8017c8e <strncat>
  if (0 != err) {
    RCUTILS_SET_ERROR_MSG("strncat_s failed");
    return RCUTILS_RET_ERROR;
  }
#endif
  char_array->buffer_length = new_length;
 8015ee2:	60a6      	str	r6, [r4, #8]
  return RCUTILS_RET_OK;
}
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015eea <rcutils_char_array_strcat>:

rcutils_ret_t
rcutils_char_array_strcat(rcutils_char_array_t * char_array, const char * src)
{
 8015eea:	b538      	push	{r3, r4, r5, lr}
 8015eec:	4605      	mov	r5, r0
  return rcutils_char_array_strncat(char_array, src, strlen(src));
 8015eee:	4608      	mov	r0, r1
{
 8015ef0:	460c      	mov	r4, r1
  return rcutils_char_array_strncat(char_array, src, strlen(src));
 8015ef2:	f7ea f965 	bl	80001c0 <strlen>
 8015ef6:	4621      	mov	r1, r4
 8015ef8:	4602      	mov	r2, r0
 8015efa:	4628      	mov	r0, r5
}
 8015efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return rcutils_char_array_strncat(char_array, src, strlen(src));
 8015f00:	f7ff bfda 	b.w	8015eb8 <rcutils_char_array_strncat>

08015f04 <rcutils_is_directory>:
}
 8015f04:	2000      	movs	r0, #0
 8015f06:	4770      	bx	lr

08015f08 <rcutils_findn>:
  return rcutils_findn(str, delimiter, strlen(str));
}

size_t
rcutils_findn(const char * str, char delimiter, size_t string_length)
{
 8015f08:	b510      	push	{r4, lr}
  if (NULL == str || 0 == string_length) {
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	b138      	cbz	r0, 8015f1e <rcutils_findn+0x16>
 8015f0e:	b132      	cbz	r2, 8015f1e <rcutils_findn+0x16>
    return SIZE_MAX;
  }

  for (size_t i = 0; i < string_length; ++i) {
 8015f10:	2000      	movs	r0, #0
    if (str[i] == delimiter) {
 8015f12:	5c1c      	ldrb	r4, [r3, r0]
 8015f14:	428c      	cmp	r4, r1
 8015f16:	d004      	beq.n	8015f22 <rcutils_findn+0x1a>
  for (size_t i = 0; i < string_length; ++i) {
 8015f18:	3001      	adds	r0, #1
 8015f1a:	4282      	cmp	r2, r0
 8015f1c:	d1f9      	bne.n	8015f12 <rcutils_findn+0xa>
    return SIZE_MAX;
 8015f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      return i;
    }
  }
  return SIZE_MAX;
}
 8015f22:	bd10      	pop	{r4, pc}

08015f24 <rcutils_find>:
{
 8015f24:	b538      	push	{r3, r4, r5, lr}
 8015f26:	460d      	mov	r5, r1
  if (NULL == str || 0 == strlen(str)) {
 8015f28:	4604      	mov	r4, r0
 8015f2a:	b160      	cbz	r0, 8015f46 <rcutils_find+0x22>
 8015f2c:	f7ea f948 	bl	80001c0 <strlen>
 8015f30:	b148      	cbz	r0, 8015f46 <rcutils_find+0x22>
  return rcutils_findn(str, delimiter, strlen(str));
 8015f32:	4620      	mov	r0, r4
 8015f34:	f7ea f944 	bl	80001c0 <strlen>
 8015f38:	4629      	mov	r1, r5
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	4620      	mov	r0, r4
}
 8015f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return rcutils_findn(str, delimiter, strlen(str));
 8015f42:	f7ff bfe1 	b.w	8015f08 <rcutils_findn>
}
 8015f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f4a:	bd38      	pop	{r3, r4, r5, pc}

08015f4c <rcutils_find_lastn>:
}

size_t
rcutils_find_lastn(const char * str, char delimiter, size_t string_length)
{
  if (NULL == str || 0 == string_length) {
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	b168      	cbz	r0, 8015f6c <rcutils_find_lastn+0x20>
 8015f50:	b162      	cbz	r2, 8015f6c <rcutils_find_lastn+0x20>
    return SIZE_MAX;
  }

  for (size_t i = string_length - 1; i > 0; --i) {
 8015f52:	1e50      	subs	r0, r2, #1
 8015f54:	b928      	cbnz	r0, 8015f62 <rcutils_find_lastn+0x16>
    if (str[i] == delimiter) {
      return i;
    }
  }
  return str[0] == delimiter ? 0 : SIZE_MAX;
 8015f56:	7818      	ldrb	r0, [r3, #0]
 8015f58:	1a40      	subs	r0, r0, r1
 8015f5a:	bf18      	it	ne
 8015f5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8015f60:	4770      	bx	lr
    if (str[i] == delimiter) {
 8015f62:	5c1a      	ldrb	r2, [r3, r0]
 8015f64:	428a      	cmp	r2, r1
 8015f66:	d003      	beq.n	8015f70 <rcutils_find_lastn+0x24>
  for (size_t i = string_length - 1; i > 0; --i) {
 8015f68:	3801      	subs	r0, #1
 8015f6a:	e7f3      	b.n	8015f54 <rcutils_find_lastn+0x8>
    return SIZE_MAX;
 8015f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8015f70:	4770      	bx	lr

08015f72 <rcutils_format_string_limit>:
rcutils_format_string_limit(
  rcutils_allocator_t allocator,
  size_t limit,
  const char * format_string,
  ...)
{
 8015f72:	b40f      	push	{r0, r1, r2, r3}
 8015f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f76:	ac08      	add	r4, sp, #32
 8015f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f7c:	e9dd 460d 	ldrd	r4, r6, [sp, #52]	; 0x34
  if (NULL == format_string) {
 8015f80:	b936      	cbnz	r6, 8015f90 <rcutils_format_string_limit+0x1e>
  // format the string
  int ret = rcutils_vsnprintf(output_string, bytes_to_be_written + 1, format_string, args2);
  if (0 > ret) {
    allocator.deallocate(output_string, allocator.state);
    va_end(args2);
    return NULL;
 8015f82:	2400      	movs	r4, #0
  }
  output_string[bytes_to_be_written] = '\0';
  va_end(args2);
  return output_string;
}
 8015f84:	4620      	mov	r0, r4
 8015f86:	b003      	add	sp, #12
 8015f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f8c:	b004      	add	sp, #16
 8015f8e:	4770      	bx	lr
  RCUTILS_CHECK_ALLOCATOR(&allocator, return NULL);
 8015f90:	a808      	add	r0, sp, #32
 8015f92:	f7fc fee8 	bl	8012d66 <rcutils_allocator_is_valid>
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d0f3      	beq.n	8015f82 <rcutils_format_string_limit+0x10>
  size_t bytes_to_be_written = (size_t)rcutils_vsnprintf(NULL, 0, format_string, args1);
 8015f9a:	2100      	movs	r1, #0
  va_start(args1, format_string);
 8015f9c:	ab0f      	add	r3, sp, #60	; 0x3c
  size_t bytes_to_be_written = (size_t)rcutils_vsnprintf(NULL, 0, format_string, args1);
 8015f9e:	4632      	mov	r2, r6
 8015fa0:	4608      	mov	r0, r1
  va_copy(args2, args1);
 8015fa2:	e9cd 3300 	strd	r3, r3, [sp]
  size_t bytes_to_be_written = (size_t)rcutils_vsnprintf(NULL, 0, format_string, args1);
 8015fa6:	f7fc ff5d 	bl	8012e64 <rcutils_vsnprintf>
  if (bytes_to_be_written == (size_t)-1) {
 8015faa:	1c43      	adds	r3, r0, #1
  size_t bytes_to_be_written = (size_t)rcutils_vsnprintf(NULL, 0, format_string, args1);
 8015fac:	4605      	mov	r5, r0
  if (bytes_to_be_written == (size_t)-1) {
 8015fae:	d0e8      	beq.n	8015f82 <rcutils_format_string_limit+0x10>
  if (bytes_to_be_written + 1 > limit) {
 8015fb0:	1c43      	adds	r3, r0, #1
 8015fb2:	42a3      	cmp	r3, r4
    bytes_to_be_written = limit - 1;
 8015fb4:	bf88      	it	hi
 8015fb6:	f104 35ff 	addhi.w	r5, r4, #4294967295	; 0xffffffff
  char * output_string = allocator.allocate(bytes_to_be_written + 1, allocator.state);
 8015fba:	1c6f      	adds	r7, r5, #1
 8015fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fbe:	9b08      	ldr	r3, [sp, #32]
 8015fc0:	4638      	mov	r0, r7
 8015fc2:	4798      	blx	r3
  if (NULL == output_string) {
 8015fc4:	4604      	mov	r4, r0
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d0db      	beq.n	8015f82 <rcutils_format_string_limit+0x10>
  int ret = rcutils_vsnprintf(output_string, bytes_to_be_written + 1, format_string, args2);
 8015fca:	9b01      	ldr	r3, [sp, #4]
 8015fcc:	4632      	mov	r2, r6
 8015fce:	4639      	mov	r1, r7
 8015fd0:	f7fc ff48 	bl	8012e64 <rcutils_vsnprintf>
  if (0 > ret) {
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	da04      	bge.n	8015fe2 <rcutils_format_string_limit+0x70>
    allocator.deallocate(output_string, allocator.state);
 8015fd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fdc:	4620      	mov	r0, r4
 8015fde:	4798      	blx	r3
 8015fe0:	e7cf      	b.n	8015f82 <rcutils_format_string_limit+0x10>
  output_string[bytes_to_be_written] = '\0';
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	5563      	strb	r3, [r4, r5]
  return output_string;
 8015fe6:	e7cd      	b.n	8015f84 <rcutils_format_string_limit+0x12>

08015fe8 <rcutils_repl_str>:
rcutils_repl_str(
  const char * str,
  const char * from,
  const char * to,
  const rcutils_allocator_t * allocator)
{
 8015fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fec:	b087      	sub	sp, #28
 8015fee:	4607      	mov	r7, r0
  uintptr_t *pos_cache_tmp, *pos_cache = NULL;
  #else
  ptrdiff_t *pos_cache_tmp, *pos_cache = NULL;
  #endif
  size_t cache_sz = 0;
  size_t cpylen, orglen, retlen, tolen, fromlen = strlen(from);
 8015ff0:	4608      	mov	r0, r1
{
 8015ff2:	468a      	mov	sl, r1
 8015ff4:	9204      	str	r2, [sp, #16]
 8015ff6:	461e      	mov	r6, r3
  size_t cpylen, orglen, retlen, tolen, fromlen = strlen(from);
 8015ff8:	f7ea f8e2 	bl	80001c0 <strlen>
  size_t cache_sz = 0;
 8015ffc:	f04f 0900 	mov.w	r9, #0
  size_t cpylen, orglen, retlen, tolen, fromlen = strlen(from);
 8016000:	9002      	str	r0, [sp, #8]

  /* Find all matches and cache their positions. */
  while ((pstr2 = strstr(pstr, from)) != NULL) {
 8016002:	46bb      	mov	fp, r7
  uintptr_t *pos_cache_tmp, *pos_cache = NULL;
 8016004:	464d      	mov	r5, r9
  size_t i, count = 0;
 8016006:	464c      	mov	r4, r9
  size_t cache_sz_inc = 16;
 8016008:	f04f 0810 	mov.w	r8, #16
  while ((pstr2 = strstr(pstr, from)) != NULL) {
 801600c:	4651      	mov	r1, sl
 801600e:	4658      	mov	r0, fp
 8016010:	f002 fac0 	bl	8018594 <strstr>
 8016014:	9003      	str	r0, [sp, #12]
 8016016:	b9e8      	cbnz	r0, 8016054 <rcutils_repl_str+0x6c>

    pos_cache[count-1] = (size_t)(pstr2 - str);
    pstr = pstr2 + fromlen;
  }

  orglen = (size_t)(pstr - str) + strlen(pstr);
 8016018:	4658      	mov	r0, fp
 801601a:	f7ea f8d1 	bl	80001c0 <strlen>
 801601e:	ebab 0307 	sub.w	r3, fp, r7
 8016022:	eb03 0a00 	add.w	sl, r3, r0

  /* Allocate memory for the post-replacement string. */
  if (count > 0) {
 8016026:	2c00      	cmp	r4, #0
 8016028:	d03c      	beq.n	80160a4 <rcutils_repl_str+0xbc>
    tolen = strlen(to);
 801602a:	9804      	ldr	r0, [sp, #16]
 801602c:	f7ea f8c8 	bl	80001c0 <strlen>
    retlen = orglen + (tolen - fromlen) * count;
 8016030:	9a02      	ldr	r2, [sp, #8]
    tolen = strlen(to);
 8016032:	9001      	str	r0, [sp, #4]
    retlen = orglen + (tolen - fromlen) * count;
 8016034:	eba0 0b02 	sub.w	fp, r0, r2
 8016038:	fb04 ab0b 	mla	fp, r4, fp, sl
  } else {
    retlen = orglen;
  }
  ret = allocator->allocate(retlen + 1, allocator->state);
 801603c:	6833      	ldr	r3, [r6, #0]
 801603e:	6931      	ldr	r1, [r6, #16]
 8016040:	f10b 0001 	add.w	r0, fp, #1
 8016044:	4798      	blx	r3
  if (ret == NULL) {
 8016046:	4680      	mov	r8, r0
 8016048:	b178      	cbz	r0, 801606a <rcutils_repl_str+0x82>
    goto end_repl_str;
  }

  if (count == 0) {
 801604a:	bb6c      	cbnz	r4, 80160a8 <rcutils_repl_str+0xc0>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
 801604c:	4639      	mov	r1, r7
 801604e:	f7f6 fc27 	bl	800c8a0 <strcpy>
 8016052:	e00c      	b.n	801606e <rcutils_repl_str+0x86>
    count++;
 8016054:	3401      	adds	r4, #1
    if (cache_sz < count) {
 8016056:	45a1      	cmp	r9, r4
 8016058:	d219      	bcs.n	801608e <rcutils_repl_str+0xa6>
      cache_sz += cache_sz_inc;
 801605a:	44c1      	add	r9, r8
        allocator->reallocate(pos_cache, sizeof(*pos_cache) * cache_sz, allocator->state);
 801605c:	68b3      	ldr	r3, [r6, #8]
 801605e:	6932      	ldr	r2, [r6, #16]
 8016060:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8016064:	4628      	mov	r0, r5
 8016066:	4798      	blx	r3
      if (pos_cache_tmp == NULL) {
 8016068:	b948      	cbnz	r0, 801607e <rcutils_repl_str+0x96>
  char *pret, *ret = NULL;
 801606a:	f04f 0800 	mov.w	r8, #0
  }

end_repl_str:
  /* Free the cache and return the post-replacement string,
   * which will be NULL in the event of an error. */
  allocator->deallocate(pos_cache, allocator->state);
 801606e:	4628      	mov	r0, r5
 8016070:	6873      	ldr	r3, [r6, #4]
 8016072:	6931      	ldr	r1, [r6, #16]
 8016074:	4798      	blx	r3
  return ret;
}
 8016076:	4640      	mov	r0, r8
 8016078:	b007      	add	sp, #28
 801607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      cache_sz_inc *= cache_sz_inc_factor;
 801607e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016082:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 8016086:	bf28      	it	cs
 8016088:	f44f 1880 	movcs.w	r8, #1048576	; 0x100000
 801608c:	4605      	mov	r5, r0
    pos_cache[count-1] = (size_t)(pstr2 - str);
 801608e:	9a03      	ldr	r2, [sp, #12]
 8016090:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016094:	1bd2      	subs	r2, r2, r7
 8016096:	f843 2c04 	str.w	r2, [r3, #-4]
    pstr = pstr2 + fromlen;
 801609a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801609e:	eb03 0b02 	add.w	fp, r3, r2
 80160a2:	e7b3      	b.n	801600c <rcutils_repl_str+0x24>
    retlen = orglen;
 80160a4:	46d3      	mov	fp, sl
 80160a6:	e7c9      	b.n	801603c <rcutils_repl_str+0x54>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80160a8:	682a      	ldr	r2, [r5, #0]
 80160aa:	4639      	mov	r1, r7
 80160ac:	f7eb fb78 	bl	80017a0 <memcpy>
    pret += pos_cache[0];
 80160b0:	682b      	ldr	r3, [r5, #0]
      cpylen = (i == count-1 ? orglen : pos_cache[i+1]) - pos_cache[i] - fromlen;
 80160b2:	1e62      	subs	r2, r4, #1
    pret += pos_cache[0];
 80160b4:	4443      	add	r3, r8
    for (i = 0; i < count; i++) {
 80160b6:	f04f 0900 	mov.w	r9, #0
      cpylen = (i == count-1 ? orglen : pos_cache[i+1]) - pos_cache[i] - fromlen;
 80160ba:	9203      	str	r2, [sp, #12]
 80160bc:	9a01      	ldr	r2, [sp, #4]
 80160be:	9904      	ldr	r1, [sp, #16]
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7eb fb6d 	bl	80017a0 <memcpy>
      pret += tolen;
 80160c6:	9a01      	ldr	r2, [sp, #4]
      pstr = str + pos_cache[i] + fromlen;
 80160c8:	9902      	ldr	r1, [sp, #8]
 80160ca:	4603      	mov	r3, r0
      pret += tolen;
 80160cc:	4413      	add	r3, r2
      pstr = str + pos_cache[i] + fromlen;
 80160ce:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
 80160d2:	440a      	add	r2, r1
      cpylen = (i == count-1 ? orglen : pos_cache[i+1]) - pos_cache[i] - fromlen;
 80160d4:	9903      	ldr	r1, [sp, #12]
 80160d6:	4648      	mov	r0, r9
 80160d8:	4549      	cmp	r1, r9
 80160da:	f109 0901 	add.w	r9, r9, #1
 80160de:	bf0c      	ite	eq
 80160e0:	4650      	moveq	r0, sl
 80160e2:	f855 0029 	ldrne.w	r0, [r5, r9, lsl #2]
      pstr = str + pos_cache[i] + fromlen;
 80160e6:	eb07 0c02 	add.w	ip, r7, r2
 80160ea:	4661      	mov	r1, ip
      cpylen = (i == count-1 ? orglen : pos_cache[i+1]) - pos_cache[i] - fromlen;
 80160ec:	1a82      	subs	r2, r0, r2
 80160ee:	4618      	mov	r0, r3
 80160f0:	9205      	str	r2, [sp, #20]
 80160f2:	f7eb fb55 	bl	80017a0 <memcpy>
      pret += cpylen;
 80160f6:	9a05      	ldr	r2, [sp, #20]
 80160f8:	4603      	mov	r3, r0
    for (i = 0; i < count; i++) {
 80160fa:	454c      	cmp	r4, r9
      pret += cpylen;
 80160fc:	4413      	add	r3, r2
    for (i = 0; i < count; i++) {
 80160fe:	d1dd      	bne.n	80160bc <rcutils_repl_str+0xd4>
    ret[retlen] = '\0';
 8016100:	2300      	movs	r3, #0
 8016102:	f808 300b 	strb.w	r3, [r8, fp]
 8016106:	e7b2      	b.n	801606e <rcutils_repl_str+0x86>

08016108 <rmw_allocate>:

#include "rmw/types.h"

void *
rmw_allocate(size_t size)
{
 8016108:	b530      	push	{r4, r5, lr}
 801610a:	b087      	sub	sp, #28
 801610c:	4605      	mov	r5, r0
  // Could be overridden with a general purpose allocator
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
 801610e:	a801      	add	r0, sp, #4
 8016110:	f7f0 fe52 	bl	8006db8 <rcutils_get_default_allocator>
  void * ptr = allocator.allocate(size, allocator.state);
 8016114:	9905      	ldr	r1, [sp, #20]
 8016116:	9b01      	ldr	r3, [sp, #4]
 8016118:	4628      	mov	r0, r5
 801611a:	4798      	blx	r3
  if (ptr) {
 801611c:	4604      	mov	r4, r0
 801611e:	b118      	cbz	r0, 8016128 <rmw_allocate+0x20>
__ssp_bos_icheck3(memset, void *, int)
 8016120:	462a      	mov	r2, r5
 8016122:	2100      	movs	r1, #0
 8016124:	f001 fba6 	bl	8017874 <memset>
    memset(ptr, 0, size);
  }
  return ptr;
}
 8016128:	4620      	mov	r0, r4
 801612a:	b007      	add	sp, #28
 801612c:	bd30      	pop	{r4, r5, pc}

0801612e <rmw_free>:

void
rmw_free(void * pointer)
{
 801612e:	b510      	push	{r4, lr}
 8016130:	b086      	sub	sp, #24
 8016132:	4604      	mov	r4, r0
  // Should have a corresponding override with rmw_allocate
  rcutils_allocator_t allocator = rcutils_get_default_allocator();
 8016134:	a801      	add	r0, sp, #4
 8016136:	f7f0 fe3f 	bl	8006db8 <rcutils_get_default_allocator>
  allocator.deallocate(pointer, allocator.state);
 801613a:	9905      	ldr	r1, [sp, #20]
 801613c:	9b02      	ldr	r3, [sp, #8]
 801613e:	4620      	mov	r0, r4
}
 8016140:	b006      	add	sp, #24
 8016142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  allocator.deallocate(pointer, allocator.state);
 8016146:	4718      	bx	r3

08016148 <rmw_node_allocate>:

rmw_node_t *
rmw_node_allocate()
{
  // Could be overridden with custom (maybe static) node struct allocator
  return (rmw_node_t *)rmw_allocate(sizeof(rmw_node_t));
 8016148:	2014      	movs	r0, #20
 801614a:	f7ff bfdd 	b.w	8016108 <rmw_allocate>

0801614e <rmw_node_free>:

void
rmw_node_free(rmw_node_t * node)
{
  // Should have matching overide with rmw_node_allocate
  rmw_free(node);
 801614e:	f7ff bfee 	b.w	801612e <rmw_free>

08016152 <rmw_get_zero_initialized_context>:
{
#endif

rmw_context_t
rmw_get_zero_initialized_context(void)
{
 8016152:	b510      	push	{r4, lr}
  return (const rmw_context_t) {
 8016154:	2250      	movs	r2, #80	; 0x50
{
 8016156:	4604      	mov	r4, r0
  return (const rmw_context_t) {
 8016158:	2100      	movs	r1, #0
 801615a:	f001 fb8b 	bl	8017874 <memset>
           .instance_id = 0,
           .impl = NULL
  };  // NOLINT(readability/braces): false positive
}
 801615e:	4620      	mov	r0, r4
 8016160:	bd10      	pop	{r4, pc}

08016162 <rmw_get_zero_initialized_init_options>:
{
#endif

rmw_init_options_t
rmw_get_zero_initialized_init_options(void)
{
 8016162:	b510      	push	{r4, lr}
  return (const rmw_init_options_t) {
 8016164:	2238      	movs	r2, #56	; 0x38
{
 8016166:	4604      	mov	r4, r0
  return (const rmw_init_options_t) {
 8016168:	2100      	movs	r1, #0
 801616a:	f001 fb83 	bl	8017874 <memset>
           .localhost_only = RMW_LOCALHOST_ONLY_DEFAULT,
           .implementation_identifier = NULL,
           .impl = NULL,
           .instance_id = 0,
           .enclave = NULL,
           .security_options = rmw_get_default_security_options(),
 801616e:	f104 0010 	add.w	r0, r4, #16
 8016172:	f000 f805 	bl	8016180 <rmw_get_default_security_options>
  return (const rmw_init_options_t) {
 8016176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801617a:	60e3      	str	r3, [r4, #12]
  };  // NOLINT(readability/braces): false positive
}
 801617c:	4620      	mov	r0, r4
 801617e:	bd10      	pop	{r4, pc}

08016180 <rmw_get_default_security_options>:
 8016180:	2200      	movs	r2, #0
 8016182:	7002      	strb	r2, [r0, #0]
 8016184:	6042      	str	r2, [r0, #4]
 8016186:	4770      	bx	lr

08016188 <rmw_get_default_subscription_options>:
{
  rmw_subscription_options_t subscription_options = {
    .rmw_specific_subscription_payload = NULL,
    .ignore_local_publications = false,
  };
  return subscription_options;
 8016188:	2200      	movs	r2, #0
 801618a:	6002      	str	r2, [r0, #0]
 801618c:	7102      	strb	r2, [r0, #4]
}
 801618e:	4770      	bx	lr

08016190 <rmw_validate_namespace>:
{
 8016190:	b570      	push	{r4, r5, r6, lr}
 8016192:	460d      	mov	r5, r1
 8016194:	4616      	mov	r6, r2
  if (!namespace_) {
 8016196:	4604      	mov	r4, r0
 8016198:	b148      	cbz	r0, 80161ae <rmw_validate_namespace+0x1e>
  return rmw_validate_namespace_with_size(
 801619a:	f7ea f811 	bl	80001c0 <strlen>
 801619e:	4633      	mov	r3, r6
 80161a0:	4601      	mov	r1, r0
 80161a2:	462a      	mov	r2, r5
 80161a4:	4620      	mov	r0, r4
}
 80161a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return rmw_validate_namespace_with_size(
 80161aa:	f7f4 b85f 	b.w	800a26c <rmw_validate_namespace_with_size>
}
 80161ae:	200b      	movs	r0, #11
 80161b0:	bd70      	pop	{r4, r5, r6, pc}

080161b2 <rmw_validate_node_name>:
{
 80161b2:	b570      	push	{r4, r5, r6, lr}
 80161b4:	460d      	mov	r5, r1
 80161b6:	4616      	mov	r6, r2
  if (!node_name) {
 80161b8:	4604      	mov	r4, r0
 80161ba:	b148      	cbz	r0, 80161d0 <rmw_validate_node_name+0x1e>
  return rmw_validate_node_name_with_size(
 80161bc:	f7ea f800 	bl	80001c0 <strlen>
 80161c0:	4633      	mov	r3, r6
 80161c2:	4601      	mov	r1, r0
 80161c4:	462a      	mov	r2, r5
 80161c6:	4620      	mov	r0, r4
}
 80161c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return rmw_validate_node_name_with_size(
 80161cc:	f7f4 b8a4 	b.w	800a318 <rmw_validate_node_name_with_size>
}
 80161d0:	200b      	movs	r0, #11
 80161d2:	bd70      	pop	{r4, r5, r6, pc}

080161d4 <get_memory>:
{
  return mem->freeitems != NULL ? true : false;
}

rmw_uxrce_mempool_item_t * get_memory(rmw_uxrce_mempool_t * mem)
{
 80161d4:	4603      	mov	r3, r0
  return mem->freeitems != NULL ? true : false;
 80161d6:	6840      	ldr	r0, [r0, #4]
  rmw_uxrce_mempool_item_t * item = NULL;
  if (has_memory(mem)) {
 80161d8:	b158      	cbz	r0, 80161f2 <get_memory+0x1e>
    // Gets item from free pool
    item = mem->freeitems;
    mem->freeitems = item->next;
 80161da:	6882      	ldr	r2, [r0, #8]
 80161dc:	605a      	str	r2, [r3, #4]
    if (mem->freeitems) {
 80161de:	b10a      	cbz	r2, 80161e4 <get_memory+0x10>
      mem->freeitems->prev = NULL;
 80161e0:	2100      	movs	r1, #0
 80161e2:	6051      	str	r1, [r2, #4]
    }

    // Puts item in allocated pool
    item->next = mem->allocateditems;
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	6082      	str	r2, [r0, #8]
    if (item->next) {
 80161e8:	b102      	cbz	r2, 80161ec <get_memory+0x18>
      item->next->prev = item;
 80161ea:	6050      	str	r0, [r2, #4]
    }
    item->prev = NULL;
 80161ec:	2200      	movs	r2, #0
 80161ee:	6042      	str	r2, [r0, #4]
    mem->allocateditems = item;
 80161f0:	6018      	str	r0, [r3, #0]
    item->is_dynamic_memory = true;
    item = get_memory(mem);
#endif
  }
  return item;
}
 80161f2:	4770      	bx	lr

080161f4 <put_memory>:

void put_memory(rmw_uxrce_mempool_t * mem, rmw_uxrce_mempool_item_t * item)
{
  // Gets item from allocated pool
  if (item->prev) {
 80161f4:	684a      	ldr	r2, [r1, #4]
 80161f6:	b10a      	cbz	r2, 80161fc <put_memory+0x8>
 80161f8:	688b      	ldr	r3, [r1, #8]
    item->prev->next = item->next;
 80161fa:	6093      	str	r3, [r2, #8]
  }
  if (item->next) {
 80161fc:	688b      	ldr	r3, [r1, #8]
 80161fe:	b103      	cbz	r3, 8016202 <put_memory+0xe>
    item->next->prev = item->prev;
 8016200:	605a      	str	r2, [r3, #4]
  }

  if (mem->allocateditems == item) {
 8016202:	6802      	ldr	r2, [r0, #0]
 8016204:	428a      	cmp	r2, r1
    mem->allocateditems = item->next;
 8016206:	bf08      	it	eq
 8016208:	6003      	streq	r3, [r0, #0]
    return;
  }
#endif

  // Puts item in free pool
  item->next = mem->freeitems;
 801620a:	6843      	ldr	r3, [r0, #4]
 801620c:	608b      	str	r3, [r1, #8]
  if (item->next) {
 801620e:	b103      	cbz	r3, 8016212 <put_memory+0x1e>
    item->next->prev = item;
 8016210:	6059      	str	r1, [r3, #4]
  }
  item->prev = NULL;
 8016212:	2300      	movs	r3, #0
 8016214:	604b      	str	r3, [r1, #4]
  mem->freeitems = item;
 8016216:	6041      	str	r1, [r0, #4]
}
 8016218:	4770      	bx	lr

0801621a <rmw_destroy_client>:

rmw_ret_t
rmw_destroy_client(
  rmw_node_t * node,
  rmw_client_t * client)
{
 801621a:	b538      	push	{r3, r4, r5, lr}
 801621c:	460c      	mov	r4, r1
  EPROS_PRINT_TRACE()
  rmw_ret_t result_ret = RMW_RET_OK;
  if (!node) {
 801621e:	4605      	mov	r5, r0
 8016220:	b908      	cbnz	r0, 8016226 <rmw_destroy_client+0xc>
    RMW_SET_ERROR_MSG("node handle is null");
    result_ret = RMW_RET_ERROR;
 8016222:	2001      	movs	r0, #1
      result_ret = RMW_RET_OK;
    }
  }

  return result_ret;
}
 8016224:	bd38      	pop	{r3, r4, r5, pc}
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 8016226:	6800      	ldr	r0, [r0, #0]
 8016228:	f7fd f927 	bl	801347a <is_uxrce_rmw_identifier_valid>
 801622c:	2800      	cmp	r0, #0
 801622e:	d0f8      	beq.n	8016222 <rmw_destroy_client+0x8>
  } else if (!node->data) {
 8016230:	686b      	ldr	r3, [r5, #4]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d0f5      	beq.n	8016222 <rmw_destroy_client+0x8>
  } else if (!client) {
 8016236:	2c00      	cmp	r4, #0
 8016238:	d0f3      	beq.n	8016222 <rmw_destroy_client+0x8>
  } else if (!is_uxrce_rmw_identifier_valid(client->implementation_identifier)) {
 801623a:	6820      	ldr	r0, [r4, #0]
 801623c:	f7fd f91d 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8016240:	2800      	cmp	r0, #0
 8016242:	d0ee      	beq.n	8016222 <rmw_destroy_client+0x8>
  } else if (!client->data) {
 8016244:	6863      	ldr	r3, [r4, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d0eb      	beq.n	8016222 <rmw_destroy_client+0x8>
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 801624a:	686d      	ldr	r5, [r5, #4]
      uxr_buffer_delete_entity(
 801624c:	695a      	ldr	r2, [r3, #20]
      &custom_node->context->session, custom_node->context->reliable_output,
 801624e:	6968      	ldr	r0, [r5, #20]
      uxr_buffer_delete_entity(
 8016250:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 8016254:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8016258:	f7fd fc60 	bl	8013b1c <uxr_buffer_delete_entity>
 801625c:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, delete_client))
 801625e:	6968      	ldr	r0, [r5, #20]
 8016260:	f7fd f8e7 	bl	8013432 <run_xrce_session>
 8016264:	2800      	cmp	r0, #0
 8016266:	d0dc      	beq.n	8016222 <rmw_destroy_client+0x8>
      rmw_uxrce_fini_client_memory(client);
 8016268:	4620      	mov	r0, r4
 801626a:	f7f1 fcef 	bl	8007c4c <rmw_uxrce_fini_client_memory>
      result_ret = RMW_RET_OK;
 801626e:	2000      	movs	r0, #0
  return result_ret;
 8016270:	e7d8      	b.n	8016224 <rmw_destroy_client+0xa>

08016272 <destroy_topic>:
rmw_ret_t destroy_topic(rmw_uxrce_topic_t * topic)
{
  rmw_ret_t result_ret = RMW_RET_OK;

  uint16_t delete_topic = uxr_buffer_delete_entity(
    &topic->owner_node->context->session,
 8016272:	69c3      	ldr	r3, [r0, #28]
{
 8016274:	b510      	push	{r4, lr}
 8016276:	4604      	mov	r4, r0
    &topic->owner_node->context->session,
 8016278:	6958      	ldr	r0, [r3, #20]
  uint16_t delete_topic = uxr_buffer_delete_entity(
 801627a:	6922      	ldr	r2, [r4, #16]
 801627c:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 8016280:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8016284:	f7fd fc4a 	bl	8013b1c <uxr_buffer_delete_entity>
    topic->owner_node->context->reliable_output,
    topic->topic_id);

  rmw_uxrce_node_t * custom_node = topic->owner_node;

  if (!run_xrce_session(custom_node->context, delete_topic))
 8016288:	69e3      	ldr	r3, [r4, #28]
  uint16_t delete_topic = uxr_buffer_delete_entity(
 801628a:	4601      	mov	r1, r0
  if (!run_xrce_session(custom_node->context, delete_topic))
 801628c:	6958      	ldr	r0, [r3, #20]
 801628e:	f7fd f8d0 	bl	8013432 <run_xrce_session>
 8016292:	b120      	cbz	r0, 801629e <destroy_topic+0x2c>
  {
    result_ret = RMW_RET_ERROR;
  } else {
    rmw_uxrce_fini_topic_memory(topic);
 8016294:	4620      	mov	r0, r4
 8016296:	f7f1 fcf7 	bl	8007c88 <rmw_uxrce_fini_topic_memory>
    result_ret = RMW_RET_OK;
 801629a:	2000      	movs	r0, #0
  }
  return result_ret;
}
 801629c:	bd10      	pop	{r4, pc}
    result_ret = RMW_RET_ERROR;
 801629e:	2001      	movs	r0, #1
  return result_ret;
 80162a0:	e7fc      	b.n	801629c <destroy_topic+0x2a>

080162a2 <rmw_create_node>:
{
 80162a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a6:	4607      	mov	r7, r0
 80162a8:	4615      	mov	r5, r2
 80162aa:	461e      	mov	r6, r3
  if (!name || strlen(name) == 0) {
 80162ac:	460c      	mov	r4, r1
 80162ae:	b181      	cbz	r1, 80162d2 <rmw_create_node+0x30>
 80162b0:	4608      	mov	r0, r1
 80162b2:	f7e9 ff85 	bl	80001c0 <strlen>
 80162b6:	b160      	cbz	r0, 80162d2 <rmw_create_node+0x30>
  } else if (!namespace_ || strlen(namespace_) == 0) {
 80162b8:	b15d      	cbz	r5, 80162d2 <rmw_create_node+0x30>
 80162ba:	4628      	mov	r0, r5
 80162bc:	f7e9 ff80 	bl	80001c0 <strlen>
 80162c0:	b138      	cbz	r0, 80162d2 <rmw_create_node+0x30>
    rmw_node = create_node(name, namespace_, domain_id, context);
 80162c2:	463b      	mov	r3, r7
 80162c4:	4632      	mov	r2, r6
 80162c6:	4629      	mov	r1, r5
 80162c8:	4620      	mov	r0, r4
}
 80162ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    rmw_node = create_node(name, namespace_, domain_id, context);
 80162ce:	f7f4 ba71 	b.w	800a7b4 <create_node>
}
 80162d2:	2000      	movs	r0, #0
 80162d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162d8 <rmw_node_get_graph_guard_condition>:

const rmw_guard_condition_t *
rmw_node_get_graph_guard_condition(const rmw_node_t * node)
{
  rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
  rmw_context_impl_t * context = custom_node->context;
 80162d8:	6843      	ldr	r3, [r0, #4]
  rmw_guard_condition_t * graph_guard_condition =
 80162da:	6958      	ldr	r0, [r3, #20]
    graph_guard_condition->data = (void *)(&context->graph_info.has_changed);
  }
#endif  // RMW_UXRCE_GRAPH

  return graph_guard_condition;
}
 80162dc:	f500 7062 	add.w	r0, r0, #904	; 0x388
 80162e0:	4770      	bx	lr

080162e2 <rmw_take_request>:
rmw_take_request(
  const rmw_service_t * service,
  rmw_service_info_t * request_header,
  void * ros_request,
  bool * taken)
{
 80162e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162e4:	4604      	mov	r4, r0
 80162e6:	b089      	sub	sp, #36	; 0x24
 80162e8:	460d      	mov	r5, r1
 80162ea:	4617      	mov	r7, r2
  EPROS_PRINT_TRACE();

  if (taken != NULL) {
 80162ec:	461e      	mov	r6, r3
 80162ee:	b10b      	cbz	r3, 80162f4 <rmw_take_request+0x12>
    *taken = false;
 80162f0:	2300      	movs	r3, #0
 80162f2:	7033      	strb	r3, [r6, #0]
  }

  if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 80162f4:	6820      	ldr	r0, [r4, #0]
 80162f6:	f7fd f8c0 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d046      	beq.n	801638c <rmw_take_request+0xaa>
    RMW_SET_ERROR_MSG("Wrong implementation");
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
  }

  rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 80162fe:	6864      	ldr	r4, [r4, #4]

  if (!custom_service->micro_buffer_in_use) {
 8016300:	f894 385a 	ldrb.w	r3, [r4, #2138]	; 0x85a
 8016304:	2b00      	cmp	r3, #0
 8016306:	d043      	beq.n	8016390 <rmw_take_request+0xae>
    return RMW_RET_ERROR;
  }

  // Conversion from SampleIdentity to rmw_request_id_t
  request_header->request_id.sequence_number =
    (((int64_t) custom_service->sample_id[custom_service->history_read_index].sequence_number.high) << 32) 
 8016308:	f894 3859 	ldrb.w	r3, [r4, #2137]	; 0x859
 801630c:	2218      	movs	r2, #24
 801630e:	fb02 4103 	mla	r1, r2, r3, r4
  request_header->request_id.sequence_number =
 8016312:	e9d1 c013 	ldrd	ip, r0, [r1, #76]	; 0x4c
 8016316:	e9c5 0c08 	strd	r0, ip, [r5, #32]
    | custom_service->sample_id[custom_service->history_read_index].sequence_number.low;
  request_header->request_id.writer_guid[0] =
    (int8_t) custom_service->sample_id[custom_service->history_read_index].writer_guid.entityId.
    entityKind;
  memcpy(
 801631a:	fb02 4303 	mla	r3, r2, r3, r4
  request_header->request_id.writer_guid[0] =
 801631e:	f891 104b 	ldrb.w	r1, [r1, #75]	; 0x4b
 8016322:	7429      	strb	r1, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8016324:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8016328:	f8a5 1011 	strh.w	r1, [r5, #17]
 801632c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8016330:	74eb      	strb	r3, [r5, #19]
    &request_header->request_id.writer_guid[1],
    custom_service->sample_id[custom_service->history_read_index].writer_guid.entityId.entityKey,
    3);
  memcpy(
 8016332:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
 8016336:	fb02 4101 	mla	r1, r2, r1, r4
 801633a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801633c:	616b      	str	r3, [r5, #20]
 801633e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016340:	61ab      	str	r3, [r5, #24]
 8016342:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8016344:	61eb      	str	r3, [r5, #28]
    &request_header->request_id.writer_guid[4],
    custom_service->sample_id[custom_service->history_read_index].writer_guid.guidPrefix.data, 12);

  const rosidl_message_type_support_t * req_members =
    custom_service->type_support_callbacks->request_members_();
 8016346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016348:	689b      	ldr	r3, [r3, #8]
 801634a:	4798      	blx	r3
  const message_type_support_callbacks_t * functions =
    (const message_type_support_callbacks_t *)req_members->data;

  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer, custom_service->micro_buffer[custom_service->history_read_index],
 801634c:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
  const message_type_support_callbacks_t * functions =
 8016350:	6845      	ldr	r5, [r0, #4]
  ucdr_init_buffer(
 8016352:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    &temp_buffer, custom_service->micro_buffer[custom_service->history_read_index],
 8016356:	eb04 21c1 	add.w	r1, r4, r1, lsl #11
  ucdr_init_buffer(
 801635a:	f8d3 2854 	ldr.w	r2, [r3, #2132]	; 0x854
 801635e:	3154      	adds	r1, #84	; 0x54
 8016360:	4668      	mov	r0, sp
 8016362:	f7fd fb54 	bl	8013a0e <ucdr_init_buffer>
    custom_service->micro_buffer_lenght[custom_service->history_read_index]);


  bool deserialize_rv = functions->cdr_deserialize(&temp_buffer, ros_request);
 8016366:	68eb      	ldr	r3, [r5, #12]
 8016368:	4639      	mov	r1, r7
 801636a:	4668      	mov	r0, sp
 801636c:	4798      	blx	r3

  custom_service->history_read_index = (custom_service->history_read_index + 1) %
 801636e:	2300      	movs	r3, #0
 8016370:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
    RMW_UXRCE_MAX_HISTORY;
  if (custom_service->history_write_index == custom_service->history_read_index) {
 8016374:	f894 3858 	ldrb.w	r3, [r4, #2136]	; 0x858
 8016378:	b90b      	cbnz	r3, 801637e <rmw_take_request+0x9c>
    custom_service->micro_buffer_in_use = false;
 801637a:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
  }

  if (taken != NULL) {
 801637e:	b106      	cbz	r6, 8016382 <rmw_take_request+0xa0>
    *taken = deserialize_rv;
 8016380:	7030      	strb	r0, [r6, #0]
  }

  if (!deserialize_rv) {
 8016382:	f080 0001 	eor.w	r0, r0, #1
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
 8016386:	b2c0      	uxtb	r0, r0
    return RMW_RET_ERROR;
  }

  EPROS_PRINT_TRACE()
  return RMW_RET_OK;
}
 8016388:	b009      	add	sp, #36	; 0x24
 801638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
 801638c:	200c      	movs	r0, #12
 801638e:	e7fb      	b.n	8016388 <rmw_take_request+0xa6>
    return RMW_RET_ERROR;
 8016390:	2001      	movs	r0, #1
 8016392:	e7f9      	b.n	8016388 <rmw_take_request+0xa6>

08016394 <rmw_send_response>:
rmw_ret_t
rmw_send_response(
  const rmw_service_t * service,
  rmw_request_id_t * request_header,
  void * ros_response)
{
 8016394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016398:	4605      	mov	r5, r0
 801639a:	b091      	sub	sp, #68	; 0x44
  EPROS_PRINT_TRACE();

  if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 801639c:	6800      	ldr	r0, [r0, #0]
{
 801639e:	460c      	mov	r4, r1
 80163a0:	4616      	mov	r6, r2
  if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 80163a2:	f7fd f86a 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d03e      	beq.n	8016428 <rmw_send_response+0x94>
  rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
  rmw_uxrce_node_t * custom_node = custom_service->owner_node;

  // Conversion from rmw_request_id_t to SampleIdentity
  SampleIdentity sample_id;
  sample_id.sequence_number.high = (int32_t) (request_header->sequence_number >> 32);
 80163aa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
  sample_id.sequence_number.low = (uint32_t) request_header->sequence_number & 0xFFFFFFFF;
 80163ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sample_id.writer_guid.entityId.entityKind = (uint8_t) request_header->writer_guid[0];
 80163b2:	7823      	ldrb	r3, [r4, #0]
 80163b4:	f88d 3017 	strb.w	r3, [sp, #23]
 80163b8:	4623      	mov	r3, r4
 80163ba:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80163be:	f833 2f01 	ldrh.w	r2, [r3, #1]!
 80163c2:	6861      	ldr	r1, [r4, #4]
 80163c4:	789b      	ldrb	r3, [r3, #2]
 80163c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80163ca:	ab02      	add	r3, sp, #8
 80163cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80163d0:	c303      	stmia	r3!, {r0, r1}
  rmw_uxrce_service_t * custom_service = (rmw_uxrce_service_t *)service->data;
 80163d2:	686d      	ldr	r5, [r5, #4]
  rmw_uxrce_node_t * custom_node = custom_service->owner_node;
 80163d4:	68a0      	ldr	r0, [r4, #8]
 80163d6:	6018      	str	r0, [r3, #0]
  memcpy(
    sample_id.writer_guid.guidPrefix.data, &request_header->writer_guid[4],
    sizeof(sample_id.writer_guid.guidPrefix.data));

  const rosidl_message_type_support_t * res_members =
    custom_service->type_support_callbacks->response_members_();
 80163d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  rmw_uxrce_node_t * custom_node = custom_service->owner_node;
 80163da:	f8d5 7a60 	ldr.w	r7, [r5, #2656]	; 0xa60
    custom_service->type_support_callbacks->response_members_();
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	4798      	blx	r3
  const message_type_support_callbacks_t * functions =
 80163e2:	f8d0 9004 	ldr.w	r9, [r0, #4]
    (const message_type_support_callbacks_t *)res_members->data;

  uint32_t topic_size = functions->get_serialized_size(ros_response);
 80163e6:	4630      	mov	r0, r6
 80163e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80163ec:	4798      	blx	r3

  ucdrBuffer reply_ub;
  ucdr_init_buffer(&reply_ub, custom_service->replay_buffer, sizeof(custom_service->replay_buffer));
 80163ee:	f605 085f 	addw	r8, r5, #2143	; 0x85f
 80163f2:	f44f 7200 	mov.w	r2, #512	; 0x200
  uint32_t topic_size = functions->get_serialized_size(ros_response);
 80163f6:	4604      	mov	r4, r0
  ucdr_init_buffer(&reply_ub, custom_service->replay_buffer, sizeof(custom_service->replay_buffer));
 80163f8:	4641      	mov	r1, r8
 80163fa:	a808      	add	r0, sp, #32
 80163fc:	f7fd fb07 	bl	8013a0e <ucdr_init_buffer>

  functions->cdr_serialize(ros_response, &reply_ub);
 8016400:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016404:	a908      	add	r1, sp, #32
 8016406:	4630      	mov	r0, r6
 8016408:	4798      	blx	r3

  uxr_buffer_reply(
 801640a:	6978      	ldr	r0, [r7, #20]
 801640c:	e9cd 8400 	strd	r8, r4, [sp]
 8016410:	ab02      	add	r3, sp, #8
 8016412:	696a      	ldr	r2, [r5, #20]
 8016414:	f8d5 185b 	ldr.w	r1, [r5, #2139]	; 0x85b
 8016418:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 801641c:	f7fe f9fa 	bl	8014814 <uxr_buffer_reply>
    &custom_node->context->session, custom_service->stream_id,
    custom_service->service_id, &sample_id, custom_service->replay_buffer, topic_size);

  return RMW_RET_OK;
 8016420:	2000      	movs	r0, #0
}
 8016422:	b011      	add	sp, #68	; 0x44
 8016424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
 8016428:	200c      	movs	r0, #12
 801642a:	e7fa      	b.n	8016422 <rmw_send_response+0x8e>

0801642c <rmw_take_response>:
rmw_take_response(
  const rmw_client_t * client,
  rmw_service_info_t * request_header,
  void * ros_response,
  bool * taken)
{
 801642c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801642e:	4604      	mov	r4, r0
 8016430:	b089      	sub	sp, #36	; 0x24
 8016432:	460f      	mov	r7, r1
 8016434:	4616      	mov	r6, r2
  EPROS_PRINT_TRACE();

  if (taken != NULL) {
 8016436:	461d      	mov	r5, r3
 8016438:	b10b      	cbz	r3, 801643e <rmw_take_response+0x12>
    *taken = false;
 801643a:	2300      	movs	r3, #0
 801643c:	702b      	strb	r3, [r5, #0]
  }

  if (!is_uxrce_rmw_identifier_valid(client->implementation_identifier)) {
 801643e:	6820      	ldr	r0, [r4, #0]
 8016440:	f7fd f81b 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8016444:	b370      	cbz	r0, 80164a4 <rmw_take_response+0x78>
    RMW_SET_ERROR_MSG("Wrong implementation");
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
  }

  rmw_uxrce_client_t * custom_client = (rmw_uxrce_client_t *)client->data;
 8016446:	6864      	ldr	r4, [r4, #4]

  if (!custom_client->micro_buffer_in_use) {
 8016448:	f894 384e 	ldrb.w	r3, [r4, #2126]	; 0x84e
 801644c:	b363      	cbz	r3, 80164a8 <rmw_take_response+0x7c>
    return RMW_RET_ERROR;
  }

  request_header->request_id.sequence_number =
    custom_client->reply_id[custom_client->history_read_index];
 801644e:	f894 384d 	ldrb.w	r3, [r4, #2125]	; 0x84d
 8016452:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  request_header->request_id.sequence_number =
 8016456:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 801645a:	e9c7 2308 	strd	r2, r3, [r7, #32]

  const rosidl_message_type_support_t * res_members =
    custom_client->type_support_callbacks->response_members_();
 801645e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	4798      	blx	r3
    (const message_type_support_callbacks_t *)res_members->data;


  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer, custom_client->micro_buffer[custom_client->history_read_index],
 8016464:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d
  const message_type_support_callbacks_t * functions =
 8016468:	6847      	ldr	r7, [r0, #4]
  ucdr_init_buffer(
 801646a:	f201 2312 	addw	r3, r1, #530	; 0x212
    &temp_buffer, custom_client->micro_buffer[custom_client->history_read_index],
 801646e:	eb04 21c1 	add.w	r1, r4, r1, lsl #11
  ucdr_init_buffer(
 8016472:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8016476:	3148      	adds	r1, #72	; 0x48
 8016478:	4668      	mov	r0, sp
 801647a:	f7fd fac8 	bl	8013a0e <ucdr_init_buffer>
    custom_client->micro_buffer_lenght[custom_client->history_read_index]);

  bool deserialize_rv = functions->cdr_deserialize(
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	4631      	mov	r1, r6
 8016482:	4668      	mov	r0, sp
 8016484:	4798      	blx	r3
    &temp_buffer,
    ros_response);

  custom_client->history_read_index = (custom_client->history_read_index + 1) %
 8016486:	2300      	movs	r3, #0
 8016488:	f884 384d 	strb.w	r3, [r4, #2125]	; 0x84d
    RMW_UXRCE_MAX_HISTORY;
  if (custom_client->history_write_index == custom_client->history_read_index) {
 801648c:	f894 384c 	ldrb.w	r3, [r4, #2124]	; 0x84c
 8016490:	b90b      	cbnz	r3, 8016496 <rmw_take_response+0x6a>
    custom_client->micro_buffer_in_use = false;
 8016492:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e
  }

  if (taken != NULL) {
 8016496:	b105      	cbz	r5, 801649a <rmw_take_response+0x6e>
    *taken = deserialize_rv;
 8016498:	7028      	strb	r0, [r5, #0]
  }

  if (!deserialize_rv) {
 801649a:	f080 0001 	eor.w	r0, r0, #1
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
 801649e:	b2c0      	uxtb	r0, r0
    return RMW_RET_ERROR;
  }

  EPROS_PRINT_TRACE()
  return RMW_RET_OK;
}
 80164a0:	b009      	add	sp, #36	; 0x24
 80164a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return RMW_RET_INCORRECT_RMW_IMPLEMENTATION;
 80164a4:	200c      	movs	r0, #12
 80164a6:	e7fb      	b.n	80164a0 <rmw_take_response+0x74>
    return RMW_RET_ERROR;
 80164a8:	2001      	movs	r0, #1
 80164aa:	e7f9      	b.n	80164a0 <rmw_take_response+0x74>

080164ac <rmw_destroy_service>:

rmw_ret_t
rmw_destroy_service(
  rmw_node_t * node,
  rmw_service_t * service)
{
 80164ac:	b538      	push	{r3, r4, r5, lr}
 80164ae:	460d      	mov	r5, r1
  EPROS_PRINT_TRACE()
  rmw_ret_t result_ret = RMW_RET_OK;
  if (!node) {
 80164b0:	4604      	mov	r4, r0
 80164b2:	b910      	cbnz	r0, 80164ba <rmw_destroy_service+0xe>
    RMW_SET_ERROR_MSG("node handle is null");
    result_ret = RMW_RET_ERROR;
 80164b4:	2401      	movs	r4, #1
    } 
    rmw_uxrce_fini_service_memory(service);
  }

  return result_ret;
}
 80164b6:	4620      	mov	r0, r4
 80164b8:	bd38      	pop	{r3, r4, r5, pc}
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 80164ba:	6800      	ldr	r0, [r0, #0]
 80164bc:	f7fc ffdd 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d0f7      	beq.n	80164b4 <rmw_destroy_service+0x8>
  } else if (!node->data) {
 80164c4:	6863      	ldr	r3, [r4, #4]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d0f4      	beq.n	80164b4 <rmw_destroy_service+0x8>
  } else if (!service) {
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	d0f2      	beq.n	80164b4 <rmw_destroy_service+0x8>
  } else if (!is_uxrce_rmw_identifier_valid(service->implementation_identifier)) {
 80164ce:	6828      	ldr	r0, [r5, #0]
 80164d0:	f7fc ffd3 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80164d4:	2800      	cmp	r0, #0
 80164d6:	d0ed      	beq.n	80164b4 <rmw_destroy_service+0x8>
  } else if (!service->data) {
 80164d8:	686b      	ldr	r3, [r5, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d0ea      	beq.n	80164b4 <rmw_destroy_service+0x8>
    rmw_uxrce_node_t * custom_node = (rmw_uxrce_node_t *)node->data;
 80164de:	6864      	ldr	r4, [r4, #4]
      uxr_buffer_delete_entity(
 80164e0:	695a      	ldr	r2, [r3, #20]
      &custom_node->context->session, custom_node->context->reliable_output,
 80164e2:	6960      	ldr	r0, [r4, #20]
      uxr_buffer_delete_entity(
 80164e4:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 80164e8:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80164ec:	f7fd fb16 	bl	8013b1c <uxr_buffer_delete_entity>
 80164f0:	4601      	mov	r1, r0
    if (!run_xrce_session(custom_node->context, delete_service))
 80164f2:	6960      	ldr	r0, [r4, #20]
 80164f4:	f7fc ff9d 	bl	8013432 <run_xrce_session>
 80164f8:	f080 0401 	eor.w	r4, r0, #1
    rmw_uxrce_fini_service_memory(service);
 80164fc:	4628      	mov	r0, r5
  rmw_ret_t result_ret = RMW_RET_OK;
 80164fe:	b2e4      	uxtb	r4, r4
    rmw_uxrce_fini_service_memory(service);
 8016500:	f7f1 fb86 	bl	8007c10 <rmw_uxrce_fini_service_memory>
  return result_ret;
 8016504:	e7d7      	b.n	80164b6 <rmw_destroy_service+0xa>

08016506 <rmw_subscription_get_actual_qos>:

  rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscription->data;
  qos = &custom_subscription->qos;

  return RMW_RET_OK;
}
 8016506:	2000      	movs	r0, #0
 8016508:	4770      	bx	lr

0801650a <rmw_destroy_subscription>:

rmw_ret_t
rmw_destroy_subscription(rmw_node_t * node, rmw_subscription_t * subscription)
{
 801650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801650e:	460d      	mov	r5, r1
  EPROS_PRINT_TRACE()
  rmw_ret_t result_ret = RMW_RET_OK;
  if (!node) {
 8016510:	4604      	mov	r4, r0
 8016512:	b918      	cbnz	r0, 801651c <rmw_destroy_subscription+0x12>
    RMW_SET_ERROR_MSG("node handle is null");
    result_ret = RMW_RET_ERROR;
 8016514:	2401      	movs	r4, #1
    }
    rmw_uxrce_fini_subscription_memory(subscription);
  }

  return result_ret;
}
 8016516:	4620      	mov	r0, r4
 8016518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (!is_uxrce_rmw_identifier_valid(node->implementation_identifier)) {
 801651c:	6800      	ldr	r0, [r0, #0]
 801651e:	f7fc ffac 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8016522:	2800      	cmp	r0, #0
 8016524:	d0f6      	beq.n	8016514 <rmw_destroy_subscription+0xa>
  } else if (!node->data) {
 8016526:	6863      	ldr	r3, [r4, #4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d0f3      	beq.n	8016514 <rmw_destroy_subscription+0xa>
  } else if (!subscription) {
 801652c:	2d00      	cmp	r5, #0
 801652e:	d0f1      	beq.n	8016514 <rmw_destroy_subscription+0xa>
  } else if (!is_uxrce_rmw_identifier_valid(subscription->implementation_identifier)) {
 8016530:	6828      	ldr	r0, [r5, #0]
 8016532:	f7fc ffa2 	bl	801347a <is_uxrce_rmw_identifier_valid>
 8016536:	2800      	cmp	r0, #0
 8016538:	d0ec      	beq.n	8016514 <rmw_destroy_subscription+0xa>
  } else if (!subscription->data) {
 801653a:	686c      	ldr	r4, [r5, #4]
 801653c:	2c00      	cmp	r4, #0
 801653e:	d0e9      	beq.n	8016514 <rmw_destroy_subscription+0xa>
    destroy_topic(custom_subscription->topic);
 8016540:	f8d4 0848 	ldr.w	r0, [r4, #2120]	; 0x848
    rmw_uxrce_node_t * custom_node = custom_subscription->owner_node;
 8016544:	f8d4 884c 	ldr.w	r8, [r4, #2124]	; 0x84c
    destroy_topic(custom_subscription->topic);
 8016548:	f7ff fe93 	bl	8016272 <destroy_topic>
      &custom_subscription->owner_node->context->session,
 801654c:	f8d4 384c 	ldr.w	r3, [r4, #2124]	; 0x84c
      uxr_buffer_delete_entity(
 8016550:	69a2      	ldr	r2, [r4, #24]
      &custom_subscription->owner_node->context->session,
 8016552:	6958      	ldr	r0, [r3, #20]
      uxr_buffer_delete_entity(
 8016554:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 8016558:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 801655c:	f7fd fade 	bl	8013b1c <uxr_buffer_delete_entity>
      &custom_subscription->owner_node->context->session,
 8016560:	f8d4 384c 	ldr.w	r3, [r4, #2124]	; 0x84c
      uxr_buffer_delete_entity(
 8016564:	6962      	ldr	r2, [r4, #20]
      uxr_buffer_delete_entity(
 8016566:	4607      	mov	r7, r0
      &custom_subscription->owner_node->context->session,
 8016568:	6958      	ldr	r0, [r3, #20]
      uxr_buffer_delete_entity(
 801656a:	f8d0 1398 	ldr.w	r1, [r0, #920]	; 0x398
 801656e:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8016572:	f7fd fad3 	bl	8013b1c <uxr_buffer_delete_entity>
    bool ret = run_xrce_session(custom_node->context, delete_datareader);
 8016576:	4639      	mov	r1, r7
      uxr_buffer_delete_entity(
 8016578:	4606      	mov	r6, r0
    bool ret = run_xrce_session(custom_node->context, delete_datareader);
 801657a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801657e:	f7fc ff58 	bl	8013432 <run_xrce_session>
    ret &= run_xrce_session(custom_node->context, delete_subscriber);
 8016582:	4631      	mov	r1, r6
    bool ret = run_xrce_session(custom_node->context, delete_datareader);
 8016584:	4604      	mov	r4, r0
    ret &= run_xrce_session(custom_node->context, delete_subscriber);
 8016586:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801658a:	f7fc ff52 	bl	8013432 <run_xrce_session>
    if (!ret)
 801658e:	4004      	ands	r4, r0
 8016590:	f084 0401 	eor.w	r4, r4, #1
    rmw_uxrce_fini_subscription_memory(subscription);
 8016594:	4628      	mov	r0, r5
  rmw_ret_t result_ret = RMW_RET_OK;
 8016596:	b2e4      	uxtb	r4, r4
    rmw_uxrce_fini_subscription_memory(subscription);
 8016598:	f7f1 fb1c 	bl	8007bd4 <rmw_uxrce_fini_subscription_memory>
  return result_ret;
 801659c:	e7bb      	b.n	8016516 <rmw_destroy_subscription+0xc>

0801659e <rmw_take_with_info>:
  const rmw_subscription_t * subscription,
  void * ros_message,
  bool * taken,
  rmw_message_info_t * message_info,
  rmw_subscription_allocation_t * allocation)
{
 801659e:	b570      	push	{r4, r5, r6, lr}
 80165a0:	4604      	mov	r4, r0
 80165a2:	b088      	sub	sp, #32
 80165a4:	460e      	mov	r6, r1
  (void) message_info;
  (void) allocation;

  EPROS_PRINT_TRACE()

  if (taken != NULL) {
 80165a6:	4615      	mov	r5, r2
 80165a8:	b10a      	cbz	r2, 80165ae <rmw_take_with_info+0x10>
    *taken = false;
 80165aa:	2300      	movs	r3, #0
 80165ac:	7013      	strb	r3, [r2, #0]
  }

  if (!is_uxrce_rmw_identifier_valid(subscription->implementation_identifier)) {
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	f7fc ff63 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80165b4:	b320      	cbz	r0, 8016600 <rmw_take_with_info+0x62>
    RMW_SET_ERROR_MSG("Wrong implementation");
    return RMW_RET_ERROR;
  }

  rmw_uxrce_subscription_t * custom_subscription = (rmw_uxrce_subscription_t *)subscription->data;
 80165b6:	6864      	ldr	r4, [r4, #4]

  if (!custom_subscription->micro_buffer_in_use) {
 80165b8:	f894 3842 	ldrb.w	r3, [r4, #2114]	; 0x842
 80165bc:	b303      	cbz	r3, 8016600 <rmw_take_with_info+0x62>
    return RMW_RET_ERROR;
  }

  ucdrBuffer temp_buffer;
  ucdr_init_buffer(
    &temp_buffer, custom_subscription->micro_buffer[custom_subscription->history_read_index],
 80165be:	f894 3841 	ldrb.w	r3, [r4, #2113]	; 0x841
  ucdr_init_buffer(
 80165c2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    &temp_buffer, custom_subscription->micro_buffer[custom_subscription->history_read_index],
 80165c6:	eb04 23c3 	add.w	r3, r4, r3, lsl #11
  ucdr_init_buffer(
 80165ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80165ce:	f8d2 283c 	ldr.w	r2, [r2, #2108]	; 0x83c
 80165d2:	4668      	mov	r0, sp
 80165d4:	f7fd fa1b 	bl	8013a0e <ucdr_init_buffer>
    custom_subscription->micro_buffer_lenght[custom_subscription->history_read_index]);

  bool deserialize_rv = custom_subscription->type_support_callbacks->cdr_deserialize(
 80165d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80165da:	4631      	mov	r1, r6
 80165dc:	68db      	ldr	r3, [r3, #12]
 80165de:	4668      	mov	r0, sp
 80165e0:	4798      	blx	r3
    &temp_buffer,
    ros_message);

  custom_subscription->history_read_index = (custom_subscription->history_read_index + 1) %
 80165e2:	2300      	movs	r3, #0
 80165e4:	f884 3841 	strb.w	r3, [r4, #2113]	; 0x841
    RMW_UXRCE_MAX_HISTORY;
  if (custom_subscription->history_write_index == custom_subscription->history_read_index) {
 80165e8:	f894 3840 	ldrb.w	r3, [r4, #2112]	; 0x840
 80165ec:	b90b      	cbnz	r3, 80165f2 <rmw_take_with_info+0x54>
    custom_subscription->micro_buffer_in_use = false;
 80165ee:	f884 3842 	strb.w	r3, [r4, #2114]	; 0x842
  }

  if (taken != NULL) {
 80165f2:	b105      	cbz	r5, 80165f6 <rmw_take_with_info+0x58>
    *taken = deserialize_rv;
 80165f4:	7028      	strb	r0, [r5, #0]
  }

  if (!deserialize_rv) {
 80165f6:	f080 0001 	eor.w	r0, r0, #1
    return RMW_RET_ERROR;
 80165fa:	b2c0      	uxtb	r0, r0
    return RMW_RET_ERROR;
  }

  EPROS_PRINT_TRACE()
  return RMW_RET_OK;
}
 80165fc:	b008      	add	sp, #32
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
    return RMW_RET_ERROR;
 8016600:	2001      	movs	r0, #1
 8016602:	e7fb      	b.n	80165fc <rmw_take_with_info+0x5e>

08016604 <rmw_create_wait_set>:
{
  (void) context;
  (void) max_conditions;
  EPROS_PRINT_TRACE()

  rmw_wait_set_t * rmw_wait_set = (rmw_wait_set_t *)rmw_allocate(
 8016604:	200c      	movs	r0, #12
 8016606:	f7ff bd7f 	b.w	8016108 <rmw_allocate>

0801660a <rmw_destroy_wait_set>:
  return rmw_wait_set;
}

rmw_ret_t
rmw_destroy_wait_set(rmw_wait_set_t * wait_set)
{
 801660a:	b508      	push	{r3, lr}
  EPROS_PRINT_TRACE()

  rmw_free(wait_set);
 801660c:	f7ff fd8f 	bl	801612e <rmw_free>

  return RMW_RET_OK;
}
 8016610:	2000      	movs	r0, #0
 8016612:	bd08      	pop	{r3, pc}

08016614 <ucdr_array_to_buffer>:

// -------------------------------------------------------------------
//                         SERIALIZE MACROS
// -------------------------------------------------------------------
void ucdr_array_to_buffer(ucdrBuffer* ub, const uint8_t* array, size_t size, size_t data_size)
{
 8016614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016618:	4689      	mov	r9, r1
    if(ucdr_check_buffer_available_for(ub, size))
 801661a:	4611      	mov	r1, r2
{
 801661c:	4604      	mov	r4, r0
 801661e:	4615      	mov	r5, r2
 8016620:	461f      	mov	r7, r3
    if(ucdr_check_buffer_available_for(ub, size))
 8016622:	f7fd f9ae 	bl	8013982 <ucdr_check_buffer_available_for>
 8016626:	b328      	cbz	r0, 8016674 <ucdr_array_to_buffer+0x60>
 8016628:	462a      	mov	r2, r5
 801662a:	68a0      	ldr	r0, [r4, #8]
 801662c:	4649      	mov	r1, r9
 801662e:	f7eb f8b7 	bl	80017a0 <memcpy>
    {
        memcpy(ub->iterator, array, size);
        ub->iterator += size;
 8016632:	68a3      	ldr	r3, [r4, #8]
        ub->offset += size;
 8016634:	6922      	ldr	r2, [r4, #16]
        ub->iterator += size;
 8016636:	442b      	add	r3, r5
        ub->offset += size;
 8016638:	442a      	add	r2, r5
        ub->iterator += size;
 801663a:	60a3      	str	r3, [r4, #8]
        ub->offset += size;
 801663c:	6122      	str	r2, [r4, #16]
            remaining_size -= serialization_size;
            ub->iterator += serialization_size;
            ub->offset += serialization_size;
        }
    }
    ub->last_data_size = (uint8_t)data_size;
 801663e:	7567      	strb	r7, [r4, #21]
}
 8016640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            memcpy(ub->iterator, array + (size - remaining_size), serialization_size);
 8016644:	eba5 0108 	sub.w	r1, r5, r8
 8016648:	68a0      	ldr	r0, [r4, #8]
 801664a:	4632      	mov	r2, r6
 801664c:	4449      	add	r1, r9
 801664e:	f7eb f8a7 	bl	80017a0 <memcpy>
            ub->iterator += serialization_size;
 8016652:	68a3      	ldr	r3, [r4, #8]
            ub->offset += serialization_size;
 8016654:	6920      	ldr	r0, [r4, #16]
            ub->iterator += serialization_size;
 8016656:	4433      	add	r3, r6
            ub->offset += serialization_size;
 8016658:	4430      	add	r0, r6
            remaining_size -= serialization_size;
 801665a:	eba8 0806 	sub.w	r8, r8, r6
            ub->iterator += serialization_size;
 801665e:	60a3      	str	r3, [r4, #8]
            ub->offset += serialization_size;
 8016660:	6120      	str	r0, [r4, #16]
        while(0 < (serialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 8016662:	463a      	mov	r2, r7
 8016664:	4641      	mov	r1, r8
 8016666:	4620      	mov	r0, r4
 8016668:	f7fd fa06 	bl	8013a78 <ucdr_check_final_buffer_behavior_array>
 801666c:	4606      	mov	r6, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	d1e8      	bne.n	8016644 <ucdr_array_to_buffer+0x30>
 8016672:	e7e4      	b.n	801663e <ucdr_array_to_buffer+0x2a>
        size_t remaining_size = size;
 8016674:	46a8      	mov	r8, r5
 8016676:	e7f4      	b.n	8016662 <ucdr_array_to_buffer+0x4e>

08016678 <ucdr_buffer_to_array>:

void ucdr_buffer_to_array(ucdrBuffer* ub, uint8_t* array, size_t size, size_t data_size)
{
 8016678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801667c:	4689      	mov	r9, r1
    if(ucdr_check_buffer_available_for(ub, size))
 801667e:	4611      	mov	r1, r2
{
 8016680:	4604      	mov	r4, r0
 8016682:	4615      	mov	r5, r2
 8016684:	461f      	mov	r7, r3
    if(ucdr_check_buffer_available_for(ub, size))
 8016686:	f7fd f97c 	bl	8013982 <ucdr_check_buffer_available_for>
 801668a:	b328      	cbz	r0, 80166d8 <ucdr_buffer_to_array+0x60>
 801668c:	462a      	mov	r2, r5
 801668e:	68a1      	ldr	r1, [r4, #8]
 8016690:	4648      	mov	r0, r9
 8016692:	f7eb f885 	bl	80017a0 <memcpy>
    {
        memcpy(array, ub->iterator, size);
        ub->iterator += size;
 8016696:	68a3      	ldr	r3, [r4, #8]
        ub->offset += size;
 8016698:	6922      	ldr	r2, [r4, #16]
        ub->iterator += size;
 801669a:	442b      	add	r3, r5
        ub->offset += size;
 801669c:	442a      	add	r2, r5
        ub->iterator += size;
 801669e:	60a3      	str	r3, [r4, #8]
        ub->offset += size;
 80166a0:	6122      	str	r2, [r4, #16]
            remaining_size -= deserialization_size;
            ub->iterator += deserialization_size;
            ub->offset += deserialization_size;
        }
    }
    ub->last_data_size = (uint8_t)data_size;
 80166a2:	7567      	strb	r7, [r4, #21]
}
 80166a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            memcpy(array + (size - remaining_size), ub->iterator, deserialization_size);
 80166a8:	eba5 0008 	sub.w	r0, r5, r8
 80166ac:	68a1      	ldr	r1, [r4, #8]
 80166ae:	4632      	mov	r2, r6
 80166b0:	4448      	add	r0, r9
 80166b2:	f7eb f875 	bl	80017a0 <memcpy>
            ub->iterator += deserialization_size;
 80166b6:	68a3      	ldr	r3, [r4, #8]
            ub->offset += deserialization_size;
 80166b8:	6920      	ldr	r0, [r4, #16]
            ub->iterator += deserialization_size;
 80166ba:	4433      	add	r3, r6
            ub->offset += deserialization_size;
 80166bc:	4430      	add	r0, r6
            remaining_size -= deserialization_size;
 80166be:	eba8 0806 	sub.w	r8, r8, r6
            ub->iterator += deserialization_size;
 80166c2:	60a3      	str	r3, [r4, #8]
            ub->offset += deserialization_size;
 80166c4:	6120      	str	r0, [r4, #16]
        while(0 < (deserialization_size = ucdr_check_final_buffer_behavior_array(ub, remaining_size, data_size)))
 80166c6:	463a      	mov	r2, r7
 80166c8:	4641      	mov	r1, r8
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7fd f9d4 	bl	8013a78 <ucdr_check_final_buffer_behavior_array>
 80166d0:	4606      	mov	r6, r0
 80166d2:	2800      	cmp	r0, #0
 80166d4:	d1e8      	bne.n	80166a8 <ucdr_buffer_to_array+0x30>
 80166d6:	e7e4      	b.n	80166a2 <ucdr_buffer_to_array+0x2a>
        size_t remaining_size = size;
 80166d8:	46a8      	mov	r8, r5
 80166da:	e7f4      	b.n	80166c6 <ucdr_buffer_to_array+0x4e>

080166dc <ucdr_serialize_endian_array_char>:
    UCDR_DESERIALIZE_ARRAY_DEFINITION(SUFFIX, TYPE, TYPE_SIZE) \

// -------------------------------------------------------------------
//              PUBLIC SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_ARRAY_DEFINITIONS(_char, char, 1)
 80166dc:	b510      	push	{r4, lr}
 80166de:	4604      	mov	r4, r0
 80166e0:	4611      	mov	r1, r2
 80166e2:	461a      	mov	r2, r3
 80166e4:	2301      	movs	r3, #1
 80166e6:	f7ff ff95 	bl	8016614 <ucdr_array_to_buffer>
 80166ea:	7da0      	ldrb	r0, [r4, #22]
 80166ec:	f080 0001 	eor.w	r0, r0, #1
 80166f0:	bd10      	pop	{r4, pc}

080166f2 <ucdr_deserialize_endian_array_char>:
 80166f2:	b510      	push	{r4, lr}
 80166f4:	4604      	mov	r4, r0
 80166f6:	4611      	mov	r1, r2
 80166f8:	461a      	mov	r2, r3
 80166fa:	2301      	movs	r3, #1
 80166fc:	f7ff ffbc 	bl	8016678 <ucdr_buffer_to_array>
 8016700:	7da0      	ldrb	r0, [r4, #22]
 8016702:	f080 0001 	eor.w	r0, r0, #1
 8016706:	bd10      	pop	{r4, pc}

08016708 <ucdr_serialize_array_uint8_t>:
UCDR_ARRAY_DEFINITIONS(_bool, bool, 1)
UCDR_ARRAY_DEFINITIONS(_uint8_t, uint8_t, 1)
 8016708:	b510      	push	{r4, lr}
 801670a:	4604      	mov	r4, r0
 801670c:	2301      	movs	r3, #1
 801670e:	f7ff ff81 	bl	8016614 <ucdr_array_to_buffer>
 8016712:	7da0      	ldrb	r0, [r4, #22]
 8016714:	f080 0001 	eor.w	r0, r0, #1
 8016718:	bd10      	pop	{r4, pc}

0801671a <ucdr_serialize_endian_array_uint8_t>:
 801671a:	b510      	push	{r4, lr}
 801671c:	4604      	mov	r4, r0
 801671e:	4611      	mov	r1, r2
 8016720:	461a      	mov	r2, r3
 8016722:	2301      	movs	r3, #1
 8016724:	f7ff ff76 	bl	8016614 <ucdr_array_to_buffer>
 8016728:	7da0      	ldrb	r0, [r4, #22]
 801672a:	f080 0001 	eor.w	r0, r0, #1
 801672e:	bd10      	pop	{r4, pc}

08016730 <ucdr_deserialize_array_uint8_t>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	2301      	movs	r3, #1
 8016736:	f7ff ff9f 	bl	8016678 <ucdr_buffer_to_array>
 801673a:	7da0      	ldrb	r0, [r4, #22]
 801673c:	f080 0001 	eor.w	r0, r0, #1
 8016740:	bd10      	pop	{r4, pc}

08016742 <ucdr_deserialize_sequence_header>:

// -------------------------------------------------------------------
//                INTERNAL UTIL IMPLEMENTATION
// -------------------------------------------------------------------
inline void ucdr_deserialize_sequence_header(ucdrBuffer* ub, ucdrEndianness endianness, size_t capacity, uint32_t* length)
{
 8016742:	b570      	push	{r4, r5, r6, lr}
 8016744:	461c      	mov	r4, r3
 8016746:	4616      	mov	r6, r2
    ucdr_deserialize_endian_uint32_t(ub, endianness, length);
 8016748:	461a      	mov	r2, r3
{
 801674a:	4605      	mov	r5, r0
    ucdr_deserialize_endian_uint32_t(ub, endianness, length);
 801674c:	f7fd f863 	bl	8013816 <ucdr_deserialize_endian_uint32_t>
    if(*length > capacity)
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	42b3      	cmp	r3, r6
    {
        ub->error = true;
 8016754:	bf84      	itt	hi
 8016756:	2301      	movhi	r3, #1
 8016758:	75ab      	strbhi	r3, [r5, #22]
    }
}
 801675a:	bd70      	pop	{r4, r5, r6, pc}

0801675c <ucdr_serialize_sequence_char>:
    UCDR_SEQUENCE_DESERIALIZE_DEFINITION(SUFFIX, TYPE, SIZE) \

// -------------------------------------------------------------------
//              PUBLIC DE-SERIALIZATION IMPLEMENTATIONS
// -------------------------------------------------------------------
UCDR_SEQUENCE_DEFINITIONS(_char, char, 1)
 801675c:	b570      	push	{r4, r5, r6, lr}
 801675e:	460e      	mov	r6, r1
 8016760:	4615      	mov	r5, r2
 8016762:	7d01      	ldrb	r1, [r0, #20]
 8016764:	4604      	mov	r4, r0
 8016766:	f7fc fff7 	bl	8013758 <ucdr_serialize_endian_uint32_t>
 801676a:	b145      	cbz	r5, 801677e <ucdr_serialize_sequence_char+0x22>
 801676c:	7d21      	ldrb	r1, [r4, #20]
 801676e:	462b      	mov	r3, r5
 8016770:	4632      	mov	r2, r6
 8016772:	4620      	mov	r0, r4
 8016774:	f7ff ffb2 	bl	80166dc <ucdr_serialize_endian_array_char>
 8016778:	f000 0001 	and.w	r0, r0, #1
 801677c:	bd70      	pop	{r4, r5, r6, pc}
 801677e:	2001      	movs	r0, #1
 8016780:	e7fa      	b.n	8016778 <ucdr_serialize_sequence_char+0x1c>

08016782 <ucdr_deserialize_sequence_char>:
 8016782:	b570      	push	{r4, r5, r6, lr}
 8016784:	461e      	mov	r6, r3
 8016786:	460d      	mov	r5, r1
 8016788:	7d01      	ldrb	r1, [r0, #20]
 801678a:	4604      	mov	r4, r0
 801678c:	f7ff ffd9 	bl	8016742 <ucdr_deserialize_sequence_header>
 8016790:	6833      	ldr	r3, [r6, #0]
 8016792:	b13b      	cbz	r3, 80167a4 <ucdr_deserialize_sequence_char+0x22>
 8016794:	7d21      	ldrb	r1, [r4, #20]
 8016796:	462a      	mov	r2, r5
 8016798:	4620      	mov	r0, r4
 801679a:	f7ff ffaa 	bl	80166f2 <ucdr_deserialize_endian_array_char>
 801679e:	f000 0001 	and.w	r0, r0, #1
 80167a2:	bd70      	pop	{r4, r5, r6, pc}
 80167a4:	2001      	movs	r0, #1
 80167a6:	e7fa      	b.n	801679e <ucdr_deserialize_sequence_char+0x1c>

080167a8 <ucdr_serialize_sequence_uint8_t>:
UCDR_SEQUENCE_DEFINITIONS(_bool, bool, 1)
UCDR_SEQUENCE_DEFINITIONS(_uint8_t, uint8_t, 1)
 80167a8:	b570      	push	{r4, r5, r6, lr}
 80167aa:	460e      	mov	r6, r1
 80167ac:	4615      	mov	r5, r2
 80167ae:	7d01      	ldrb	r1, [r0, #20]
 80167b0:	4604      	mov	r4, r0
 80167b2:	f7fc ffd1 	bl	8013758 <ucdr_serialize_endian_uint32_t>
 80167b6:	b145      	cbz	r5, 80167ca <ucdr_serialize_sequence_uint8_t+0x22>
 80167b8:	7d21      	ldrb	r1, [r4, #20]
 80167ba:	462b      	mov	r3, r5
 80167bc:	4632      	mov	r2, r6
 80167be:	4620      	mov	r0, r4
 80167c0:	f7ff ffab 	bl	801671a <ucdr_serialize_endian_array_uint8_t>
 80167c4:	f000 0001 	and.w	r0, r0, #1
 80167c8:	bd70      	pop	{r4, r5, r6, pc}
 80167ca:	2001      	movs	r0, #1
 80167cc:	e7fa      	b.n	80167c4 <ucdr_serialize_sequence_uint8_t+0x1c>

080167ce <uxr_init_input_best_effort_stream>:
//==================================================================
//                             PUBLIC
//==================================================================
void uxr_init_input_best_effort_stream(uxrInputBestEffortStream* stream)
{
    stream->last_handled = SEQ_NUM_MAX;
 80167ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167d2:	8003      	strh	r3, [r0, #0]
}
 80167d4:	4770      	bx	lr

080167d6 <uxr_reset_input_best_effort_stream>:
 80167d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167da:	8003      	strh	r3, [r0, #0]
 80167dc:	4770      	bx	lr

080167de <uxr_receive_best_effort_message>:
{
    stream->last_handled = SEQ_NUM_MAX;
}

bool uxr_receive_best_effort_message(uxrInputBestEffortStream* stream, uxrSeqNum seq_num)
{
 80167de:	b538      	push	{r3, r4, r5, lr}
 80167e0:	4604      	mov	r4, r0
    bool available_to_read = (0 > uxr_seq_num_cmp(stream->last_handled, seq_num));
 80167e2:	8800      	ldrh	r0, [r0, #0]
{
 80167e4:	460d      	mov	r5, r1
    bool available_to_read = (0 > uxr_seq_num_cmp(stream->last_handled, seq_num));
 80167e6:	f000 fb5b 	bl	8016ea0 <uxr_seq_num_cmp>
 80167ea:	4603      	mov	r3, r0
    if(available_to_read)
 80167ec:	2b00      	cmp	r3, #0
    bool available_to_read = (0 > uxr_seq_num_cmp(stream->last_handled, seq_num));
 80167ee:	ea4f 70d0 	mov.w	r0, r0, lsr #31
    {
        stream->last_handled = seq_num;
 80167f2:	bfb8      	it	lt
 80167f4:	8025      	strhlt	r5, [r4, #0]
    }

    return available_to_read;
}
 80167f6:	bd38      	pop	{r3, r4, r5, pc}

080167f8 <uxr_get_reliable_buffer>:
            + ((seq_num % stream->history) * (stream->size / stream->history))
 80167f8:	8903      	ldrh	r3, [r0, #8]
 80167fa:	6842      	ldr	r2, [r0, #4]
 80167fc:	fbb2 f2f3 	udiv	r2, r2, r3
{
 8016800:	b510      	push	{r4, lr}
            + ((seq_num % stream->history) * (stream->size / stream->history))
 8016802:	fbb1 f4f3 	udiv	r4, r1, r3
 8016806:	fb04 1313 	mls	r3, r4, r3, r1
 801680a:	b29b      	uxth	r3, r3
            + INTERNAL_RELIABLE_BUFFER_OFFSET;
 801680c:	6800      	ldr	r0, [r0, #0]
            + ((seq_num % stream->history) * (stream->size / stream->history))
 801680e:	4353      	muls	r3, r2
            + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8016810:	3304      	adds	r3, #4
}
 8016812:	4418      	add	r0, r3
 8016814:	bd10      	pop	{r4, pc}

08016816 <uxr_get_reliable_buffer_size>:
}

static inline size_t uxr_get_reliable_buffer_size(
        uxrReliableStream const * stream,
        uint16_t seq_num)
{
 8016816:	b508      	push	{r3, lr}
    length_t length;
    memcpy(
 8016818:	8903      	ldrh	r3, [r0, #8]
 801681a:	fbb1 f2f3 	udiv	r2, r1, r3
 801681e:	fb02 1113 	mls	r1, r2, r3, r1
 8016822:	b289      	uxth	r1, r1
 8016824:	f7ff ffe8 	bl	80167f8 <uxr_get_reliable_buffer>
        &length,
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
        sizeof(length_t));
    return (size_t)length;
}
 8016828:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801682c:	bd08      	pop	{r3, pc}

0801682e <uxr_set_reliable_buffer_size>:
        uxrReliableStream const * stream,
        uint16_t seq_num,
        size_t length)
{
    length_t temp_length = (length_t)length;
    memcpy(
 801682e:	8903      	ldrh	r3, [r0, #8]
{
 8016830:	b510      	push	{r4, lr}
 8016832:	4614      	mov	r4, r2
    memcpy(
 8016834:	fbb1 f2f3 	udiv	r2, r1, r3
 8016838:	fb02 1113 	mls	r1, r2, r3, r1
 801683c:	b289      	uxth	r1, r1
 801683e:	f7ff ffdb 	bl	80167f8 <uxr_get_reliable_buffer>
 8016842:	f840 4c04 	str.w	r4, [r0, #-4]
        uxr_get_reliable_buffer(stream, (seq_num % stream->history)) - INTERNAL_RELIABLE_BUFFER_OFFSET,
        &temp_length,
       INTERNAL_RELIABLE_BUFFER_OFFSET);
}
 8016846:	bd10      	pop	{r4, pc}

08016848 <check_last_fragment>:
{
 8016848:	b570      	push	{r4, r5, r6, lr}
    uxrSeqNum next = stream->last_handled;
 801684a:	8984      	ldrh	r4, [r0, #12]
{
 801684c:	4605      	mov	r5, r0
 801684e:	460e      	mov	r6, r1
        next = uxr_seq_num_add(next, 1);
 8016850:	2101      	movs	r1, #1
 8016852:	4620      	mov	r0, r4
 8016854:	f000 fb1e 	bl	8016e94 <uxr_seq_num_add>
 8016858:	4604      	mov	r4, r0
        more_messages = (0 != uxr_get_reliable_buffer_size(&stream->base, next));
 801685a:	4601      	mov	r1, r0
 801685c:	4628      	mov	r0, r5
 801685e:	f7ff ffda 	bl	8016816 <uxr_get_reliable_buffer_size>
        if(more_messages)
 8016862:	b148      	cbz	r0, 8016878 <check_last_fragment+0x30>
        uint8_t* next_buffer = uxr_get_reliable_buffer(&stream->base, next);
 8016864:	4621      	mov	r1, r4
 8016866:	4628      	mov	r0, r5
 8016868:	f7ff ffc6 	bl	80167f8 <uxr_get_reliable_buffer>
            FragmentationInfo next_fragmentation_info = stream->on_get_fragmentation_info(next_buffer);
 801686c:	692b      	ldr	r3, [r5, #16]
 801686e:	4798      	blx	r3
            if(LAST_FRAGMENT == next_fragmentation_info)
 8016870:	2802      	cmp	r0, #2
 8016872:	d004      	beq.n	801687e <check_last_fragment+0x36>
    while(more_messages);
 8016874:	2801      	cmp	r0, #1
 8016876:	d0eb      	beq.n	8016850 <check_last_fragment+0x8>
    bool found = false;
 8016878:	2000      	movs	r0, #0
    *last_fragment = next;
 801687a:	8034      	strh	r4, [r6, #0]
}
 801687c:	bd70      	pop	{r4, r5, r6, pc}
                found = true;
 801687e:	2001      	movs	r0, #1
 8016880:	e7fb      	b.n	801687a <check_last_fragment+0x32>

08016882 <uxr_reset_input_reliable_stream>:
{
 8016882:	b538      	push	{r3, r4, r5, lr}
 8016884:	4604      	mov	r4, r0
    for(uint16_t i = 0; i < stream->base.history; ++i)
 8016886:	2500      	movs	r5, #0
 8016888:	8923      	ldrh	r3, [r4, #8]
 801688a:	b2a9      	uxth	r1, r5
 801688c:	428b      	cmp	r3, r1
 801688e:	d803      	bhi.n	8016898 <uxr_reset_input_reliable_stream+0x16>
    stream->last_handled = SEQ_NUM_MAX;
 8016890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016894:	60e3      	str	r3, [r4, #12]
}
 8016896:	bd38      	pop	{r3, r4, r5, pc}
        uxr_set_reliable_buffer_size(&stream->base, i, 0);
 8016898:	2200      	movs	r2, #0
 801689a:	4620      	mov	r0, r4
 801689c:	f7ff ffc7 	bl	801682e <uxr_set_reliable_buffer_size>
    for(uint16_t i = 0; i < stream->base.history; ++i)
 80168a0:	3501      	adds	r5, #1
 80168a2:	e7f1      	b.n	8016888 <uxr_reset_input_reliable_stream+0x6>

080168a4 <uxr_init_input_reliable_stream>:
{
 80168a4:	b410      	push	{r4}
    stream->base.history = history;
 80168a6:	8103      	strh	r3, [r0, #8]
    stream->on_get_fragmentation_info = on_get_fragmentation_info;
 80168a8:	9b01      	ldr	r3, [sp, #4]
 80168aa:	6103      	str	r3, [r0, #16]
    stream->cleanup_flag = false;
 80168ac:	2300      	movs	r3, #0
    stream->base.size = size;
 80168ae:	e9c0 1200 	strd	r1, r2, [r0]
}
 80168b2:	bc10      	pop	{r4}
    stream->cleanup_flag = false;
 80168b4:	7503      	strb	r3, [r0, #20]
    uxr_reset_input_reliable_stream(stream);
 80168b6:	f7ff bfe4 	b.w	8016882 <uxr_reset_input_reliable_stream>

080168ba <uxr_receive_reliable_message>:
{
 80168ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80168be:	4604      	mov	r4, r0
 80168c0:	460d      	mov	r5, r1
    uxrSeqNum last_history = uxr_seq_num_add(stream->last_handled, stream->base.history);
 80168c2:	8901      	ldrh	r1, [r0, #8]
 80168c4:	8980      	ldrh	r0, [r0, #12]
{
 80168c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80168ca:	4690      	mov	r8, r2
 80168cc:	461f      	mov	r7, r3
    uxrSeqNum last_history = uxr_seq_num_add(stream->last_handled, stream->base.history);
 80168ce:	f000 fae1 	bl	8016e94 <uxr_seq_num_add>
    if(0 > uxr_seq_num_cmp(stream->last_handled, seq_num) && 0 <= uxr_seq_num_cmp(last_history, seq_num))
 80168d2:	4629      	mov	r1, r5
    uxrSeqNum last_history = uxr_seq_num_add(stream->last_handled, stream->base.history);
 80168d4:	4606      	mov	r6, r0
    if(0 > uxr_seq_num_cmp(stream->last_handled, seq_num) && 0 <= uxr_seq_num_cmp(last_history, seq_num))
 80168d6:	89a0      	ldrh	r0, [r4, #12]
 80168d8:	f000 fae2 	bl	8016ea0 <uxr_seq_num_cmp>
 80168dc:	2800      	cmp	r0, #0
 80168de:	db0b      	blt.n	80168f8 <uxr_receive_reliable_message+0x3e>
    bool ready_to_read = false;
 80168e0:	2600      	movs	r6, #0
    if(0 > uxr_seq_num_cmp(stream->last_announced, seq_num))
 80168e2:	89e0      	ldrh	r0, [r4, #14]
 80168e4:	4629      	mov	r1, r5
 80168e6:	f000 fadb 	bl	8016ea0 <uxr_seq_num_cmp>
 80168ea:	2800      	cmp	r0, #0
}
 80168ec:	4630      	mov	r0, r6
        stream->last_announced = seq_num;
 80168ee:	bfb8      	it	lt
 80168f0:	81e5      	strhlt	r5, [r4, #14]
}
 80168f2:	b003      	add	sp, #12
 80168f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(0 > uxr_seq_num_cmp(stream->last_handled, seq_num) && 0 <= uxr_seq_num_cmp(last_history, seq_num))
 80168f8:	4629      	mov	r1, r5
 80168fa:	4630      	mov	r0, r6
 80168fc:	f000 fad0 	bl	8016ea0 <uxr_seq_num_cmp>
 8016900:	2800      	cmp	r0, #0
 8016902:	dbed      	blt.n	80168e0 <uxr_receive_reliable_message+0x26>
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(buffer);
 8016904:	6923      	ldr	r3, [r4, #16]
 8016906:	4640      	mov	r0, r8
 8016908:	4798      	blx	r3
        uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 801690a:	2101      	movs	r1, #1
        FragmentationInfo fragmentation_info = stream->on_get_fragmentation_info(buffer);
 801690c:	4606      	mov	r6, r0
        uxrSeqNum next = uxr_seq_num_add(stream->last_handled, 1);
 801690e:	89a0      	ldrh	r0, [r4, #12]
 8016910:	f000 fac0 	bl	8016e94 <uxr_seq_num_add>
        if((NO_FRAGMENTED == fragmentation_info) && (seq_num == next))
 8016914:	b936      	cbnz	r6, 8016924 <uxr_receive_reliable_message+0x6a>
 8016916:	4285      	cmp	r5, r0
 8016918:	d104      	bne.n	8016924 <uxr_receive_reliable_message+0x6a>
            stream->last_handled = next;
 801691a:	81a5      	strh	r5, [r4, #12]
            *message_stored = false;
 801691c:	f889 6000 	strb.w	r6, [r9]
            ready_to_read = true;
 8016920:	2601      	movs	r6, #1
            *message_stored = false;
 8016922:	e7de      	b.n	80168e2 <uxr_receive_reliable_message+0x28>
            if(0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 8016924:	4629      	mov	r1, r5
 8016926:	4620      	mov	r0, r4
 8016928:	f7ff ff75 	bl	8016816 <uxr_get_reliable_buffer_size>
 801692c:	2800      	cmp	r0, #0
 801692e:	d1d7      	bne.n	80168e0 <uxr_receive_reliable_message+0x26>
            uint8_t * internal_buffer = uxr_get_reliable_buffer(&stream->base, seq_num);
 8016930:	4629      	mov	r1, r5
 8016932:	4620      	mov	r0, r4
 8016934:	f7ff ff60 	bl	80167f8 <uxr_get_reliable_buffer>
 8016938:	463a      	mov	r2, r7
 801693a:	4641      	mov	r1, r8
 801693c:	f7ea ff30 	bl	80017a0 <memcpy>
                uxr_set_reliable_buffer_size(&stream->base, seq_num, length);
 8016940:	463a      	mov	r2, r7
 8016942:	4629      	mov	r1, r5
 8016944:	4620      	mov	r0, r4
 8016946:	f7ff ff72 	bl	801682e <uxr_set_reliable_buffer_size>
                *message_stored = true;
 801694a:	2301      	movs	r3, #1
 801694c:	f889 3000 	strb.w	r3, [r9]
                if(NO_FRAGMENTED != fragmentation_info)
 8016950:	2e00      	cmp	r6, #0
 8016952:	d0c5      	beq.n	80168e0 <uxr_receive_reliable_message+0x26>
                    if(check_last_fragment(stream, &last))
 8016954:	f10d 0106 	add.w	r1, sp, #6
 8016958:	4620      	mov	r0, r4
 801695a:	f7ff ff75 	bl	8016848 <check_last_fragment>
 801695e:	4606      	mov	r6, r0
 8016960:	e7bf      	b.n	80168e2 <uxr_receive_reliable_message+0x28>

08016962 <uxr_process_heartbeat>:
{
 8016962:	b538      	push	{r3, r4, r5, lr}
    if(0 > uxr_seq_num_cmp(stream->last_announced, last_seq_num))
 8016964:	4611      	mov	r1, r2
{
 8016966:	4604      	mov	r4, r0
    if(0 > uxr_seq_num_cmp(stream->last_announced, last_seq_num))
 8016968:	89c0      	ldrh	r0, [r0, #14]
{
 801696a:	4615      	mov	r5, r2
    if(0 > uxr_seq_num_cmp(stream->last_announced, last_seq_num))
 801696c:	f000 fa98 	bl	8016ea0 <uxr_seq_num_cmp>
 8016970:	2800      	cmp	r0, #0
        stream->last_announced = last_seq_num;
 8016972:	bfb8      	it	lt
 8016974:	81e5      	strhlt	r5, [r4, #14]
}
 8016976:	bd38      	pop	{r3, r4, r5, pc}

08016978 <uxr_compute_acknack>:
{
 8016978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uxrSeqNum first_unknown = stream->last_handled;
 801697c:	f8b0 800c 	ldrh.w	r8, [r0, #12]
{
 8016980:	4604      	mov	r4, r0
 8016982:	460f      	mov	r7, r1
    for(size_t i = 0; i < stream->base.history; ++i)
 8016984:	2300      	movs	r3, #0
 8016986:	8922      	ldrh	r2, [r4, #8]
 8016988:	4293      	cmp	r3, r2
 801698a:	d314      	bcc.n	80169b6 <uxr_compute_acknack+0x3e>
    uxrSeqNum first_unknown = stream->last_handled;
 801698c:	4645      	mov	r5, r8
    *from = uxr_get_first_unacked(stream);
 801698e:	803d      	strh	r5, [r7, #0]
    uint16_t buffers_to_ack = uxr_seq_num_sub(stream->last_announced, uxr_seq_num_sub(*from, 1));
 8016990:	2101      	movs	r1, #1
 8016992:	4628      	mov	r0, r5
 8016994:	89e6      	ldrh	r6, [r4, #14]
 8016996:	f000 fa80 	bl	8016e9a <uxr_seq_num_sub>
 801699a:	4601      	mov	r1, r0
 801699c:	4630      	mov	r0, r6
 801699e:	f000 fa7c 	bl	8016e9a <uxr_seq_num_sub>
    for(size_t i = 0; i < buffers_to_ack; ++i)
 80169a2:	2500      	movs	r5, #0
    uint16_t buffers_to_ack = uxr_seq_num_sub(stream->last_announced, uxr_seq_num_sub(*from, 1));
 80169a4:	4680      	mov	r8, r0
    uint16_t nack_bitmap = 0;
 80169a6:	462e      	mov	r6, r5
            nack_bitmap = (uint16_t)(nack_bitmap | (1 << i));
 80169a8:	f04f 0901 	mov.w	r9, #1
    for(size_t i = 0; i < buffers_to_ack; ++i)
 80169ac:	45a8      	cmp	r8, r5
 80169ae:	d810      	bhi.n	80169d2 <uxr_compute_acknack+0x5a>
}
 80169b0:	4630      	mov	r0, r6
 80169b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        uxrSeqNum seq_num = uxr_seq_num_add(stream->last_handled, (uint16_t)(i + 1));
 80169b6:	1c5e      	adds	r6, r3, #1
 80169b8:	b2b1      	uxth	r1, r6
 80169ba:	89a0      	ldrh	r0, [r4, #12]
 80169bc:	f000 fa6a 	bl	8016e94 <uxr_seq_num_add>
 80169c0:	4605      	mov	r5, r0
        if(0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 80169c2:	4601      	mov	r1, r0
 80169c4:	4620      	mov	r0, r4
 80169c6:	f7ff ff26 	bl	8016816 <uxr_get_reliable_buffer_size>
 80169ca:	2800      	cmp	r0, #0
 80169cc:	d0df      	beq.n	801698e <uxr_compute_acknack+0x16>
    for(size_t i = 0; i < stream->base.history; ++i)
 80169ce:	4633      	mov	r3, r6
 80169d0:	e7d9      	b.n	8016986 <uxr_compute_acknack+0xe>
        uxrSeqNum seq_num = uxr_seq_num_add(*from, (uxrSeqNum)i);
 80169d2:	b2a9      	uxth	r1, r5
 80169d4:	8838      	ldrh	r0, [r7, #0]
 80169d6:	f000 fa5d 	bl	8016e94 <uxr_seq_num_add>
 80169da:	4601      	mov	r1, r0
        if(0 == uxr_get_reliable_buffer_size(&stream->base, seq_num))
 80169dc:	4620      	mov	r0, r4
 80169de:	f7ff ff1a 	bl	8016816 <uxr_get_reliable_buffer_size>
 80169e2:	b918      	cbnz	r0, 80169ec <uxr_compute_acknack+0x74>
            nack_bitmap = (uint16_t)(nack_bitmap | (1 << i));
 80169e4:	fa09 f305 	lsl.w	r3, r9, r5
 80169e8:	431e      	orrs	r6, r3
 80169ea:	b2b6      	uxth	r6, r6
    for(size_t i = 0; i < buffers_to_ack; ++i)
 80169ec:	3501      	adds	r5, #1
 80169ee:	e7dd      	b.n	80169ac <uxr_compute_acknack+0x34>

080169f0 <uxr_init_output_best_effort_stream>:
    uxr_reset_output_best_effort_stream(stream);
}

void uxr_reset_output_best_effort_stream(uxrOutputBestEffortStream* stream)
{
    stream->writer = stream->offset;
 80169f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
    stream->offset = offset;
 80169f4:	7303      	strb	r3, [r0, #12]
    stream->last_send = SEQ_NUM_MAX;
 80169f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    stream->buffer = buffer;
 80169fa:	6001      	str	r1, [r0, #0]
    stream->last_send = SEQ_NUM_MAX;
 80169fc:	81c3      	strh	r3, [r0, #14]
}
 80169fe:	4770      	bx	lr

08016a00 <uxr_reset_output_best_effort_stream>:
    stream->writer = stream->offset;
 8016a00:	7b03      	ldrb	r3, [r0, #12]
 8016a02:	6043      	str	r3, [r0, #4]
    stream->last_send = SEQ_NUM_MAX;
 8016a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a08:	81c3      	strh	r3, [r0, #14]
}
 8016a0a:	4770      	bx	lr

08016a0c <uxr_prepare_best_effort_buffer_to_write>:

bool uxr_prepare_best_effort_buffer_to_write(uxrOutputBestEffortStream* stream, size_t size, ucdrBuffer* ub)
{
 8016a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a0e:	4604      	mov	r4, r0

    size_t current_padding = uxr_submessage_padding(stream->writer);
 8016a10:	6840      	ldr	r0, [r0, #4]
{
 8016a12:	460d      	mov	r5, r1
 8016a14:	4616      	mov	r6, r2
    size_t current_padding = uxr_submessage_padding(stream->writer);
 8016a16:	f7fd fef7 	bl	8014808 <uxr_submessage_padding>
    size_t future_length = stream->writer + current_padding + size;
 8016a1a:	6863      	ldr	r3, [r4, #4]
 8016a1c:	4418      	add	r0, r3
    bool available_to_write = future_length <= stream->size;
 8016a1e:	68a3      	ldr	r3, [r4, #8]
    size_t future_length = stream->writer + current_padding + size;
 8016a20:	1942      	adds	r2, r0, r5
    bool available_to_write = future_length <= stream->size;
 8016a22:	4293      	cmp	r3, r2
 8016a24:	bf2c      	ite	cs
 8016a26:	2701      	movcs	r7, #1
 8016a28:	2700      	movcc	r7, #0
    if(available_to_write)
 8016a2a:	d308      	bcc.n	8016a3e <uxr_prepare_best_effort_buffer_to_write+0x32>
    {
        ucdr_init_buffer_origin_offset(ub, stream->buffer, (uint32_t)future_length, 0u, (uint32_t)(stream->writer + current_padding));
 8016a2c:	6821      	ldr	r1, [r4, #0]
 8016a2e:	9000      	str	r0, [sp, #0]
 8016a30:	2300      	movs	r3, #0
 8016a32:	4630      	mov	r0, r6
 8016a34:	f7fc ffdb 	bl	80139ee <ucdr_init_buffer_origin_offset>
        stream->writer += size;
 8016a38:	6861      	ldr	r1, [r4, #4]
 8016a3a:	4429      	add	r1, r5
 8016a3c:	6061      	str	r1, [r4, #4]
    }

    return available_to_write;
}
 8016a3e:	4638      	mov	r0, r7
 8016a40:	b003      	add	sp, #12
 8016a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016a44 <uxr_prepare_best_effort_buffer_to_send>:

bool uxr_prepare_best_effort_buffer_to_send(uxrOutputBestEffortStream* stream, uint8_t** buffer, size_t* length, uint16_t* seq_num)
{
 8016a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a48:	4615      	mov	r5, r2
 8016a4a:	461f      	mov	r7, r3
    bool data_to_send = stream->writer > stream->offset;
 8016a4c:	6842      	ldr	r2, [r0, #4]
 8016a4e:	7b03      	ldrb	r3, [r0, #12]
 8016a50:	429a      	cmp	r2, r3
{
 8016a52:	4604      	mov	r4, r0
 8016a54:	460e      	mov	r6, r1
    bool data_to_send = stream->writer > stream->offset;
 8016a56:	bf8c      	ite	hi
 8016a58:	f04f 0801 	movhi.w	r8, #1
 8016a5c:	f04f 0800 	movls.w	r8, #0
    if(data_to_send)
 8016a60:	d90b      	bls.n	8016a7a <uxr_prepare_best_effort_buffer_to_send+0x36>
    {
        stream->last_send = uxr_seq_num_add(stream->last_send, 1);
 8016a62:	89c0      	ldrh	r0, [r0, #14]
 8016a64:	2101      	movs	r1, #1
 8016a66:	f000 fa15 	bl	8016e94 <uxr_seq_num_add>

        *seq_num = stream->last_send;
        *buffer = stream->buffer;
 8016a6a:	6823      	ldr	r3, [r4, #0]
        stream->last_send = uxr_seq_num_add(stream->last_send, 1);
 8016a6c:	81e0      	strh	r0, [r4, #14]
        *seq_num = stream->last_send;
 8016a6e:	8038      	strh	r0, [r7, #0]
        *buffer = stream->buffer;
 8016a70:	6033      	str	r3, [r6, #0]
        *length = stream->writer;
 8016a72:	6863      	ldr	r3, [r4, #4]
 8016a74:	602b      	str	r3, [r5, #0]

        stream->writer = stream->offset;
 8016a76:	7b23      	ldrb	r3, [r4, #12]
 8016a78:	6063      	str	r3, [r4, #4]
    }

    return data_to_send;
}
 8016a7a:	4640      	mov	r0, r8
 8016a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a80 <uxr_get_reliable_buffer>:
            + ((seq_num % stream->history) * (stream->size / stream->history))
 8016a80:	8903      	ldrh	r3, [r0, #8]
 8016a82:	6842      	ldr	r2, [r0, #4]
 8016a84:	fbb2 f2f3 	udiv	r2, r2, r3
{
 8016a88:	b510      	push	{r4, lr}
            + ((seq_num % stream->history) * (stream->size / stream->history))
 8016a8a:	fbb1 f4f3 	udiv	r4, r1, r3
 8016a8e:	fb04 1313 	mls	r3, r4, r3, r1
 8016a92:	b29b      	uxth	r3, r3
            + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8016a94:	6800      	ldr	r0, [r0, #0]
            + ((seq_num % stream->history) * (stream->size / stream->history))
 8016a96:	4353      	muls	r3, r2
            + INTERNAL_RELIABLE_BUFFER_OFFSET;
 8016a98:	3304      	adds	r3, #4
}
 8016a9a:	4418      	add	r0, r3
 8016a9c:	bd10      	pop	{r4, pc}

08016a9e <uxr_get_reliable_buffer_size>:
{
 8016a9e:	b508      	push	{r3, lr}
    memcpy(
 8016aa0:	8903      	ldrh	r3, [r0, #8]
 8016aa2:	fbb1 f2f3 	udiv	r2, r1, r3
 8016aa6:	fb02 1113 	mls	r1, r2, r3, r1
 8016aaa:	b289      	uxth	r1, r1
 8016aac:	f7ff ffe8 	bl	8016a80 <uxr_get_reliable_buffer>
}
 8016ab0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8016ab4:	bd08      	pop	{r3, pc}

08016ab6 <uxr_set_reliable_buffer_size>:
    memcpy(
 8016ab6:	8903      	ldrh	r3, [r0, #8]
{
 8016ab8:	b510      	push	{r4, lr}
 8016aba:	4614      	mov	r4, r2
    memcpy(
 8016abc:	fbb1 f2f3 	udiv	r2, r1, r3
 8016ac0:	fb02 1113 	mls	r1, r2, r3, r1
 8016ac4:	b289      	uxth	r1, r1
 8016ac6:	f7ff ffdb 	bl	8016a80 <uxr_get_reliable_buffer>
 8016aca:	f840 4c04 	str.w	r4, [r0, #-4]
}
 8016ace:	bd10      	pop	{r4, pc}

08016ad0 <uxr_reset_output_reliable_stream>:
{
 8016ad0:	b538      	push	{r3, r4, r5, lr}
 8016ad2:	4604      	mov	r4, r0
    for(uint16_t i = 0; i < stream->base.history; ++i)
 8016ad4:	2500      	movs	r5, #0
 8016ad6:	8923      	ldrh	r3, [r4, #8]
 8016ad8:	b2a9      	uxth	r1, r5
 8016ada:	428b      	cmp	r3, r1
 8016adc:	d80c      	bhi.n	8016af8 <uxr_reset_output_reliable_stream+0x28>
    stream->last_written = 0;
 8016ade:	2300      	movs	r3, #0
    stream->last_sent = SEQ_NUM_MAX;
 8016ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    stream->next_heartbeat_timestamp = INT64_MAX;
 8016ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016aec:	e9c4 0106 	strd	r0, r1, [r4, #24]
    stream->last_written = 0;
 8016af0:	81e3      	strh	r3, [r4, #14]
    stream->last_sent = SEQ_NUM_MAX;
 8016af2:	6122      	str	r2, [r4, #16]
    stream->next_heartbeat_tries = 0;
 8016af4:	8423      	strh	r3, [r4, #32]
}
 8016af6:	bd38      	pop	{r3, r4, r5, pc}
        uxr_set_reliable_buffer_size(&stream->base, i, stream->offset);
 8016af8:	7b22      	ldrb	r2, [r4, #12]
 8016afa:	4620      	mov	r0, r4
 8016afc:	f7ff ffdb 	bl	8016ab6 <uxr_set_reliable_buffer_size>
    for(uint16_t i = 0; i < stream->base.history; ++i)
 8016b00:	3501      	adds	r5, #1
 8016b02:	e7e8      	b.n	8016ad6 <uxr_reset_output_reliable_stream+0x6>

08016b04 <uxr_init_output_reliable_stream>:
{
 8016b04:	b430      	push	{r4, r5}
 8016b06:	f89d 5008 	ldrb.w	r5, [sp, #8]
    stream->offset = header_offset;
 8016b0a:	7305      	strb	r5, [r0, #12]
    stream->base.size = size;
 8016b0c:	e9c0 1200 	strd	r1, r2, [r0]
}
 8016b10:	bc30      	pop	{r4, r5}
    stream->base.history = history;
 8016b12:	8103      	strh	r3, [r0, #8]
    uxr_reset_output_reliable_stream(stream);
 8016b14:	f7ff bfdc 	b.w	8016ad0 <uxr_reset_output_reliable_stream>

08016b18 <uxr_prepare_next_reliable_buffer_to_send>:
{
 8016b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	4688      	mov	r8, r1
    *seq_num = uxr_seq_num_add(stream->last_sent, 1);
 8016b20:	8a00      	ldrh	r0, [r0, #16]
 8016b22:	2101      	movs	r1, #1
{
 8016b24:	4617      	mov	r7, r2
 8016b26:	461e      	mov	r6, r3
    *seq_num = uxr_seq_num_add(stream->last_sent, 1);
 8016b28:	f000 f9b4 	bl	8016e94 <uxr_seq_num_add>
    *buffer = uxr_get_reliable_buffer(&stream->base, *seq_num);
 8016b2c:	4601      	mov	r1, r0
    *seq_num = uxr_seq_num_add(stream->last_sent, 1);
 8016b2e:	4605      	mov	r5, r0
 8016b30:	8030      	strh	r0, [r6, #0]
    *buffer = uxr_get_reliable_buffer(&stream->base, *seq_num);
 8016b32:	4620      	mov	r0, r4
 8016b34:	f7ff ffa4 	bl	8016a80 <uxr_get_reliable_buffer>
 8016b38:	f8c8 0000 	str.w	r0, [r8]
    *length = uxr_get_reliable_buffer_size(&stream->base, *seq_num);
 8016b3c:	4620      	mov	r0, r4
 8016b3e:	f7ff ffae 	bl	8016a9e <uxr_get_reliable_buffer_size>
    bool data_to_send = 0 >= uxr_seq_num_cmp(*seq_num, stream->last_written)
 8016b42:	89e1      	ldrh	r1, [r4, #14]
    *length = uxr_get_reliable_buffer_size(&stream->base, *seq_num);
 8016b44:	6038      	str	r0, [r7, #0]
    bool data_to_send = 0 >= uxr_seq_num_cmp(*seq_num, stream->last_written)
 8016b46:	4628      	mov	r0, r5
 8016b48:	f000 f9aa 	bl	8016ea0 <uxr_seq_num_cmp>
                        && uxr_seq_num_sub(stream->last_sent, stream->last_acknown) != stream->base.history;
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	dc15      	bgt.n	8016b7c <uxr_prepare_next_reliable_buffer_to_send+0x64>
                        && *length > stream->offset
 8016b50:	7b23      	ldrb	r3, [r4, #12]
 8016b52:	683a      	ldr	r2, [r7, #0]
 8016b54:	429a      	cmp	r2, r3
 8016b56:	d911      	bls.n	8016b7c <uxr_prepare_next_reliable_buffer_to_send+0x64>
                        && uxr_seq_num_sub(stream->last_sent, stream->last_acknown) != stream->base.history;
 8016b58:	8a61      	ldrh	r1, [r4, #18]
 8016b5a:	8a20      	ldrh	r0, [r4, #16]
 8016b5c:	f000 f99d 	bl	8016e9a <uxr_seq_num_sub>
    if(data_to_send)
 8016b60:	8923      	ldrh	r3, [r4, #8]
 8016b62:	4283      	cmp	r3, r0
 8016b64:	d00a      	beq.n	8016b7c <uxr_prepare_next_reliable_buffer_to_send+0x64>
        stream->last_sent = *seq_num;
 8016b66:	8830      	ldrh	r0, [r6, #0]
        if(stream->last_sent == stream->last_written)
 8016b68:	89e3      	ldrh	r3, [r4, #14]
        stream->last_sent = *seq_num;
 8016b6a:	8220      	strh	r0, [r4, #16]
        if(stream->last_sent == stream->last_written)
 8016b6c:	4298      	cmp	r0, r3
 8016b6e:	d103      	bne.n	8016b78 <uxr_prepare_next_reliable_buffer_to_send+0x60>
            stream->last_written = uxr_seq_num_add(stream->last_written, 1);
 8016b70:	2101      	movs	r1, #1
 8016b72:	f000 f98f 	bl	8016e94 <uxr_seq_num_add>
 8016b76:	81e0      	strh	r0, [r4, #14]
    bool data_to_send = 0 >= uxr_seq_num_cmp(*seq_num, stream->last_written)
 8016b78:	2001      	movs	r0, #1
 8016b7a:	e000      	b.n	8016b7e <uxr_prepare_next_reliable_buffer_to_send+0x66>
 8016b7c:	2000      	movs	r0, #0
}
 8016b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b82 <uxr_update_output_stream_heartbeat_timestamp>:
{
 8016b82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(0 > uxr_seq_num_cmp(stream->last_acknown, stream->last_sent))
 8016b86:	8a01      	ldrh	r1, [r0, #16]
{
 8016b88:	4604      	mov	r4, r0
    if(0 > uxr_seq_num_cmp(stream->last_acknown, stream->last_sent))
 8016b8a:	8a40      	ldrh	r0, [r0, #18]
{
 8016b8c:	4690      	mov	r8, r2
 8016b8e:	4699      	mov	r9, r3
    if(0 > uxr_seq_num_cmp(stream->last_acknown, stream->last_sent))
 8016b90:	f000 f986 	bl	8016ea0 <uxr_seq_num_cmp>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	da3e      	bge.n	8016c16 <uxr_update_output_stream_heartbeat_timestamp+0x94>
        if(0 == stream->next_heartbeat_tries)
 8016b98:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016b9c:	b950      	cbnz	r0, 8016bb4 <uxr_update_output_stream_heartbeat_timestamp+0x32>
            stream->next_heartbeat_timestamp = current_timestamp + MIN_HEARTBEAT_TIME_INTERVAL;
 8016b9e:	f118 0201 	adds.w	r2, r8, #1
 8016ba2:	f149 0300 	adc.w	r3, r9, #0
 8016ba6:	e9c4 2306 	strd	r2, r3, [r4, #24]
            stream->next_heartbeat_tries = 1;
 8016baa:	2301      	movs	r3, #1
 8016bac:	f884 3020 	strb.w	r3, [r4, #32]
}
 8016bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(current_timestamp >= stream->next_heartbeat_timestamp)
 8016bb4:	e9d4 ab06 	ldrd	sl, fp, [r4, #24]
 8016bb8:	45d0      	cmp	r8, sl
 8016bba:	eb79 030b 	sbcs.w	r3, r9, fp
 8016bbe:	db30      	blt.n	8016c22 <uxr_update_output_stream_heartbeat_timestamp+0xa0>
            int64_t increment = MIN_HEARTBEAT_TIME_INTERVAL << (stream->next_heartbeat_tries % MAX_HEARTBEAT_TRIES);
 8016bc0:	213f      	movs	r1, #63	; 0x3f
 8016bc2:	fbb0 f1f1 	udiv	r1, r0, r1
 8016bc6:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8016bca:	1a41      	subs	r1, r0, r1
 8016bcc:	b2c9      	uxtb	r1, r1
 8016bce:	f04f 0e01 	mov.w	lr, #1
 8016bd2:	f1a1 0c20 	sub.w	ip, r1, #32
 8016bd6:	f1c1 0520 	rsb	r5, r1, #32
            int64_t difference = current_timestamp - stream->next_heartbeat_timestamp;
 8016bda:	ebb8 060a 	subs.w	r6, r8, sl
            int64_t increment = MIN_HEARTBEAT_TIME_INTERVAL << (stream->next_heartbeat_tries % MAX_HEARTBEAT_TRIES);
 8016bde:	fa0e fc0c 	lsl.w	ip, lr, ip
            stream->next_heartbeat_timestamp += (difference > increment) ? difference : increment;
 8016be2:	fa0e f801 	lsl.w	r8, lr, r1
            int64_t increment = MIN_HEARTBEAT_TIME_INTERVAL << (stream->next_heartbeat_tries % MAX_HEARTBEAT_TRIES);
 8016be6:	fa2e f505 	lsr.w	r5, lr, r5
            int64_t difference = current_timestamp - stream->next_heartbeat_timestamp;
 8016bea:	eb69 070b 	sbc.w	r7, r9, fp
            stream->next_heartbeat_timestamp += (difference > increment) ? difference : increment;
 8016bee:	ea4c 0905 	orr.w	r9, ip, r5
 8016bf2:	45b0      	cmp	r8, r6
 8016bf4:	eb79 0307 	sbcs.w	r3, r9, r7
 8016bf8:	bfbc      	itt	lt
 8016bfa:	46b0      	movlt	r8, r6
 8016bfc:	46b9      	movlt	r9, r7
 8016bfe:	eb18 020a 	adds.w	r2, r8, sl
            stream->next_heartbeat_tries++;
 8016c02:	f100 0001 	add.w	r0, r0, #1
            stream->next_heartbeat_timestamp += (difference > increment) ? difference : increment;
 8016c06:	eb49 030b 	adc.w	r3, r9, fp
            stream->next_heartbeat_tries++;
 8016c0a:	f884 0020 	strb.w	r0, [r4, #32]
            stream->next_heartbeat_timestamp += (difference > increment) ? difference : increment;
 8016c0e:	e9c4 2306 	strd	r2, r3, [r4, #24]
            must_confirm = true;
 8016c12:	2001      	movs	r0, #1
 8016c14:	e7cc      	b.n	8016bb0 <uxr_update_output_stream_heartbeat_timestamp+0x2e>
        stream->next_heartbeat_timestamp = INT64_MAX;
 8016c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c1e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    bool must_confirm = false;
 8016c22:	2000      	movs	r0, #0
 8016c24:	e7c4      	b.n	8016bb0 <uxr_update_output_stream_heartbeat_timestamp+0x2e>

08016c26 <uxr_begin_output_nack_buffer_it>:
}
 8016c26:	8a40      	ldrh	r0, [r0, #18]
 8016c28:	4770      	bx	lr

08016c2a <uxr_next_reliable_nack_buffer_to_send>:
{
 8016c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(stream->send_lost)
 8016c2e:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
{
 8016c32:	4604      	mov	r4, r0
 8016c34:	4688      	mov	r8, r1
 8016c36:	4617      	mov	r7, r2
 8016c38:	461e      	mov	r6, r3
    if(stream->send_lost)
 8016c3a:	b1b5      	cbz	r5, 8016c6a <uxr_next_reliable_nack_buffer_to_send+0x40>
            *seq_num_it = uxr_seq_num_add(*seq_num_it, 1);
 8016c3c:	2101      	movs	r1, #1
 8016c3e:	8830      	ldrh	r0, [r6, #0]
 8016c40:	f000 f928 	bl	8016e94 <uxr_seq_num_add>
 8016c44:	8030      	strh	r0, [r6, #0]
            check_next_buffer = 0 >= uxr_seq_num_cmp(*seq_num_it, stream->last_sent);
 8016c46:	8a21      	ldrh	r1, [r4, #16]
 8016c48:	f000 f92a 	bl	8016ea0 <uxr_seq_num_cmp>
            if(check_next_buffer)
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	dc0f      	bgt.n	8016c70 <uxr_next_reliable_nack_buffer_to_send+0x46>
                *buffer = uxr_get_reliable_buffer(&stream->base, *seq_num_it);
 8016c50:	8831      	ldrh	r1, [r6, #0]
 8016c52:	4620      	mov	r0, r4
 8016c54:	f7ff ff14 	bl	8016a80 <uxr_get_reliable_buffer>
 8016c58:	f8c8 0000 	str.w	r0, [r8]
                *length = uxr_get_reliable_buffer_size(&stream->base, *seq_num_it);
 8016c5c:	4620      	mov	r0, r4
 8016c5e:	f7ff ff1e 	bl	8016a9e <uxr_get_reliable_buffer_size>
 8016c62:	6038      	str	r0, [r7, #0]
                it_updated = *length != stream->offset;
 8016c64:	7b23      	ldrb	r3, [r4, #12]
        while(check_next_buffer && !it_updated)
 8016c66:	4298      	cmp	r0, r3
 8016c68:	d0e8      	beq.n	8016c3c <uxr_next_reliable_nack_buffer_to_send+0x12>
}
 8016c6a:	4628      	mov	r0, r5
 8016c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            stream->send_lost = false;
 8016c70:	2500      	movs	r5, #0
 8016c72:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8016c76:	e7f8      	b.n	8016c6a <uxr_next_reliable_nack_buffer_to_send+0x40>

08016c78 <uxr_process_acknack>:
{
 8016c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	460d      	mov	r5, r1
    uxrSeqNum last_acked_seq_num = uxr_seq_num_sub(first_unacked_seq_num, 1);
 8016c7e:	4610      	mov	r0, r2
 8016c80:	2101      	movs	r1, #1
 8016c82:	f000 f90a 	bl	8016e9a <uxr_seq_num_sub>
    size_t buffers_to_clean = uxr_seq_num_sub(last_acked_seq_num, stream->last_acknown);
 8016c86:	8a61      	ldrh	r1, [r4, #18]
 8016c88:	f000 f907 	bl	8016e9a <uxr_seq_num_sub>
    for(size_t i = 0; i < buffers_to_clean; i++)
 8016c8c:	2700      	movs	r7, #0
    size_t buffers_to_clean = uxr_seq_num_sub(last_acked_seq_num, stream->last_acknown);
 8016c8e:	4606      	mov	r6, r0
    for(size_t i = 0; i < buffers_to_clean; i++)
 8016c90:	42b7      	cmp	r7, r6
 8016c92:	d308      	bcc.n	8016ca6 <uxr_process_acknack+0x2e>
    stream->send_lost = (0 < bitmap);
 8016c94:	3d00      	subs	r5, #0
 8016c96:	bf18      	it	ne
 8016c98:	2501      	movne	r5, #1
    stream->next_heartbeat_tries = 0;
 8016c9a:	2300      	movs	r3, #0
    stream->send_lost = (0 < bitmap);
 8016c9c:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    stream->next_heartbeat_tries = 0;
 8016ca0:	f884 3020 	strb.w	r3, [r4, #32]
}
 8016ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        stream->last_acknown = uxr_seq_num_add(stream->last_acknown, 1);
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	8a60      	ldrh	r0, [r4, #18]
 8016caa:	f000 f8f3 	bl	8016e94 <uxr_seq_num_add>
        uxr_set_reliable_buffer_size(&stream->base, stream->last_acknown, stream->offset);
 8016cae:	7b22      	ldrb	r2, [r4, #12]
        stream->last_acknown = uxr_seq_num_add(stream->last_acknown, 1);
 8016cb0:	8260      	strh	r0, [r4, #18]
 8016cb2:	4601      	mov	r1, r0
        uxr_set_reliable_buffer_size(&stream->base, stream->last_acknown, stream->offset);
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	f7ff fefe 	bl	8016ab6 <uxr_set_reliable_buffer_size>
    for(size_t i = 0; i < buffers_to_clean; i++)
 8016cba:	3701      	adds	r7, #1
 8016cbc:	e7e8      	b.n	8016c90 <uxr_process_acknack+0x18>

08016cbe <uxr_is_output_up_to_date>:
    return 0 == uxr_seq_num_cmp(stream->last_acknown, stream->last_sent);
 8016cbe:	8a01      	ldrh	r1, [r0, #16]
 8016cc0:	8a40      	ldrh	r0, [r0, #18]
{
 8016cc2:	b508      	push	{r3, lr}
    return 0 == uxr_seq_num_cmp(stream->last_acknown, stream->last_sent);
 8016cc4:	f000 f8ec 	bl	8016ea0 <uxr_seq_num_cmp>
}
 8016cc8:	fab0 f080 	clz	r0, r0
 8016ccc:	0940      	lsrs	r0, r0, #5
 8016cce:	bd08      	pop	{r3, pc}

08016cd0 <uxr_buffer_request_data>:
        uxrSession* session,
        uxrStreamId stream_id,
        uxrObjectId datareader_id,
        uxrStreamId data_stream_id,
        const uxrDeliveryControl* const control)
{
 8016cd0:	b530      	push	{r4, r5, lr}
 8016cd2:	b095      	sub	sp, #84	; 0x54
 8016cd4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016cd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016cda:	9303      	str	r3, [sp, #12]
    uint16_t request_id = UXR_INVALID_REQUEST_ID;

    READ_DATA_Payload payload;
    payload.read_specification.preferred_stream_id = data_stream_id.raw;
 8016cdc:	f88d 301c 	strb.w	r3, [sp, #28]
    payload.read_specification.data_format = FORMAT_DATA;
 8016ce0:	2300      	movs	r3, #0
    payload.read_specification.optional_content_filter_expression = false; //not supported yet
    payload.read_specification.optional_delivery_control = (control != NULL);
 8016ce2:	429a      	cmp	r2, r3
    payload.read_specification.data_format = FORMAT_DATA;
 8016ce4:	f88d 301d 	strb.w	r3, [sp, #29]
    payload.read_specification.optional_content_filter_expression = false; //not supported yet
 8016ce8:	f88d 301e 	strb.w	r3, [sp, #30]
    payload.read_specification.optional_delivery_control = (control != NULL);
 8016cec:	bf18      	it	ne
 8016cee:	2301      	movne	r3, #1
{
 8016cf0:	4605      	mov	r5, r0
    payload.read_specification.optional_delivery_control = (control != NULL);
 8016cf2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

    if(control != NULL)
 8016cf6:	d00c      	beq.n	8016d12 <uxr_buffer_request_data+0x42>
    {
        payload.read_specification.delivery_control.max_bytes_per_seconds = control->max_bytes_per_second;
 8016cf8:	8893      	ldrh	r3, [r2, #4]
 8016cfa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        payload.read_specification.delivery_control.max_elapsed_time = control->max_elapsed_time;
 8016cfe:	8853      	ldrh	r3, [r2, #2]
 8016d00:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        payload.read_specification.delivery_control.max_samples = control->max_samples;
 8016d04:	8813      	ldrh	r3, [r2, #0]
 8016d06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        payload.read_specification.delivery_control.min_pace_period = control->min_pace_period;
 8016d0a:	88d3      	ldrh	r3, [r2, #6]
 8016d0c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

    // Change this when microcdr supports size_of function.
    size_t payload_length = 0; //READ_DATA_Payload_size(&payload);
    payload_length += 4; // (request id + object_id), no padding.
    payload_length += 4; // stream, format, and two optionals.
    payload_length += (control != NULL) ? 8 : 0; // delivery control
 8016d10:	2208      	movs	r2, #8

    ucdrBuffer ub;
    if(uxr_prepare_stream_to_write_submessage(session, stream_id, payload_length, &ub, SUBMESSAGE_ID_READ_DATA, 0))
 8016d12:	2308      	movs	r3, #8
 8016d14:	2100      	movs	r1, #0
 8016d16:	e9cd 3100 	strd	r3, r1, [sp]
 8016d1a:	3208      	adds	r2, #8
 8016d1c:	9905      	ldr	r1, [sp, #20]
 8016d1e:	ab0c      	add	r3, sp, #48	; 0x30
 8016d20:	4628      	mov	r0, r5
 8016d22:	f7fd fb46 	bl	80143b2 <uxr_prepare_stream_to_write_submessage>
 8016d26:	4604      	mov	r4, r0
 8016d28:	b148      	cbz	r0, 8016d3e <uxr_buffer_request_data+0x6e>
    {
        request_id = uxr_init_base_object_request(&session->info, datareader_id, &payload.base);
 8016d2a:	9904      	ldr	r1, [sp, #16]
 8016d2c:	aa06      	add	r2, sp, #24
 8016d2e:	4628      	mov	r0, r5
 8016d30:	f7fd fbf4 	bl	801451c <uxr_init_base_object_request>
        (void) uxr_serialize_READ_DATA_Payload(&ub, &payload);
 8016d34:	a906      	add	r1, sp, #24
        request_id = uxr_init_base_object_request(&session->info, datareader_id, &payload.base);
 8016d36:	4604      	mov	r4, r0
        (void) uxr_serialize_READ_DATA_Payload(&ub, &payload);
 8016d38:	a80c      	add	r0, sp, #48	; 0x30
 8016d3a:	f7fe f885 	bl	8014e48 <uxr_serialize_READ_DATA_Payload>
    }

    return request_id;
}
 8016d3e:	4620      	mov	r0, r4
 8016d40:	b015      	add	sp, #84	; 0x54
 8016d42:	bd30      	pop	{r4, r5, pc}

08016d44 <read_submessage_format>:
        uint16_t length,
        uint8_t format,
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
 8016d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d48:	b094      	sub	sp, #80	; 0x50
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 8016d50:	460d      	mov	r5, r1
 8016d52:	4616      	mov	r6, r2
    switch(format)
 8016d54:	461f      	mov	r7, r3
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d137      	bne.n	8016dca <read_submessage_format+0x86>
        uxrStreamId stream_id,
        uxrObjectId object_id,
        uint16_t request_id)
{
    ucdrBuffer temp_buffer;
    ucdr_init_buffer(&temp_buffer, ub->iterator, (size_t)(ub->final - ub->iterator));
 8016d5a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016d5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016d60:	9304      	str	r3, [sp, #16]
 8016d62:	1a52      	subs	r2, r2, r1
 8016d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d66:	9305      	str	r3, [sp, #20]
 8016d68:	a80c      	add	r0, sp, #48	; 0x30
 8016d6a:	f89d 9076 	ldrb.w	r9, [sp, #118]	; 0x76
 8016d6e:	f7fc fe4e 	bl	8013a0e <ucdr_init_buffer>
    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 8016d72:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
 8016d76:	a80c      	add	r0, sp, #48	; 0x30
 8016d78:	f7fc fe23 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
    if (ub->args)
 8016d7c:	69eb      	ldr	r3, [r5, #28]
 8016d7e:	b103      	cbz	r3, 8016d82 <read_submessage_format+0x3e>
    {
        uxrInputReliableStream * stream = (uxrInputReliableStream*) ub->args;
        stream->cleanup_flag = false;
 8016d80:	751f      	strb	r7, [r3, #20]
    }

    switch (object_id.type)
 8016d82:	f1b9 0f07 	cmp.w	r9, #7
 8016d86:	d04f      	beq.n	8016e28 <read_submessage_format+0xe4>
 8016d88:	f1b9 0f08 	cmp.w	r9, #8
 8016d8c:	d020      	beq.n	8016dd0 <read_submessage_format+0x8c>
 8016d8e:	f1b9 0f06 	cmp.w	r9, #6
 8016d92:	d112      	bne.n	8016dba <read_submessage_format+0x76>
    {
        case UXR_DATAREADER_ID:
        {
            if (NULL != session->on_topic)
 8016d94:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8016d98:	b17f      	cbz	r7, 8016dba <read_submessage_format+0x76>
            {
                session->on_topic(session, object_id, request_id, stream_id, &temp_buffer, length, session->on_topic_args);
 8016d9a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8016d9e:	f88d 9016 	strb.w	r9, [sp, #22]
 8016da2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8016da6:	ab0c      	add	r3, sp, #48	; 0x30
 8016da8:	9300      	str	r3, [sp, #0]
 8016daa:	9905      	ldr	r1, [sp, #20]
 8016dac:	9b04      	ldr	r3, [sp, #16]
 8016dae:	4652      	mov	r2, sl
 8016db0:	4620      	mov	r0, r4
 8016db2:	47b8      	blx	r7
                        &sample_id,
                        &temp_buffer,
                        (size_t)request_length,
                        session->on_request_args);
                    
                    session->on_data_flag = true;
 8016db4:	2301      	movs	r3, #1
 8016db6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
        }
        default:
            break;
    }

    if (ub->args)
 8016dba:	69eb      	ldr	r3, [r5, #28]
 8016dbc:	b10b      	cbz	r3, 8016dc2 <read_submessage_format+0x7e>
    {
        uxrInputReliableStream * stream = (uxrInputReliableStream*) ub->args;
        stream->cleanup_flag = true;
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	751a      	strb	r2, [r3, #20]
    }
    ucdr_advance_buffer(ub, length);
 8016dc2:	4631      	mov	r1, r6
 8016dc4:	4628      	mov	r0, r5
 8016dc6:	f7fc fe77 	bl	8013ab8 <ucdr_advance_buffer>
}
 8016dca:	b014      	add	sp, #80	; 0x50
 8016dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (NULL != session->on_request)
 8016dd0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d0f0      	beq.n	8016dba <read_submessage_format+0x76>
                if (uxr_deserialize_SampleIdentity(&temp_buffer, &sample_id))
 8016dd8:	a906      	add	r1, sp, #24
 8016dda:	a80c      	add	r0, sp, #48	; 0x30
                size_t offset = temp_buffer.offset;
 8016ddc:	9f10      	ldr	r7, [sp, #64]	; 0x40
                if (uxr_deserialize_SampleIdentity(&temp_buffer, &sample_id))
 8016dde:	f7fe f90b 	bl	8014ff8 <uxr_deserialize_SampleIdentity>
 8016de2:	2800      	cmp	r0, #0
 8016de4:	d0e9      	beq.n	8016dba <read_submessage_format+0x76>
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016de6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
                    uint16_t request_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016dec:	a80c      	add	r0, sp, #48	; 0x30
 8016dee:	1a52      	subs	r2, r2, r1
                    uint16_t request_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016df0:	eba7 0803 	sub.w	r8, r7, r3
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016df4:	f7fc fe0b 	bl	8013a0e <ucdr_init_buffer>
                    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 8016df8:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
 8016dfc:	a80c      	add	r0, sp, #48	; 0x30
 8016dfe:	f7fc fde0 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
                    uint16_t request_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e02:	44b0      	add	r8, r6
                    session->on_request(
 8016e04:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8016e08:	f88d 9016 	strb.w	r9, [sp, #22]
                    uint16_t request_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e0c:	fa1f f788 	uxth.w	r7, r8
                    session->on_request(
 8016e10:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016e14:	ab0c      	add	r3, sp, #48	; 0x30
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	9905      	ldr	r1, [sp, #20]
 8016e1a:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
 8016e1e:	ab06      	add	r3, sp, #24
 8016e20:	4652      	mov	r2, sl
 8016e22:	4620      	mov	r0, r4
 8016e24:	47b8      	blx	r7
 8016e26:	e7c5      	b.n	8016db4 <read_submessage_format+0x70>
            if (NULL != session->on_reply)
 8016e28:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8016e2c:	b373      	cbz	r3, 8016e8c <read_submessage_format+0x148>
                if (uxr_deserialize_BaseObjectRequest(&temp_buffer, &request))
 8016e2e:	a906      	add	r1, sp, #24
 8016e30:	a80c      	add	r0, sp, #48	; 0x30
                size_t offset = temp_buffer.offset;
 8016e32:	9f10      	ldr	r7, [sp, #64]	; 0x40
                if (uxr_deserialize_BaseObjectRequest(&temp_buffer, &request))
 8016e34:	f7fd ff8d 	bl	8014d52 <uxr_deserialize_BaseObjectRequest>
 8016e38:	b340      	cbz	r0, 8016e8c <read_submessage_format+0x148>
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016e3a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
                    uint16_t reply_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016e40:	1a52      	subs	r2, r2, r1
 8016e42:	a80c      	add	r0, sp, #48	; 0x30
                    uint16_t reply_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e44:	eba7 0803 	sub.w	r8, r7, r3
                    ucdr_init_buffer(&temp_buffer, temp_buffer.iterator, (size_t)(temp_buffer.final - temp_buffer.iterator));
 8016e48:	f7fc fde1 	bl	8013a0e <ucdr_init_buffer>
                    ucdr_set_on_full_buffer_callback(&temp_buffer, ub->on_full_buffer, ub->args);
 8016e4c:	e9d5 1206 	ldrd	r1, r2, [r5, #24]
 8016e50:	a80c      	add	r0, sp, #48	; 0x30
 8016e52:	f7fc fdb6 	bl	80139c2 <ucdr_set_on_full_buffer_callback>
                        (uint16_t)((request.request_id.data[0] << 8) + request.request_id.data[1]),
 8016e56:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8016e5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
                    session->on_reply(
 8016e5e:	f88d 9016 	strb.w	r9, [sp, #22]
                        (uint16_t)((request.request_id.data[0] << 8) + request.request_id.data[1]),
 8016e62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                    uint16_t reply_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e66:	44b0      	add	r8, r6
                    session->on_reply(
 8016e68:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8016e6c:	9905      	ldr	r1, [sp, #20]
                    uint16_t reply_length = (uint16_t)(length - (temp_buffer.offset - offset));
 8016e6e:	fa1f f788 	uxth.w	r7, r8
                    session->on_reply(
 8016e72:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8016e76:	aa0c      	add	r2, sp, #48	; 0x30
 8016e78:	9200      	str	r2, [sp, #0]
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 8016e80:	4652      	mov	r2, sl
 8016e82:	4620      	mov	r0, r4
 8016e84:	47b8      	blx	r7
                    session->on_data_flag = true;
 8016e86:	2301      	movs	r3, #1
 8016e88:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
            ub->iterator += length;
 8016e8c:	68ab      	ldr	r3, [r5, #8]
 8016e8e:	4433      	add	r3, r6
 8016e90:	60ab      	str	r3, [r5, #8]
            break;
 8016e92:	e792      	b.n	8016dba <read_submessage_format+0x76>

08016e94 <uxr_seq_num_add>:
//==================================================================
//                             PUBLIC
//==================================================================
uxrSeqNum uxr_seq_num_add(uxrSeqNum seq_num, uint16_t increment)
{
    return (uxrSeqNum)((seq_num + increment) % SEQ_NUM_SIZE);
 8016e94:	4408      	add	r0, r1
}
 8016e96:	b280      	uxth	r0, r0
 8016e98:	4770      	bx	lr

08016e9a <uxr_seq_num_sub>:

uxrSeqNum uxr_seq_num_sub(uxrSeqNum seq_num, uint16_t decrement)
{
    return (uxrSeqNum)((decrement > seq_num)
 8016e9a:	1a40      	subs	r0, r0, r1
        ? seq_num + (SEQ_NUM_SIZE - decrement)
        : seq_num - decrement);
}
 8016e9c:	b280      	uxth	r0, r0
 8016e9e:	4770      	bx	lr

08016ea0 <uxr_seq_num_cmp>:

int uxr_seq_num_cmp(uxrSeqNum seq_num_1, uxrSeqNum seq_num_2)
{
    int result;
    if(seq_num_1 == seq_num_2)
 8016ea0:	4288      	cmp	r0, r1
 8016ea2:	d00e      	beq.n	8016ec2 <uxr_seq_num_cmp+0x22>
    {
        result = 0;
    }
    else if((seq_num_1 < seq_num_2 && (seq_num_2 - seq_num_1) < SEQ_NUM_MIDSIZE) ||
 8016ea4:	d203      	bcs.n	8016eae <uxr_seq_num_cmp+0xe>
 8016ea6:	1a0b      	subs	r3, r1, r0
 8016ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016eac:	db0b      	blt.n	8016ec6 <uxr_seq_num_cmp+0x26>
 8016eae:	4288      	cmp	r0, r1
 8016eb0:	d90c      	bls.n	8016ecc <uxr_seq_num_cmp+0x2c>
            (seq_num_1 > seq_num_2 && (seq_num_1 - seq_num_2) > SEQ_NUM_MIDSIZE))
 8016eb2:	1a40      	subs	r0, r0, r1
 8016eb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    {
        result = -1;
 8016eb8:	bfd4      	ite	le
 8016eba:	2001      	movle	r0, #1
 8016ebc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016ec0:	4770      	bx	lr
        result = 0;
 8016ec2:	2000      	movs	r0, #0
 8016ec4:	4770      	bx	lr
        result = -1;
 8016ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016eca:	4770      	bx	lr
    }
    else
    {
        result = 1;
 8016ecc:	2001      	movs	r0, #1
    }
    return result;
}
 8016ece:	4770      	bx	lr

08016ed0 <uxr_close_serial_transport>:

bool uxr_close_serial_transport(uxrSerialTransport* transport)
{
    return uxr_close_serial_platform(transport->platform);
 8016ed0:	f8d0 027c 	ldr.w	r0, [r0, #636]	; 0x27c
 8016ed4:	f000 b805 	b.w	8016ee2 <uxr_close_serial_platform>

08016ed8 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
 8016ed8:	6883      	ldr	r3, [r0, #8]
 8016eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016edc:	b103      	cbz	r3, 8016ee0 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
 8016ede:	4718      	bx	r3
}
 8016ee0:	4770      	bx	lr

08016ee2 <uxr_close_serial_platform>:
}
 8016ee2:	2001      	movs	r0, #1
 8016ee4:	4770      	bx	lr

08016ee6 <uxr_write_serial_data_platform>:
size_t uxr_write_serial_data_platform(uxrSerialPlatform* platform, uint8_t* buf, size_t len, uint8_t* errcode){ 
 8016ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ee8:	4606      	mov	r6, r0
 8016eea:	4615      	mov	r5, r2
 8016eec:	460c      	mov	r4, r1
 8016eee:	188f      	adds	r7, r1, r2
    for (size_t i = 0; i < len; i++)
 8016ef0:	42bc      	cmp	r4, r7
 8016ef2:	d101      	bne.n	8016ef8 <uxr_write_serial_data_platform+0x12>
}
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uart_poll_out(platform->uart_dev, buf[i]);
 8016ef8:	6830      	ldr	r0, [r6, #0]
 8016efa:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
 8016efe:	6883      	ldr	r3, [r0, #8]
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	4798      	blx	r3
    for (size_t i = 0; i < len; i++)
 8016f04:	e7f4      	b.n	8016ef0 <uxr_write_serial_data_platform+0xa>

08016f06 <__rcl_guard_condition_init_from_rmw_impl>:
{
 8016f06:	b082      	sub	sp, #8
 8016f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f0c:	ac08      	add	r4, sp, #32
 8016f0e:	4605      	mov	r5, r0
 8016f10:	f844 3f04 	str.w	r3, [r4, #4]!
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8016f14:	4620      	mov	r0, r4
{
 8016f16:	4688      	mov	r8, r1
 8016f18:	4617      	mov	r7, r2
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8016f1a:	f7fb ff24 	bl	8012d66 <rcutils_allocator_is_valid>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	d039      	beq.n	8016f96 <__rcl_guard_condition_init_from_rmw_impl+0x90>
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, RCL_RET_INVALID_ARGUMENT);
 8016f22:	2d00      	cmp	r5, #0
 8016f24:	d037      	beq.n	8016f96 <__rcl_guard_condition_init_from_rmw_impl+0x90>
  if (guard_condition->impl) {
 8016f26:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016f2a:	f1b9 0f00 	cmp.w	r9, #0
 8016f2e:	d130      	bne.n	8016f92 <__rcl_guard_condition_init_from_rmw_impl+0x8c>
  RCL_CHECK_ARGUMENT_FOR_NULL(context, RCL_RET_INVALID_ARGUMENT);
 8016f30:	2f00      	cmp	r7, #0
 8016f32:	d030      	beq.n	8016f96 <__rcl_guard_condition_init_from_rmw_impl+0x90>
  if (!rcl_context_is_valid(context)) {
 8016f34:	4638      	mov	r0, r7
 8016f36:	f7fe f8b6 	bl	80150a6 <rcl_context_is_valid>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	d02d      	beq.n	8016f9a <__rcl_guard_condition_init_from_rmw_impl+0x94>
  guard_condition->impl = (rcl_guard_condition_impl_t *)allocator->allocate(
 8016f3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f42:	201c      	movs	r0, #28
 8016f44:	4798      	blx	r3
 8016f46:	4606      	mov	r6, r0
 8016f48:	6068      	str	r0, [r5, #4]
  if (!guard_condition->impl) {
 8016f4a:	b340      	cbz	r0, 8016f9e <__rcl_guard_condition_init_from_rmw_impl+0x98>
  if (rmw_guard_condition) {
 8016f4c:	f1b8 0f00 	cmp.w	r8, #0
 8016f50:	d00b      	beq.n	8016f6a <__rcl_guard_condition_init_from_rmw_impl+0x64>
    guard_condition->impl->rmw_handle = (rmw_guard_condition_t *)rmw_guard_condition;
 8016f52:	f8c0 8000 	str.w	r8, [r0]
    guard_condition->impl->allocated_rmw_guard_condition = false;
 8016f56:	f880 9004 	strb.w	r9, [r0, #4]
  guard_condition->impl->options = options;
 8016f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f5c:	686d      	ldr	r5, [r5, #4]
 8016f5e:	3508      	adds	r5, #8
 8016f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	602b      	str	r3, [r5, #0]
  return RCL_RET_OK;
 8016f66:	2000      	movs	r0, #0
 8016f68:	e00c      	b.n	8016f84 <__rcl_guard_condition_init_from_rmw_impl+0x7e>
    guard_condition->impl->rmw_handle = rmw_create_guard_condition(&(context->impl->rmw_context));
 8016f6a:	6838      	ldr	r0, [r7, #0]
 8016f6c:	3028      	adds	r0, #40	; 0x28
 8016f6e:	f000 f880 	bl	8017072 <rmw_create_guard_condition>
 8016f72:	6030      	str	r0, [r6, #0]
    if (!guard_condition->impl->rmw_handle) {
 8016f74:	6868      	ldr	r0, [r5, #4]
 8016f76:	6806      	ldr	r6, [r0, #0]
 8016f78:	b946      	cbnz	r6, 8016f8c <__rcl_guard_condition_init_from_rmw_impl+0x86>
      allocator->deallocate(guard_condition->impl, allocator->state);
 8016f7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f7e:	4798      	blx	r3
      guard_condition->impl = NULL;
 8016f80:	606e      	str	r6, [r5, #4]
      return RCL_RET_ERROR;
 8016f82:	2001      	movs	r0, #1
}
 8016f84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f88:	b002      	add	sp, #8
 8016f8a:	4770      	bx	lr
    guard_condition->impl->allocated_rmw_guard_condition = true;
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	7103      	strb	r3, [r0, #4]
 8016f90:	e7e3      	b.n	8016f5a <__rcl_guard_condition_init_from_rmw_impl+0x54>
    return RCL_RET_ALREADY_INIT;
 8016f92:	2064      	movs	r0, #100	; 0x64
 8016f94:	e7f6      	b.n	8016f84 <__rcl_guard_condition_init_from_rmw_impl+0x7e>
  RCL_CHECK_ALLOCATOR_WITH_MSG(allocator, "invalid allocator", return RCL_RET_INVALID_ARGUMENT);
 8016f96:	200b      	movs	r0, #11
 8016f98:	e7f4      	b.n	8016f84 <__rcl_guard_condition_init_from_rmw_impl+0x7e>
    return RCL_RET_NOT_INIT;
 8016f9a:	2065      	movs	r0, #101	; 0x65
 8016f9c:	e7f2      	b.n	8016f84 <__rcl_guard_condition_init_from_rmw_impl+0x7e>
    return RCL_RET_BAD_ALLOC;
 8016f9e:	200a      	movs	r0, #10
 8016fa0:	e7f0      	b.n	8016f84 <__rcl_guard_condition_init_from_rmw_impl+0x7e>

08016fa2 <rcl_guard_condition_init>:
{
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	b530      	push	{r4, r5, lr}
 8016fa6:	b085      	sub	sp, #20
 8016fa8:	460d      	mov	r5, r1
 8016faa:	a908      	add	r1, sp, #32
 8016fac:	e881 000c 	stmia.w	r1, {r2, r3}
  return __rcl_guard_condition_init_from_rmw_impl(guard_condition, NULL, context, options);
 8016fb0:	ab09      	add	r3, sp, #36	; 0x24
{
 8016fb2:	4604      	mov	r4, r0
  return __rcl_guard_condition_init_from_rmw_impl(guard_condition, NULL, context, options);
 8016fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016fba:	9b08      	ldr	r3, [sp, #32]
 8016fbc:	462a      	mov	r2, r5
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	f7ff ffa0 	bl	8016f06 <__rcl_guard_condition_init_from_rmw_impl>
}
 8016fc6:	b005      	add	sp, #20
 8016fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fcc:	b002      	add	sp, #8
 8016fce:	4770      	bx	lr

08016fd0 <rcl_guard_condition_init_from_rmw>:
{
 8016fd0:	b082      	sub	sp, #8
 8016fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd4:	b085      	sub	sp, #20
 8016fd6:	461c      	mov	r4, r3
 8016fd8:	930b      	str	r3, [sp, #44]	; 0x2c
  return __rcl_guard_condition_init_from_rmw_impl(
 8016fda:	ab0c      	add	r3, sp, #48	; 0x30
{
 8016fdc:	4605      	mov	r5, r0
 8016fde:	460e      	mov	r6, r1
 8016fe0:	4617      	mov	r7, r2
  return __rcl_guard_condition_init_from_rmw_impl(
 8016fe2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016fe4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016fe8:	4623      	mov	r3, r4
 8016fea:	463a      	mov	r2, r7
 8016fec:	4631      	mov	r1, r6
 8016fee:	4628      	mov	r0, r5
 8016ff0:	f7ff ff89 	bl	8016f06 <__rcl_guard_condition_init_from_rmw_impl>
}
 8016ff4:	b005      	add	sp, #20
 8016ff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ffa:	b002      	add	sp, #8
 8016ffc:	4770      	bx	lr

08016ffe <rcl_guard_condition_fini>:
{
 8016ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, RCL_RET_INVALID_ARGUMENT);
 8017000:	4605      	mov	r5, r0
 8017002:	b1a8      	cbz	r0, 8017030 <rcl_guard_condition_fini+0x32>
  if (guard_condition->impl) {
 8017004:	6844      	ldr	r4, [r0, #4]
 8017006:	b17c      	cbz	r4, 8017028 <rcl_guard_condition_fini+0x2a>
    if (guard_condition->impl->rmw_handle && guard_condition->impl->allocated_rmw_guard_condition) {
 8017008:	6820      	ldr	r0, [r4, #0]
    rcl_allocator_t allocator = guard_condition->impl->options.allocator;
 801700a:	68e6      	ldr	r6, [r4, #12]
 801700c:	69a7      	ldr	r7, [r4, #24]
    if (guard_condition->impl->rmw_handle && guard_condition->impl->allocated_rmw_guard_condition) {
 801700e:	b168      	cbz	r0, 801702c <rcl_guard_condition_fini+0x2e>
 8017010:	7924      	ldrb	r4, [r4, #4]
 8017012:	b124      	cbz	r4, 801701e <rcl_guard_condition_fini+0x20>
      if (rmw_destroy_guard_condition(guard_condition->impl->rmw_handle) != RMW_RET_OK) {
 8017014:	f000 f83f 	bl	8017096 <rmw_destroy_guard_condition>
 8017018:	1e04      	subs	r4, r0, #0
 801701a:	bf18      	it	ne
 801701c:	2401      	movne	r4, #1
    allocator.deallocate(guard_condition->impl, allocator.state);
 801701e:	6868      	ldr	r0, [r5, #4]
 8017020:	4639      	mov	r1, r7
 8017022:	47b0      	blx	r6
    guard_condition->impl = NULL;
 8017024:	2300      	movs	r3, #0
 8017026:	606b      	str	r3, [r5, #4]
}
 8017028:	4620      	mov	r0, r4
 801702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  rcl_ret_t result = RCL_RET_OK;
 801702c:	4604      	mov	r4, r0
 801702e:	e7f6      	b.n	801701e <rcl_guard_condition_fini+0x20>
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, RCL_RET_INVALID_ARGUMENT);
 8017030:	240b      	movs	r4, #11
 8017032:	e7f9      	b.n	8017028 <rcl_guard_condition_fini+0x2a>

08017034 <rcl_guard_condition_get_options>:

const rcl_guard_condition_options_t *
rcl_guard_condition_get_options(const rcl_guard_condition_t * guard_condition)
{
  // Perform argument validation.
  RCL_CHECK_ARGUMENT_FOR_NULL(guard_condition, NULL);
 8017034:	b110      	cbz	r0, 801703c <rcl_guard_condition_get_options+0x8>
  RCL_CHECK_FOR_NULL_WITH_MSG(
 8017036:	6840      	ldr	r0, [r0, #4]
 8017038:	b100      	cbz	r0, 801703c <rcl_guard_condition_get_options+0x8>
    guard_condition->impl,
    "guard condition implementation is invalid",
    return NULL);
  return &guard_condition->impl->options;
 801703a:	3008      	adds	r0, #8
}
 801703c:	4770      	bx	lr

0801703e <rcl_trigger_guard_condition>:
{
 801703e:	b508      	push	{r3, lr}
 8017040:	4603      	mov	r3, r0
  const rcl_guard_condition_options_t * options = rcl_guard_condition_get_options(guard_condition);
 8017042:	f7ff fff7 	bl	8017034 <rcl_guard_condition_get_options>
  if (!options) {
 8017046:	b138      	cbz	r0, 8017058 <rcl_trigger_guard_condition+0x1a>
  if (rmw_trigger_guard_condition(guard_condition->impl->rmw_handle) != RMW_RET_OK) {
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	6818      	ldr	r0, [r3, #0]
 801704c:	f000 f828 	bl	80170a0 <rmw_trigger_guard_condition>
 8017050:	3800      	subs	r0, #0
 8017052:	bf18      	it	ne
 8017054:	2001      	movne	r0, #1
}
 8017056:	bd08      	pop	{r3, pc}
    return RCL_RET_INVALID_ARGUMENT;  // error already set
 8017058:	200b      	movs	r0, #11
 801705a:	e7fc      	b.n	8017056 <rcl_trigger_guard_condition+0x18>

0801705c <rcl_guard_condition_get_rmw_handle>:

rmw_guard_condition_t *
rcl_guard_condition_get_rmw_handle(const rcl_guard_condition_t * guard_condition)
{
 801705c:	b508      	push	{r3, lr}
 801705e:	4603      	mov	r3, r0
  const rcl_guard_condition_options_t * options = rcl_guard_condition_get_options(guard_condition);
 8017060:	f7ff ffe8 	bl	8017034 <rcl_guard_condition_get_options>
  if (!options) {
 8017064:	b108      	cbz	r0, 801706a <rcl_guard_condition_get_rmw_handle+0xe>
    return NULL;  // error already set
  }
  return guard_condition->impl->rmw_handle;
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	6818      	ldr	r0, [r3, #0]
}
 801706a:	bd08      	pop	{r3, pc}

0801706c <on_status>:
{
 801706c:	b082      	sub	sp, #8
}
 801706e:	b002      	add	sp, #8
 8017070:	4770      	bx	lr

08017072 <rmw_create_guard_condition>:
#include <rmw/rmw.h>
#include <rmw/allocators.h>

rmw_guard_condition_t *
rmw_create_guard_condition(rmw_context_t * context)
{
 8017072:	b538      	push	{r3, r4, r5, lr}
 8017074:	4605      	mov	r5, r0
  (void) context;
  EPROS_PRINT_TRACE()

  rmw_guard_condition_t * rmw_guard_condition = (rmw_guard_condition_t *)rmw_allocate(
 8017076:	200c      	movs	r0, #12
 8017078:	f7ff f846 	bl	8016108 <rmw_allocate>
    sizeof(rmw_guard_condition_t));

  rmw_guard_condition->context = context;
 801707c:	6085      	str	r5, [r0, #8]
  rmw_guard_condition_t * rmw_guard_condition = (rmw_guard_condition_t *)rmw_allocate(
 801707e:	4604      	mov	r4, r0
  rmw_guard_condition->implementation_identifier = rmw_get_implementation_identifier();
 8017080:	f7f3 f992 	bl	800a3a8 <rmw_get_implementation_identifier>
 8017084:	6020      	str	r0, [r4, #0]
  rmw_guard_condition->data = (bool *)rmw_allocate(sizeof(bool));
 8017086:	2001      	movs	r0, #1
 8017088:	f7ff f83e 	bl	8016108 <rmw_allocate>

  bool * hasTriggered = (bool *)rmw_guard_condition->data;
  *hasTriggered = false;
 801708c:	2300      	movs	r3, #0
  rmw_guard_condition->data = (bool *)rmw_allocate(sizeof(bool));
 801708e:	6060      	str	r0, [r4, #4]
  *hasTriggered = false;
 8017090:	7003      	strb	r3, [r0, #0]

  return rmw_guard_condition;
}
 8017092:	4620      	mov	r0, r4
 8017094:	bd38      	pop	{r3, r4, r5, pc}

08017096 <rmw_destroy_guard_condition>:

rmw_ret_t
rmw_destroy_guard_condition(rmw_guard_condition_t * guard_condition)
{
 8017096:	b508      	push	{r3, lr}
  EPROS_PRINT_TRACE()

  rmw_free(guard_condition);
 8017098:	f7ff f849 	bl	801612e <rmw_free>

  return RMW_RET_OK;
}
 801709c:	2000      	movs	r0, #0
 801709e:	bd08      	pop	{r3, pc}

080170a0 <rmw_trigger_guard_condition>:
#include <rmw/names_and_types.h>
#include <rmw/error_handling.h>

rmw_ret_t
rmw_trigger_guard_condition(const rmw_guard_condition_t * guard_condition)
{
 80170a0:	b510      	push	{r4, lr}
  EPROS_PRINT_TRACE()
  rmw_ret_t ret = RMW_RET_OK;
  if (!guard_condition) {
 80170a2:	4604      	mov	r4, r0
 80170a4:	b908      	cbnz	r0, 80170aa <rmw_trigger_guard_condition+0xa>
    RMW_SET_ERROR_MSG("guard condition pointer is null");
    ret = RMW_RET_ERROR;
 80170a6:	2001      	movs	r0, #1
    bool * hasTriggered = (bool *)guard_condition->data;
    *hasTriggered = true;
  }

  return ret;
}
 80170a8:	bd10      	pop	{r4, pc}
  } else if (!is_uxrce_rmw_identifier_valid(guard_condition->implementation_identifier)) {
 80170aa:	6800      	ldr	r0, [r0, #0]
 80170ac:	f7fc f9e5 	bl	801347a <is_uxrce_rmw_identifier_valid>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	d0f8      	beq.n	80170a6 <rmw_trigger_guard_condition+0x6>
    *hasTriggered = true;
 80170b4:	6863      	ldr	r3, [r4, #4]
 80170b6:	2201      	movs	r2, #1
 80170b8:	701a      	strb	r2, [r3, #0]
  rmw_ret_t ret = RMW_RET_OK;
 80170ba:	2000      	movs	r0, #0
  return ret;
 80170bc:	e7f4      	b.n	80170a8 <rmw_trigger_guard_condition+0x8>

080170be <uxr_get_next_octet>:

bool uxr_get_next_octet(uxrSerialIO* serial_io, uint8_t* octet)
{
 80170be:	b530      	push	{r4, r5, lr}
    bool rv = false;
    *octet = 0;
 80170c0:	2300      	movs	r3, #0
 80170c2:	700b      	strb	r3, [r1, #0]
    if (serial_io->rb_head != serial_io->rb_tail)
 80170c4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80170c8:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 80170cc:	4295      	cmp	r5, r2
 80170ce:	d101      	bne.n	80170d4 <uxr_get_next_octet+0x16>
    bool rv = false;
 80170d0:	2000      	movs	r0, #0
                }
            }
        }
    }
    return rv;
}
 80170d2:	bd30      	pop	{r4, r5, pc}
        if (UXR_FRAMING_ESC_FLAG != serial_io->rb[serial_io->rb_tail])
 80170d4:	1883      	adds	r3, r0, r2
 80170d6:	789c      	ldrb	r4, [r3, #2]
 80170d8:	2c7d      	cmp	r4, #125	; 0x7d
 80170da:	f04f 032a 	mov.w	r3, #42	; 0x2a
 80170de:	d00e      	beq.n	80170fe <uxr_get_next_octet+0x40>
            *octet = serial_io->rb[serial_io->rb_tail];
 80170e0:	700c      	strb	r4, [r1, #0]
            serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 80170e2:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 80170e6:	3201      	adds	r2, #1
 80170e8:	fbb2 f4f3 	udiv	r4, r2, r3
 80170ec:	fb03 2314 	mls	r3, r3, r4, r2
 80170f0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
            rv = (UXR_FRAMING_BEGIN_FLAG != *octet);
 80170f4:	7808      	ldrb	r0, [r1, #0]
 80170f6:	387e      	subs	r0, #126	; 0x7e
 80170f8:	bf18      	it	ne
 80170fa:	2001      	movne	r0, #1
 80170fc:	e7e9      	b.n	80170d2 <uxr_get_next_octet+0x14>
            uint8_t temp_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 80170fe:	1c54      	adds	r4, r2, #1
 8017100:	fbb4 f2f3 	udiv	r2, r4, r3
 8017104:	fb03 4212 	mls	r2, r3, r2, r4
            if (temp_tail != serial_io->rb_head)
 8017108:	b2d4      	uxtb	r4, r2
 801710a:	42a5      	cmp	r5, r4
 801710c:	d0e0      	beq.n	80170d0 <uxr_get_next_octet+0x12>
                *octet = serial_io->rb[temp_tail];
 801710e:	4402      	add	r2, r0
 8017110:	7892      	ldrb	r2, [r2, #2]
 8017112:	700a      	strb	r2, [r1, #0]
                serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 2) % sizeof(serial_io->rb));
 8017114:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8017118:	3202      	adds	r2, #2
 801711a:	fbb2 f4f3 	udiv	r4, r2, r3
 801711e:	fb03 2314 	mls	r3, r3, r4, r2
 8017122:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
                if (UXR_FRAMING_BEGIN_FLAG != *octet)
 8017126:	780b      	ldrb	r3, [r1, #0]
 8017128:	2b7e      	cmp	r3, #126	; 0x7e
 801712a:	d0d1      	beq.n	80170d0 <uxr_get_next_octet+0x12>
                    *octet ^= UXR_FRAMING_XOR_FLAG;
 801712c:	f083 0320 	eor.w	r3, r3, #32
 8017130:	700b      	strb	r3, [r1, #0]
                    rv = true;
 8017132:	2001      	movs	r0, #1
 8017134:	e7cd      	b.n	80170d2 <uxr_get_next_octet+0x14>

08017136 <uxr_add_next_octet>:

bool uxr_add_next_octet(uxrSerialIO* serial_io, uint8_t octet)
{
 8017136:	b510      	push	{r4, lr}
    bool rv = false;

    if (UXR_FRAMING_BEGIN_FLAG == octet || UXR_FRAMING_ESC_FLAG == octet)
 8017138:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 801713c:	2a01      	cmp	r2, #1
 801713e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8017142:	d811      	bhi.n	8017168 <uxr_add_next_octet+0x32>
    {
        if ((uint8_t)(serial_io->wb_pos + 1) < sizeof(serial_io->wb))
 8017144:	b25a      	sxtb	r2, r3
 8017146:	1c54      	adds	r4, r2, #1
 8017148:	b2e4      	uxtb	r4, r4
 801714a:	2c29      	cmp	r4, #41	; 0x29
 801714c:	d815      	bhi.n	801717a <uxr_add_next_octet+0x44>
        {
            serial_io->wb[serial_io->wb_pos] = UXR_FRAMING_ESC_FLAG;
 801714e:	4403      	add	r3, r0
 8017150:	247d      	movs	r4, #125	; 0x7d
            serial_io->wb[serial_io->wb_pos + 1] = octet ^ UXR_FRAMING_XOR_FLAG;
 8017152:	f081 0120 	eor.w	r1, r1, #32
            serial_io->wb_pos = (uint8_t)(serial_io->wb_pos + 2);
 8017156:	3202      	adds	r2, #2
            serial_io->wb[serial_io->wb_pos] = UXR_FRAMING_ESC_FLAG;
 8017158:	f883 4038 	strb.w	r4, [r3, #56]	; 0x38
            serial_io->wb[serial_io->wb_pos + 1] = octet ^ UXR_FRAMING_XOR_FLAG;
 801715c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
            serial_io->wb_pos = (uint8_t)(serial_io->wb_pos + 2);
 8017160:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    {
        if (serial_io->wb_pos < sizeof(serial_io->wb))
        {
            serial_io->wb[serial_io->wb_pos] = octet;
            serial_io->wb_pos = (uint8_t)(serial_io->wb_pos + 1);
            rv = true;
 8017164:	2001      	movs	r0, #1
        }
    }

    return rv;
}
 8017166:	bd10      	pop	{r4, pc}
        if (serial_io->wb_pos < sizeof(serial_io->wb))
 8017168:	2b29      	cmp	r3, #41	; 0x29
 801716a:	d806      	bhi.n	801717a <uxr_add_next_octet+0x44>
            serial_io->wb[serial_io->wb_pos] = octet;
 801716c:	18c2      	adds	r2, r0, r3
            serial_io->wb_pos = (uint8_t)(serial_io->wb_pos + 1);
 801716e:	3301      	adds	r3, #1
            serial_io->wb[serial_io->wb_pos] = octet;
 8017170:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
            serial_io->wb_pos = (uint8_t)(serial_io->wb_pos + 1);
 8017174:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
 8017178:	e7f4      	b.n	8017164 <uxr_add_next_octet+0x2e>
    bool rv = false;
 801717a:	2000      	movs	r0, #0
 801717c:	e7f3      	b.n	8017166 <uxr_add_next_octet+0x30>

0801717e <uxr_init_serial_io>:

void uxr_init_serial_io(uxrSerialIO* serial_io, uint8_t local_addr)
{
    serial_io->local_addr = local_addr;
    serial_io->state = UXR_SERIAL_UNINITIALIZED;
 801717e:	2300      	movs	r3, #0
    serial_io->local_addr = local_addr;
 8017180:	7041      	strb	r1, [r0, #1]
    serial_io->state = UXR_SERIAL_UNINITIALIZED;
 8017182:	7003      	strb	r3, [r0, #0]
    serial_io->rb_head = 0;
 8017184:	8583      	strh	r3, [r0, #44]	; 0x2c
    serial_io->rb_tail = 0;
}
 8017186:	4770      	bx	lr

08017188 <uxr_write_serial_msg>:
                            void* cb_arg,
                            const uint8_t* buf,
                            size_t len,
                            uint8_t remote_addr,
                            uint8_t* errcode)
{
 8017188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801718c:	b085      	sub	sp, #20
    /* Buffer being flag. */
    serial_io->wb[0] = UXR_FRAMING_BEGIN_FLAG;
    serial_io->wb_pos = 1;
 801718e:	2501      	movs	r5, #1
{
 8017190:	9300      	str	r3, [sp, #0]
    serial_io->wb[0] = UXR_FRAMING_BEGIN_FLAG;
 8017192:	237e      	movs	r3, #126	; 0x7e
{
 8017194:	4604      	mov	r4, r0
    serial_io->wb[0] = UXR_FRAMING_BEGIN_FLAG;
 8017196:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
{
 801719a:	460f      	mov	r7, r1
    serial_io->wb_pos = 1;
 801719c:	f880 5062 	strb.w	r5, [r0, #98]	; 0x62

    /* Buffer header. */
    uxr_add_next_octet(serial_io, serial_io->local_addr);
 80171a0:	7841      	ldrb	r1, [r0, #1]
{
 80171a2:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80171a6:	4690      	mov	r8, r2
    uxr_add_next_octet(serial_io, serial_io->local_addr);
 80171a8:	f7ff ffc5 	bl	8017136 <uxr_add_next_octet>
    uxr_add_next_octet(serial_io, remote_addr);
 80171ac:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80171b0:	4620      	mov	r0, r4
 80171b2:	f7ff ffc0 	bl	8017136 <uxr_add_next_octet>
    uxr_add_next_octet(serial_io, (uint8_t)(len & 0xFF));
 80171b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171b8:	4620      	mov	r0, r4
 80171ba:	b2d9      	uxtb	r1, r3
 80171bc:	f7ff ffbb 	bl	8017136 <uxr_add_next_octet>
    uxr_add_next_octet(serial_io, (uint8_t)(len >> 8));
 80171c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171c2:	4620      	mov	r0, r4
 80171c4:	f3c3 2107 	ubfx	r1, r3, #8, #8

    /* Write payload. */
    uint8_t octet = 0;
    uint16_t written_len = 0;
    uint16_t crc = 0;
 80171c8:	2600      	movs	r6, #0
    uxr_add_next_octet(serial_io, (uint8_t)(len >> 8));
 80171ca:	f7ff ffb4 	bl	8017136 <uxr_add_next_octet>
            uxr_update_crc(&crc, octet);
            ++written_len;
        }
        else
        {
            size_t bytes_written = write_cb(cb_arg, serial_io->wb, serial_io->wb_pos, errcode);
 80171ce:	f104 0b38 	add.w	fp, r4, #56	; 0x38
    uint16_t crc = 0;
 80171d2:	f8ad 600e 	strh.w	r6, [sp, #14]
    while (written_len < len && cond)
 80171d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171d8:	429e      	cmp	r6, r3
 80171da:	d200      	bcs.n	80171de <uxr_write_serial_msg+0x56>
 80171dc:	b95d      	cbnz	r5, 80171f6 <uxr_write_serial_msg+0x6e>
        }
    }

    /* Write CRC. */
    uint8_t tmp_crc[2];
    tmp_crc[0] = (uint8_t)(crc & 0xFF);
 80171de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80171e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    tmp_crc[1] = (uint8_t)(crc >> 8);
    written_len = 0;
 80171e6:	2600      	movs	r6, #0
            uxr_update_crc(&crc, octet);
            ++written_len;
        }
        else
        {
            size_t bytes_written = write_cb(cb_arg, serial_io->wb, serial_io->wb_pos, errcode);
 80171e8:	f104 0b38 	add.w	fp, r4, #56	; 0x38
    while (written_len < sizeof(tmp_crc) && cond)
 80171ec:	bb1d      	cbnz	r5, 8017236 <uxr_write_serial_msg+0xae>
            {
                cond = false;
            }
    }

    return cond ? (uint16_t)(len) : 0;
 80171ee:	2000      	movs	r0, #0
}
 80171f0:	b005      	add	sp, #20
 80171f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        octet = *(buf + written_len);
 80171f6:	9b00      	ldr	r3, [sp, #0]
        if (uxr_add_next_octet(serial_io, octet))
 80171f8:	4620      	mov	r0, r4
        octet = *(buf + written_len);
 80171fa:	5d99      	ldrb	r1, [r3, r6]
        if (uxr_add_next_octet(serial_io, octet))
 80171fc:	9101      	str	r1, [sp, #4]
 80171fe:	f7ff ff9a 	bl	8017136 <uxr_add_next_octet>
 8017202:	9901      	ldr	r1, [sp, #4]
 8017204:	4681      	mov	r9, r0
 8017206:	b138      	cbz	r0, 8017218 <uxr_write_serial_msg+0x90>
            uxr_update_crc(&crc, octet);
 8017208:	f10d 000e 	add.w	r0, sp, #14
 801720c:	f7f4 f862 	bl	800b2d4 <uxr_update_crc>
            ++written_len;
 8017210:	3601      	adds	r6, #1
 8017212:	b2b6      	uxth	r6, r6
                cond = true;
 8017214:	464d      	mov	r5, r9
 8017216:	e7de      	b.n	80171d6 <uxr_write_serial_msg+0x4e>
            size_t bytes_written = write_cb(cb_arg, serial_io->wb, serial_io->wb_pos, errcode);
 8017218:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801721c:	4653      	mov	r3, sl
 801721e:	4659      	mov	r1, fp
 8017220:	4640      	mov	r0, r8
 8017222:	47b8      	blx	r7
            if (0 < bytes_written)
 8017224:	2800      	cmp	r0, #0
 8017226:	d0f5      	beq.n	8017214 <uxr_write_serial_msg+0x8c>
                serial_io->wb_pos = (uint8_t)(serial_io->wb_pos - bytes_written);
 8017228:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801722c:	1a18      	subs	r0, r3, r0
 801722e:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
                cond = true;
 8017232:	46a9      	mov	r9, r5
 8017234:	e7ee      	b.n	8017214 <uxr_write_serial_msg+0x8c>
        octet = *(tmp_crc + written_len);
 8017236:	ab04      	add	r3, sp, #16
 8017238:	4433      	add	r3, r6
        if (uxr_add_next_octet(serial_io, octet))
 801723a:	4620      	mov	r0, r4
        octet = *(tmp_crc + written_len);
 801723c:	f813 1c04 	ldrb.w	r1, [r3, #-4]
        if (uxr_add_next_octet(serial_io, octet))
 8017240:	9100      	str	r1, [sp, #0]
 8017242:	f7ff ff78 	bl	8017136 <uxr_add_next_octet>
 8017246:	9900      	ldr	r1, [sp, #0]
 8017248:	4681      	mov	r9, r0
 801724a:	b1c8      	cbz	r0, 8017280 <uxr_write_serial_msg+0xf8>
            ++written_len;
 801724c:	3601      	adds	r6, #1
            uxr_update_crc(&crc, octet);
 801724e:	f10d 000e 	add.w	r0, sp, #14
            ++written_len;
 8017252:	b2b6      	uxth	r6, r6
            uxr_update_crc(&crc, octet);
 8017254:	f7f4 f83e 	bl	800b2d4 <uxr_update_crc>
    while (written_len < sizeof(tmp_crc) && cond)
 8017258:	2e02      	cmp	r6, #2
 801725a:	d11e      	bne.n	801729a <uxr_write_serial_msg+0x112>
    if (cond && (0 < serial_io->wb_pos))
 801725c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017260:	b15a      	cbz	r2, 801727a <uxr_write_serial_msg+0xf2>
            size_t bytes_written = write_cb(cb_arg, serial_io->wb, serial_io->wb_pos, errcode);
 8017262:	4653      	mov	r3, sl
 8017264:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8017268:	4640      	mov	r0, r8
 801726a:	47b8      	blx	r7
            if (0 < bytes_written)
 801726c:	2800      	cmp	r0, #0
 801726e:	d0be      	beq.n	80171ee <uxr_write_serial_msg+0x66>
                serial_io->wb_pos = (uint8_t)(serial_io->wb_pos - bytes_written);
 8017270:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8017274:	1a18      	subs	r0, r3, r0
 8017276:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
    return cond ? (uint16_t)(len) : 0;
 801727a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801727c:	b298      	uxth	r0, r3
 801727e:	e7b7      	b.n	80171f0 <uxr_write_serial_msg+0x68>
            size_t bytes_written = write_cb(cb_arg, serial_io->wb, serial_io->wb_pos, errcode);
 8017280:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017284:	4653      	mov	r3, sl
 8017286:	4659      	mov	r1, fp
 8017288:	4640      	mov	r0, r8
 801728a:	47b8      	blx	r7
            if (0 < bytes_written)
 801728c:	b128      	cbz	r0, 801729a <uxr_write_serial_msg+0x112>
                serial_io->wb_pos = (uint8_t)(serial_io->wb_pos - bytes_written);
 801728e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8017292:	1a18      	subs	r0, r3, r0
 8017294:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
                cond = true;
 8017298:	46a9      	mov	r9, r5
    written_len = 0;
 801729a:	464d      	mov	r5, r9
 801729c:	e7a6      	b.n	80171ec <uxr_write_serial_msg+0x64>

0801729e <uxr_read_serial_msg>:
                           uint8_t* buf,
                           size_t len,
                           uint8_t* remote_addr,
                           int timeout,
                           uint8_t* errcode)
{
 801729e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t rv = 0;

    /* Compute read-buffer available size. */
    uint8_t av_len[2] = {0, 0};
    if (serial_io->rb_head == serial_io->rb_tail)
 80172a2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80172a6:	f890 602d 	ldrb.w	r6, [r0, #45]	; 0x2d
{
 80172aa:	b085      	sub	sp, #20
    if (serial_io->rb_head == serial_io->rb_tail)
 80172ac:	42b5      	cmp	r5, r6
{
 80172ae:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 80172b2:	4604      	mov	r4, r0
 80172b4:	460f      	mov	r7, r1
 80172b6:	4692      	mov	sl, r2
 80172b8:	469b      	mov	fp, r3
    if (serial_io->rb_head == serial_io->rb_tail)
 80172ba:	d122      	bne.n	8017302 <uxr_read_serial_msg+0x64>
    {
        serial_io->rb_head = 0;
 80172bc:	2600      	movs	r6, #0
 80172be:	8586      	strh	r6, [r0, #44]	; 0x2c
        serial_io->rb_tail = 0;
        av_len[0] = sizeof(serial_io->rb) - 1;
 80172c0:	2529      	movs	r5, #41	; 0x29

    /* Read from serial. */
    size_t bytes_read[2] = {0};
    if (0 < av_len[0])
    {
        bytes_read[0] = read_cb(cb_arg, &serial_io->rb[serial_io->rb_head], av_len[0], timeout, errcode);
 80172c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80172c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172c8:	f8cd 9000 	str.w	r9, [sp]
 80172cc:	3102      	adds	r1, #2
 80172ce:	4421      	add	r1, r4
 80172d0:	462a      	mov	r2, r5
 80172d2:	4650      	mov	r0, sl
 80172d4:	47b8      	blx	r7
        serial_io->rb_head = (uint8_t)((size_t)(serial_io->rb_head + bytes_read[0]) % sizeof(serial_io->rb));
 80172d6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80172da:	f04f 082a 	mov.w	r8, #42	; 0x2a
 80172de:	180b      	adds	r3, r1, r0
 80172e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80172e4:	fb08 3111 	mls	r1, r8, r1, r3
 80172e8:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
        if (0 < bytes_read[0])
 80172ec:	bb38      	cbnz	r0, 801733e <uxr_read_serial_msg+0xa0>
                serial_io->rb_head = (uint8_t)((size_t)(serial_io->rb_head + bytes_read[1]) % sizeof(serial_io->rb));
            }
        }
    }

    if (0 < (bytes_read[0] + bytes_read[1]) || (serial_io->rb_tail != serial_io->rb_head))
 80172ee:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80172f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d10c      	bne.n	8017314 <uxr_read_serial_msg+0x76>
    {
        /* State Machine. */
        bool exit_cond = false;
        while (!exit_cond)
 80172fa:	2000      	movs	r0, #0
            }
        }
    }

    return rv;
}
 80172fc:	b005      	add	sp, #20
 80172fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (serial_io->rb_head > serial_io->rb_tail)
 8017302:	d917      	bls.n	8017334 <uxr_read_serial_msg+0x96>
        if (0 < serial_io->rb_tail)
 8017304:	b196      	cbz	r6, 801732c <uxr_read_serial_msg+0x8e>
            av_len[0] = (uint8_t)(sizeof(serial_io->rb) - serial_io->rb_head);
 8017306:	f1c5 052a 	rsb	r5, r5, #42	; 0x2a
            av_len[1] = (uint8_t)(serial_io->rb_tail - 1);
 801730a:	3e01      	subs	r6, #1
            av_len[0] = (uint8_t)(sizeof(serial_io->rb) - serial_io->rb_head);
 801730c:	b2ed      	uxtb	r5, r5
            av_len[1] = (uint8_t)(serial_io->rb_tail - 1);
 801730e:	b2f6      	uxtb	r6, r6
    if (0 < av_len[0])
 8017310:	2d00      	cmp	r5, #0
 8017312:	d1d6      	bne.n	80172c2 <uxr_read_serial_msg+0x24>
            uint8_t octet = 0;
 8017314:	2500      	movs	r5, #0
 8017316:	7823      	ldrb	r3, [r4, #0]
 8017318:	f88d 500f 	strb.w	r5, [sp, #15]
            switch (serial_io->state)
 801731c:	2b07      	cmp	r3, #7
 801731e:	d8fa      	bhi.n	8017316 <uxr_read_serial_msg+0x78>
 8017320:	e8df f003 	tbb	[pc, r3]
 8017324:	64534531 	.word	0x64534531
 8017328:	ab9f256f 	.word	0xab9f256f
            av_len[0] = (uint8_t)(sizeof(serial_io->rb) - serial_io->rb_head - 1);
 801732c:	f1c5 0529 	rsb	r5, r5, #41	; 0x29
 8017330:	b2ed      	uxtb	r5, r5
 8017332:	e7ed      	b.n	8017310 <uxr_read_serial_msg+0x72>
        av_len[0] = (uint8_t)(serial_io->rb_tail - serial_io->rb_head - 1);
 8017334:	1b75      	subs	r5, r6, r5
 8017336:	3d01      	subs	r5, #1
 8017338:	b2ed      	uxtb	r5, r5
    uint8_t av_len[2] = {0, 0};
 801733a:	2600      	movs	r6, #0
 801733c:	e7e8      	b.n	8017310 <uxr_read_serial_msg+0x72>
            if ((bytes_read[0] == av_len[0]) && (0 < av_len[1]))
 801733e:	4285      	cmp	r5, r0
 8017340:	d1e8      	bne.n	8017314 <uxr_read_serial_msg+0x76>
 8017342:	2e00      	cmp	r6, #0
 8017344:	d0e6      	beq.n	8017314 <uxr_read_serial_msg+0x76>
                bytes_read[1] = read_cb(cb_arg, &serial_io->rb[serial_io->rb_head], av_len[1], 0, errcode);
 8017346:	3102      	adds	r1, #2
 8017348:	2300      	movs	r3, #0
 801734a:	4632      	mov	r2, r6
 801734c:	f8cd 9000 	str.w	r9, [sp]
 8017350:	4421      	add	r1, r4
 8017352:	4650      	mov	r0, sl
 8017354:	47b8      	blx	r7
                serial_io->rb_head = (uint8_t)((size_t)(serial_io->rb_head + bytes_read[1]) % sizeof(serial_io->rb));
 8017356:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801735a:	4403      	add	r3, r0
    if (0 < (bytes_read[0] + bytes_read[1]) || (serial_io->rb_tail != serial_io->rb_head))
 801735c:	42c5      	cmn	r5, r0
                serial_io->rb_head = (uint8_t)((size_t)(serial_io->rb_head + bytes_read[1]) % sizeof(serial_io->rb));
 801735e:	fbb3 f2f8 	udiv	r2, r3, r8
 8017362:	fb08 3812 	mls	r8, r8, r2, r3
 8017366:	f884 802c 	strb.w	r8, [r4, #44]	; 0x2c
    if (0 < (bytes_read[0] + bytes_read[1]) || (serial_io->rb_tail != serial_io->rb_head))
 801736a:	d1d3      	bne.n	8017314 <uxr_read_serial_msg+0x76>
 801736c:	e7bf      	b.n	80172ee <uxr_read_serial_msg+0x50>
                        uxr_update_crc(&serial_io->cmp_crc, octet);
 801736e:	f104 0636 	add.w	r6, r4, #54	; 0x36
                    while ((serial_io->msg_pos < serial_io->msg_len) && uxr_get_next_octet(serial_io, &octet))
 8017372:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8017374:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017376:	429a      	cmp	r2, r3
 8017378:	d35c      	bcc.n	8017434 <uxr_read_serial_msg+0x196>
                    if (serial_io->msg_pos == serial_io->msg_len)
 801737a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 801737c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801737e:	429a      	cmp	r2, r3
 8017380:	d16b      	bne.n	801745a <uxr_read_serial_msg+0x1bc>
                        serial_io->state = UXR_SERIAL_READING_CRC_LSB;
 8017382:	2306      	movs	r3, #6
 8017384:	e01a      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                        serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 8017386:	212a      	movs	r1, #42	; 0x2a
                    while ((UXR_FRAMING_BEGIN_FLAG != octet) && (serial_io->rb_head != serial_io->rb_tail))
 8017388:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801738c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8017390:	429a      	cmp	r2, r3
 8017392:	d0b2      	beq.n	80172fa <uxr_read_serial_msg+0x5c>
                        octet = serial_io->rb[serial_io->rb_tail];
 8017394:	18e2      	adds	r2, r4, r3
                        serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 8017396:	3301      	adds	r3, #1
                        octet = serial_io->rb[serial_io->rb_tail];
 8017398:	7890      	ldrb	r0, [r2, #2]
                        serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 801739a:	fbb3 f2f1 	udiv	r2, r3, r1
                    while ((UXR_FRAMING_BEGIN_FLAG != octet) && (serial_io->rb_head != serial_io->rb_tail))
 801739e:	287e      	cmp	r0, #126	; 0x7e
                        serial_io->rb_tail = (uint8_t)((size_t)(serial_io->rb_tail + 1) % sizeof(serial_io->rb));
 80173a0:	fb01 3312 	mls	r3, r1, r2, r3
 80173a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                    while ((UXR_FRAMING_BEGIN_FLAG != octet) && (serial_io->rb_head != serial_io->rb_tail))
 80173a8:	d1ee      	bne.n	8017388 <uxr_read_serial_msg+0xea>
                            serial_io->state = UXR_SERIAL_READING_SRC_ADDR;
 80173aa:	2301      	movs	r3, #1
 80173ac:	e006      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                    if (uxr_get_next_octet(serial_io, &serial_io->src_addr))
 80173ae:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 80173b2:	4620      	mov	r0, r4
 80173b4:	f7ff fe83 	bl	80170be <uxr_get_next_octet>
 80173b8:	b110      	cbz	r0, 80173c0 <uxr_read_serial_msg+0x122>
                        serial_io->state = UXR_SERIAL_READING_DST_ADDR;
 80173ba:	2302      	movs	r3, #2
                        serial_io->state = UXR_SERIAL_READING_CRC_LSB;
 80173bc:	7023      	strb	r3, [r4, #0]
        while (!exit_cond)
 80173be:	e7aa      	b.n	8017316 <uxr_read_serial_msg+0x78>
                        if (UXR_FRAMING_BEGIN_FLAG != serial_io->src_addr)
 80173c0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80173c4:	2b7e      	cmp	r3, #126	; 0x7e
 80173c6:	d198      	bne.n	80172fa <uxr_read_serial_msg+0x5c>
 80173c8:	e7a5      	b.n	8017316 <uxr_read_serial_msg+0x78>
                    if (uxr_get_next_octet(serial_io, &octet))
 80173ca:	f10d 010f 	add.w	r1, sp, #15
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7ff fe75 	bl	80170be <uxr_get_next_octet>
 80173d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80173d8:	b128      	cbz	r0, 80173e6 <uxr_read_serial_msg+0x148>
                        serial_io->state = (octet == serial_io->local_addr) ? UXR_SERIAL_READING_LEN_LSB :
 80173da:	7863      	ldrb	r3, [r4, #1]
 80173dc:	4293      	cmp	r3, r2
 80173de:	bf0c      	ite	eq
 80173e0:	2303      	moveq	r3, #3
 80173e2:	2300      	movne	r3, #0
 80173e4:	e7ea      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 80173e6:	2a7e      	cmp	r2, #126	; 0x7e
 80173e8:	d187      	bne.n	80172fa <uxr_read_serial_msg+0x5c>
 80173ea:	e7de      	b.n	80173aa <uxr_read_serial_msg+0x10c>
                    if (uxr_get_next_octet(serial_io, &octet))
 80173ec:	f10d 010f 	add.w	r1, sp, #15
 80173f0:	4620      	mov	r0, r4
 80173f2:	f7ff fe64 	bl	80170be <uxr_get_next_octet>
 80173f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80173fa:	b380      	cbz	r0, 801745e <uxr_read_serial_msg+0x1c0>
                        serial_io->msg_len = octet;
 80173fc:	8623      	strh	r3, [r4, #48]	; 0x30
                        serial_io->state = UXR_SERIAL_READING_LEN_MSB;
 80173fe:	2304      	movs	r3, #4
 8017400:	e7dc      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                    if (uxr_get_next_octet(serial_io, &octet))
 8017402:	f10d 010f 	add.w	r1, sp, #15
 8017406:	4620      	mov	r0, r4
 8017408:	f7ff fe59 	bl	80170be <uxr_get_next_octet>
 801740c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017410:	2800      	cmp	r0, #0
 8017412:	d0e8      	beq.n	80173e6 <uxr_read_serial_msg+0x148>
                        serial_io->msg_len = (uint16_t)(serial_io->msg_len + (octet << 8));
 8017414:	8e23      	ldrh	r3, [r4, #48]	; 0x30
                        serial_io->msg_pos = 0;
 8017416:	8665      	strh	r5, [r4, #50]	; 0x32
                        serial_io->msg_len = (uint16_t)(serial_io->msg_len + (octet << 8));
 8017418:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if (len < serial_io->msg_len)
 801741c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                        serial_io->cmp_crc = 0;
 801741e:	86e5      	strh	r5, [r4, #54]	; 0x36
                        serial_io->msg_len = (uint16_t)(serial_io->msg_len + (octet << 8));
 8017420:	b29b      	uxth	r3, r3
                        if (len < serial_io->msg_len)
 8017422:	4293      	cmp	r3, r2
                        serial_io->msg_len = (uint16_t)(serial_io->msg_len + (octet << 8));
 8017424:	8623      	strh	r3, [r4, #48]	; 0x30
                        if (len < serial_io->msg_len)
 8017426:	d903      	bls.n	8017430 <uxr_read_serial_msg+0x192>
                            serial_io->state = UXR_SERIAL_UNINITIALIZED;
 8017428:	f04f 0300 	mov.w	r3, #0
 801742c:	7023      	strb	r3, [r4, #0]
 801742e:	e764      	b.n	80172fa <uxr_read_serial_msg+0x5c>
                            serial_io->state = UXR_SERIAL_READING_PAYLOAD;
 8017430:	2305      	movs	r3, #5
 8017432:	e7c3      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                    while ((serial_io->msg_pos < serial_io->msg_len) && uxr_get_next_octet(serial_io, &octet))
 8017434:	f10d 010f 	add.w	r1, sp, #15
 8017438:	4620      	mov	r0, r4
 801743a:	f7ff fe40 	bl	80170be <uxr_get_next_octet>
 801743e:	2800      	cmp	r0, #0
 8017440:	d09b      	beq.n	801737a <uxr_read_serial_msg+0xdc>
                        buf[(size_t)serial_io->msg_pos] = octet;
 8017442:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017444:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8017448:	f80b 1003 	strb.w	r1, [fp, r3]
                        serial_io->msg_pos = (uint16_t)(serial_io->msg_pos + 1);
 801744c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801744e:	3301      	adds	r3, #1
 8017450:	8663      	strh	r3, [r4, #50]	; 0x32
                        uxr_update_crc(&serial_io->cmp_crc, octet);
 8017452:	4630      	mov	r0, r6
 8017454:	f7f3 ff3e 	bl	800b2d4 <uxr_update_crc>
 8017458:	e78b      	b.n	8017372 <uxr_read_serial_msg+0xd4>
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 801745a:	f89d 300f 	ldrb.w	r3, [sp, #15]
                        if (UXR_FRAMING_BEGIN_FLAG == octet)
 801745e:	2b7e      	cmp	r3, #126	; 0x7e
 8017460:	e7c2      	b.n	80173e8 <uxr_read_serial_msg+0x14a>
                    if (uxr_get_next_octet(serial_io, &octet))
 8017462:	f10d 010f 	add.w	r1, sp, #15
 8017466:	4620      	mov	r0, r4
 8017468:	f7ff fe29 	bl	80170be <uxr_get_next_octet>
 801746c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8017470:	2800      	cmp	r0, #0
 8017472:	d0f4      	beq.n	801745e <uxr_read_serial_msg+0x1c0>
                        serial_io->msg_crc = octet;
 8017474:	86a3      	strh	r3, [r4, #52]	; 0x34
                        serial_io->state = UXR_SERIAL_READING_CRC_MSB;
 8017476:	2307      	movs	r3, #7
 8017478:	e7a0      	b.n	80173bc <uxr_read_serial_msg+0x11e>
                    if (uxr_get_next_octet(serial_io, &octet))
 801747a:	f10d 010f 	add.w	r1, sp, #15
 801747e:	4620      	mov	r0, r4
 8017480:	f7ff fe1d 	bl	80170be <uxr_get_next_octet>
 8017484:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017488:	2800      	cmp	r0, #0
 801748a:	d0ac      	beq.n	80173e6 <uxr_read_serial_msg+0x148>
                        serial_io->msg_crc = (uint16_t)(serial_io->msg_crc + (octet << 8));
 801748c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801748e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        serial_io->state = UXR_SERIAL_UNINITIALIZED;
 8017492:	2200      	movs	r2, #0
 8017494:	7022      	strb	r2, [r4, #0]
                        if (serial_io->cmp_crc == serial_io->msg_crc)
 8017496:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
                        serial_io->msg_crc = (uint16_t)(serial_io->msg_crc + (octet << 8));
 8017498:	b29b      	uxth	r3, r3
                        if (serial_io->cmp_crc == serial_io->msg_crc)
 801749a:	429a      	cmp	r2, r3
                        serial_io->msg_crc = (uint16_t)(serial_io->msg_crc + (octet << 8));
 801749c:	86a3      	strh	r3, [r4, #52]	; 0x34
                        if (serial_io->cmp_crc == serial_io->msg_crc)
 801749e:	f47f af2c 	bne.w	80172fa <uxr_read_serial_msg+0x5c>
                            *remote_addr = serial_io->src_addr;
 80174a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174a4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80174a8:	701a      	strb	r2, [r3, #0]
                            rv = serial_io->msg_len;
 80174aa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
        while (!exit_cond)
 80174ac:	e726      	b.n	80172fc <uxr_read_serial_msg+0x5e>

080174ae <atoi>:
 80174ae:	b580      	push	{r7, lr}
 80174b0:	b082      	sub	sp, #8
 80174b2:	af00      	add	r7, sp, #0
 80174b4:	6078      	str	r0, [r7, #4]
 80174b6:	220a      	movs	r2, #10
 80174b8:	2100      	movs	r1, #0
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f7f5 fb0a 	bl	800cad4 <strtol>
 80174c0:	4603      	mov	r3, r0
 80174c2:	4618      	mov	r0, r3
 80174c4:	3708      	adds	r7, #8
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}

080174ca <_calloc_r>:
 80174ca:	b580      	push	{r7, lr}
 80174cc:	b08a      	sub	sp, #40	; 0x28
 80174ce:	af00      	add	r7, sp, #0
 80174d0:	60f8      	str	r0, [r7, #12]
 80174d2:	60b9      	str	r1, [r7, #8]
 80174d4:	607a      	str	r2, [r7, #4]
 80174d6:	68bb      	ldr	r3, [r7, #8]
 80174d8:	687a      	ldr	r2, [r7, #4]
 80174da:	fb02 f303 	mul.w	r3, r2, r3
 80174de:	623b      	str	r3, [r7, #32]
 80174e0:	6a39      	ldr	r1, [r7, #32]
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f7f4 f9ce 	bl	800b884 <_malloc_r>
 80174e8:	61f8      	str	r0, [r7, #28]
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d101      	bne.n	80174f4 <_calloc_r+0x2a>
 80174f0:	2300      	movs	r3, #0
 80174f2:	e04a      	b.n	801758a <_calloc_r+0xc0>
 80174f4:	69fb      	ldr	r3, [r7, #28]
 80174f6:	3b08      	subs	r3, #8
 80174f8:	61bb      	str	r3, [r7, #24]
 80174fa:	69bb      	ldr	r3, [r7, #24]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	f023 0303 	bic.w	r3, r3, #3
 8017502:	617b      	str	r3, [r7, #20]
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	3b04      	subs	r3, #4
 8017508:	613b      	str	r3, [r7, #16]
 801750a:	693b      	ldr	r3, [r7, #16]
 801750c:	2b24      	cmp	r3, #36	; 0x24
 801750e:	d836      	bhi.n	801757e <_calloc_r+0xb4>
 8017510:	69fb      	ldr	r3, [r7, #28]
 8017512:	627b      	str	r3, [r7, #36]	; 0x24
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	2b13      	cmp	r3, #19
 8017518:	d923      	bls.n	8017562 <_calloc_r+0x98>
 801751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801751c:	1d1a      	adds	r2, r3, #4
 801751e:	627a      	str	r2, [r7, #36]	; 0x24
 8017520:	2200      	movs	r2, #0
 8017522:	601a      	str	r2, [r3, #0]
 8017524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017526:	1d1a      	adds	r2, r3, #4
 8017528:	627a      	str	r2, [r7, #36]	; 0x24
 801752a:	2200      	movs	r2, #0
 801752c:	601a      	str	r2, [r3, #0]
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	2b1b      	cmp	r3, #27
 8017532:	d916      	bls.n	8017562 <_calloc_r+0x98>
 8017534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017536:	1d1a      	adds	r2, r3, #4
 8017538:	627a      	str	r2, [r7, #36]	; 0x24
 801753a:	2200      	movs	r2, #0
 801753c:	601a      	str	r2, [r3, #0]
 801753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017540:	1d1a      	adds	r2, r3, #4
 8017542:	627a      	str	r2, [r7, #36]	; 0x24
 8017544:	2200      	movs	r2, #0
 8017546:	601a      	str	r2, [r3, #0]
 8017548:	693b      	ldr	r3, [r7, #16]
 801754a:	2b23      	cmp	r3, #35	; 0x23
 801754c:	d909      	bls.n	8017562 <_calloc_r+0x98>
 801754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017550:	1d1a      	adds	r2, r3, #4
 8017552:	627a      	str	r2, [r7, #36]	; 0x24
 8017554:	2200      	movs	r2, #0
 8017556:	601a      	str	r2, [r3, #0]
 8017558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801755a:	1d1a      	adds	r2, r3, #4
 801755c:	627a      	str	r2, [r7, #36]	; 0x24
 801755e:	2200      	movs	r2, #0
 8017560:	601a      	str	r2, [r3, #0]
 8017562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017564:	1d1a      	adds	r2, r3, #4
 8017566:	627a      	str	r2, [r7, #36]	; 0x24
 8017568:	2200      	movs	r2, #0
 801756a:	601a      	str	r2, [r3, #0]
 801756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756e:	1d1a      	adds	r2, r3, #4
 8017570:	627a      	str	r2, [r7, #36]	; 0x24
 8017572:	2200      	movs	r2, #0
 8017574:	601a      	str	r2, [r3, #0]
 8017576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017578:	2200      	movs	r2, #0
 801757a:	601a      	str	r2, [r3, #0]
 801757c:	e004      	b.n	8017588 <_calloc_r+0xbe>
 801757e:	693a      	ldr	r2, [r7, #16]
 8017580:	2100      	movs	r1, #0
 8017582:	69f8      	ldr	r0, [r7, #28]
 8017584:	f000 f976 	bl	8017874 <memset>
 8017588:	69fb      	ldr	r3, [r7, #28]
 801758a:	4618      	mov	r0, r3
 801758c:	3728      	adds	r7, #40	; 0x28
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <stdin_init>:
 8017592:	b580      	push	{r7, lr}
 8017594:	b082      	sub	sp, #8
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
 801759a:	2200      	movs	r2, #0
 801759c:	2104      	movs	r1, #4
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	f7f3 ff0c 	bl	800b3bc <std>
 80175a4:	bf00      	nop
 80175a6:	3708      	adds	r7, #8
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <stdout_init>:
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	2201      	movs	r2, #1
 80175b6:	2109      	movs	r1, #9
 80175b8:	6878      	ldr	r0, [r7, #4]
 80175ba:	f7f3 feff 	bl	800b3bc <std>
 80175be:	bf00      	nop
 80175c0:	3708      	adds	r7, #8
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <stderr_init>:
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b082      	sub	sp, #8
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
 80175ce:	2202      	movs	r2, #2
 80175d0:	2112      	movs	r1, #18
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f7f3 fef2 	bl	800b3bc <std>
 80175d8:	bf00      	nop
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <_fwalk_reent>:
 80175e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	6039      	str	r1, [r7, #0]
 80175ec:	f04f 0800 	mov.w	r8, #0
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f503 75a6 	add.w	r5, r3, #332	; 0x14c
 80175f6:	e01b      	b.n	8017630 <_fwalk_reent+0x50>
 80175f8:	68ac      	ldr	r4, [r5, #8]
 80175fa:	686e      	ldr	r6, [r5, #4]
 80175fc:	e014      	b.n	8017628 <_fwalk_reent+0x48>
 80175fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00f      	beq.n	8017626 <_fwalk_reent+0x46>
 8017606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801760a:	2b01      	cmp	r3, #1
 801760c:	d00b      	beq.n	8017626 <_fwalk_reent+0x46>
 801760e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017616:	d006      	beq.n	8017626 <_fwalk_reent+0x46>
 8017618:	4621      	mov	r1, r4
 801761a:	6878      	ldr	r0, [r7, #4]
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	4798      	blx	r3
 8017620:	4603      	mov	r3, r0
 8017622:	ea48 0803 	orr.w	r8, r8, r3
 8017626:	3464      	adds	r4, #100	; 0x64
 8017628:	3e01      	subs	r6, #1
 801762a:	2e00      	cmp	r6, #0
 801762c:	dae7      	bge.n	80175fe <_fwalk_reent+0x1e>
 801762e:	682d      	ldr	r5, [r5, #0]
 8017630:	2d00      	cmp	r5, #0
 8017632:	d1e1      	bne.n	80175f8 <_fwalk_reent+0x18>
 8017634:	4643      	mov	r3, r8
 8017636:	4618      	mov	r0, r3
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017640 <llabs>:
 8017640:	b480      	push	{r7}
 8017642:	b083      	sub	sp, #12
 8017644:	af00      	add	r7, sp, #0
 8017646:	e9c7 0100 	strd	r0, r1, [r7]
 801764a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801764e:	2a00      	cmp	r2, #0
 8017650:	f173 0100 	sbcs.w	r1, r3, #0
 8017654:	da02      	bge.n	801765c <llabs+0x1c>
 8017656:	4252      	negs	r2, r2
 8017658:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801765c:	4610      	mov	r0, r2
 801765e:	4619      	mov	r1, r3
 8017660:	370c      	adds	r7, #12
 8017662:	46bd      	mov	sp, r7
 8017664:	bc80      	pop	{r7}
 8017666:	4770      	bx	lr

08017668 <memcmp>:
 8017668:	b480      	push	{r7}
 801766a:	b089      	sub	sp, #36	; 0x24
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	61fb      	str	r3, [r7, #28]
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	61bb      	str	r3, [r7, #24]
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b03      	cmp	r3, #3
 8017680:	d937      	bls.n	80176f2 <memcmp+0x8a>
 8017682:	69fa      	ldr	r2, [r7, #28]
 8017684:	69bb      	ldr	r3, [r7, #24]
 8017686:	4313      	orrs	r3, r2
 8017688:	f003 0303 	and.w	r3, r3, #3
 801768c:	2b00      	cmp	r3, #0
 801768e:	d130      	bne.n	80176f2 <memcmp+0x8a>
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	617b      	str	r3, [r7, #20]
 8017694:	69bb      	ldr	r3, [r7, #24]
 8017696:	613b      	str	r3, [r7, #16]
 8017698:	e00e      	b.n	80176b8 <memcmp+0x50>
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d10c      	bne.n	80176c0 <memcmp+0x58>
 80176a6:	697b      	ldr	r3, [r7, #20]
 80176a8:	3304      	adds	r3, #4
 80176aa:	617b      	str	r3, [r7, #20]
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	3304      	adds	r3, #4
 80176b0:	613b      	str	r3, [r7, #16]
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	3b04      	subs	r3, #4
 80176b6:	607b      	str	r3, [r7, #4]
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b03      	cmp	r3, #3
 80176bc:	d8ed      	bhi.n	801769a <memcmp+0x32>
 80176be:	e000      	b.n	80176c2 <memcmp+0x5a>
 80176c0:	bf00      	nop
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	61fb      	str	r3, [r7, #28]
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	61bb      	str	r3, [r7, #24]
 80176ca:	e012      	b.n	80176f2 <memcmp+0x8a>
 80176cc:	69fb      	ldr	r3, [r7, #28]
 80176ce:	781a      	ldrb	r2, [r3, #0]
 80176d0:	69bb      	ldr	r3, [r7, #24]
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d006      	beq.n	80176e6 <memcmp+0x7e>
 80176d8:	69fb      	ldr	r3, [r7, #28]
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	461a      	mov	r2, r3
 80176de:	69bb      	ldr	r3, [r7, #24]
 80176e0:	781b      	ldrb	r3, [r3, #0]
 80176e2:	1ad3      	subs	r3, r2, r3
 80176e4:	e00b      	b.n	80176fe <memcmp+0x96>
 80176e6:	69fb      	ldr	r3, [r7, #28]
 80176e8:	3301      	adds	r3, #1
 80176ea:	61fb      	str	r3, [r7, #28]
 80176ec:	69bb      	ldr	r3, [r7, #24]
 80176ee:	3301      	adds	r3, #1
 80176f0:	61bb      	str	r3, [r7, #24]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	1e5a      	subs	r2, r3, #1
 80176f6:	607a      	str	r2, [r7, #4]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d1e7      	bne.n	80176cc <memcmp+0x64>
 80176fc:	2300      	movs	r3, #0
 80176fe:	4618      	mov	r0, r3
 8017700:	3724      	adds	r7, #36	; 0x24
 8017702:	46bd      	mov	sp, r7
 8017704:	bc80      	pop	{r7}
 8017706:	4770      	bx	lr

08017708 <__memcpy_chk>:
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	60b9      	str	r1, [r7, #8]
 8017712:	607a      	str	r2, [r7, #4]
 8017714:	603b      	str	r3, [r7, #0]
 8017716:	687a      	ldr	r2, [r7, #4]
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	429a      	cmp	r2, r3
 801771c:	d901      	bls.n	8017722 <__memcpy_chk+0x1a>
 801771e:	f7ec fe6d 	bl	80043fc <__chk_fail>
 8017722:	68ba      	ldr	r2, [r7, #8]
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	429a      	cmp	r2, r3
 8017728:	d805      	bhi.n	8017736 <__memcpy_chk+0x2e>
 801772a:	68ba      	ldr	r2, [r7, #8]
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	4413      	add	r3, r2
 8017730:	68fa      	ldr	r2, [r7, #12]
 8017732:	429a      	cmp	r2, r3
 8017734:	d309      	bcc.n	801774a <__memcpy_chk+0x42>
 8017736:	68fa      	ldr	r2, [r7, #12]
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	429a      	cmp	r2, r3
 801773c:	d807      	bhi.n	801774e <__memcpy_chk+0x46>
 801773e:	68fa      	ldr	r2, [r7, #12]
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	4413      	add	r3, r2
 8017744:	68ba      	ldr	r2, [r7, #8]
 8017746:	429a      	cmp	r2, r3
 8017748:	d201      	bcs.n	801774e <__memcpy_chk+0x46>
 801774a:	f7ec fe57 	bl	80043fc <__chk_fail>
 801774e:	687a      	ldr	r2, [r7, #4]
 8017750:	68b9      	ldr	r1, [r7, #8]
 8017752:	68f8      	ldr	r0, [r7, #12]
 8017754:	f7ea f824 	bl	80017a0 <memcpy>
 8017758:	4603      	mov	r3, r0
 801775a:	4618      	mov	r0, r3
 801775c:	3710      	adds	r7, #16
 801775e:	46bd      	mov	sp, r7
 8017760:	bd80      	pop	{r7, pc}

08017762 <memmove>:
 8017762:	b480      	push	{r7}
 8017764:	b089      	sub	sp, #36	; 0x24
 8017766:	af00      	add	r7, sp, #0
 8017768:	60f8      	str	r0, [r7, #12]
 801776a:	60b9      	str	r1, [r7, #8]
 801776c:	607a      	str	r2, [r7, #4]
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	61fb      	str	r3, [r7, #28]
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	61bb      	str	r3, [r7, #24]
 8017776:	69ba      	ldr	r2, [r7, #24]
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	429a      	cmp	r2, r3
 801777c:	d21e      	bcs.n	80177bc <memmove+0x5a>
 801777e:	69ba      	ldr	r2, [r7, #24]
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	4413      	add	r3, r2
 8017784:	69fa      	ldr	r2, [r7, #28]
 8017786:	429a      	cmp	r2, r3
 8017788:	d218      	bcs.n	80177bc <memmove+0x5a>
 801778a:	69ba      	ldr	r2, [r7, #24]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4413      	add	r3, r2
 8017790:	61bb      	str	r3, [r7, #24]
 8017792:	69fa      	ldr	r2, [r7, #28]
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	4413      	add	r3, r2
 8017798:	61fb      	str	r3, [r7, #28]
 801779a:	e009      	b.n	80177b0 <memmove+0x4e>
 801779c:	69bb      	ldr	r3, [r7, #24]
 801779e:	3b01      	subs	r3, #1
 80177a0:	61bb      	str	r3, [r7, #24]
 80177a2:	69fb      	ldr	r3, [r7, #28]
 80177a4:	3b01      	subs	r3, #1
 80177a6:	61fb      	str	r3, [r7, #28]
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	781a      	ldrb	r2, [r3, #0]
 80177ac:	69fb      	ldr	r3, [r7, #28]
 80177ae:	701a      	strb	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	1e5a      	subs	r2, r3, #1
 80177b4:	607a      	str	r2, [r7, #4]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1f0      	bne.n	801779c <memmove+0x3a>
 80177ba:	e055      	b.n	8017868 <memmove+0x106>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2b0f      	cmp	r3, #15
 80177c0:	d94d      	bls.n	801785e <memmove+0xfc>
 80177c2:	69ba      	ldr	r2, [r7, #24]
 80177c4:	69fb      	ldr	r3, [r7, #28]
 80177c6:	4313      	orrs	r3, r2
 80177c8:	f003 0303 	and.w	r3, r3, #3
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d146      	bne.n	801785e <memmove+0xfc>
 80177d0:	69fb      	ldr	r3, [r7, #28]
 80177d2:	617b      	str	r3, [r7, #20]
 80177d4:	69bb      	ldr	r3, [r7, #24]
 80177d6:	613b      	str	r3, [r7, #16]
 80177d8:	e022      	b.n	8017820 <memmove+0xbe>
 80177da:	693a      	ldr	r2, [r7, #16]
 80177dc:	1d13      	adds	r3, r2, #4
 80177de:	613b      	str	r3, [r7, #16]
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	1d19      	adds	r1, r3, #4
 80177e4:	6179      	str	r1, [r7, #20]
 80177e6:	6812      	ldr	r2, [r2, #0]
 80177e8:	601a      	str	r2, [r3, #0]
 80177ea:	693a      	ldr	r2, [r7, #16]
 80177ec:	1d13      	adds	r3, r2, #4
 80177ee:	613b      	str	r3, [r7, #16]
 80177f0:	697b      	ldr	r3, [r7, #20]
 80177f2:	1d19      	adds	r1, r3, #4
 80177f4:	6179      	str	r1, [r7, #20]
 80177f6:	6812      	ldr	r2, [r2, #0]
 80177f8:	601a      	str	r2, [r3, #0]
 80177fa:	693a      	ldr	r2, [r7, #16]
 80177fc:	1d13      	adds	r3, r2, #4
 80177fe:	613b      	str	r3, [r7, #16]
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	1d19      	adds	r1, r3, #4
 8017804:	6179      	str	r1, [r7, #20]
 8017806:	6812      	ldr	r2, [r2, #0]
 8017808:	601a      	str	r2, [r3, #0]
 801780a:	693a      	ldr	r2, [r7, #16]
 801780c:	1d13      	adds	r3, r2, #4
 801780e:	613b      	str	r3, [r7, #16]
 8017810:	697b      	ldr	r3, [r7, #20]
 8017812:	1d19      	adds	r1, r3, #4
 8017814:	6179      	str	r1, [r7, #20]
 8017816:	6812      	ldr	r2, [r2, #0]
 8017818:	601a      	str	r2, [r3, #0]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	3b10      	subs	r3, #16
 801781e:	607b      	str	r3, [r7, #4]
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b0f      	cmp	r3, #15
 8017824:	d8d9      	bhi.n	80177da <memmove+0x78>
 8017826:	e00a      	b.n	801783e <memmove+0xdc>
 8017828:	693a      	ldr	r2, [r7, #16]
 801782a:	1d13      	adds	r3, r2, #4
 801782c:	613b      	str	r3, [r7, #16]
 801782e:	697b      	ldr	r3, [r7, #20]
 8017830:	1d19      	adds	r1, r3, #4
 8017832:	6179      	str	r1, [r7, #20]
 8017834:	6812      	ldr	r2, [r2, #0]
 8017836:	601a      	str	r2, [r3, #0]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	3b04      	subs	r3, #4
 801783c:	607b      	str	r3, [r7, #4]
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2b03      	cmp	r3, #3
 8017842:	d8f1      	bhi.n	8017828 <memmove+0xc6>
 8017844:	697b      	ldr	r3, [r7, #20]
 8017846:	61fb      	str	r3, [r7, #28]
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	61bb      	str	r3, [r7, #24]
 801784c:	e007      	b.n	801785e <memmove+0xfc>
 801784e:	69ba      	ldr	r2, [r7, #24]
 8017850:	1c53      	adds	r3, r2, #1
 8017852:	61bb      	str	r3, [r7, #24]
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	1c59      	adds	r1, r3, #1
 8017858:	61f9      	str	r1, [r7, #28]
 801785a:	7812      	ldrb	r2, [r2, #0]
 801785c:	701a      	strb	r2, [r3, #0]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	1e5a      	subs	r2, r3, #1
 8017862:	607a      	str	r2, [r7, #4]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1f2      	bne.n	801784e <memmove+0xec>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	4618      	mov	r0, r3
 801786c:	3724      	adds	r7, #36	; 0x24
 801786e:	46bd      	mov	sp, r7
 8017870:	bc80      	pop	{r7}
 8017872:	4770      	bx	lr

08017874 <memset>:
 8017874:	b480      	push	{r7}
 8017876:	b08b      	sub	sp, #44	; 0x2c
 8017878:	af00      	add	r7, sp, #0
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	607a      	str	r2, [r7, #4]
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	627b      	str	r3, [r7, #36]	; 0x24
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	b2db      	uxtb	r3, r3
 8017888:	617b      	str	r3, [r7, #20]
 801788a:	e00d      	b.n	80178a8 <memset+0x34>
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	1e5a      	subs	r2, r3, #1
 8017890:	607a      	str	r2, [r7, #4]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d006      	beq.n	80178a4 <memset+0x30>
 8017896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017898:	1c5a      	adds	r2, r3, #1
 801789a:	627a      	str	r2, [r7, #36]	; 0x24
 801789c:	68ba      	ldr	r2, [r7, #8]
 801789e:	b2d2      	uxtb	r2, r2
 80178a0:	701a      	strb	r2, [r3, #0]
 80178a2:	e001      	b.n	80178a8 <memset+0x34>
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	e059      	b.n	801795c <memset+0xe8>
 80178a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178aa:	f003 0303 	and.w	r3, r3, #3
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d1ec      	bne.n	801788c <memset+0x18>
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b03      	cmp	r3, #3
 80178b6:	d94b      	bls.n	8017950 <memset+0xdc>
 80178b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ba:	61bb      	str	r3, [r7, #24]
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	021b      	lsls	r3, r3, #8
 80178c0:	697a      	ldr	r2, [r7, #20]
 80178c2:	4313      	orrs	r3, r2
 80178c4:	61fb      	str	r3, [r7, #28]
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	041b      	lsls	r3, r3, #16
 80178ca:	69fa      	ldr	r2, [r7, #28]
 80178cc:	4313      	orrs	r3, r2
 80178ce:	61fb      	str	r3, [r7, #28]
 80178d0:	2320      	movs	r3, #32
 80178d2:	623b      	str	r3, [r7, #32]
 80178d4:	e009      	b.n	80178ea <memset+0x76>
 80178d6:	69fa      	ldr	r2, [r7, #28]
 80178d8:	6a3b      	ldr	r3, [r7, #32]
 80178da:	fa02 f303 	lsl.w	r3, r2, r3
 80178de:	69fa      	ldr	r2, [r7, #28]
 80178e0:	4313      	orrs	r3, r2
 80178e2:	61fb      	str	r3, [r7, #28]
 80178e4:	6a3b      	ldr	r3, [r7, #32]
 80178e6:	005b      	lsls	r3, r3, #1
 80178e8:	623b      	str	r3, [r7, #32]
 80178ea:	6a3b      	ldr	r3, [r7, #32]
 80178ec:	2b1f      	cmp	r3, #31
 80178ee:	d9f2      	bls.n	80178d6 <memset+0x62>
 80178f0:	e016      	b.n	8017920 <memset+0xac>
 80178f2:	69bb      	ldr	r3, [r7, #24]
 80178f4:	1d1a      	adds	r2, r3, #4
 80178f6:	61ba      	str	r2, [r7, #24]
 80178f8:	69fa      	ldr	r2, [r7, #28]
 80178fa:	601a      	str	r2, [r3, #0]
 80178fc:	69bb      	ldr	r3, [r7, #24]
 80178fe:	1d1a      	adds	r2, r3, #4
 8017900:	61ba      	str	r2, [r7, #24]
 8017902:	69fa      	ldr	r2, [r7, #28]
 8017904:	601a      	str	r2, [r3, #0]
 8017906:	69bb      	ldr	r3, [r7, #24]
 8017908:	1d1a      	adds	r2, r3, #4
 801790a:	61ba      	str	r2, [r7, #24]
 801790c:	69fa      	ldr	r2, [r7, #28]
 801790e:	601a      	str	r2, [r3, #0]
 8017910:	69bb      	ldr	r3, [r7, #24]
 8017912:	1d1a      	adds	r2, r3, #4
 8017914:	61ba      	str	r2, [r7, #24]
 8017916:	69fa      	ldr	r2, [r7, #28]
 8017918:	601a      	str	r2, [r3, #0]
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	3b10      	subs	r3, #16
 801791e:	607b      	str	r3, [r7, #4]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2b0f      	cmp	r3, #15
 8017924:	d8e5      	bhi.n	80178f2 <memset+0x7e>
 8017926:	e007      	b.n	8017938 <memset+0xc4>
 8017928:	69bb      	ldr	r3, [r7, #24]
 801792a:	1d1a      	adds	r2, r3, #4
 801792c:	61ba      	str	r2, [r7, #24]
 801792e:	69fa      	ldr	r2, [r7, #28]
 8017930:	601a      	str	r2, [r3, #0]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	3b04      	subs	r3, #4
 8017936:	607b      	str	r3, [r7, #4]
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2b03      	cmp	r3, #3
 801793c:	d8f4      	bhi.n	8017928 <memset+0xb4>
 801793e:	69bb      	ldr	r3, [r7, #24]
 8017940:	627b      	str	r3, [r7, #36]	; 0x24
 8017942:	e005      	b.n	8017950 <memset+0xdc>
 8017944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017946:	1c5a      	adds	r2, r3, #1
 8017948:	627a      	str	r2, [r7, #36]	; 0x24
 801794a:	68ba      	ldr	r2, [r7, #8]
 801794c:	b2d2      	uxtb	r2, r2
 801794e:	701a      	strb	r2, [r3, #0]
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	1e5a      	subs	r2, r3, #1
 8017954:	607a      	str	r2, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d1f4      	bne.n	8017944 <memset+0xd0>
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	4618      	mov	r0, r3
 801795e:	372c      	adds	r7, #44	; 0x2c
 8017960:	46bd      	mov	sp, r7
 8017962:	bc80      	pop	{r7}
 8017964:	4770      	bx	lr

08017966 <__malloc_lock>:
 8017966:	b480      	push	{r7}
 8017968:	b083      	sub	sp, #12
 801796a:	af00      	add	r7, sp, #0
 801796c:	6078      	str	r0, [r7, #4]
 801796e:	bf00      	nop
 8017970:	370c      	adds	r7, #12
 8017972:	46bd      	mov	sp, r7
 8017974:	bc80      	pop	{r7}
 8017976:	4770      	bx	lr

08017978 <__malloc_unlock>:
 8017978:	b480      	push	{r7}
 801797a:	b083      	sub	sp, #12
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	bf00      	nop
 8017982:	370c      	adds	r7, #12
 8017984:	46bd      	mov	sp, r7
 8017986:	bc80      	pop	{r7}
 8017988:	4770      	bx	lr

0801798a <__sprintf_chk>:
 801798a:	b408      	push	{r3}
 801798c:	b580      	push	{r7, lr}
 801798e:	b087      	sub	sp, #28
 8017990:	af00      	add	r7, sp, #0
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	607a      	str	r2, [r7, #4]
 8017998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801799c:	613b      	str	r3, [r7, #16]
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	da06      	bge.n	80179b2 <__sprintf_chk+0x28>
 80179a4:	693a      	ldr	r2, [r7, #16]
 80179a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179a8:	68f8      	ldr	r0, [r7, #12]
 80179aa:	f7f9 f9bd 	bl	8010d28 <vsprintf>
 80179ae:	6178      	str	r0, [r7, #20]
 80179b0:	e00f      	b.n	80179d2 <__sprintf_chk+0x48>
 80179b2:	693b      	ldr	r3, [r7, #16]
 80179b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179b6:	6879      	ldr	r1, [r7, #4]
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f7f9 f99d 	bl	8010cf8 <vsnprintf>
 80179be:	6178      	str	r0, [r7, #20]
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	db05      	blt.n	80179d2 <__sprintf_chk+0x48>
 80179c6:	697b      	ldr	r3, [r7, #20]
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d801      	bhi.n	80179d2 <__sprintf_chk+0x48>
 80179ce:	f7ec fd15 	bl	80043fc <__chk_fail>
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	4618      	mov	r0, r3
 80179d6:	371c      	adds	r7, #28
 80179d8:	46bd      	mov	sp, r7
 80179da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80179de:	b001      	add	sp, #4
 80179e0:	4770      	bx	lr

080179e2 <__sread>:
 80179e2:	b5b0      	push	{r4, r5, r7, lr}
 80179e4:	b084      	sub	sp, #16
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	60b9      	str	r1, [r7, #8]
 80179ec:	607a      	str	r2, [r7, #4]
 80179ee:	603b      	str	r3, [r7, #0]
 80179f0:	68bc      	ldr	r4, [r7, #8]
 80179f2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80179f6:	4619      	mov	r1, r3
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	68f8      	ldr	r0, [r7, #12]
 80179fe:	f7f9 ff95 	bl	801192c <_read_r>
 8017a02:	4605      	mov	r5, r0
 8017a04:	2d00      	cmp	r5, #0
 8017a06:	db03      	blt.n	8017a10 <__sread+0x2e>
 8017a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017a0a:	442b      	add	r3, r5
 8017a0c:	6523      	str	r3, [r4, #80]	; 0x50
 8017a0e:	e005      	b.n	8017a1c <__sread+0x3a>
 8017a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a18:	b21b      	sxth	r3, r3
 8017a1a:	81a3      	strh	r3, [r4, #12]
 8017a1c:	462b      	mov	r3, r5
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3710      	adds	r7, #16
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bdb0      	pop	{r4, r5, r7, pc}

08017a26 <__swrite>:
 8017a26:	b590      	push	{r4, r7, lr}
 8017a28:	b087      	sub	sp, #28
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	60f8      	str	r0, [r7, #12]
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	607a      	str	r2, [r7, #4]
 8017a32:	603b      	str	r3, [r7, #0]
 8017a34:	68bc      	ldr	r4, [r7, #8]
 8017a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d007      	beq.n	8017a54 <__swrite+0x2e>
 8017a44:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017a48:	4619      	mov	r1, r3
 8017a4a:	2302      	movs	r3, #2
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	68f8      	ldr	r0, [r7, #12]
 8017a50:	f7f9 fe72 	bl	8011738 <_lseek_r>
 8017a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017a5c:	b21b      	sxth	r3, r3
 8017a5e:	81a3      	strh	r3, [r4, #12]
 8017a60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017a64:	4619      	mov	r1, r3
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	687a      	ldr	r2, [r7, #4]
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f7f9 f970 	bl	8010d50 <_write_r>
 8017a70:	6178      	str	r0, [r7, #20]
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	4618      	mov	r0, r3
 8017a76:	371c      	adds	r7, #28
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd90      	pop	{r4, r7, pc}

08017a7c <__sseek>:
 8017a7c:	b5b0      	push	{r4, r5, r7, lr}
 8017a7e:	b084      	sub	sp, #16
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	607a      	str	r2, [r7, #4]
 8017a88:	603b      	str	r3, [r7, #0]
 8017a8a:	68bc      	ldr	r4, [r7, #8]
 8017a8c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8017a90:	4619      	mov	r1, r3
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	687a      	ldr	r2, [r7, #4]
 8017a96:	68f8      	ldr	r0, [r7, #12]
 8017a98:	f7f9 fe4e 	bl	8011738 <_lseek_r>
 8017a9c:	4605      	mov	r5, r0
 8017a9e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8017aa2:	d106      	bne.n	8017ab2 <__sseek+0x36>
 8017aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017aac:	b21b      	sxth	r3, r3
 8017aae:	81a3      	strh	r3, [r4, #12]
 8017ab0:	e006      	b.n	8017ac0 <__sseek+0x44>
 8017ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017aba:	b21b      	sxth	r3, r3
 8017abc:	81a3      	strh	r3, [r4, #12]
 8017abe:	6525      	str	r5, [r4, #80]	; 0x50
 8017ac0:	462b      	mov	r3, r5
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3710      	adds	r7, #16
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bdb0      	pop	{r4, r5, r7, pc}

08017aca <__sclose>:
 8017aca:	b580      	push	{r7, lr}
 8017acc:	b084      	sub	sp, #16
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
 8017ad2:	6039      	str	r1, [r7, #0]
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	60fb      	str	r3, [r7, #12]
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017ade:	4619      	mov	r1, r3
 8017ae0:	6878      	ldr	r0, [r7, #4]
 8017ae2:	f7f9 fa33 	bl	8010f4c <_close_r>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3710      	adds	r7, #16
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <strcat>:
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	60bb      	str	r3, [r7, #8]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f003 0303 	and.w	r3, r3, #3
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d117      	bne.n	8017b38 <strcat+0x48>
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	60fb      	str	r3, [r7, #12]
 8017b0c:	e002      	b.n	8017b14 <strcat+0x24>
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	3304      	adds	r3, #4
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	43db      	mvns	r3, r3
 8017b22:	4013      	ands	r3, r2
 8017b24:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d0f0      	beq.n	8017b0e <strcat+0x1e>
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	607b      	str	r3, [r7, #4]
 8017b30:	e002      	b.n	8017b38 <strcat+0x48>
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	3301      	adds	r3, #1
 8017b36:	607b      	str	r3, [r7, #4]
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d1f8      	bne.n	8017b32 <strcat+0x42>
 8017b40:	6839      	ldr	r1, [r7, #0]
 8017b42:	6878      	ldr	r0, [r7, #4]
 8017b44:	f7f4 feac 	bl	800c8a0 <strcpy>
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3710      	adds	r7, #16
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}

08017b52 <strchr>:
 8017b52:	b480      	push	{r7}
 8017b54:	b089      	sub	sp, #36	; 0x24
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
 8017b5a:	6039      	str	r1, [r7, #0]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	61fb      	str	r3, [r7, #28]
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	73fb      	strb	r3, [r7, #15]
 8017b64:	7bfb      	ldrb	r3, [r7, #15]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d13c      	bne.n	8017be4 <strchr+0x92>
 8017b6a:	e008      	b.n	8017b7e <strchr+0x2c>
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	781b      	ldrb	r3, [r3, #0]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d101      	bne.n	8017b78 <strchr+0x26>
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	e085      	b.n	8017c84 <strchr+0x132>
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	3301      	adds	r3, #1
 8017b7c:	61fb      	str	r3, [r7, #28]
 8017b7e:	69fb      	ldr	r3, [r7, #28]
 8017b80:	f003 0303 	and.w	r3, r3, #3
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d1f1      	bne.n	8017b6c <strchr+0x1a>
 8017b88:	69fb      	ldr	r3, [r7, #28]
 8017b8a:	613b      	str	r3, [r7, #16]
 8017b8c:	e002      	b.n	8017b94 <strchr+0x42>
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	3304      	adds	r3, #4
 8017b92:	613b      	str	r3, [r7, #16]
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	43db      	mvns	r3, r3
 8017ba2:	4013      	ands	r3, r2
 8017ba4:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d0f0      	beq.n	8017b8e <strchr+0x3c>
 8017bac:	693b      	ldr	r3, [r7, #16]
 8017bae:	61fb      	str	r3, [r7, #28]
 8017bb0:	e002      	b.n	8017bb8 <strchr+0x66>
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	3301      	adds	r3, #1
 8017bb6:	61fb      	str	r3, [r7, #28]
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d1f8      	bne.n	8017bb2 <strchr+0x60>
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	e05f      	b.n	8017c84 <strchr+0x132>
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d101      	bne.n	8017bd0 <strchr+0x7e>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	e059      	b.n	8017c84 <strchr+0x132>
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	781b      	ldrb	r3, [r3, #0]
 8017bd4:	7bfa      	ldrb	r2, [r7, #15]
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	d101      	bne.n	8017bde <strchr+0x8c>
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	e052      	b.n	8017c84 <strchr+0x132>
 8017bde:	69fb      	ldr	r3, [r7, #28]
 8017be0:	3301      	adds	r3, #1
 8017be2:	61fb      	str	r3, [r7, #28]
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	f003 0303 	and.w	r3, r3, #3
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d1ea      	bne.n	8017bc4 <strchr+0x72>
 8017bee:	7bfb      	ldrb	r3, [r7, #15]
 8017bf0:	61bb      	str	r3, [r7, #24]
 8017bf2:	2308      	movs	r3, #8
 8017bf4:	617b      	str	r3, [r7, #20]
 8017bf6:	e009      	b.n	8017c0c <strchr+0xba>
 8017bf8:	69ba      	ldr	r2, [r7, #24]
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8017c00:	69ba      	ldr	r2, [r7, #24]
 8017c02:	4313      	orrs	r3, r2
 8017c04:	61bb      	str	r3, [r7, #24]
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	005b      	lsls	r3, r3, #1
 8017c0a:	617b      	str	r3, [r7, #20]
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	2b1f      	cmp	r3, #31
 8017c10:	d9f2      	bls.n	8017bf8 <strchr+0xa6>
 8017c12:	69fb      	ldr	r3, [r7, #28]
 8017c14:	613b      	str	r3, [r7, #16]
 8017c16:	e002      	b.n	8017c1e <strchr+0xcc>
 8017c18:	693b      	ldr	r3, [r7, #16]
 8017c1a:	3304      	adds	r3, #4
 8017c1c:	613b      	str	r3, [r7, #16]
 8017c1e:	693b      	ldr	r3, [r7, #16]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017c26:	693b      	ldr	r3, [r7, #16]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	43db      	mvns	r3, r3
 8017c2c:	4013      	ands	r3, r2
 8017c2e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d10f      	bne.n	8017c56 <strchr+0x104>
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	681a      	ldr	r2, [r3, #0]
 8017c3a:	69bb      	ldr	r3, [r7, #24]
 8017c3c:	4053      	eors	r3, r2
 8017c3e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017c42:	693b      	ldr	r3, [r7, #16]
 8017c44:	6819      	ldr	r1, [r3, #0]
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	404b      	eors	r3, r1
 8017c4a:	43db      	mvns	r3, r3
 8017c4c:	4013      	ands	r3, r2
 8017c4e:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d0e0      	beq.n	8017c18 <strchr+0xc6>
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	61fb      	str	r3, [r7, #28]
 8017c5a:	e002      	b.n	8017c62 <strchr+0x110>
 8017c5c:	69fb      	ldr	r3, [r7, #28]
 8017c5e:	3301      	adds	r3, #1
 8017c60:	61fb      	str	r3, [r7, #28]
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	781b      	ldrb	r3, [r3, #0]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d004      	beq.n	8017c74 <strchr+0x122>
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	781b      	ldrb	r3, [r3, #0]
 8017c6e:	7bfa      	ldrb	r2, [r7, #15]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d1f3      	bne.n	8017c5c <strchr+0x10a>
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	781b      	ldrb	r3, [r3, #0]
 8017c78:	7bfa      	ldrb	r2, [r7, #15]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d101      	bne.n	8017c82 <strchr+0x130>
 8017c7e:	69fb      	ldr	r3, [r7, #28]
 8017c80:	e000      	b.n	8017c84 <strchr+0x132>
 8017c82:	2300      	movs	r3, #0
 8017c84:	4618      	mov	r0, r3
 8017c86:	3724      	adds	r7, #36	; 0x24
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bc80      	pop	{r7}
 8017c8c:	4770      	bx	lr

08017c8e <strncat>:
 8017c8e:	b480      	push	{r7}
 8017c90:	b087      	sub	sp, #28
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	60f8      	str	r0, [r7, #12]
 8017c96:	60b9      	str	r1, [r7, #8]
 8017c98:	607a      	str	r2, [r7, #4]
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	613b      	str	r3, [r7, #16]
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	f003 0303 	and.w	r3, r3, #3
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d117      	bne.n	8017cd8 <strncat+0x4a>
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	617b      	str	r3, [r7, #20]
 8017cac:	e002      	b.n	8017cb4 <strncat+0x26>
 8017cae:	697b      	ldr	r3, [r7, #20]
 8017cb0:	3304      	adds	r3, #4
 8017cb2:	617b      	str	r3, [r7, #20]
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	43db      	mvns	r3, r3
 8017cc2:	4013      	ands	r3, r2
 8017cc4:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d0f0      	beq.n	8017cae <strncat+0x20>
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	60fb      	str	r3, [r7, #12]
 8017cd0:	e002      	b.n	8017cd8 <strncat+0x4a>
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	3301      	adds	r3, #1
 8017cd6:	60fb      	str	r3, [r7, #12]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d1f8      	bne.n	8017cd2 <strncat+0x44>
 8017ce0:	e005      	b.n	8017cee <strncat+0x60>
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d102      	bne.n	8017cee <strncat+0x60>
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	2200      	movs	r2, #0
 8017cec:	701a      	strb	r2, [r3, #0]
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	1e5a      	subs	r2, r3, #1
 8017cf2:	607a      	str	r2, [r7, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d00a      	beq.n	8017d0e <strncat+0x80>
 8017cf8:	68ba      	ldr	r2, [r7, #8]
 8017cfa:	1c53      	adds	r3, r2, #1
 8017cfc:	60bb      	str	r3, [r7, #8]
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	1c59      	adds	r1, r3, #1
 8017d02:	60f9      	str	r1, [r7, #12]
 8017d04:	7812      	ldrb	r2, [r2, #0]
 8017d06:	701a      	strb	r2, [r3, #0]
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d1e9      	bne.n	8017ce2 <strncat+0x54>
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	4618      	mov	r0, r3
 8017d12:	371c      	adds	r7, #28
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bc80      	pop	{r7}
 8017d18:	4770      	bx	lr

08017d1a <strncmp>:
 8017d1a:	b480      	push	{r7}
 8017d1c:	b087      	sub	sp, #28
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	60f8      	str	r0, [r7, #12]
 8017d22:	60b9      	str	r1, [r7, #8]
 8017d24:	607a      	str	r2, [r7, #4]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d101      	bne.n	8017d30 <strncmp+0x16>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	e053      	b.n	8017dd8 <strncmp+0xbe>
 8017d30:	68fa      	ldr	r2, [r7, #12]
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	4313      	orrs	r3, r2
 8017d36:	f003 0303 	and.w	r3, r3, #3
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d13b      	bne.n	8017db6 <strncmp+0x9c>
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	617b      	str	r3, [r7, #20]
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	613b      	str	r3, [r7, #16]
 8017d46:	e019      	b.n	8017d7c <strncmp+0x62>
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	3b04      	subs	r3, #4
 8017d4c:	607b      	str	r3, [r7, #4]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d00b      	beq.n	8017d6c <strncmp+0x52>
 8017d54:	697b      	ldr	r3, [r7, #20]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	43db      	mvns	r3, r3
 8017d62:	4013      	ands	r3, r2
 8017d64:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d001      	beq.n	8017d70 <strncmp+0x56>
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	e033      	b.n	8017dd8 <strncmp+0xbe>
 8017d70:	697b      	ldr	r3, [r7, #20]
 8017d72:	3304      	adds	r3, #4
 8017d74:	617b      	str	r3, [r7, #20]
 8017d76:	693b      	ldr	r3, [r7, #16]
 8017d78:	3304      	adds	r3, #4
 8017d7a:	613b      	str	r3, [r7, #16]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2b03      	cmp	r3, #3
 8017d80:	d905      	bls.n	8017d8e <strncmp+0x74>
 8017d82:	697b      	ldr	r3, [r7, #20]
 8017d84:	681a      	ldr	r2, [r3, #0]
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d0dc      	beq.n	8017d48 <strncmp+0x2e>
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	60fb      	str	r3, [r7, #12]
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	60bb      	str	r3, [r7, #8]
 8017d96:	e00e      	b.n	8017db6 <strncmp+0x9c>
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d003      	beq.n	8017da6 <strncmp+0x8c>
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d101      	bne.n	8017daa <strncmp+0x90>
 8017da6:	2300      	movs	r3, #0
 8017da8:	e016      	b.n	8017dd8 <strncmp+0xbe>
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	3301      	adds	r3, #1
 8017dae:	60fb      	str	r3, [r7, #12]
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	3301      	adds	r3, #1
 8017db4:	60bb      	str	r3, [r7, #8]
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	1e5a      	subs	r2, r3, #1
 8017dba:	607a      	str	r2, [r7, #4]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d005      	beq.n	8017dcc <strncmp+0xb2>
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	781a      	ldrb	r2, [r3, #0]
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d0e5      	beq.n	8017d98 <strncmp+0x7e>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	781b      	ldrb	r3, [r3, #0]
 8017dd0:	461a      	mov	r2, r3
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	781b      	ldrb	r3, [r3, #0]
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	4618      	mov	r0, r3
 8017dda:	371c      	adds	r7, #28
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	bc80      	pop	{r7}
 8017de0:	4770      	bx	lr

08017de2 <strncpy>:
 8017de2:	b480      	push	{r7}
 8017de4:	b089      	sub	sp, #36	; 0x24
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	60f8      	str	r0, [r7, #12]
 8017dea:	60b9      	str	r1, [r7, #8]
 8017dec:	607a      	str	r2, [r7, #4]
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	61fb      	str	r3, [r7, #28]
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	61bb      	str	r3, [r7, #24]
 8017df6:	69ba      	ldr	r2, [r7, #24]
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	f003 0303 	and.w	r3, r3, #3
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d134      	bne.n	8017e6e <strncpy+0x8c>
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	2b03      	cmp	r3, #3
 8017e08:	d931      	bls.n	8017e6e <strncpy+0x8c>
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	617b      	str	r3, [r7, #20]
 8017e0e:	69bb      	ldr	r3, [r7, #24]
 8017e10:	613b      	str	r3, [r7, #16]
 8017e12:	e00a      	b.n	8017e2a <strncpy+0x48>
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	3b04      	subs	r3, #4
 8017e18:	607b      	str	r3, [r7, #4]
 8017e1a:	693a      	ldr	r2, [r7, #16]
 8017e1c:	1d13      	adds	r3, r2, #4
 8017e1e:	613b      	str	r3, [r7, #16]
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	1d19      	adds	r1, r3, #4
 8017e24:	6179      	str	r1, [r7, #20]
 8017e26:	6812      	ldr	r2, [r2, #0]
 8017e28:	601a      	str	r2, [r3, #0]
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2b03      	cmp	r3, #3
 8017e2e:	d90b      	bls.n	8017e48 <strncpy+0x66>
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8017e38:	693b      	ldr	r3, [r7, #16]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	43db      	mvns	r3, r3
 8017e3e:	4013      	ands	r3, r2
 8017e40:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d0e5      	beq.n	8017e14 <strncpy+0x32>
 8017e48:	697b      	ldr	r3, [r7, #20]
 8017e4a:	61fb      	str	r3, [r7, #28]
 8017e4c:	693b      	ldr	r3, [r7, #16]
 8017e4e:	61bb      	str	r3, [r7, #24]
 8017e50:	e00d      	b.n	8017e6e <strncpy+0x8c>
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	3b01      	subs	r3, #1
 8017e56:	607b      	str	r3, [r7, #4]
 8017e58:	69ba      	ldr	r2, [r7, #24]
 8017e5a:	1c53      	adds	r3, r2, #1
 8017e5c:	61bb      	str	r3, [r7, #24]
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	1c59      	adds	r1, r3, #1
 8017e62:	61f9      	str	r1, [r7, #28]
 8017e64:	7812      	ldrb	r2, [r2, #0]
 8017e66:	701a      	strb	r2, [r3, #0]
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d003      	beq.n	8017e76 <strncpy+0x94>
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d1ee      	bne.n	8017e52 <strncpy+0x70>
 8017e74:	e006      	b.n	8017e84 <strncpy+0xa2>
 8017e76:	bf00      	nop
 8017e78:	e004      	b.n	8017e84 <strncpy+0xa2>
 8017e7a:	69fb      	ldr	r3, [r7, #28]
 8017e7c:	1c5a      	adds	r2, r3, #1
 8017e7e:	61fa      	str	r2, [r7, #28]
 8017e80:	2200      	movs	r2, #0
 8017e82:	701a      	strb	r2, [r3, #0]
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	1e5a      	subs	r2, r3, #1
 8017e88:	607a      	str	r2, [r7, #4]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1f5      	bne.n	8017e7a <strncpy+0x98>
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	4618      	mov	r0, r3
 8017e92:	3724      	adds	r7, #36	; 0x24
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bc80      	pop	{r7}
 8017e98:	4770      	bx	lr

08017e9a <strnlen>:
 8017e9a:	b480      	push	{r7}
 8017e9c:	b085      	sub	sp, #20
 8017e9e:	af00      	add	r7, sp, #0
 8017ea0:	6078      	str	r0, [r7, #4]
 8017ea2:	6039      	str	r1, [r7, #0]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	60fb      	str	r3, [r7, #12]
 8017ea8:	e002      	b.n	8017eb0 <strnlen+0x16>
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	3301      	adds	r3, #1
 8017eae:	607b      	str	r3, [r7, #4]
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	1e5a      	subs	r2, r3, #1
 8017eb4:	603a      	str	r2, [r7, #0]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d003      	beq.n	8017ec2 <strnlen+0x28>
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	781b      	ldrb	r3, [r3, #0]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d1f3      	bne.n	8017eaa <strnlen+0x10>
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	1ad3      	subs	r3, r2, r3
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3714      	adds	r7, #20
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bc80      	pop	{r7}
 8017ed0:	4770      	bx	lr

08017ed2 <critical_factorization>:
 8017ed2:	b480      	push	{r7}
 8017ed4:	b08b      	sub	sp, #44	; 0x2c
 8017ed6:	af00      	add	r7, sp, #0
 8017ed8:	60f8      	str	r0, [r7, #12]
 8017eda:	60b9      	str	r1, [r7, #8]
 8017edc:	607a      	str	r2, [r7, #4]
 8017ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	61fb      	str	r3, [r7, #28]
 8017ee8:	2301      	movs	r3, #1
 8017eea:	617b      	str	r3, [r7, #20]
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	61bb      	str	r3, [r7, #24]
 8017ef0:	e037      	b.n	8017f62 <critical_factorization+0x90>
 8017ef2:	69fa      	ldr	r2, [r7, #28]
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	4413      	add	r3, r2
 8017ef8:	68fa      	ldr	r2, [r7, #12]
 8017efa:	4413      	add	r3, r2
 8017efc:	781b      	ldrb	r3, [r3, #0]
 8017efe:	74fb      	strb	r3, [r7, #19]
 8017f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f02:	69bb      	ldr	r3, [r7, #24]
 8017f04:	4413      	add	r3, r2
 8017f06:	68fa      	ldr	r2, [r7, #12]
 8017f08:	4413      	add	r3, r2
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	74bb      	strb	r3, [r7, #18]
 8017f0e:	7cfa      	ldrb	r2, [r7, #19]
 8017f10:	7cbb      	ldrb	r3, [r7, #18]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d20a      	bcs.n	8017f2c <critical_factorization+0x5a>
 8017f16:	69fa      	ldr	r2, [r7, #28]
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	4413      	add	r3, r2
 8017f1c:	61fb      	str	r3, [r7, #28]
 8017f1e:	2301      	movs	r3, #1
 8017f20:	61bb      	str	r3, [r7, #24]
 8017f22:	69fa      	ldr	r2, [r7, #28]
 8017f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	617b      	str	r3, [r7, #20]
 8017f2a:	e01a      	b.n	8017f62 <critical_factorization+0x90>
 8017f2c:	7cfa      	ldrb	r2, [r7, #19]
 8017f2e:	7cbb      	ldrb	r3, [r7, #18]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d10e      	bne.n	8017f52 <critical_factorization+0x80>
 8017f34:	69ba      	ldr	r2, [r7, #24]
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d003      	beq.n	8017f44 <critical_factorization+0x72>
 8017f3c:	69bb      	ldr	r3, [r7, #24]
 8017f3e:	3301      	adds	r3, #1
 8017f40:	61bb      	str	r3, [r7, #24]
 8017f42:	e00e      	b.n	8017f62 <critical_factorization+0x90>
 8017f44:	69fa      	ldr	r2, [r7, #28]
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	4413      	add	r3, r2
 8017f4a:	61fb      	str	r3, [r7, #28]
 8017f4c:	2301      	movs	r3, #1
 8017f4e:	61bb      	str	r3, [r7, #24]
 8017f50:	e007      	b.n	8017f62 <critical_factorization+0x90>
 8017f52:	69fb      	ldr	r3, [r7, #28]
 8017f54:	1c5a      	adds	r2, r3, #1
 8017f56:	61fa      	str	r2, [r7, #28]
 8017f58:	627b      	str	r3, [r7, #36]	; 0x24
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	617b      	str	r3, [r7, #20]
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	61bb      	str	r3, [r7, #24]
 8017f62:	69fa      	ldr	r2, [r7, #28]
 8017f64:	69bb      	ldr	r3, [r7, #24]
 8017f66:	4413      	add	r3, r2
 8017f68:	68ba      	ldr	r2, [r7, #8]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d8c1      	bhi.n	8017ef2 <critical_factorization+0x20>
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	697a      	ldr	r2, [r7, #20]
 8017f72:	601a      	str	r2, [r3, #0]
 8017f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f78:	623b      	str	r3, [r7, #32]
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	61fb      	str	r3, [r7, #28]
 8017f7e:	2301      	movs	r3, #1
 8017f80:	617b      	str	r3, [r7, #20]
 8017f82:	697b      	ldr	r3, [r7, #20]
 8017f84:	61bb      	str	r3, [r7, #24]
 8017f86:	e037      	b.n	8017ff8 <critical_factorization+0x126>
 8017f88:	69fa      	ldr	r2, [r7, #28]
 8017f8a:	69bb      	ldr	r3, [r7, #24]
 8017f8c:	4413      	add	r3, r2
 8017f8e:	68fa      	ldr	r2, [r7, #12]
 8017f90:	4413      	add	r3, r2
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	74fb      	strb	r3, [r7, #19]
 8017f96:	6a3a      	ldr	r2, [r7, #32]
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	4413      	add	r3, r2
 8017f9c:	68fa      	ldr	r2, [r7, #12]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	74bb      	strb	r3, [r7, #18]
 8017fa4:	7cba      	ldrb	r2, [r7, #18]
 8017fa6:	7cfb      	ldrb	r3, [r7, #19]
 8017fa8:	429a      	cmp	r2, r3
 8017faa:	d20a      	bcs.n	8017fc2 <critical_factorization+0xf0>
 8017fac:	69fa      	ldr	r2, [r7, #28]
 8017fae:	69bb      	ldr	r3, [r7, #24]
 8017fb0:	4413      	add	r3, r2
 8017fb2:	61fb      	str	r3, [r7, #28]
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	61bb      	str	r3, [r7, #24]
 8017fb8:	69fa      	ldr	r2, [r7, #28]
 8017fba:	6a3b      	ldr	r3, [r7, #32]
 8017fbc:	1ad3      	subs	r3, r2, r3
 8017fbe:	617b      	str	r3, [r7, #20]
 8017fc0:	e01a      	b.n	8017ff8 <critical_factorization+0x126>
 8017fc2:	7cfa      	ldrb	r2, [r7, #19]
 8017fc4:	7cbb      	ldrb	r3, [r7, #18]
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d10e      	bne.n	8017fe8 <critical_factorization+0x116>
 8017fca:	69ba      	ldr	r2, [r7, #24]
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d003      	beq.n	8017fda <critical_factorization+0x108>
 8017fd2:	69bb      	ldr	r3, [r7, #24]
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	61bb      	str	r3, [r7, #24]
 8017fd8:	e00e      	b.n	8017ff8 <critical_factorization+0x126>
 8017fda:	69fa      	ldr	r2, [r7, #28]
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	4413      	add	r3, r2
 8017fe0:	61fb      	str	r3, [r7, #28]
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	61bb      	str	r3, [r7, #24]
 8017fe6:	e007      	b.n	8017ff8 <critical_factorization+0x126>
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	1c5a      	adds	r2, r3, #1
 8017fec:	61fa      	str	r2, [r7, #28]
 8017fee:	623b      	str	r3, [r7, #32]
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	617b      	str	r3, [r7, #20]
 8017ff4:	697b      	ldr	r3, [r7, #20]
 8017ff6:	61bb      	str	r3, [r7, #24]
 8017ff8:	69fa      	ldr	r2, [r7, #28]
 8017ffa:	69bb      	ldr	r3, [r7, #24]
 8017ffc:	4413      	add	r3, r2
 8017ffe:	68ba      	ldr	r2, [r7, #8]
 8018000:	429a      	cmp	r2, r3
 8018002:	d8c1      	bhi.n	8017f88 <critical_factorization+0xb6>
 8018004:	6a3b      	ldr	r3, [r7, #32]
 8018006:	1c5a      	adds	r2, r3, #1
 8018008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800a:	3301      	adds	r3, #1
 801800c:	429a      	cmp	r2, r3
 801800e:	d202      	bcs.n	8018016 <critical_factorization+0x144>
 8018010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018012:	3301      	adds	r3, #1
 8018014:	e004      	b.n	8018020 <critical_factorization+0x14e>
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	697a      	ldr	r2, [r7, #20]
 801801a:	601a      	str	r2, [r3, #0]
 801801c:	6a3b      	ldr	r3, [r7, #32]
 801801e:	3301      	adds	r3, #1
 8018020:	4618      	mov	r0, r3
 8018022:	372c      	adds	r7, #44	; 0x2c
 8018024:	46bd      	mov	sp, r7
 8018026:	bc80      	pop	{r7}
 8018028:	4770      	bx	lr

0801802a <two_way_long_needle>:
 801802a:	b590      	push	{r4, r7, lr}
 801802c:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 8018030:	af00      	add	r7, sp, #0
 8018032:	f107 040c 	add.w	r4, r7, #12
 8018036:	6020      	str	r0, [r4, #0]
 8018038:	f107 0008 	add.w	r0, r7, #8
 801803c:	6001      	str	r1, [r0, #0]
 801803e:	1d39      	adds	r1, r7, #4
 8018040:	600a      	str	r2, [r1, #0]
 8018042:	463a      	mov	r2, r7
 8018044:	6013      	str	r3, [r2, #0]
 8018046:	f207 4214 	addw	r2, r7, #1044	; 0x414
 801804a:	4639      	mov	r1, r7
 801804c:	1d3b      	adds	r3, r7, #4
 801804e:	6809      	ldr	r1, [r1, #0]
 8018050:	6818      	ldr	r0, [r3, #0]
 8018052:	f7ff ff3e 	bl	8017ed2 <critical_factorization>
 8018056:	f8c7 041c 	str.w	r0, [r7, #1052]	; 0x41c
 801805a:	2300      	movs	r3, #0
 801805c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018060:	e00c      	b.n	801807c <two_way_long_needle+0x52>
 8018062:	f107 0314 	add.w	r3, r7, #20
 8018066:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801806a:	4639      	mov	r1, r7
 801806c:	6809      	ldr	r1, [r1, #0]
 801806e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018072:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018076:	3301      	adds	r3, #1
 8018078:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 801807c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018080:	2bff      	cmp	r3, #255	; 0xff
 8018082:	d9ee      	bls.n	8018062 <two_way_long_needle+0x38>
 8018084:	2300      	movs	r3, #0
 8018086:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 801808a:	e015      	b.n	80180b8 <two_way_long_needle+0x8e>
 801808c:	463b      	mov	r3, r7
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018094:	1ad3      	subs	r3, r2, r3
 8018096:	1d3a      	adds	r2, r7, #4
 8018098:	6811      	ldr	r1, [r2, #0]
 801809a:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801809e:	440a      	add	r2, r1
 80180a0:	7812      	ldrb	r2, [r2, #0]
 80180a2:	4611      	mov	r1, r2
 80180a4:	1e5a      	subs	r2, r3, #1
 80180a6:	f107 0314 	add.w	r3, r7, #20
 80180aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80180ae:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80180b2:	3301      	adds	r3, #1
 80180b4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80180b8:	463b      	mov	r3, r7
 80180ba:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d3e3      	bcc.n	801808c <two_way_long_needle+0x62>
 80180c4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80180c8:	1d3a      	adds	r2, r7, #4
 80180ca:	6812      	ldr	r2, [r2, #0]
 80180cc:	18d1      	adds	r1, r2, r3
 80180ce:	1d3b      	adds	r3, r7, #4
 80180d0:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80180d4:	6818      	ldr	r0, [r3, #0]
 80180d6:	f7ff fac7 	bl	8017668 <memcmp>
 80180da:	4603      	mov	r3, r0
 80180dc:	2b00      	cmp	r3, #0
 80180de:	f040 80e6 	bne.w	80182ae <two_way_long_needle+0x284>
 80180e2:	2300      	movs	r3, #0
 80180e4:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80180e8:	2300      	movs	r3, #0
 80180ea:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80180ee:	e0b0      	b.n	8018252 <two_way_long_needle+0x228>
 80180f0:	463b      	mov	r3, r7
 80180f2:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	4413      	add	r3, r2
 80180fa:	3b01      	subs	r3, #1
 80180fc:	f107 020c 	add.w	r2, r7, #12
 8018100:	6812      	ldr	r2, [r2, #0]
 8018102:	4413      	add	r3, r2
 8018104:	781b      	ldrb	r3, [r3, #0]
 8018106:	461a      	mov	r2, r3
 8018108:	f107 0314 	add.w	r3, r7, #20
 801810c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018110:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 8018114:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8018118:	2b00      	cmp	r3, #0
 801811a:	d01b      	beq.n	8018154 <two_way_long_needle+0x12a>
 801811c:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8018120:	2b00      	cmp	r3, #0
 8018122:	d00c      	beq.n	801813e <two_way_long_needle+0x114>
 8018124:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8018128:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 801812c:	429a      	cmp	r2, r3
 801812e:	d206      	bcs.n	801813e <two_way_long_needle+0x114>
 8018130:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8018134:	463a      	mov	r2, r7
 8018136:	6812      	ldr	r2, [r2, #0]
 8018138:	1ad3      	subs	r3, r2, r3
 801813a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 801813e:	2300      	movs	r3, #0
 8018140:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8018144:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018148:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 801814c:	4413      	add	r3, r2
 801814e:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8018152:	e07e      	b.n	8018252 <two_way_long_needle+0x228>
 8018154:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8018158:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801815c:	4293      	cmp	r3, r2
 801815e:	bf38      	it	cc
 8018160:	4613      	movcc	r3, r2
 8018162:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018166:	e004      	b.n	8018172 <two_way_long_needle+0x148>
 8018168:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801816c:	3301      	adds	r3, #1
 801816e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018172:	463b      	mov	r3, r7
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	3b01      	subs	r3, #1
 8018178:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801817c:	429a      	cmp	r2, r3
 801817e:	d211      	bcs.n	80181a4 <two_way_long_needle+0x17a>
 8018180:	1d3b      	adds	r3, r7, #4
 8018182:	681a      	ldr	r2, [r3, #0]
 8018184:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018188:	4413      	add	r3, r2
 801818a:	781a      	ldrb	r2, [r3, #0]
 801818c:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8018190:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8018194:	440b      	add	r3, r1
 8018196:	f107 010c 	add.w	r1, r7, #12
 801819a:	6809      	ldr	r1, [r1, #0]
 801819c:	440b      	add	r3, r1
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d0e1      	beq.n	8018168 <two_way_long_needle+0x13e>
 80181a4:	463b      	mov	r3, r7
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	3b01      	subs	r3, #1
 80181aa:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d341      	bcc.n	8018236 <two_way_long_needle+0x20c>
 80181b2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80181b6:	3b01      	subs	r3, #1
 80181b8:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80181bc:	e004      	b.n	80181c8 <two_way_long_needle+0x19e>
 80181be:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80181c2:	3b01      	subs	r3, #1
 80181c4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80181c8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80181cc:	3301      	adds	r3, #1
 80181ce:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80181d2:	429a      	cmp	r2, r3
 80181d4:	d211      	bcs.n	80181fa <two_way_long_needle+0x1d0>
 80181d6:	1d3b      	adds	r3, r7, #4
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80181de:	4413      	add	r3, r2
 80181e0:	781a      	ldrb	r2, [r3, #0]
 80181e2:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 80181e6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80181ea:	440b      	add	r3, r1
 80181ec:	f107 010c 	add.w	r1, r7, #12
 80181f0:	6809      	ldr	r1, [r1, #0]
 80181f2:	440b      	add	r3, r1
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	429a      	cmp	r2, r3
 80181f8:	d0e1      	beq.n	80181be <two_way_long_needle+0x194>
 80181fa:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80181fe:	1c5a      	adds	r2, r3, #1
 8018200:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8018204:	3301      	adds	r3, #1
 8018206:	429a      	cmp	r2, r3
 8018208:	d206      	bcs.n	8018218 <two_way_long_needle+0x1ee>
 801820a:	f107 030c 	add.w	r3, r7, #12
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8018214:	4413      	add	r3, r2
 8018216:	e112      	b.n	801843e <two_way_long_needle+0x414>
 8018218:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801821c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018220:	4413      	add	r3, r2
 8018222:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8018226:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801822a:	463a      	mov	r2, r7
 801822c:	6812      	ldr	r2, [r2, #0]
 801822e:	1ad3      	subs	r3, r2, r3
 8018230:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8018234:	e00d      	b.n	8018252 <two_way_long_needle+0x228>
 8018236:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801823a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801823e:	1ad2      	subs	r2, r2, r3
 8018240:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8018244:	4413      	add	r3, r2
 8018246:	3301      	adds	r3, #1
 8018248:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801824c:	2300      	movs	r3, #0
 801824e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8018252:	f107 0208 	add.w	r2, r7, #8
 8018256:	463b      	mov	r3, r7
 8018258:	6812      	ldr	r2, [r2, #0]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	1ad3      	subs	r3, r2, r3
 801825e:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018262:	429a      	cmp	r2, r3
 8018264:	f67f af44 	bls.w	80180f0 <two_way_long_needle+0xc6>
 8018268:	f107 020c 	add.w	r2, r7, #12
 801826c:	f107 0308 	add.w	r3, r7, #8
 8018270:	6812      	ldr	r2, [r2, #0]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	441a      	add	r2, r3
 8018276:	463b      	mov	r3, r7
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801827e:	4619      	mov	r1, r3
 8018280:	4610      	mov	r0, r2
 8018282:	f7ff fe0a 	bl	8017e9a <strnlen>
 8018286:	4601      	mov	r1, r0
 8018288:	f107 0308 	add.w	r3, r7, #8
 801828c:	f107 0208 	add.w	r2, r7, #8
 8018290:	6812      	ldr	r2, [r2, #0]
 8018292:	440a      	add	r2, r1
 8018294:	601a      	str	r2, [r3, #0]
 8018296:	f107 0208 	add.w	r2, r7, #8
 801829a:	463b      	mov	r3, r7
 801829c:	6812      	ldr	r2, [r2, #0]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	1ad3      	subs	r3, r2, r3
 80182a2:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80182a6:	429a      	cmp	r2, r3
 80182a8:	f67f af22 	bls.w	80180f0 <two_way_long_needle+0xc6>
 80182ac:	e0c6      	b.n	801843c <two_way_long_needle+0x412>
 80182ae:	463b      	mov	r3, r7
 80182b0:	681a      	ldr	r2, [r3, #0]
 80182b2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80182b6:	1ad2      	subs	r2, r2, r3
 80182b8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80182bc:	4293      	cmp	r3, r2
 80182be:	bf38      	it	cc
 80182c0:	4613      	movcc	r3, r2
 80182c2:	3301      	adds	r3, #1
 80182c4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80182c8:	2300      	movs	r3, #0
 80182ca:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80182ce:	e088      	b.n	80183e2 <two_way_long_needle+0x3b8>
 80182d0:	463b      	mov	r3, r7
 80182d2:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4413      	add	r3, r2
 80182da:	3b01      	subs	r3, #1
 80182dc:	f107 020c 	add.w	r2, r7, #12
 80182e0:	6812      	ldr	r2, [r2, #0]
 80182e2:	4413      	add	r3, r2
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	461a      	mov	r2, r3
 80182e8:	f107 0314 	add.w	r3, r7, #20
 80182ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182f0:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80182f4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d007      	beq.n	801830c <two_way_long_needle+0x2e2>
 80182fc:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018300:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8018304:	4413      	add	r3, r2
 8018306:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 801830a:	e06a      	b.n	80183e2 <two_way_long_needle+0x3b8>
 801830c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8018310:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018314:	e004      	b.n	8018320 <two_way_long_needle+0x2f6>
 8018316:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801831a:	3301      	adds	r3, #1
 801831c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018320:	463b      	mov	r3, r7
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	3b01      	subs	r3, #1
 8018326:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801832a:	429a      	cmp	r2, r3
 801832c:	d211      	bcs.n	8018352 <two_way_long_needle+0x328>
 801832e:	1d3b      	adds	r3, r7, #4
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018336:	4413      	add	r3, r2
 8018338:	781a      	ldrb	r2, [r3, #0]
 801833a:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 801833e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8018342:	440b      	add	r3, r1
 8018344:	f107 010c 	add.w	r1, r7, #12
 8018348:	6809      	ldr	r1, [r1, #0]
 801834a:	440b      	add	r3, r1
 801834c:	781b      	ldrb	r3, [r3, #0]
 801834e:	429a      	cmp	r2, r3
 8018350:	d0e1      	beq.n	8018316 <two_way_long_needle+0x2ec>
 8018352:	463b      	mov	r3, r7
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	3b01      	subs	r3, #1
 8018358:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 801835c:	429a      	cmp	r2, r3
 801835e:	d335      	bcc.n	80183cc <two_way_long_needle+0x3a2>
 8018360:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8018364:	3b01      	subs	r3, #1
 8018366:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 801836a:	e004      	b.n	8018376 <two_way_long_needle+0x34c>
 801836c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018370:	3b01      	subs	r3, #1
 8018372:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8018376:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801837a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801837e:	d011      	beq.n	80183a4 <two_way_long_needle+0x37a>
 8018380:	1d3b      	adds	r3, r7, #4
 8018382:	681a      	ldr	r2, [r3, #0]
 8018384:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8018388:	4413      	add	r3, r2
 801838a:	781a      	ldrb	r2, [r3, #0]
 801838c:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 8018390:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8018394:	440b      	add	r3, r1
 8018396:	f107 010c 	add.w	r1, r7, #12
 801839a:	6809      	ldr	r1, [r1, #0]
 801839c:	440b      	add	r3, r1
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d0e3      	beq.n	801836c <two_way_long_needle+0x342>
 80183a4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80183a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183ac:	d106      	bne.n	80183bc <two_way_long_needle+0x392>
 80183ae:	f107 030c 	add.w	r3, r7, #12
 80183b2:	681a      	ldr	r2, [r3, #0]
 80183b4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80183b8:	4413      	add	r3, r2
 80183ba:	e040      	b.n	801843e <two_way_long_needle+0x414>
 80183bc:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80183c0:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80183c4:	4413      	add	r3, r2
 80183c6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80183ca:	e00a      	b.n	80183e2 <two_way_long_needle+0x3b8>
 80183cc:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 80183d0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80183d4:	1ad2      	subs	r2, r2, r3
 80183d6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80183da:	4413      	add	r3, r2
 80183dc:	3301      	adds	r3, #1
 80183de:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80183e2:	f107 0208 	add.w	r2, r7, #8
 80183e6:	463b      	mov	r3, r7
 80183e8:	6812      	ldr	r2, [r2, #0]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80183f2:	429a      	cmp	r2, r3
 80183f4:	f67f af6c 	bls.w	80182d0 <two_way_long_needle+0x2a6>
 80183f8:	f107 020c 	add.w	r2, r7, #12
 80183fc:	f107 0308 	add.w	r3, r7, #8
 8018400:	6812      	ldr	r2, [r2, #0]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	441a      	add	r2, r3
 8018406:	463b      	mov	r3, r7
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801840e:	4619      	mov	r1, r3
 8018410:	4610      	mov	r0, r2
 8018412:	f7ff fd42 	bl	8017e9a <strnlen>
 8018416:	4601      	mov	r1, r0
 8018418:	f107 0308 	add.w	r3, r7, #8
 801841c:	f107 0208 	add.w	r2, r7, #8
 8018420:	6812      	ldr	r2, [r2, #0]
 8018422:	440a      	add	r2, r1
 8018424:	601a      	str	r2, [r3, #0]
 8018426:	f107 0208 	add.w	r2, r7, #8
 801842a:	463b      	mov	r3, r7
 801842c:	6812      	ldr	r2, [r2, #0]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	1ad3      	subs	r3, r2, r3
 8018432:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018436:	429a      	cmp	r2, r3
 8018438:	f67f af4a 	bls.w	80182d0 <two_way_long_needle+0x2a6>
 801843c:	2300      	movs	r3, #0
 801843e:	4618      	mov	r0, r3
 8018440:	f207 4734 	addw	r7, r7, #1076	; 0x434
 8018444:	46bd      	mov	sp, r7
 8018446:	bd90      	pop	{r4, r7, pc}

08018448 <strstr2>:
 8018448:	b480      	push	{r7}
 801844a:	b087      	sub	sp, #28
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	6039      	str	r1, [r7, #0]
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	041b      	lsls	r3, r3, #16
 8018458:	683a      	ldr	r2, [r7, #0]
 801845a:	3201      	adds	r2, #1
 801845c:	7812      	ldrb	r2, [r2, #0]
 801845e:	4313      	orrs	r3, r2
 8018460:	60fb      	str	r3, [r7, #12]
 8018462:	2300      	movs	r3, #0
 8018464:	617b      	str	r3, [r7, #20]
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	613b      	str	r3, [r7, #16]
 801846c:	e00a      	b.n	8018484 <strstr2+0x3c>
 801846e:	697b      	ldr	r3, [r7, #20]
 8018470:	041a      	lsls	r2, r3, #16
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	4313      	orrs	r3, r2
 8018476:	617b      	str	r3, [r7, #20]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	3301      	adds	r3, #1
 801847c:	607b      	str	r3, [r7, #4]
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	781b      	ldrb	r3, [r3, #0]
 8018482:	613b      	str	r3, [r7, #16]
 8018484:	68fa      	ldr	r2, [r7, #12]
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	429a      	cmp	r2, r3
 801848a:	d002      	beq.n	8018492 <strstr2+0x4a>
 801848c:	693b      	ldr	r3, [r7, #16]
 801848e:	2b00      	cmp	r3, #0
 8018490:	d1ed      	bne.n	801846e <strstr2+0x26>
 8018492:	68fa      	ldr	r2, [r7, #12]
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	429a      	cmp	r2, r3
 8018498:	d102      	bne.n	80184a0 <strstr2+0x58>
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	3b02      	subs	r3, #2
 801849e:	e000      	b.n	80184a2 <strstr2+0x5a>
 80184a0:	2300      	movs	r3, #0
 80184a2:	4618      	mov	r0, r3
 80184a4:	371c      	adds	r7, #28
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bc80      	pop	{r7}
 80184aa:	4770      	bx	lr

080184ac <strstr3>:
 80184ac:	b480      	push	{r7}
 80184ae:	b087      	sub	sp, #28
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	6039      	str	r1, [r7, #0]
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	781b      	ldrb	r3, [r3, #0]
 80184ba:	061a      	lsls	r2, r3, #24
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	3301      	adds	r3, #1
 80184c0:	781b      	ldrb	r3, [r3, #0]
 80184c2:	041b      	lsls	r3, r3, #16
 80184c4:	431a      	orrs	r2, r3
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	3302      	adds	r3, #2
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	021b      	lsls	r3, r3, #8
 80184ce:	4313      	orrs	r3, r2
 80184d0:	60fb      	str	r3, [r7, #12]
 80184d2:	2300      	movs	r3, #0
 80184d4:	617b      	str	r3, [r7, #20]
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	613b      	str	r3, [r7, #16]
 80184dc:	e00a      	b.n	80184f4 <strstr3+0x48>
 80184de:	693a      	ldr	r2, [r7, #16]
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	4313      	orrs	r3, r2
 80184e4:	021b      	lsls	r3, r3, #8
 80184e6:	617b      	str	r3, [r7, #20]
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	3301      	adds	r3, #1
 80184ec:	607b      	str	r3, [r7, #4]
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	613b      	str	r3, [r7, #16]
 80184f4:	68fa      	ldr	r2, [r7, #12]
 80184f6:	697b      	ldr	r3, [r7, #20]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d002      	beq.n	8018502 <strstr3+0x56>
 80184fc:	693b      	ldr	r3, [r7, #16]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d1ed      	bne.n	80184de <strstr3+0x32>
 8018502:	68fa      	ldr	r2, [r7, #12]
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	429a      	cmp	r2, r3
 8018508:	d102      	bne.n	8018510 <strstr3+0x64>
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	3b03      	subs	r3, #3
 801850e:	e000      	b.n	8018512 <strstr3+0x66>
 8018510:	2300      	movs	r3, #0
 8018512:	4618      	mov	r0, r3
 8018514:	371c      	adds	r7, #28
 8018516:	46bd      	mov	sp, r7
 8018518:	bc80      	pop	{r7}
 801851a:	4770      	bx	lr

0801851c <strstr4>:
 801851c:	b480      	push	{r7}
 801851e:	b087      	sub	sp, #28
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	781b      	ldrb	r3, [r3, #0]
 801852a:	061a      	lsls	r2, r3, #24
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	3301      	adds	r3, #1
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	041b      	lsls	r3, r3, #16
 8018534:	431a      	orrs	r2, r3
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	3302      	adds	r3, #2
 801853a:	781b      	ldrb	r3, [r3, #0]
 801853c:	021b      	lsls	r3, r3, #8
 801853e:	4313      	orrs	r3, r2
 8018540:	683a      	ldr	r2, [r7, #0]
 8018542:	3203      	adds	r2, #3
 8018544:	7812      	ldrb	r2, [r2, #0]
 8018546:	4313      	orrs	r3, r2
 8018548:	60fb      	str	r3, [r7, #12]
 801854a:	2300      	movs	r3, #0
 801854c:	617b      	str	r3, [r7, #20]
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	613b      	str	r3, [r7, #16]
 8018554:	e00a      	b.n	801856c <strstr4+0x50>
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	021a      	lsls	r2, r3, #8
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	4313      	orrs	r3, r2
 801855e:	617b      	str	r3, [r7, #20]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	3301      	adds	r3, #1
 8018564:	607b      	str	r3, [r7, #4]
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	613b      	str	r3, [r7, #16]
 801856c:	693b      	ldr	r3, [r7, #16]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d003      	beq.n	801857a <strstr4+0x5e>
 8018572:	68fa      	ldr	r2, [r7, #12]
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	429a      	cmp	r2, r3
 8018578:	d1ed      	bne.n	8018556 <strstr4+0x3a>
 801857a:	68fa      	ldr	r2, [r7, #12]
 801857c:	697b      	ldr	r3, [r7, #20]
 801857e:	429a      	cmp	r2, r3
 8018580:	d102      	bne.n	8018588 <strstr4+0x6c>
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	3b04      	subs	r3, #4
 8018586:	e000      	b.n	801858a <strstr4+0x6e>
 8018588:	2300      	movs	r3, #0
 801858a:	4618      	mov	r0, r3
 801858c:	371c      	adds	r7, #28
 801858e:	46bd      	mov	sp, r7
 8018590:	bc80      	pop	{r7}
 8018592:	4770      	bx	lr

08018594 <strstr>:
 8018594:	b580      	push	{r7, lr}
 8018596:	b09a      	sub	sp, #104	; 0x68
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	667b      	str	r3, [r7, #100]	; 0x64
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80185a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185a8:	781b      	ldrb	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d101      	bne.n	80185b2 <strstr+0x1e>
 80185ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80185b0:	e0c4      	b.n	801873c <strstr+0x1a8>
 80185b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185b4:	3301      	adds	r3, #1
 80185b6:	781b      	ldrb	r3, [r3, #0]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d107      	bne.n	80185cc <strstr+0x38>
 80185bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	4619      	mov	r1, r3
 80185c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80185c4:	f7ff fac5 	bl	8017b52 <strchr>
 80185c8:	4603      	mov	r3, r0
 80185ca:	e0b7      	b.n	801873c <strstr+0x1a8>
 80185cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185ce:	3302      	adds	r3, #2
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d105      	bne.n	80185e2 <strstr+0x4e>
 80185d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80185d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80185da:	f7ff ff35 	bl	8018448 <strstr2>
 80185de:	4603      	mov	r3, r0
 80185e0:	e0ac      	b.n	801873c <strstr+0x1a8>
 80185e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185e4:	3303      	adds	r3, #3
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d105      	bne.n	80185f8 <strstr+0x64>
 80185ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80185ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80185f0:	f7ff ff5c 	bl	80184ac <strstr3>
 80185f4:	4603      	mov	r3, r0
 80185f6:	e0a1      	b.n	801873c <strstr+0x1a8>
 80185f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80185fa:	3304      	adds	r3, #4
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d105      	bne.n	801860e <strstr+0x7a>
 8018602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018604:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8018606:	f7ff ff89 	bl	801851c <strstr4>
 801860a:	4603      	mov	r3, r0
 801860c:	e096      	b.n	801873c <strstr+0x1a8>
 801860e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018610:	f7e7 fdd6 	bl	80001c0 <strlen>
 8018614:	6578      	str	r0, [r7, #84]	; 0x54
 8018616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018618:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801861c:	4619      	mov	r1, r3
 801861e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8018620:	f7ff fc3b 	bl	8017e9a <strnlen>
 8018624:	6538      	str	r0, [r7, #80]	; 0x50
 8018626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801862a:	429a      	cmp	r2, r3
 801862c:	d201      	bcs.n	8018632 <strstr+0x9e>
 801862e:	2300      	movs	r3, #0
 8018630:	e084      	b.n	801873c <strstr+0x1a8>
 8018632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018634:	2bfe      	cmp	r3, #254	; 0xfe
 8018636:	bf94      	ite	ls
 8018638:	2301      	movls	r3, #1
 801863a:	2300      	movhi	r3, #0
 801863c:	b2db      	uxtb	r3, r3
 801863e:	2b00      	cmp	r3, #0
 8018640:	d075      	beq.n	801872e <strstr+0x19a>
 8018642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018646:	1ad3      	subs	r3, r2, r3
 8018648:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801864a:	4413      	add	r3, r2
 801864c:	663b      	str	r3, [r7, #96]	; 0x60
 801864e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018650:	3301      	adds	r3, #1
 8018652:	4619      	mov	r1, r3
 8018654:	f107 030c 	add.w	r3, r7, #12
 8018658:	2240      	movs	r2, #64	; 0x40
 801865a:	4618      	mov	r0, r3
 801865c:	f7ff f90a 	bl	8017874 <memset>
 8018660:	2300      	movs	r3, #0
 8018662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018664:	e013      	b.n	801868e <strstr+0xfa>
 8018666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018668:	b2d9      	uxtb	r1, r3
 801866a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801866c:	b2da      	uxtb	r2, r3
 801866e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018670:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018672:	4403      	add	r3, r0
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801867a:	1a8a      	subs	r2, r1, r2
 801867c:	b2d2      	uxtb	r2, r2
 801867e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8018682:	440b      	add	r3, r1
 8018684:	f803 2c5c 	strb.w	r2, [r3, #-92]
 8018688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801868a:	3301      	adds	r3, #1
 801868c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801868e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018692:	429a      	cmp	r2, r3
 8018694:	d8e7      	bhi.n	8018666 <strstr+0xd2>
 8018696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018698:	3b01      	subs	r3, #1
 801869a:	667b      	str	r3, [r7, #100]	; 0x64
 801869c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801869e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186a0:	4413      	add	r3, r2
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80186ac:	4413      	add	r3, r2
 80186ae:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 80186b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80186b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80186b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186b8:	4413      	add	r3, r2
 80186ba:	667b      	str	r3, [r7, #100]	; 0x64
 80186bc:	e019      	b.n	80186f2 <strstr+0x15e>
 80186be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80186c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186c2:	4413      	add	r3, r2
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80186ce:	4413      	add	r3, r2
 80186d0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 80186d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80186d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80186d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80186da:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80186dc:	f7fe ffc4 	bl	8017668 <memcmp>
 80186e0:	4603      	mov	r3, r0
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d101      	bne.n	80186ea <strstr+0x156>
 80186e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186e8:	e028      	b.n	801873c <strstr+0x1a8>
 80186ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80186ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186ee:	4413      	add	r3, r2
 80186f0:	667b      	str	r3, [r7, #100]	; 0x64
 80186f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80186f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d9e1      	bls.n	80186be <strstr+0x12a>
 80186fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80186fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80186fe:	4413      	add	r3, r2
 8018700:	781b      	ldrb	r3, [r3, #0]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d101      	bne.n	801870a <strstr+0x176>
 8018706:	2300      	movs	r3, #0
 8018708:	e018      	b.n	801873c <strstr+0x1a8>
 801870a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801870c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801870e:	4413      	add	r3, r2
 8018710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8018714:	4618      	mov	r0, r3
 8018716:	f7ff fbc0 	bl	8017e9a <strnlen>
 801871a:	4602      	mov	r2, r0
 801871c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801871e:	4413      	add	r3, r2
 8018720:	663b      	str	r3, [r7, #96]	; 0x60
 8018722:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018726:	429a      	cmp	r2, r3
 8018728:	d9b5      	bls.n	8018696 <strstr+0x102>
 801872a:	2300      	movs	r3, #0
 801872c:	e006      	b.n	801873c <strstr+0x1a8>
 801872e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018734:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8018736:	f7ff fc78 	bl	801802a <two_way_long_needle>
 801873a:	4603      	mov	r3, r0
 801873c:	4618      	mov	r0, r3
 801873e:	3768      	adds	r7, #104	; 0x68
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}

08018744 <__get_current_locale>:
 8018744:	b580      	push	{r7, lr}
 8018746:	af00      	add	r7, sp, #0
 8018748:	f7f4 f90a 	bl	800c960 <__get_global_locale>
 801874c:	4603      	mov	r3, r0
 801874e:	4618      	mov	r0, r3
 8018750:	bd80      	pop	{r7, pc}

08018752 <__get_current_locale>:
 8018752:	b580      	push	{r7, lr}
 8018754:	af00      	add	r7, sp, #0
 8018756:	f7f4 f9d7 	bl	800cb08 <__get_global_locale>
 801875a:	4603      	mov	r3, r0
 801875c:	4618      	mov	r0, r3
 801875e:	bd80      	pop	{r7, pc}

08018760 <cvt>:
 8018760:	b580      	push	{r7, lr}
 8018762:	b092      	sub	sp, #72	; 0x48
 8018764:	af06      	add	r7, sp, #24
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	e9c7 2300 	strd	r2, r3, [r7]
 801876c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018770:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	2b00      	cmp	r3, #0
 8018778:	da09      	bge.n	801878e <cvt+0x2e>
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	603b      	str	r3, [r7, #0]
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8018784:	607b      	str	r3, [r7, #4]
 8018786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018788:	222d      	movs	r2, #45	; 0x2d
 801878a:	701a      	strb	r2, [r3, #0]
 801878c:	e002      	b.n	8018794 <cvt+0x34>
 801878e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018790:	2200      	movs	r2, #0
 8018792:	701a      	strb	r2, [r3, #0]
 8018794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018796:	2b66      	cmp	r3, #102	; 0x66
 8018798:	d002      	beq.n	80187a0 <cvt+0x40>
 801879a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801879c:	2b46      	cmp	r3, #70	; 0x46
 801879e:	d102      	bne.n	80187a6 <cvt+0x46>
 80187a0:	2303      	movs	r3, #3
 80187a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187a4:	e00a      	b.n	80187bc <cvt+0x5c>
 80187a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187a8:	2b65      	cmp	r3, #101	; 0x65
 80187aa:	d002      	beq.n	80187b2 <cvt+0x52>
 80187ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187ae:	2b45      	cmp	r3, #69	; 0x45
 80187b0:	d102      	bne.n	80187b8 <cvt+0x58>
 80187b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187b4:	3301      	adds	r3, #1
 80187b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80187b8:	2302      	movs	r3, #2
 80187ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187bc:	f107 031c 	add.w	r3, r7, #28
 80187c0:	9304      	str	r3, [sp, #16]
 80187c2:	f107 0320 	add.w	r3, r7, #32
 80187c6:	9303      	str	r3, [sp, #12]
 80187c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187ca:	9302      	str	r3, [sp, #8]
 80187cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ce:	9301      	str	r3, [sp, #4]
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	9300      	str	r3, [sp, #0]
 80187d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80187d8:	68f8      	ldr	r0, [r7, #12]
 80187da:	f7e9 fdbd 	bl	8002358 <_dtoa_r>
 80187de:	6278      	str	r0, [r7, #36]	; 0x24
 80187e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187e2:	2b67      	cmp	r3, #103	; 0x67
 80187e4:	d002      	beq.n	80187ec <cvt+0x8c>
 80187e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80187e8:	2b47      	cmp	r3, #71	; 0x47
 80187ea:	d104      	bne.n	80187f6 <cvt+0x96>
 80187ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80187ee:	f003 0301 	and.w	r3, r3, #1
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d03a      	beq.n	801886c <cvt+0x10c>
 80187f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187fa:	4413      	add	r3, r2
 80187fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80187fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018800:	2b66      	cmp	r3, #102	; 0x66
 8018802:	d002      	beq.n	801880a <cvt+0xaa>
 8018804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018806:	2b46      	cmp	r3, #70	; 0x46
 8018808:	d119      	bne.n	801883e <cvt+0xde>
 801880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	2b30      	cmp	r3, #48	; 0x30
 8018810:	d10f      	bne.n	8018832 <cvt+0xd2>
 8018812:	f04f 0200 	mov.w	r2, #0
 8018816:	f04f 0300 	mov.w	r3, #0
 801881a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801881e:	f7e8 ff6d 	bl	80016fc <__aeabi_dcmpeq>
 8018822:	4603      	mov	r3, r0
 8018824:	2b00      	cmp	r3, #0
 8018826:	d104      	bne.n	8018832 <cvt+0xd2>
 8018828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801882a:	f1c3 0201 	rsb	r2, r3, #1
 801882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018830:	601a      	str	r2, [r3, #0]
 8018832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	461a      	mov	r2, r3
 8018838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801883a:	4413      	add	r3, r2
 801883c:	62bb      	str	r3, [r7, #40]	; 0x28
 801883e:	f04f 0200 	mov.w	r2, #0
 8018842:	f04f 0300 	mov.w	r3, #0
 8018846:	e9d7 0100 	ldrd	r0, r1, [r7]
 801884a:	f7e8 ff57 	bl	80016fc <__aeabi_dcmpeq>
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	d001      	beq.n	8018858 <cvt+0xf8>
 8018854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018856:	61fb      	str	r3, [r7, #28]
 8018858:	e004      	b.n	8018864 <cvt+0x104>
 801885a:	69fb      	ldr	r3, [r7, #28]
 801885c:	1c5a      	adds	r2, r3, #1
 801885e:	61fa      	str	r2, [r7, #28]
 8018860:	2230      	movs	r2, #48	; 0x30
 8018862:	701a      	strb	r2, [r3, #0]
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018868:	429a      	cmp	r2, r3
 801886a:	d8f6      	bhi.n	801885a <cvt+0xfa>
 801886c:	69fa      	ldr	r2, [r7, #28]
 801886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018870:	1ad2      	subs	r2, r2, r3
 8018872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018874:	601a      	str	r2, [r3, #0]
 8018876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018878:	4618      	mov	r0, r3
 801887a:	3730      	adds	r7, #48	; 0x30
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}

08018880 <__sprint_r>:
 8018880:	b5b0      	push	{r4, r5, r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	6039      	str	r1, [r7, #0]
 801888a:	4614      	mov	r4, r2
 801888c:	2500      	movs	r5, #0
 801888e:	68a3      	ldr	r3, [r4, #8]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d103      	bne.n	801889c <__sprint_r+0x1c>
 8018894:	2300      	movs	r3, #0
 8018896:	6063      	str	r3, [r4, #4]
 8018898:	2300      	movs	r3, #0
 801889a:	e00a      	b.n	80188b2 <__sprint_r+0x32>
 801889c:	4622      	mov	r2, r4
 801889e:	6839      	ldr	r1, [r7, #0]
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7f8 fd63 	bl	801136c <__sfvwrite_r>
 80188a6:	4605      	mov	r5, r0
 80188a8:	2300      	movs	r3, #0
 80188aa:	60a3      	str	r3, [r4, #8]
 80188ac:	2300      	movs	r3, #0
 80188ae:	6063      	str	r3, [r4, #4]
 80188b0:	462b      	mov	r3, r5
 80188b2:	4618      	mov	r0, r3
 80188b4:	3708      	adds	r7, #8
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bdb0      	pop	{r4, r5, r7, pc}

080188ba <__sbprintf>:
 80188ba:	b590      	push	{r4, r7, lr}
 80188bc:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	f107 040c 	add.w	r4, r7, #12
 80188c6:	6020      	str	r0, [r4, #0]
 80188c8:	460c      	mov	r4, r1
 80188ca:	f107 0108 	add.w	r1, r7, #8
 80188ce:	600a      	str	r2, [r1, #0]
 80188d0:	1d3a      	adds	r2, r7, #4
 80188d2:	6013      	str	r3, [r2, #0]
 80188d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188d8:	f023 0302 	bic.w	r3, r3, #2
 80188dc:	b21b      	sxth	r3, r3
 80188de:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 80188e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80188e4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 80188e8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80188ec:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
 80188f0:	69e3      	ldr	r3, [r4, #28]
 80188f2:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80188f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188f8:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80188fc:	f107 0310 	add.w	r3, r7, #16
 8018900:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8018904:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8018908:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 801890c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018910:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8018914:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8018918:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 801891c:	2300      	movs	r3, #0
 801891e:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8018922:	1d3b      	adds	r3, r7, #4
 8018924:	f107 0208 	add.w	r2, r7, #8
 8018928:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 801892c:	f107 000c 	add.w	r0, r7, #12
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	6812      	ldr	r2, [r2, #0]
 8018934:	6800      	ldr	r0, [r0, #0]
 8018936:	f7f5 fe3b 	bl	800e5b0 <_vfiprintf_r>
 801893a:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 801893e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8018942:	2b00      	cmp	r3, #0
 8018944:	db0e      	blt.n	8018964 <__sbprintf+0xaa>
 8018946:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 801894a:	f107 030c 	add.w	r3, r7, #12
 801894e:	4611      	mov	r1, r2
 8018950:	6818      	ldr	r0, [r3, #0]
 8018952:	f000 fb7b 	bl	801904c <_fflush_r>
 8018956:	4603      	mov	r3, r0
 8018958:	2b00      	cmp	r3, #0
 801895a:	d003      	beq.n	8018964 <__sbprintf+0xaa>
 801895c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018960:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8018964:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 8018968:	b29b      	uxth	r3, r3
 801896a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801896e:	2b00      	cmp	r3, #0
 8018970:	d005      	beq.n	801897e <__sbprintf+0xc4>
 8018972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801897a:	b21b      	sxth	r3, r3
 801897c:	81a3      	strh	r3, [r4, #12]
 801897e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8018982:	4618      	mov	r0, r3
 8018984:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8018988:	46bd      	mov	sp, r7
 801898a:	bd90      	pop	{r4, r7, pc}

0801898c <__sbprintf>:
 801898c:	b590      	push	{r4, r7, lr}
 801898e:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 8018992:	af00      	add	r7, sp, #0
 8018994:	f107 040c 	add.w	r4, r7, #12
 8018998:	6020      	str	r0, [r4, #0]
 801899a:	460c      	mov	r4, r1
 801899c:	f107 0108 	add.w	r1, r7, #8
 80189a0:	600a      	str	r2, [r1, #0]
 80189a2:	1d3a      	adds	r2, r7, #4
 80189a4:	6013      	str	r3, [r2, #0]
 80189a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189aa:	f023 0302 	bic.w	r3, r3, #2
 80189ae:	b21b      	sxth	r3, r3
 80189b0:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
 80189b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80189b6:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 80189ba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80189be:	f8a7 341e 	strh.w	r3, [r7, #1054]	; 0x41e
 80189c2:	69e3      	ldr	r3, [r4, #28]
 80189c4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80189c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189ca:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80189ce:	f107 0310 	add.w	r3, r7, #16
 80189d2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80189d6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80189da:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
 80189de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80189e2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80189e6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80189ea:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80189ee:	2300      	movs	r3, #0
 80189f0:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80189f4:	1d3b      	adds	r3, r7, #4
 80189f6:	f107 0208 	add.w	r2, r7, #8
 80189fa:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80189fe:	f107 000c 	add.w	r0, r7, #12
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	6812      	ldr	r2, [r2, #0]
 8018a06:	6800      	ldr	r0, [r0, #0]
 8018a08:	f7f6 fc5e 	bl	800f2c8 <_vfprintf_r>
 8018a0c:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 8018a10:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	db0e      	blt.n	8018a36 <__sbprintf+0xaa>
 8018a18:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8018a1c:	f107 030c 	add.w	r3, r7, #12
 8018a20:	4611      	mov	r1, r2
 8018a22:	6818      	ldr	r0, [r3, #0]
 8018a24:	f000 fb12 	bl	801904c <_fflush_r>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d003      	beq.n	8018a36 <__sbprintf+0xaa>
 8018a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a32:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8018a36:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d005      	beq.n	8018a50 <__sbprintf+0xc4>
 8018a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a4c:	b21b      	sxth	r3, r3
 8018a4e:	81a3      	strh	r3, [r4, #12]
 8018a50:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8018a54:	4618      	mov	r0, r3
 8018a56:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd90      	pop	{r4, r7, pc}

08018a5e <cvt>:
 8018a5e:	b580      	push	{r7, lr}
 8018a60:	b092      	sub	sp, #72	; 0x48
 8018a62:	af06      	add	r7, sp, #24
 8018a64:	60f8      	str	r0, [r7, #12]
 8018a66:	e9c7 2300 	strd	r2, r3, [r7]
 8018a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018a6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	da09      	bge.n	8018a8c <cvt+0x2e>
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	603b      	str	r3, [r7, #0]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8018a82:	607b      	str	r3, [r7, #4]
 8018a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a86:	222d      	movs	r2, #45	; 0x2d
 8018a88:	701a      	strb	r2, [r3, #0]
 8018a8a:	e002      	b.n	8018a92 <cvt+0x34>
 8018a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018a8e:	2200      	movs	r2, #0
 8018a90:	701a      	strb	r2, [r3, #0]
 8018a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a94:	2b66      	cmp	r3, #102	; 0x66
 8018a96:	d002      	beq.n	8018a9e <cvt+0x40>
 8018a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a9a:	2b46      	cmp	r3, #70	; 0x46
 8018a9c:	d102      	bne.n	8018aa4 <cvt+0x46>
 8018a9e:	2303      	movs	r3, #3
 8018aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018aa2:	e00a      	b.n	8018aba <cvt+0x5c>
 8018aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018aa6:	2b65      	cmp	r3, #101	; 0x65
 8018aa8:	d002      	beq.n	8018ab0 <cvt+0x52>
 8018aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018aac:	2b45      	cmp	r3, #69	; 0x45
 8018aae:	d102      	bne.n	8018ab6 <cvt+0x58>
 8018ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ab2:	3301      	adds	r3, #1
 8018ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8018ab6:	2302      	movs	r3, #2
 8018ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018aba:	f107 031c 	add.w	r3, r7, #28
 8018abe:	9304      	str	r3, [sp, #16]
 8018ac0:	f107 0320 	add.w	r3, r7, #32
 8018ac4:	9303      	str	r3, [sp, #12]
 8018ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ac8:	9302      	str	r3, [sp, #8]
 8018aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018acc:	9301      	str	r3, [sp, #4]
 8018ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad0:	9300      	str	r3, [sp, #0]
 8018ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ad6:	68f8      	ldr	r0, [r7, #12]
 8018ad8:	f7e9 fc3e 	bl	8002358 <_dtoa_r>
 8018adc:	6278      	str	r0, [r7, #36]	; 0x24
 8018ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ae0:	2b67      	cmp	r3, #103	; 0x67
 8018ae2:	d002      	beq.n	8018aea <cvt+0x8c>
 8018ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ae6:	2b47      	cmp	r3, #71	; 0x47
 8018ae8:	d104      	bne.n	8018af4 <cvt+0x96>
 8018aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018aec:	f003 0301 	and.w	r3, r3, #1
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d03a      	beq.n	8018b6a <cvt+0x10c>
 8018af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018af8:	4413      	add	r3, r2
 8018afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8018afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018afe:	2b66      	cmp	r3, #102	; 0x66
 8018b00:	d002      	beq.n	8018b08 <cvt+0xaa>
 8018b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018b04:	2b46      	cmp	r3, #70	; 0x46
 8018b06:	d119      	bne.n	8018b3c <cvt+0xde>
 8018b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	2b30      	cmp	r3, #48	; 0x30
 8018b0e:	d10f      	bne.n	8018b30 <cvt+0xd2>
 8018b10:	f04f 0200 	mov.w	r2, #0
 8018b14:	f04f 0300 	mov.w	r3, #0
 8018b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b1c:	f7e8 fdee 	bl	80016fc <__aeabi_dcmpeq>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d104      	bne.n	8018b30 <cvt+0xd2>
 8018b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b28:	f1c3 0201 	rsb	r2, r3, #1
 8018b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b2e:	601a      	str	r2, [r3, #0]
 8018b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	461a      	mov	r2, r3
 8018b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b38:	4413      	add	r3, r2
 8018b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b3c:	f04f 0200 	mov.w	r2, #0
 8018b40:	f04f 0300 	mov.w	r3, #0
 8018b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b48:	f7e8 fdd8 	bl	80016fc <__aeabi_dcmpeq>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d001      	beq.n	8018b56 <cvt+0xf8>
 8018b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b54:	61fb      	str	r3, [r7, #28]
 8018b56:	e004      	b.n	8018b62 <cvt+0x104>
 8018b58:	69fb      	ldr	r3, [r7, #28]
 8018b5a:	1c5a      	adds	r2, r3, #1
 8018b5c:	61fa      	str	r2, [r7, #28]
 8018b5e:	2230      	movs	r2, #48	; 0x30
 8018b60:	701a      	strb	r2, [r3, #0]
 8018b62:	69fb      	ldr	r3, [r7, #28]
 8018b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d8f6      	bhi.n	8018b58 <cvt+0xfa>
 8018b6a:	69fa      	ldr	r2, [r7, #28]
 8018b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b6e:	1ad2      	subs	r2, r2, r3
 8018b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b72:	601a      	str	r2, [r3, #0]
 8018b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b76:	4618      	mov	r0, r3
 8018b78:	3730      	adds	r7, #48	; 0x30
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}

08018b7e <_vsnprintf_r>:
 8018b7e:	b580      	push	{r7, lr}
 8018b80:	b09e      	sub	sp, #120	; 0x78
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	60f8      	str	r0, [r7, #12]
 8018b86:	60b9      	str	r1, [r7, #8]
 8018b88:	607a      	str	r2, [r7, #4]
 8018b8a:	603b      	str	r3, [r7, #0]
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	da05      	bge.n	8018b9e <_vsnprintf_r+0x20>
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	228b      	movs	r2, #139	; 0x8b
 8018b96:	601a      	str	r2, [r3, #0]
 8018b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b9c:	e02a      	b.n	8018bf4 <_vsnprintf_r+0x76>
 8018b9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018ba2:	83bb      	strh	r3, [r7, #28]
 8018ba4:	68bb      	ldr	r3, [r7, #8]
 8018ba6:	613b      	str	r3, [r7, #16]
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	623b      	str	r3, [r7, #32]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d002      	beq.n	8018bb8 <_vsnprintf_r+0x3a>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	3b01      	subs	r3, #1
 8018bb6:	e000      	b.n	8018bba <_vsnprintf_r+0x3c>
 8018bb8:	2300      	movs	r3, #0
 8018bba:	61bb      	str	r3, [r7, #24]
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8018bc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018bc4:	83fb      	strh	r3, [r7, #30]
 8018bc6:	f107 0110 	add.w	r1, r7, #16
 8018bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018bce:	683a      	ldr	r2, [r7, #0]
 8018bd0:	68f8      	ldr	r0, [r7, #12]
 8018bd2:	f7f4 f861 	bl	800cc98 <_svfprintf_r>
 8018bd6:	6778      	str	r0, [r7, #116]	; 0x74
 8018bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018bde:	da02      	bge.n	8018be6 <_vsnprintf_r+0x68>
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	228b      	movs	r2, #139	; 0x8b
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d002      	beq.n	8018bf2 <_vsnprintf_r+0x74>
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	2200      	movs	r2, #0
 8018bf0:	701a      	strb	r2, [r3, #0]
 8018bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3778      	adds	r7, #120	; 0x78
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <_vsprintf_r>:
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b09e      	sub	sp, #120	; 0x78
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
 8018c08:	603b      	str	r3, [r7, #0]
 8018c0a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018c0e:	83bb      	strh	r3, [r7, #28]
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	613b      	str	r3, [r7, #16]
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	623b      	str	r3, [r7, #32]
 8018c18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c1c:	61bb      	str	r3, [r7, #24]
 8018c1e:	69bb      	ldr	r3, [r7, #24]
 8018c20:	627b      	str	r3, [r7, #36]	; 0x24
 8018c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c26:	83fb      	strh	r3, [r7, #30]
 8018c28:	f107 0110 	add.w	r1, r7, #16
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	68f8      	ldr	r0, [r7, #12]
 8018c32:	f7f4 f831 	bl	800cc98 <_svfprintf_r>
 8018c36:	6778      	str	r0, [r7, #116]	; 0x74
 8018c38:	693b      	ldr	r3, [r7, #16]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	701a      	strb	r2, [r3, #0]
 8018c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018c40:	4618      	mov	r0, r3
 8018c42:	3778      	adds	r7, #120	; 0x78
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <abort>:
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	af00      	add	r7, sp, #0
 8018c4c:	2006      	movs	r0, #6
 8018c4e:	f7f8 fe91 	bl	8011974 <raise>
 8018c52:	2001      	movs	r0, #1
 8018c54:	f7eb fba6 	bl	80043a4 <_exit>

08018c58 <quorem>:
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b090      	sub	sp, #64	; 0x40
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]
 8018c62:	683b      	ldr	r3, [r7, #0]
 8018c64:	691b      	ldr	r3, [r3, #16]
 8018c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	691b      	ldr	r3, [r3, #16]
 8018c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	dd01      	ble.n	8018c76 <quorem+0x1e>
 8018c72:	2300      	movs	r3, #0
 8018c74:	e0e7      	b.n	8018e46 <quorem+0x1ee>
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	3314      	adds	r3, #20
 8018c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8018c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c7e:	3b01      	subs	r3, #1
 8018c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c84:	009b      	lsls	r3, r3, #2
 8018c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c88:	4413      	add	r3, r2
 8018c8a:	623b      	str	r3, [r7, #32]
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	3314      	adds	r3, #20
 8018c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c98:	4413      	add	r3, r2
 8018c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c9e:	681a      	ldr	r2, [r3, #0]
 8018ca0:	6a3b      	ldr	r3, [r7, #32]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	3301      	adds	r3, #1
 8018ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018caa:	633b      	str	r3, [r7, #48]	; 0x30
 8018cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d05c      	beq.n	8018d6c <quorem+0x114>
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8018cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cbc:	1d1a      	adds	r2, r3, #4
 8018cbe:	627a      	str	r2, [r7, #36]	; 0x24
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	61fb      	str	r3, [r7, #28]
 8018cc4:	69fb      	ldr	r3, [r7, #28]
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cca:	fb02 f303 	mul.w	r3, r2, r3
 8018cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018cd0:	4413      	add	r3, r2
 8018cd2:	61bb      	str	r3, [r7, #24]
 8018cd4:	69fb      	ldr	r3, [r7, #28]
 8018cd6:	0c1b      	lsrs	r3, r3, #16
 8018cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018cda:	fb02 f203 	mul.w	r2, r2, r3
 8018cde:	69bb      	ldr	r3, [r7, #24]
 8018ce0:	0c1b      	lsrs	r3, r3, #16
 8018ce2:	4413      	add	r3, r2
 8018ce4:	617b      	str	r3, [r7, #20]
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	0c1b      	lsrs	r3, r3, #16
 8018cea:	637b      	str	r3, [r7, #52]	; 0x34
 8018cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	b29b      	uxth	r3, r3
 8018cf6:	1ad2      	subs	r2, r2, r3
 8018cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018cfa:	4413      	add	r3, r2
 8018cfc:	613b      	str	r3, [r7, #16]
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	141b      	asrs	r3, r3, #16
 8018d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8018d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	0c1a      	lsrs	r2, r3, #16
 8018d0a:	697b      	ldr	r3, [r7, #20]
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	1ad2      	subs	r2, r2, r3
 8018d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d12:	4413      	add	r3, r2
 8018d14:	60fb      	str	r3, [r7, #12]
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	141b      	asrs	r3, r3, #16
 8018d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	041a      	lsls	r2, r3, #16
 8018d20:	693b      	ldr	r3, [r7, #16]
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	ea42 0103 	orr.w	r1, r2, r3
 8018d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d2a:	1d1a      	adds	r2, r3, #4
 8018d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018d2e:	460a      	mov	r2, r1
 8018d30:	601a      	str	r2, [r3, #0]
 8018d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018d34:	6a3b      	ldr	r3, [r7, #32]
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d9bf      	bls.n	8018cba <quorem+0x62>
 8018d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d114      	bne.n	8018d6c <quorem+0x114>
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	3314      	adds	r3, #20
 8018d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d48:	e002      	b.n	8018d50 <quorem+0xf8>
 8018d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018d4c:	3b01      	subs	r3, #1
 8018d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d52:	3b04      	subs	r3, #4
 8018d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d903      	bls.n	8018d66 <quorem+0x10e>
 8018d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d0f1      	beq.n	8018d4a <quorem+0xf2>
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018d6a:	611a      	str	r2, [r3, #16]
 8018d6c:	6839      	ldr	r1, [r7, #0]
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f000 fd12 	bl	8019798 <__mcmp>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	db64      	blt.n	8018e44 <quorem+0x1ec>
 8018d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8018d80:	2300      	movs	r3, #0
 8018d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8018d84:	2300      	movs	r3, #0
 8018d86:	637b      	str	r3, [r7, #52]	; 0x34
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	3314      	adds	r3, #20
 8018d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018d8e:	683b      	ldr	r3, [r7, #0]
 8018d90:	3314      	adds	r3, #20
 8018d92:	627b      	str	r3, [r7, #36]	; 0x24
 8018d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d96:	1d1a      	adds	r2, r3, #4
 8018d98:	627a      	str	r2, [r7, #36]	; 0x24
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	61fb      	str	r3, [r7, #28]
 8018d9e:	69fb      	ldr	r3, [r7, #28]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018da4:	4413      	add	r3, r2
 8018da6:	61bb      	str	r3, [r7, #24]
 8018da8:	69fb      	ldr	r3, [r7, #28]
 8018daa:	0c1a      	lsrs	r2, r3, #16
 8018dac:	69bb      	ldr	r3, [r7, #24]
 8018dae:	0c1b      	lsrs	r3, r3, #16
 8018db0:	4413      	add	r3, r2
 8018db2:	617b      	str	r3, [r7, #20]
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	0c1b      	lsrs	r3, r3, #16
 8018db8:	637b      	str	r3, [r7, #52]	; 0x34
 8018dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	69bb      	ldr	r3, [r7, #24]
 8018dc2:	b29b      	uxth	r3, r3
 8018dc4:	1ad2      	subs	r2, r2, r3
 8018dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dc8:	4413      	add	r3, r2
 8018dca:	613b      	str	r3, [r7, #16]
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	141b      	asrs	r3, r3, #16
 8018dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8018dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	0c1a      	lsrs	r2, r3, #16
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	b29b      	uxth	r3, r3
 8018ddc:	1ad2      	subs	r2, r2, r3
 8018dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018de0:	4413      	add	r3, r2
 8018de2:	60fb      	str	r3, [r7, #12]
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	141b      	asrs	r3, r3, #16
 8018de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	041a      	lsls	r2, r3, #16
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	ea42 0103 	orr.w	r1, r2, r3
 8018df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018df8:	1d1a      	adds	r2, r3, #4
 8018dfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018dfc:	460a      	mov	r2, r1
 8018dfe:	601a      	str	r2, [r3, #0]
 8018e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018e02:	6a3b      	ldr	r3, [r7, #32]
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d9c5      	bls.n	8018d94 <quorem+0x13c>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	3314      	adds	r3, #20
 8018e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e10:	009b      	lsls	r3, r3, #2
 8018e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e14:	4413      	add	r3, r2
 8018e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d111      	bne.n	8018e44 <quorem+0x1ec>
 8018e20:	e002      	b.n	8018e28 <quorem+0x1d0>
 8018e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018e24:	3b01      	subs	r3, #1
 8018e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e2a:	3b04      	subs	r3, #4
 8018e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d903      	bls.n	8018e3e <quorem+0x1e6>
 8018e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d0f1      	beq.n	8018e22 <quorem+0x1ca>
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018e42:	611a      	str	r2, [r3, #16]
 8018e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e46:	4618      	mov	r0, r3
 8018e48:	3740      	adds	r7, #64	; 0x40
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}

08018e4e <__env_lock>:
 8018e4e:	b480      	push	{r7}
 8018e50:	b083      	sub	sp, #12
 8018e52:	af00      	add	r7, sp, #0
 8018e54:	6078      	str	r0, [r7, #4]
 8018e56:	bf00      	nop
 8018e58:	370c      	adds	r7, #12
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bc80      	pop	{r7}
 8018e5e:	4770      	bx	lr

08018e60 <__env_unlock>:
 8018e60:	b480      	push	{r7}
 8018e62:	b083      	sub	sp, #12
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
 8018e68:	bf00      	nop
 8018e6a:	370c      	adds	r7, #12
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bc80      	pop	{r7}
 8018e70:	4770      	bx	lr

08018e72 <__sflush_r>:
 8018e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e76:	b087      	sub	sp, #28
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	460c      	mov	r4, r1
 8018e7e:	89a3      	ldrh	r3, [r4, #12]
 8018e80:	81fb      	strh	r3, [r7, #14]
 8018e82:	89fb      	ldrh	r3, [r7, #14]
 8018e84:	f003 0308 	and.w	r3, r3, #8
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	f040 80ab 	bne.w	8018fe4 <__sflush_r+0x172>
 8018e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018e96:	b21b      	sxth	r3, r3
 8018e98:	81a3      	strh	r3, [r4, #12]
 8018e9a:	6863      	ldr	r3, [r4, #4]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	dc03      	bgt.n	8018ea8 <__sflush_r+0x36>
 8018ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	f340 809c 	ble.w	8018fe0 <__sflush_r+0x16e>
 8018ea8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f000 8098 	beq.w	8018fe0 <__sflush_r+0x16e>
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	60bb      	str	r3, [r7, #8]
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]
 8018ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d002      	beq.n	8018ed0 <__sflush_r+0x5e>
 8018eca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018ecc:	617b      	str	r3, [r7, #20]
 8018ece:	e027      	b.n	8018f20 <__sflush_r+0xae>
 8018ed0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8018ed2:	69e1      	ldr	r1, [r4, #28]
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	47a8      	blx	r5
 8018edc:	6178      	str	r0, [r7, #20]
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ee4:	d11c      	bne.n	8018f20 <__sflush_r+0xae>
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d018      	beq.n	8018f20 <__sflush_r+0xae>
 8018eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ef2:	613b      	str	r3, [r7, #16]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2b1d      	cmp	r3, #29
 8018efa:	d003      	beq.n	8018f04 <__sflush_r+0x92>
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	2b16      	cmp	r3, #22
 8018f02:	d105      	bne.n	8018f10 <__sflush_r+0x9e>
 8018f04:	2300      	movs	r3, #0
 8018f06:	613b      	str	r3, [r7, #16]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	68ba      	ldr	r2, [r7, #8]
 8018f0c:	601a      	str	r2, [r3, #0]
 8018f0e:	e005      	b.n	8018f1c <__sflush_r+0xaa>
 8018f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f18:	b21b      	sxth	r3, r3
 8018f1a:	81a3      	strh	r3, [r4, #12]
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	e090      	b.n	8019042 <__sflush_r+0x1d0>
 8018f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	f003 0304 	and.w	r3, r3, #4
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d00a      	beq.n	8018f44 <__sflush_r+0xd2>
 8018f2e:	6863      	ldr	r3, [r4, #4]
 8018f30:	697a      	ldr	r2, [r7, #20]
 8018f32:	1ad3      	subs	r3, r2, r3
 8018f34:	617b      	str	r3, [r7, #20]
 8018f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d003      	beq.n	8018f44 <__sflush_r+0xd2>
 8018f3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018f3e:	697a      	ldr	r2, [r7, #20]
 8018f40:	1ad3      	subs	r3, r2, r3
 8018f42:	617b      	str	r3, [r7, #20]
 8018f44:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8018f46:	69e1      	ldr	r1, [r4, #28]
 8018f48:	2300      	movs	r3, #0
 8018f4a:	697a      	ldr	r2, [r7, #20]
 8018f4c:	6878      	ldr	r0, [r7, #4]
 8018f4e:	47a8      	blx	r5
 8018f50:	6178      	str	r0, [r7, #20]
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f58:	d10b      	bne.n	8018f72 <__sflush_r+0x100>
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d007      	beq.n	8018f72 <__sflush_r+0x100>
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	2b1d      	cmp	r3, #29
 8018f68:	d003      	beq.n	8018f72 <__sflush_r+0x100>
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	2b16      	cmp	r3, #22
 8018f70:	d12d      	bne.n	8018fce <__sflush_r+0x15c>
 8018f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018f7a:	b21b      	sxth	r3, r3
 8018f7c:	81a3      	strh	r3, [r4, #12]
 8018f7e:	2300      	movs	r3, #0
 8018f80:	6063      	str	r3, [r4, #4]
 8018f82:	6923      	ldr	r3, [r4, #16]
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d009      	beq.n	8018fa8 <__sflush_r+0x136>
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018f9a:	d103      	bne.n	8018fa4 <__sflush_r+0x132>
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d101      	bne.n	8018fa8 <__sflush_r+0x136>
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	6523      	str	r3, [r4, #80]	; 0x50
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	68ba      	ldr	r2, [r7, #8]
 8018fac:	601a      	str	r2, [r3, #0]
 8018fae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d015      	beq.n	8018fe0 <__sflush_r+0x16e>
 8018fb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018fb6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018fba:	429a      	cmp	r2, r3
 8018fbc:	d004      	beq.n	8018fc8 <__sflush_r+0x156>
 8018fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018fc0:	4619      	mov	r1, r3
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f7f7 ffe2 	bl	8010f8c <_free_r>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	6323      	str	r3, [r4, #48]	; 0x30
 8018fcc:	e008      	b.n	8018fe0 <__sflush_r+0x16e>
 8018fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fd6:	b21b      	sxth	r3, r3
 8018fd8:	81a3      	strh	r3, [r4, #12]
 8018fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fde:	e030      	b.n	8019042 <__sflush_r+0x1d0>
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	e02e      	b.n	8019042 <__sflush_r+0x1d0>
 8018fe4:	6925      	ldr	r5, [r4, #16]
 8018fe6:	2d00      	cmp	r5, #0
 8018fe8:	d101      	bne.n	8018fee <__sflush_r+0x17c>
 8018fea:	2300      	movs	r3, #0
 8018fec:	e029      	b.n	8019042 <__sflush_r+0x1d0>
 8018fee:	6823      	ldr	r3, [r4, #0]
 8018ff0:	eba3 0905 	sub.w	r9, r3, r5
 8018ff4:	6025      	str	r5, [r4, #0]
 8018ff6:	89fb      	ldrh	r3, [r7, #14]
 8018ff8:	f003 0303 	and.w	r3, r3, #3
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d101      	bne.n	8019004 <__sflush_r+0x192>
 8019000:	6963      	ldr	r3, [r4, #20]
 8019002:	e000      	b.n	8019006 <__sflush_r+0x194>
 8019004:	2300      	movs	r3, #0
 8019006:	60a3      	str	r3, [r4, #8]
 8019008:	e017      	b.n	801903a <__sflush_r+0x1c8>
 801900a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801900c:	461e      	mov	r6, r3
 801900e:	69e1      	ldr	r1, [r4, #28]
 8019010:	464b      	mov	r3, r9
 8019012:	462a      	mov	r2, r5
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	47b0      	blx	r6
 8019018:	4680      	mov	r8, r0
 801901a:	f1b8 0f00 	cmp.w	r8, #0
 801901e:	dc08      	bgt.n	8019032 <__sflush_r+0x1c0>
 8019020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019028:	b21b      	sxth	r3, r3
 801902a:	81a3      	strh	r3, [r4, #12]
 801902c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019030:	e007      	b.n	8019042 <__sflush_r+0x1d0>
 8019032:	4643      	mov	r3, r8
 8019034:	441d      	add	r5, r3
 8019036:	eba9 0908 	sub.w	r9, r9, r8
 801903a:	f1b9 0f00 	cmp.w	r9, #0
 801903e:	dce4      	bgt.n	801900a <__sflush_r+0x198>
 8019040:	2300      	movs	r3, #0
 8019042:	4618      	mov	r0, r3
 8019044:	371c      	adds	r7, #28
 8019046:	46bd      	mov	sp, r7
 8019048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801904c <_fflush_r>:
 801904c:	b590      	push	{r4, r7, lr}
 801904e:	b085      	sub	sp, #20
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	460c      	mov	r4, r1
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	60fb      	str	r3, [r7, #12]
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d006      	beq.n	801906e <_fflush_r+0x22>
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019064:	2b00      	cmp	r3, #0
 8019066:	d102      	bne.n	801906e <_fflush_r+0x22>
 8019068:	68f8      	ldr	r0, [r7, #12]
 801906a:	f7f2 f9fd 	bl	800b468 <__sinit>
 801906e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d101      	bne.n	801907a <_fflush_r+0x2e>
 8019076:	2300      	movs	r3, #0
 8019078:	e005      	b.n	8019086 <_fflush_r+0x3a>
 801907a:	4621      	mov	r1, r4
 801907c:	6878      	ldr	r0, [r7, #4]
 801907e:	f7ff fef8 	bl	8018e72 <__sflush_r>
 8019082:	60b8      	str	r0, [r7, #8]
 8019084:	68bb      	ldr	r3, [r7, #8]
 8019086:	4618      	mov	r0, r3
 8019088:	3714      	adds	r7, #20
 801908a:	46bd      	mov	sp, r7
 801908c:	bd90      	pop	{r4, r7, pc}

0801908e <__get_current_locale>:
 801908e:	b580      	push	{r7, lr}
 8019090:	af00      	add	r7, sp, #0
 8019092:	f7f8 fb47 	bl	8011724 <__get_global_locale>
 8019096:	4603      	mov	r3, r0
 8019098:	4618      	mov	r0, r3
 801909a:	bd80      	pop	{r7, pc}

0801909c <__get_C_locale>:
 801909c:	b580      	push	{r7, lr}
 801909e:	af00      	add	r7, sp, #0
 80190a0:	f7f8 fb40 	bl	8011724 <__get_global_locale>
 80190a4:	4603      	mov	r3, r0
 80190a6:	4618      	mov	r0, r3
 80190a8:	bd80      	pop	{r7, pc}

080190aa <__localeconv_l>:
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b084      	sub	sp, #16
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	6078      	str	r0, [r7, #4]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	33f0      	adds	r3, #240	; 0xf0
 80190b6:	60fb      	str	r3, [r7, #12]
 80190b8:	f7ff fff0 	bl	801909c <__get_C_locale>
 80190bc:	4602      	mov	r2, r0
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	4293      	cmp	r3, r2
 80190c2:	d101      	bne.n	80190c8 <__localeconv_l+0x1e>
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	e000      	b.n	80190ca <__localeconv_l+0x20>
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	4618      	mov	r0, r3
 80190cc:	3710      	adds	r7, #16
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}

080190d2 <_localeconv_r>:
 80190d2:	b580      	push	{r7, lr}
 80190d4:	b082      	sub	sp, #8
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6078      	str	r0, [r7, #4]
 80190da:	f7ff ffd8 	bl	801908e <__get_current_locale>
 80190de:	4603      	mov	r3, r0
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7ff ffe2 	bl	80190aa <__localeconv_l>
 80190e6:	4603      	mov	r3, r0
 80190e8:	4618      	mov	r0, r3
 80190ea:	3708      	adds	r7, #8
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}

080190f0 <__swhatbuf_r>:
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b09c      	sub	sp, #112	; 0x70
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	607a      	str	r2, [r7, #4]
 80190fc:	603b      	str	r3, [r7, #0]
 80190fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019104:	68bb      	ldr	r3, [r7, #8]
 8019106:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801910a:	2b00      	cmp	r3, #0
 801910c:	db0c      	blt.n	8019128 <__swhatbuf_r+0x38>
 801910e:	68bb      	ldr	r3, [r7, #8]
 8019110:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8019114:	4619      	mov	r1, r3
 8019116:	f107 0310 	add.w	r3, r7, #16
 801911a:	461a      	mov	r2, r3
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	f7f8 ff31 	bl	8011f84 <_fstat_r>
 8019122:	4603      	mov	r3, r0
 8019124:	2b00      	cmp	r3, #0
 8019126:	da14      	bge.n	8019152 <__swhatbuf_r+0x62>
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	2200      	movs	r2, #0
 801912c:	601a      	str	r2, [r3, #0]
 801912e:	68bb      	ldr	r3, [r7, #8]
 8019130:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019134:	b29b      	uxth	r3, r3
 8019136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801913a:	2b00      	cmp	r3, #0
 801913c:	d003      	beq.n	8019146 <__swhatbuf_r+0x56>
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2240      	movs	r2, #64	; 0x40
 8019142:	601a      	str	r2, [r3, #0]
 8019144:	e003      	b.n	801914e <__swhatbuf_r+0x5e>
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801914c:	601a      	str	r2, [r3, #0]
 801914e:	2300      	movs	r3, #0
 8019150:	e010      	b.n	8019174 <__swhatbuf_r+0x84>
 8019152:	697b      	ldr	r3, [r7, #20]
 8019154:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8019158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801915c:	bf0c      	ite	eq
 801915e:	2301      	moveq	r3, #1
 8019160:	2300      	movne	r3, #0
 8019162:	b2db      	uxtb	r3, r3
 8019164:	461a      	mov	r2, r3
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	601a      	str	r2, [r3, #0]
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019170:	601a      	str	r2, [r3, #0]
 8019172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019174:	4618      	mov	r0, r3
 8019176:	3770      	adds	r7, #112	; 0x70
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}

0801917c <__ascii_mbtowc>:
 801917c:	b480      	push	{r7}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
 8019188:	603b      	str	r3, [r7, #0]
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	617b      	str	r3, [r7, #20]
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d102      	bne.n	801919a <__ascii_mbtowc+0x1e>
 8019194:	f107 0310 	add.w	r3, r7, #16
 8019198:	60bb      	str	r3, [r7, #8]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d101      	bne.n	80191a4 <__ascii_mbtowc+0x28>
 80191a0:	2300      	movs	r3, #0
 80191a2:	e011      	b.n	80191c8 <__ascii_mbtowc+0x4c>
 80191a4:	683b      	ldr	r3, [r7, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d102      	bne.n	80191b0 <__ascii_mbtowc+0x34>
 80191aa:	f06f 0301 	mvn.w	r3, #1
 80191ae:	e00b      	b.n	80191c8 <__ascii_mbtowc+0x4c>
 80191b0:	697b      	ldr	r3, [r7, #20]
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	461a      	mov	r2, r3
 80191b6:	68bb      	ldr	r3, [r7, #8]
 80191b8:	601a      	str	r2, [r3, #0]
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	781b      	ldrb	r3, [r3, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d101      	bne.n	80191c6 <__ascii_mbtowc+0x4a>
 80191c2:	2300      	movs	r3, #0
 80191c4:	e000      	b.n	80191c8 <__ascii_mbtowc+0x4c>
 80191c6:	2301      	movs	r3, #1
 80191c8:	4618      	mov	r0, r3
 80191ca:	371c      	adds	r7, #28
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bc80      	pop	{r7}
 80191d0:	4770      	bx	lr

080191d2 <_Balloc>:
 80191d2:	b580      	push	{r7, lr}
 80191d4:	b084      	sub	sp, #16
 80191d6:	af00      	add	r7, sp, #0
 80191d8:	6078      	str	r0, [r7, #4]
 80191da:	6039      	str	r1, [r7, #0]
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d10d      	bne.n	8019200 <_Balloc+0x2e>
 80191e4:	2221      	movs	r2, #33	; 0x21
 80191e6:	2104      	movs	r1, #4
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f7fe f96e 	bl	80174ca <_calloc_r>
 80191ee:	4602      	mov	r2, r0
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d101      	bne.n	8019200 <_Balloc+0x2e>
 80191fc:	2300      	movs	r3, #0
 80191fe:	e033      	b.n	8019268 <_Balloc+0x96>
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	009b      	lsls	r3, r3, #2
 8019208:	4413      	add	r3, r2
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	60fb      	str	r3, [r7, #12]
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d008      	beq.n	8019226 <_Balloc+0x54>
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	009b      	lsls	r3, r3, #2
 801921c:	4413      	add	r3, r2
 801921e:	68fa      	ldr	r2, [r7, #12]
 8019220:	6812      	ldr	r2, [r2, #0]
 8019222:	601a      	str	r2, [r3, #0]
 8019224:	e018      	b.n	8019258 <_Balloc+0x86>
 8019226:	2201      	movs	r2, #1
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	fa02 f303 	lsl.w	r3, r2, r3
 801922e:	60bb      	str	r3, [r7, #8]
 8019230:	68bb      	ldr	r3, [r7, #8]
 8019232:	3305      	adds	r3, #5
 8019234:	009b      	lsls	r3, r3, #2
 8019236:	461a      	mov	r2, r3
 8019238:	2101      	movs	r1, #1
 801923a:	6878      	ldr	r0, [r7, #4]
 801923c:	f7fe f945 	bl	80174ca <_calloc_r>
 8019240:	60f8      	str	r0, [r7, #12]
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d101      	bne.n	801924c <_Balloc+0x7a>
 8019248:	2300      	movs	r3, #0
 801924a:	e00d      	b.n	8019268 <_Balloc+0x96>
 801924c:	68fb      	ldr	r3, [r7, #12]
 801924e:	683a      	ldr	r2, [r7, #0]
 8019250:	605a      	str	r2, [r3, #4]
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	68ba      	ldr	r2, [r7, #8]
 8019256:	609a      	str	r2, [r3, #8]
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	2200      	movs	r2, #0
 801925c:	611a      	str	r2, [r3, #16]
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	691a      	ldr	r2, [r3, #16]
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	60da      	str	r2, [r3, #12]
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	4618      	mov	r0, r3
 801926a:	3710      	adds	r7, #16
 801926c:	46bd      	mov	sp, r7
 801926e:	bd80      	pop	{r7, pc}

08019270 <_Bfree>:
 8019270:	b480      	push	{r7}
 8019272:	b083      	sub	sp, #12
 8019274:	af00      	add	r7, sp, #0
 8019276:	6078      	str	r0, [r7, #4]
 8019278:	6039      	str	r1, [r7, #0]
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d010      	beq.n	80192a2 <_Bfree+0x32>
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	4413      	add	r3, r2
 801928c:	681a      	ldr	r2, [r3, #0]
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	601a      	str	r2, [r3, #0]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	685b      	ldr	r3, [r3, #4]
 801929a:	009b      	lsls	r3, r3, #2
 801929c:	4413      	add	r3, r2
 801929e:	683a      	ldr	r2, [r7, #0]
 80192a0:	601a      	str	r2, [r3, #0]
 80192a2:	bf00      	nop
 80192a4:	370c      	adds	r7, #12
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bc80      	pop	{r7}
 80192aa:	4770      	bx	lr

080192ac <__multadd>:
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b08c      	sub	sp, #48	; 0x30
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	60f8      	str	r0, [r7, #12]
 80192b4:	60b9      	str	r1, [r7, #8]
 80192b6:	607a      	str	r2, [r7, #4]
 80192b8:	603b      	str	r3, [r7, #0]
 80192ba:	68bb      	ldr	r3, [r7, #8]
 80192bc:	691b      	ldr	r3, [r3, #16]
 80192be:	627b      	str	r3, [r7, #36]	; 0x24
 80192c0:	68bb      	ldr	r3, [r7, #8]
 80192c2:	3314      	adds	r3, #20
 80192c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80192c6:	2300      	movs	r3, #0
 80192c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80192ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	623b      	str	r3, [r7, #32]
 80192d0:	6a3b      	ldr	r3, [r7, #32]
 80192d2:	b29b      	uxth	r3, r3
 80192d4:	687a      	ldr	r2, [r7, #4]
 80192d6:	fb02 f203 	mul.w	r2, r2, r3
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	4413      	add	r3, r2
 80192de:	61fb      	str	r3, [r7, #28]
 80192e0:	6a3b      	ldr	r3, [r7, #32]
 80192e2:	0c1b      	lsrs	r3, r3, #16
 80192e4:	687a      	ldr	r2, [r7, #4]
 80192e6:	fb02 f203 	mul.w	r2, r2, r3
 80192ea:	69fb      	ldr	r3, [r7, #28]
 80192ec:	0c1b      	lsrs	r3, r3, #16
 80192ee:	4413      	add	r3, r2
 80192f0:	61bb      	str	r3, [r7, #24]
 80192f2:	69bb      	ldr	r3, [r7, #24]
 80192f4:	0c1b      	lsrs	r3, r3, #16
 80192f6:	603b      	str	r3, [r7, #0]
 80192f8:	69bb      	ldr	r3, [r7, #24]
 80192fa:	0419      	lsls	r1, r3, #16
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	b29a      	uxth	r2, r3
 8019300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019302:	1d18      	adds	r0, r3, #4
 8019304:	62b8      	str	r0, [r7, #40]	; 0x28
 8019306:	440a      	add	r2, r1
 8019308:	601a      	str	r2, [r3, #0]
 801930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801930c:	3301      	adds	r3, #1
 801930e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019314:	429a      	cmp	r2, r3
 8019316:	dbd8      	blt.n	80192ca <__multadd+0x1e>
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d02b      	beq.n	8019376 <__multadd+0xca>
 801931e:	68bb      	ldr	r3, [r7, #8]
 8019320:	689b      	ldr	r3, [r3, #8]
 8019322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019324:	429a      	cmp	r2, r3
 8019326:	db1a      	blt.n	801935e <__multadd+0xb2>
 8019328:	68bb      	ldr	r3, [r7, #8]
 801932a:	685b      	ldr	r3, [r3, #4]
 801932c:	3301      	adds	r3, #1
 801932e:	4619      	mov	r1, r3
 8019330:	68f8      	ldr	r0, [r7, #12]
 8019332:	f7ff ff4e 	bl	80191d2 <_Balloc>
 8019336:	6178      	str	r0, [r7, #20]
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	f103 000c 	add.w	r0, r3, #12
 801933e:	68bb      	ldr	r3, [r7, #8]
 8019340:	f103 010c 	add.w	r1, r3, #12
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	691b      	ldr	r3, [r3, #16]
 8019348:	3302      	adds	r3, #2
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	461a      	mov	r2, r3
 801934e:	f7e8 fa27 	bl	80017a0 <memcpy>
 8019352:	68b9      	ldr	r1, [r7, #8]
 8019354:	68f8      	ldr	r0, [r7, #12]
 8019356:	f7ff ff8b 	bl	8019270 <_Bfree>
 801935a:	697b      	ldr	r3, [r7, #20]
 801935c:	60bb      	str	r3, [r7, #8]
 801935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019360:	1c5a      	adds	r2, r3, #1
 8019362:	627a      	str	r2, [r7, #36]	; 0x24
 8019364:	683a      	ldr	r2, [r7, #0]
 8019366:	68b9      	ldr	r1, [r7, #8]
 8019368:	3304      	adds	r3, #4
 801936a:	009b      	lsls	r3, r3, #2
 801936c:	440b      	add	r3, r1
 801936e:	605a      	str	r2, [r3, #4]
 8019370:	68bb      	ldr	r3, [r7, #8]
 8019372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019374:	611a      	str	r2, [r3, #16]
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	4618      	mov	r0, r3
 801937a:	3730      	adds	r7, #48	; 0x30
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}

08019380 <__hi0bits>:
 8019380:	b490      	push	{r4, r7}
 8019382:	af00      	add	r7, sp, #0
 8019384:	4603      	mov	r3, r0
 8019386:	2400      	movs	r4, #0
 8019388:	0c1a      	lsrs	r2, r3, #16
 801938a:	0412      	lsls	r2, r2, #16
 801938c:	2a00      	cmp	r2, #0
 801938e:	d101      	bne.n	8019394 <__hi0bits+0x14>
 8019390:	2410      	movs	r4, #16
 8019392:	041b      	lsls	r3, r3, #16
 8019394:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8019398:	2a00      	cmp	r2, #0
 801939a:	d101      	bne.n	80193a0 <__hi0bits+0x20>
 801939c:	3408      	adds	r4, #8
 801939e:	021b      	lsls	r3, r3, #8
 80193a0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80193a4:	2a00      	cmp	r2, #0
 80193a6:	d101      	bne.n	80193ac <__hi0bits+0x2c>
 80193a8:	3404      	adds	r4, #4
 80193aa:	011b      	lsls	r3, r3, #4
 80193ac:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 80193b0:	2a00      	cmp	r2, #0
 80193b2:	d101      	bne.n	80193b8 <__hi0bits+0x38>
 80193b4:	3402      	adds	r4, #2
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	461a      	mov	r2, r3
 80193ba:	2a00      	cmp	r2, #0
 80193bc:	db06      	blt.n	80193cc <__hi0bits+0x4c>
 80193be:	3401      	adds	r4, #1
 80193c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d101      	bne.n	80193cc <__hi0bits+0x4c>
 80193c8:	2320      	movs	r3, #32
 80193ca:	e000      	b.n	80193ce <__hi0bits+0x4e>
 80193cc:	4623      	mov	r3, r4
 80193ce:	4618      	mov	r0, r3
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bc90      	pop	{r4, r7}
 80193d4:	4770      	bx	lr

080193d6 <__lo0bits>:
 80193d6:	b4b0      	push	{r4, r5, r7}
 80193d8:	b083      	sub	sp, #12
 80193da:	af00      	add	r7, sp, #0
 80193dc:	6078      	str	r0, [r7, #4]
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681c      	ldr	r4, [r3, #0]
 80193e2:	f004 0307 	and.w	r3, r4, #7
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d013      	beq.n	8019412 <__lo0bits+0x3c>
 80193ea:	f004 0301 	and.w	r3, r4, #1
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d001      	beq.n	80193f6 <__lo0bits+0x20>
 80193f2:	2300      	movs	r3, #0
 80193f4:	e031      	b.n	801945a <__lo0bits+0x84>
 80193f6:	f004 0302 	and.w	r3, r4, #2
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d004      	beq.n	8019408 <__lo0bits+0x32>
 80193fe:	0862      	lsrs	r2, r4, #1
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	601a      	str	r2, [r3, #0]
 8019404:	2301      	movs	r3, #1
 8019406:	e028      	b.n	801945a <__lo0bits+0x84>
 8019408:	08a2      	lsrs	r2, r4, #2
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	601a      	str	r2, [r3, #0]
 801940e:	2302      	movs	r3, #2
 8019410:	e023      	b.n	801945a <__lo0bits+0x84>
 8019412:	2500      	movs	r5, #0
 8019414:	b2a3      	uxth	r3, r4
 8019416:	2b00      	cmp	r3, #0
 8019418:	d101      	bne.n	801941e <__lo0bits+0x48>
 801941a:	2510      	movs	r5, #16
 801941c:	0c24      	lsrs	r4, r4, #16
 801941e:	b2e3      	uxtb	r3, r4
 8019420:	2b00      	cmp	r3, #0
 8019422:	d101      	bne.n	8019428 <__lo0bits+0x52>
 8019424:	3508      	adds	r5, #8
 8019426:	0a24      	lsrs	r4, r4, #8
 8019428:	f004 030f 	and.w	r3, r4, #15
 801942c:	2b00      	cmp	r3, #0
 801942e:	d101      	bne.n	8019434 <__lo0bits+0x5e>
 8019430:	3504      	adds	r5, #4
 8019432:	0924      	lsrs	r4, r4, #4
 8019434:	f004 0303 	and.w	r3, r4, #3
 8019438:	2b00      	cmp	r3, #0
 801943a:	d101      	bne.n	8019440 <__lo0bits+0x6a>
 801943c:	3502      	adds	r5, #2
 801943e:	08a4      	lsrs	r4, r4, #2
 8019440:	f004 0301 	and.w	r3, r4, #1
 8019444:	2b00      	cmp	r3, #0
 8019446:	d105      	bne.n	8019454 <__lo0bits+0x7e>
 8019448:	3501      	adds	r5, #1
 801944a:	0864      	lsrs	r4, r4, #1
 801944c:	2c00      	cmp	r4, #0
 801944e:	d101      	bne.n	8019454 <__lo0bits+0x7e>
 8019450:	2320      	movs	r3, #32
 8019452:	e002      	b.n	801945a <__lo0bits+0x84>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	601c      	str	r4, [r3, #0]
 8019458:	462b      	mov	r3, r5
 801945a:	4618      	mov	r0, r3
 801945c:	370c      	adds	r7, #12
 801945e:	46bd      	mov	sp, r7
 8019460:	bcb0      	pop	{r4, r5, r7}
 8019462:	4770      	bx	lr

08019464 <__i2b>:
 8019464:	b580      	push	{r7, lr}
 8019466:	b084      	sub	sp, #16
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
 801946c:	6039      	str	r1, [r7, #0]
 801946e:	2101      	movs	r1, #1
 8019470:	6878      	ldr	r0, [r7, #4]
 8019472:	f7ff feae 	bl	80191d2 <_Balloc>
 8019476:	60f8      	str	r0, [r7, #12]
 8019478:	683a      	ldr	r2, [r7, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	615a      	str	r2, [r3, #20]
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	2201      	movs	r2, #1
 8019482:	611a      	str	r2, [r3, #16]
 8019484:	68fb      	ldr	r3, [r7, #12]
 8019486:	4618      	mov	r0, r3
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}

0801948e <__multiply>:
 801948e:	b580      	push	{r7, lr}
 8019490:	b094      	sub	sp, #80	; 0x50
 8019492:	af00      	add	r7, sp, #0
 8019494:	60f8      	str	r0, [r7, #12]
 8019496:	60b9      	str	r1, [r7, #8]
 8019498:	607a      	str	r2, [r7, #4]
 801949a:	68bb      	ldr	r3, [r7, #8]
 801949c:	691a      	ldr	r2, [r3, #16]
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	691b      	ldr	r3, [r3, #16]
 80194a2:	429a      	cmp	r2, r3
 80194a4:	da05      	bge.n	80194b2 <__multiply+0x24>
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	60bb      	str	r3, [r7, #8]
 80194ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b0:	607b      	str	r3, [r7, #4]
 80194b2:	68bb      	ldr	r3, [r7, #8]
 80194b4:	685b      	ldr	r3, [r3, #4]
 80194b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	691b      	ldr	r3, [r3, #16]
 80194bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	691b      	ldr	r3, [r3, #16]
 80194c2:	627b      	str	r3, [r7, #36]	; 0x24
 80194c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80194c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c8:	4413      	add	r3, r2
 80194ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80194cc:	68bb      	ldr	r3, [r7, #8]
 80194ce:	689b      	ldr	r3, [r3, #8]
 80194d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194d2:	429a      	cmp	r2, r3
 80194d4:	dd02      	ble.n	80194dc <__multiply+0x4e>
 80194d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194d8:	3301      	adds	r3, #1
 80194da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80194dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80194de:	68f8      	ldr	r0, [r7, #12]
 80194e0:	f7ff fe77 	bl	80191d2 <_Balloc>
 80194e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80194e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e8:	3314      	adds	r3, #20
 80194ea:	643b      	str	r3, [r7, #64]	; 0x40
 80194ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80194ee:	009b      	lsls	r3, r3, #2
 80194f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80194f2:	4413      	add	r3, r2
 80194f4:	623b      	str	r3, [r7, #32]
 80194f6:	e005      	b.n	8019504 <__multiply+0x76>
 80194f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80194fa:	2200      	movs	r2, #0
 80194fc:	601a      	str	r2, [r3, #0]
 80194fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019500:	3304      	adds	r3, #4
 8019502:	643b      	str	r3, [r7, #64]	; 0x40
 8019504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019506:	6a3b      	ldr	r3, [r7, #32]
 8019508:	429a      	cmp	r2, r3
 801950a:	d3f5      	bcc.n	80194f8 <__multiply+0x6a>
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	3314      	adds	r3, #20
 8019510:	623b      	str	r3, [r7, #32]
 8019512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019514:	009b      	lsls	r3, r3, #2
 8019516:	6a3a      	ldr	r2, [r7, #32]
 8019518:	4413      	add	r3, r2
 801951a:	61fb      	str	r3, [r7, #28]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	3314      	adds	r3, #20
 8019520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019524:	009b      	lsls	r3, r3, #2
 8019526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019528:	4413      	add	r3, r2
 801952a:	61bb      	str	r3, [r7, #24]
 801952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952e:	3314      	adds	r3, #20
 8019530:	637b      	str	r3, [r7, #52]	; 0x34
 8019532:	e086      	b.n	8019642 <__multiply+0x1b4>
 8019534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	b29b      	uxth	r3, r3
 801953a:	617b      	str	r3, [r7, #20]
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d037      	beq.n	80195b2 <__multiply+0x124>
 8019542:	6a3b      	ldr	r3, [r7, #32]
 8019544:	643b      	str	r3, [r7, #64]	; 0x40
 8019546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019548:	63bb      	str	r3, [r7, #56]	; 0x38
 801954a:	2300      	movs	r3, #0
 801954c:	647b      	str	r3, [r7, #68]	; 0x44
 801954e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	b29b      	uxth	r3, r3
 8019554:	697a      	ldr	r2, [r7, #20]
 8019556:	fb02 f203 	mul.w	r2, r2, r3
 801955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	b29b      	uxth	r3, r3
 8019560:	4413      	add	r3, r2
 8019562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019564:	4413      	add	r3, r2
 8019566:	613b      	str	r3, [r7, #16]
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	0c1b      	lsrs	r3, r3, #16
 801956c:	647b      	str	r3, [r7, #68]	; 0x44
 801956e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019570:	1d1a      	adds	r2, r3, #4
 8019572:	643a      	str	r2, [r7, #64]	; 0x40
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	0c1b      	lsrs	r3, r3, #16
 8019578:	697a      	ldr	r2, [r7, #20]
 801957a:	fb02 f203 	mul.w	r2, r2, r3
 801957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	0c1b      	lsrs	r3, r3, #16
 8019584:	4413      	add	r3, r2
 8019586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019588:	4413      	add	r3, r2
 801958a:	633b      	str	r3, [r7, #48]	; 0x30
 801958c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801958e:	0c1b      	lsrs	r3, r3, #16
 8019590:	647b      	str	r3, [r7, #68]	; 0x44
 8019592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019594:	0419      	lsls	r1, r3, #16
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	b29a      	uxth	r2, r3
 801959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959c:	1d18      	adds	r0, r3, #4
 801959e:	63b8      	str	r0, [r7, #56]	; 0x38
 80195a0:	430a      	orrs	r2, r1
 80195a2:	601a      	str	r2, [r3, #0]
 80195a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80195a6:	69fb      	ldr	r3, [r7, #28]
 80195a8:	429a      	cmp	r2, r3
 80195aa:	d3d0      	bcc.n	801954e <__multiply+0xc0>
 80195ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195b0:	601a      	str	r2, [r3, #0]
 80195b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	0c1b      	lsrs	r3, r3, #16
 80195b8:	617b      	str	r3, [r7, #20]
 80195ba:	697b      	ldr	r3, [r7, #20]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d03a      	beq.n	8019636 <__multiply+0x1a8>
 80195c0:	6a3b      	ldr	r3, [r7, #32]
 80195c2:	643b      	str	r3, [r7, #64]	; 0x40
 80195c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80195c8:	2300      	movs	r3, #0
 80195ca:	647b      	str	r3, [r7, #68]	; 0x44
 80195cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	633b      	str	r3, [r7, #48]	; 0x30
 80195d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	697a      	ldr	r2, [r7, #20]
 80195da:	fb02 f203 	mul.w	r2, r2, r3
 80195de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	0c1b      	lsrs	r3, r3, #16
 80195e4:	4413      	add	r3, r2
 80195e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80195e8:	4413      	add	r3, r2
 80195ea:	613b      	str	r3, [r7, #16]
 80195ec:	693b      	ldr	r3, [r7, #16]
 80195ee:	0c1b      	lsrs	r3, r3, #16
 80195f0:	647b      	str	r3, [r7, #68]	; 0x44
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	0419      	lsls	r1, r3, #16
 80195f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195fc:	1d18      	adds	r0, r3, #4
 80195fe:	63b8      	str	r0, [r7, #56]	; 0x38
 8019600:	430a      	orrs	r2, r1
 8019602:	601a      	str	r2, [r3, #0]
 8019604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019606:	1d1a      	adds	r2, r3, #4
 8019608:	643a      	str	r2, [r7, #64]	; 0x40
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	0c1b      	lsrs	r3, r3, #16
 801960e:	697a      	ldr	r2, [r7, #20]
 8019610:	fb02 f203 	mul.w	r2, r2, r3
 8019614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	b29b      	uxth	r3, r3
 801961a:	4413      	add	r3, r2
 801961c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801961e:	4413      	add	r3, r2
 8019620:	633b      	str	r3, [r7, #48]	; 0x30
 8019622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019624:	0c1b      	lsrs	r3, r3, #16
 8019626:	647b      	str	r3, [r7, #68]	; 0x44
 8019628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801962a:	69fb      	ldr	r3, [r7, #28]
 801962c:	429a      	cmp	r2, r3
 801962e:	d3d0      	bcc.n	80195d2 <__multiply+0x144>
 8019630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019634:	601a      	str	r2, [r3, #0]
 8019636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019638:	3304      	adds	r3, #4
 801963a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801963e:	3304      	adds	r3, #4
 8019640:	637b      	str	r3, [r7, #52]	; 0x34
 8019642:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019644:	69bb      	ldr	r3, [r7, #24]
 8019646:	429a      	cmp	r2, r3
 8019648:	f4ff af74 	bcc.w	8019534 <__multiply+0xa6>
 801964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964e:	3314      	adds	r3, #20
 8019650:	637b      	str	r3, [r7, #52]	; 0x34
 8019652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019658:	4413      	add	r3, r2
 801965a:	63bb      	str	r3, [r7, #56]	; 0x38
 801965c:	e002      	b.n	8019664 <__multiply+0x1d6>
 801965e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019660:	3b01      	subs	r3, #1
 8019662:	64bb      	str	r3, [r7, #72]	; 0x48
 8019664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019666:	2b00      	cmp	r3, #0
 8019668:	dd06      	ble.n	8019678 <__multiply+0x1ea>
 801966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801966c:	3b04      	subs	r3, #4
 801966e:	63bb      	str	r3, [r7, #56]	; 0x38
 8019670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d0f2      	beq.n	801965e <__multiply+0x1d0>
 8019678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801967c:	611a      	str	r2, [r3, #16]
 801967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019680:	4618      	mov	r0, r3
 8019682:	3750      	adds	r7, #80	; 0x50
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}

08019688 <__lshift>:
 8019688:	b580      	push	{r7, lr}
 801968a:	b08e      	sub	sp, #56	; 0x38
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	607a      	str	r2, [r7, #4]
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	115b      	asrs	r3, r3, #5
 8019698:	61fb      	str	r3, [r7, #28]
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	633b      	str	r3, [r7, #48]	; 0x30
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	691a      	ldr	r2, [r3, #16]
 80196a4:	69fb      	ldr	r3, [r7, #28]
 80196a6:	4413      	add	r3, r2
 80196a8:	3301      	adds	r3, #1
 80196aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	689b      	ldr	r3, [r3, #8]
 80196b0:	637b      	str	r3, [r7, #52]	; 0x34
 80196b2:	e005      	b.n	80196c0 <__lshift+0x38>
 80196b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196b6:	3301      	adds	r3, #1
 80196b8:	633b      	str	r3, [r7, #48]	; 0x30
 80196ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196bc:	005b      	lsls	r3, r3, #1
 80196be:	637b      	str	r3, [r7, #52]	; 0x34
 80196c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196c4:	429a      	cmp	r2, r3
 80196c6:	dcf5      	bgt.n	80196b4 <__lshift+0x2c>
 80196c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196ca:	68f8      	ldr	r0, [r7, #12]
 80196cc:	f7ff fd81 	bl	80191d2 <_Balloc>
 80196d0:	61b8      	str	r0, [r7, #24]
 80196d2:	69bb      	ldr	r3, [r7, #24]
 80196d4:	3314      	adds	r3, #20
 80196d6:	627b      	str	r3, [r7, #36]	; 0x24
 80196d8:	2300      	movs	r3, #0
 80196da:	637b      	str	r3, [r7, #52]	; 0x34
 80196dc:	e007      	b.n	80196ee <__lshift+0x66>
 80196de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e0:	1d1a      	adds	r2, r3, #4
 80196e2:	627a      	str	r2, [r7, #36]	; 0x24
 80196e4:	2200      	movs	r2, #0
 80196e6:	601a      	str	r2, [r3, #0]
 80196e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196ea:	3301      	adds	r3, #1
 80196ec:	637b      	str	r3, [r7, #52]	; 0x34
 80196ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80196f0:	69fb      	ldr	r3, [r7, #28]
 80196f2:	429a      	cmp	r2, r3
 80196f4:	dbf3      	blt.n	80196de <__lshift+0x56>
 80196f6:	68bb      	ldr	r3, [r7, #8]
 80196f8:	3314      	adds	r3, #20
 80196fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80196fc:	68bb      	ldr	r3, [r7, #8]
 80196fe:	691b      	ldr	r3, [r3, #16]
 8019700:	009b      	lsls	r3, r3, #2
 8019702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019704:	4413      	add	r3, r2
 8019706:	617b      	str	r3, [r7, #20]
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f003 031f 	and.w	r3, r3, #31
 801970e:	607b      	str	r3, [r7, #4]
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d027      	beq.n	8019766 <__lshift+0xde>
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	f1c3 0320 	rsb	r3, r3, #32
 801971c:	633b      	str	r3, [r7, #48]	; 0x30
 801971e:	2300      	movs	r3, #0
 8019720:	623b      	str	r3, [r7, #32]
 8019722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019724:	681a      	ldr	r2, [r3, #0]
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	fa02 f103 	lsl.w	r1, r2, r3
 801972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801972e:	1d1a      	adds	r2, r3, #4
 8019730:	627a      	str	r2, [r7, #36]	; 0x24
 8019732:	6a3a      	ldr	r2, [r7, #32]
 8019734:	430a      	orrs	r2, r1
 8019736:	601a      	str	r2, [r3, #0]
 8019738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801973a:	1d1a      	adds	r2, r3, #4
 801973c:	62ba      	str	r2, [r7, #40]	; 0x28
 801973e:	681a      	ldr	r2, [r3, #0]
 8019740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019742:	fa22 f303 	lsr.w	r3, r2, r3
 8019746:	623b      	str	r3, [r7, #32]
 8019748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	429a      	cmp	r2, r3
 801974e:	d3e8      	bcc.n	8019722 <__lshift+0x9a>
 8019750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019752:	6a3a      	ldr	r2, [r7, #32]
 8019754:	601a      	str	r2, [r3, #0]
 8019756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00f      	beq.n	801977e <__lshift+0xf6>
 801975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019760:	3301      	adds	r3, #1
 8019762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019764:	e00b      	b.n	801977e <__lshift+0xf6>
 8019766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019768:	1d13      	adds	r3, r2, #4
 801976a:	62bb      	str	r3, [r7, #40]	; 0x28
 801976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976e:	1d19      	adds	r1, r3, #4
 8019770:	6279      	str	r1, [r7, #36]	; 0x24
 8019772:	6812      	ldr	r2, [r2, #0]
 8019774:	601a      	str	r2, [r3, #0]
 8019776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	429a      	cmp	r2, r3
 801977c:	d3f3      	bcc.n	8019766 <__lshift+0xde>
 801977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019780:	1e5a      	subs	r2, r3, #1
 8019782:	69bb      	ldr	r3, [r7, #24]
 8019784:	611a      	str	r2, [r3, #16]
 8019786:	68b9      	ldr	r1, [r7, #8]
 8019788:	68f8      	ldr	r0, [r7, #12]
 801978a:	f7ff fd71 	bl	8019270 <_Bfree>
 801978e:	69bb      	ldr	r3, [r7, #24]
 8019790:	4618      	mov	r0, r3
 8019792:	3738      	adds	r7, #56	; 0x38
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}

08019798 <__mcmp>:
 8019798:	b480      	push	{r7}
 801979a:	b089      	sub	sp, #36	; 0x24
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
 80197a0:	6039      	str	r1, [r7, #0]
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	691b      	ldr	r3, [r3, #16]
 80197a6:	617b      	str	r3, [r7, #20]
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	691b      	ldr	r3, [r3, #16]
 80197ac:	613b      	str	r3, [r7, #16]
 80197ae:	697a      	ldr	r2, [r7, #20]
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	1ad3      	subs	r3, r2, r3
 80197b4:	617b      	str	r3, [r7, #20]
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d001      	beq.n	80197c0 <__mcmp+0x28>
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	e02d      	b.n	801981c <__mcmp+0x84>
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	3314      	adds	r3, #20
 80197c4:	60fb      	str	r3, [r7, #12]
 80197c6:	693b      	ldr	r3, [r7, #16]
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	68fa      	ldr	r2, [r7, #12]
 80197cc:	4413      	add	r3, r2
 80197ce:	61fb      	str	r3, [r7, #28]
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	3314      	adds	r3, #20
 80197d4:	60bb      	str	r3, [r7, #8]
 80197d6:	693b      	ldr	r3, [r7, #16]
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	68ba      	ldr	r2, [r7, #8]
 80197dc:	4413      	add	r3, r2
 80197de:	61bb      	str	r3, [r7, #24]
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	3b04      	subs	r3, #4
 80197e4:	61fb      	str	r3, [r7, #28]
 80197e6:	69fb      	ldr	r3, [r7, #28]
 80197e8:	681a      	ldr	r2, [r3, #0]
 80197ea:	69bb      	ldr	r3, [r7, #24]
 80197ec:	3b04      	subs	r3, #4
 80197ee:	61bb      	str	r3, [r7, #24]
 80197f0:	69bb      	ldr	r3, [r7, #24]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	d00a      	beq.n	801980e <__mcmp+0x76>
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	681a      	ldr	r2, [r3, #0]
 80197fc:	69bb      	ldr	r3, [r7, #24]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	429a      	cmp	r2, r3
 8019802:	d202      	bcs.n	801980a <__mcmp+0x72>
 8019804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019808:	e008      	b.n	801981c <__mcmp+0x84>
 801980a:	2301      	movs	r3, #1
 801980c:	e006      	b.n	801981c <__mcmp+0x84>
 801980e:	69fa      	ldr	r2, [r7, #28]
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	429a      	cmp	r2, r3
 8019814:	d900      	bls.n	8019818 <__mcmp+0x80>
 8019816:	e7e3      	b.n	80197e0 <__mcmp+0x48>
 8019818:	bf00      	nop
 801981a:	2300      	movs	r3, #0
 801981c:	4618      	mov	r0, r3
 801981e:	3724      	adds	r7, #36	; 0x24
 8019820:	46bd      	mov	sp, r7
 8019822:	bc80      	pop	{r7}
 8019824:	4770      	bx	lr

08019826 <__mdiff>:
 8019826:	b580      	push	{r7, lr}
 8019828:	b090      	sub	sp, #64	; 0x40
 801982a:	af00      	add	r7, sp, #0
 801982c:	60f8      	str	r0, [r7, #12]
 801982e:	60b9      	str	r1, [r7, #8]
 8019830:	607a      	str	r2, [r7, #4]
 8019832:	6879      	ldr	r1, [r7, #4]
 8019834:	68b8      	ldr	r0, [r7, #8]
 8019836:	f7ff ffaf 	bl	8019798 <__mcmp>
 801983a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801983e:	2b00      	cmp	r3, #0
 8019840:	d10c      	bne.n	801985c <__mdiff+0x36>
 8019842:	2100      	movs	r1, #0
 8019844:	68f8      	ldr	r0, [r7, #12]
 8019846:	f7ff fcc4 	bl	80191d2 <_Balloc>
 801984a:	6278      	str	r0, [r7, #36]	; 0x24
 801984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984e:	2201      	movs	r2, #1
 8019850:	611a      	str	r2, [r3, #16]
 8019852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019854:	2200      	movs	r2, #0
 8019856:	615a      	str	r2, [r3, #20]
 8019858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985a:	e092      	b.n	8019982 <__mdiff+0x15c>
 801985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801985e:	2b00      	cmp	r3, #0
 8019860:	da08      	bge.n	8019874 <__mdiff+0x4e>
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	627b      	str	r3, [r7, #36]	; 0x24
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	60bb      	str	r3, [r7, #8]
 801986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986c:	607b      	str	r3, [r7, #4]
 801986e:	2301      	movs	r3, #1
 8019870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019872:	e001      	b.n	8019878 <__mdiff+0x52>
 8019874:	2300      	movs	r3, #0
 8019876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	685b      	ldr	r3, [r3, #4]
 801987c:	4619      	mov	r1, r3
 801987e:	68f8      	ldr	r0, [r7, #12]
 8019880:	f7ff fca7 	bl	80191d2 <_Balloc>
 8019884:	6278      	str	r0, [r7, #36]	; 0x24
 8019886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801988a:	60da      	str	r2, [r3, #12]
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	691b      	ldr	r3, [r3, #16]
 8019890:	63bb      	str	r3, [r7, #56]	; 0x38
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	3314      	adds	r3, #20
 8019896:	633b      	str	r3, [r7, #48]	; 0x30
 8019898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801989a:	009b      	lsls	r3, r3, #2
 801989c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801989e:	4413      	add	r3, r2
 80198a0:	623b      	str	r3, [r7, #32]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	691b      	ldr	r3, [r3, #16]
 80198a6:	61fb      	str	r3, [r7, #28]
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	3314      	adds	r3, #20
 80198ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198ae:	69fb      	ldr	r3, [r7, #28]
 80198b0:	009b      	lsls	r3, r3, #2
 80198b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80198b4:	4413      	add	r3, r2
 80198b6:	61bb      	str	r3, [r7, #24]
 80198b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ba:	3314      	adds	r3, #20
 80198bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80198be:	2300      	movs	r3, #0
 80198c0:	637b      	str	r3, [r7, #52]	; 0x34
 80198c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	1ad2      	subs	r2, r2, r3
 80198d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198d2:	4413      	add	r3, r2
 80198d4:	617b      	str	r3, [r7, #20]
 80198d6:	697b      	ldr	r3, [r7, #20]
 80198d8:	141b      	asrs	r3, r3, #16
 80198da:	637b      	str	r3, [r7, #52]	; 0x34
 80198dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198de:	1d1a      	adds	r2, r3, #4
 80198e0:	633a      	str	r2, [r7, #48]	; 0x30
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	0c1a      	lsrs	r2, r3, #16
 80198e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198e8:	1d19      	adds	r1, r3, #4
 80198ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	0c1b      	lsrs	r3, r3, #16
 80198f0:	1ad2      	subs	r2, r2, r3
 80198f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198f4:	4413      	add	r3, r2
 80198f6:	613b      	str	r3, [r7, #16]
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	141b      	asrs	r3, r3, #16
 80198fc:	637b      	str	r3, [r7, #52]	; 0x34
 80198fe:	693b      	ldr	r3, [r7, #16]
 8019900:	041a      	lsls	r2, r3, #16
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	b29b      	uxth	r3, r3
 8019906:	ea42 0103 	orr.w	r1, r2, r3
 801990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801990c:	1d1a      	adds	r2, r3, #4
 801990e:	62ba      	str	r2, [r7, #40]	; 0x28
 8019910:	460a      	mov	r2, r1
 8019912:	601a      	str	r2, [r3, #0]
 8019914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019916:	69bb      	ldr	r3, [r7, #24]
 8019918:	429a      	cmp	r2, r3
 801991a:	d3d2      	bcc.n	80198c2 <__mdiff+0x9c>
 801991c:	e01e      	b.n	801995c <__mdiff+0x136>
 801991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	b29a      	uxth	r2, r3
 8019924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019926:	4413      	add	r3, r2
 8019928:	617b      	str	r3, [r7, #20]
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	141b      	asrs	r3, r3, #16
 801992e:	637b      	str	r3, [r7, #52]	; 0x34
 8019930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019932:	1d1a      	adds	r2, r3, #4
 8019934:	633a      	str	r2, [r7, #48]	; 0x30
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	0c1a      	lsrs	r2, r3, #16
 801993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801993c:	4413      	add	r3, r2
 801993e:	613b      	str	r3, [r7, #16]
 8019940:	693b      	ldr	r3, [r7, #16]
 8019942:	141b      	asrs	r3, r3, #16
 8019944:	637b      	str	r3, [r7, #52]	; 0x34
 8019946:	693b      	ldr	r3, [r7, #16]
 8019948:	041a      	lsls	r2, r3, #16
 801994a:	697b      	ldr	r3, [r7, #20]
 801994c:	b29b      	uxth	r3, r3
 801994e:	ea42 0103 	orr.w	r1, r2, r3
 8019952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019954:	1d1a      	adds	r2, r3, #4
 8019956:	62ba      	str	r2, [r7, #40]	; 0x28
 8019958:	460a      	mov	r2, r1
 801995a:	601a      	str	r2, [r3, #0]
 801995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801995e:	6a3b      	ldr	r3, [r7, #32]
 8019960:	429a      	cmp	r2, r3
 8019962:	d3dc      	bcc.n	801991e <__mdiff+0xf8>
 8019964:	e002      	b.n	801996c <__mdiff+0x146>
 8019966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019968:	3b01      	subs	r3, #1
 801996a:	63bb      	str	r3, [r7, #56]	; 0x38
 801996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801996e:	3b04      	subs	r3, #4
 8019970:	62bb      	str	r3, [r7, #40]	; 0x28
 8019972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d0f5      	beq.n	8019966 <__mdiff+0x140>
 801997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801997e:	611a      	str	r2, [r3, #16]
 8019980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019982:	4618      	mov	r0, r3
 8019984:	3740      	adds	r7, #64	; 0x40
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}

0801998a <__d2b>:
 801998a:	b590      	push	{r4, r7, lr}
 801998c:	b08f      	sub	sp, #60	; 0x3c
 801998e:	af00      	add	r7, sp, #0
 8019990:	60f8      	str	r0, [r7, #12]
 8019992:	e9c7 2300 	strd	r2, r3, [r7]
 8019996:	e9d7 2300 	ldrd	r2, r3, [r7]
 801999a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 801999e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80199a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80199a6:	2101      	movs	r1, #1
 80199a8:	68f8      	ldr	r0, [r7, #12]
 80199aa:	f7ff fc12 	bl	80191d2 <_Balloc>
 80199ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80199b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b2:	3314      	adds	r3, #20
 80199b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80199b6:	69fb      	ldr	r3, [r7, #28]
 80199b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80199bc:	613b      	str	r3, [r7, #16]
 80199be:	69fb      	ldr	r3, [r7, #28]
 80199c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80199c4:	61fb      	str	r3, [r7, #28]
 80199c6:	69fb      	ldr	r3, [r7, #28]
 80199c8:	0d1b      	lsrs	r3, r3, #20
 80199ca:	627b      	str	r3, [r7, #36]	; 0x24
 80199cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d003      	beq.n	80199da <__d2b+0x50>
 80199d2:	693b      	ldr	r3, [r7, #16]
 80199d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199d8:	613b      	str	r3, [r7, #16]
 80199da:	69bb      	ldr	r3, [r7, #24]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d02c      	beq.n	8019a3a <__d2b+0xb0>
 80199e0:	69bb      	ldr	r3, [r7, #24]
 80199e2:	617b      	str	r3, [r7, #20]
 80199e4:	f107 0314 	add.w	r3, r7, #20
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7ff fcf4 	bl	80193d6 <__lo0bits>
 80199ee:	6338      	str	r0, [r7, #48]	; 0x30
 80199f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d00e      	beq.n	8019a14 <__d2b+0x8a>
 80199f6:	693a      	ldr	r2, [r7, #16]
 80199f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199fa:	f1c3 0320 	rsb	r3, r3, #32
 80199fe:	409a      	lsls	r2, r3
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	431a      	orrs	r2, r3
 8019a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a06:	601a      	str	r2, [r3, #0]
 8019a08:	693a      	ldr	r2, [r7, #16]
 8019a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8019a10:	613b      	str	r3, [r7, #16]
 8019a12:	e002      	b.n	8019a1a <__d2b+0x90>
 8019a14:	697a      	ldr	r2, [r7, #20]
 8019a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a18:	601a      	str	r2, [r3, #0]
 8019a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a1c:	3304      	adds	r3, #4
 8019a1e:	693a      	ldr	r2, [r7, #16]
 8019a20:	601a      	str	r2, [r3, #0]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d001      	beq.n	8019a2c <__d2b+0xa2>
 8019a28:	2202      	movs	r2, #2
 8019a2a:	e000      	b.n	8019a2e <__d2b+0xa4>
 8019a2c:	2201      	movs	r2, #1
 8019a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a30:	611a      	str	r2, [r3, #16]
 8019a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a34:	691b      	ldr	r3, [r3, #16]
 8019a36:	637b      	str	r3, [r7, #52]	; 0x34
 8019a38:	e011      	b.n	8019a5e <__d2b+0xd4>
 8019a3a:	f107 0310 	add.w	r3, r7, #16
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7ff fcc9 	bl	80193d6 <__lo0bits>
 8019a44:	6338      	str	r0, [r7, #48]	; 0x30
 8019a46:	693a      	ldr	r2, [r7, #16]
 8019a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a4a:	601a      	str	r2, [r3, #0]
 8019a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a4e:	2201      	movs	r2, #1
 8019a50:	611a      	str	r2, [r3, #16]
 8019a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a54:	691b      	ldr	r3, [r3, #16]
 8019a56:	637b      	str	r3, [r7, #52]	; 0x34
 8019a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a5a:	3320      	adds	r3, #32
 8019a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8019a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d00c      	beq.n	8019a7e <__d2b+0xf4>
 8019a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a66:	f2a3 4233 	subw	r2, r3, #1075	; 0x433
 8019a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6c:	441a      	add	r2, r3
 8019a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a70:	601a      	str	r2, [r3, #0]
 8019a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a74:	f1c3 0235 	rsb	r2, r3, #53	; 0x35
 8019a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019a7a:	601a      	str	r2, [r3, #0]
 8019a7c:	e017      	b.n	8019aae <__d2b+0x124>
 8019a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a80:	f2a3 4232 	subw	r2, r3, #1074	; 0x432
 8019a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a86:	441a      	add	r2, r3
 8019a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019a8a:	601a      	str	r2, [r3, #0]
 8019a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a8e:	015c      	lsls	r4, r3, #5
 8019a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019a96:	3b01      	subs	r3, #1
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a9c:	4413      	add	r3, r2
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	f7ff fc6d 	bl	8019380 <__hi0bits>
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	1ae2      	subs	r2, r4, r3
 8019aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019aac:	601a      	str	r2, [r3, #0]
 8019aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	373c      	adds	r7, #60	; 0x3c
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd90      	pop	{r4, r7, pc}

08019ab8 <_raise_r>:
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b084      	sub	sp, #16
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
 8019ac0:	6039      	str	r1, [r7, #0]
 8019ac2:	683b      	ldr	r3, [r7, #0]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	db02      	blt.n	8019ace <_raise_r+0x16>
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	2b1f      	cmp	r3, #31
 8019acc:	dd05      	ble.n	8019ada <_raise_r+0x22>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	2216      	movs	r2, #22
 8019ad2:	601a      	str	r2, [r3, #0]
 8019ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ad8:	e037      	b.n	8019b4a <_raise_r+0x92>
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d102      	bne.n	8019aea <_raise_r+0x32>
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	60fb      	str	r3, [r7, #12]
 8019ae8:	e007      	b.n	8019afa <_raise_r+0x42>
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	009b      	lsls	r3, r3, #2
 8019af4:	4413      	add	r3, r2
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	60fb      	str	r3, [r7, #12]
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d10a      	bne.n	8019b16 <_raise_r+0x5e>
 8019b00:	6878      	ldr	r0, [r7, #4]
 8019b02:	f000 f826 	bl	8019b52 <_getpid_r>
 8019b06:	4603      	mov	r3, r0
 8019b08:	683a      	ldr	r2, [r7, #0]
 8019b0a:	4619      	mov	r1, r3
 8019b0c:	6878      	ldr	r0, [r7, #4]
 8019b0e:	f7f7 ff43 	bl	8011998 <_kill_r>
 8019b12:	4603      	mov	r3, r0
 8019b14:	e019      	b.n	8019b4a <_raise_r+0x92>
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2b01      	cmp	r3, #1
 8019b1a:	d101      	bne.n	8019b20 <_raise_r+0x68>
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	e014      	b.n	8019b4a <_raise_r+0x92>
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019b26:	d104      	bne.n	8019b32 <_raise_r+0x7a>
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	2216      	movs	r2, #22
 8019b2c:	601a      	str	r2, [r3, #0]
 8019b2e:	2301      	movs	r3, #1
 8019b30:	e00b      	b.n	8019b4a <_raise_r+0x92>
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	009b      	lsls	r3, r3, #2
 8019b3c:	4413      	add	r3, r2
 8019b3e:	2200      	movs	r2, #0
 8019b40:	601a      	str	r2, [r3, #0]
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	6838      	ldr	r0, [r7, #0]
 8019b46:	4798      	blx	r3
 8019b48:	2300      	movs	r3, #0
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3710      	adds	r7, #16
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}

08019b52 <_getpid_r>:
 8019b52:	b580      	push	{r7, lr}
 8019b54:	b084      	sub	sp, #16
 8019b56:	af00      	add	r7, sp, #0
 8019b58:	6078      	str	r0, [r7, #4]
 8019b5a:	f7f8 fcb7 	bl	80124cc <_getpid>
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	4618      	mov	r0, r3
 8019b64:	3710      	adds	r7, #16
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}

08019b6a <__ssprint_r>:
 8019b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b6c:	b089      	sub	sp, #36	; 0x24
 8019b6e:	af00      	add	r7, sp, #0
 8019b70:	60f8      	str	r0, [r7, #12]
 8019b72:	60b9      	str	r1, [r7, #8]
 8019b74:	4614      	mov	r4, r2
 8019b76:	2300      	movs	r3, #0
 8019b78:	603b      	str	r3, [r7, #0]
 8019b7a:	6826      	ldr	r6, [r4, #0]
 8019b7c:	2500      	movs	r5, #0
 8019b7e:	68a3      	ldr	r3, [r4, #8]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d107      	bne.n	8019b94 <__ssprint_r+0x2a>
 8019b84:	2300      	movs	r3, #0
 8019b86:	6063      	str	r3, [r4, #4]
 8019b88:	2300      	movs	r3, #0
 8019b8a:	e0b2      	b.n	8019cf2 <__ssprint_r+0x188>
 8019b8c:	6833      	ldr	r3, [r6, #0]
 8019b8e:	603b      	str	r3, [r7, #0]
 8019b90:	6875      	ldr	r5, [r6, #4]
 8019b92:	3608      	adds	r6, #8
 8019b94:	2d00      	cmp	r5, #0
 8019b96:	d0f9      	beq.n	8019b8c <__ssprint_r+0x22>
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	689b      	ldr	r3, [r3, #8]
 8019b9c:	607b      	str	r3, [r7, #4]
 8019b9e:	429d      	cmp	r5, r3
 8019ba0:	d36e      	bcc.n	8019c80 <__ssprint_r+0x116>
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	f403 6390 	and.w	r3, r3, #1152	; 0x480
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d066      	beq.n	8019c80 <__ssprint_r+0x116>
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	681a      	ldr	r2, [r3, #0]
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	691b      	ldr	r3, [r3, #16]
 8019bba:	1ad3      	subs	r3, r2, r3
 8019bbc:	617b      	str	r3, [r7, #20]
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	695a      	ldr	r2, [r3, #20]
 8019bc2:	4613      	mov	r3, r2
 8019bc4:	005b      	lsls	r3, r3, #1
 8019bc6:	4413      	add	r3, r2
 8019bc8:	0fda      	lsrs	r2, r3, #31
 8019bca:	4413      	add	r3, r2
 8019bcc:	105b      	asrs	r3, r3, #1
 8019bce:	61bb      	str	r3, [r7, #24]
 8019bd0:	697b      	ldr	r3, [r7, #20]
 8019bd2:	442b      	add	r3, r5
 8019bd4:	1c5a      	adds	r2, r3, #1
 8019bd6:	69bb      	ldr	r3, [r7, #24]
 8019bd8:	429a      	cmp	r2, r3
 8019bda:	d903      	bls.n	8019be4 <__ssprint_r+0x7a>
 8019bdc:	697b      	ldr	r3, [r7, #20]
 8019bde:	442b      	add	r3, r5
 8019be0:	3301      	adds	r3, #1
 8019be2:	61bb      	str	r3, [r7, #24]
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d01f      	beq.n	8019c34 <__ssprint_r+0xca>
 8019bf4:	69bb      	ldr	r3, [r7, #24]
 8019bf6:	4619      	mov	r1, r3
 8019bf8:	68f8      	ldr	r0, [r7, #12]
 8019bfa:	f7f1 fe43 	bl	800b884 <_malloc_r>
 8019bfe:	61f8      	str	r0, [r7, #28]
 8019c00:	69fb      	ldr	r3, [r7, #28]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d103      	bne.n	8019c0e <__ssprint_r+0xa4>
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	220c      	movs	r2, #12
 8019c0a:	601a      	str	r2, [r3, #0]
 8019c0c:	e063      	b.n	8019cd6 <__ssprint_r+0x16c>
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	691b      	ldr	r3, [r3, #16]
 8019c12:	697a      	ldr	r2, [r7, #20]
 8019c14:	4619      	mov	r1, r3
 8019c16:	69f8      	ldr	r0, [r7, #28]
 8019c18:	f7e7 fdc2 	bl	80017a0 <memcpy>
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019c26:	b21b      	sxth	r3, r3
 8019c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c2c:	b21a      	sxth	r2, r3
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	819a      	strh	r2, [r3, #12]
 8019c32:	e014      	b.n	8019c5e <__ssprint_r+0xf4>
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	691b      	ldr	r3, [r3, #16]
 8019c38:	69ba      	ldr	r2, [r7, #24]
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	68f8      	ldr	r0, [r7, #12]
 8019c3e:	f7f2 f997 	bl	800bf70 <_realloc_r>
 8019c42:	61f8      	str	r0, [r7, #28]
 8019c44:	69fb      	ldr	r3, [r7, #28]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d109      	bne.n	8019c5e <__ssprint_r+0xf4>
 8019c4a:	68bb      	ldr	r3, [r7, #8]
 8019c4c:	691b      	ldr	r3, [r3, #16]
 8019c4e:	4619      	mov	r1, r3
 8019c50:	68f8      	ldr	r0, [r7, #12]
 8019c52:	f7f7 f99b 	bl	8010f8c <_free_r>
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	220c      	movs	r2, #12
 8019c5a:	601a      	str	r2, [r3, #0]
 8019c5c:	e03b      	b.n	8019cd6 <__ssprint_r+0x16c>
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	69fa      	ldr	r2, [r7, #28]
 8019c62:	611a      	str	r2, [r3, #16]
 8019c64:	697b      	ldr	r3, [r7, #20]
 8019c66:	69fa      	ldr	r2, [r7, #28]
 8019c68:	441a      	add	r2, r3
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	601a      	str	r2, [r3, #0]
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	69ba      	ldr	r2, [r7, #24]
 8019c72:	615a      	str	r2, [r3, #20]
 8019c74:	607d      	str	r5, [r7, #4]
 8019c76:	69ba      	ldr	r2, [r7, #24]
 8019c78:	697b      	ldr	r3, [r7, #20]
 8019c7a:	1ad2      	subs	r2, r2, r3
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	609a      	str	r2, [r3, #8]
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	429d      	cmp	r5, r3
 8019c84:	d200      	bcs.n	8019c88 <__ssprint_r+0x11e>
 8019c86:	607d      	str	r5, [r7, #4]
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	687a      	ldr	r2, [r7, #4]
 8019c8e:	6839      	ldr	r1, [r7, #0]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f7fd fd66 	bl	8017762 <memmove>
 8019c96:	68bb      	ldr	r3, [r7, #8]
 8019c98:	689b      	ldr	r3, [r3, #8]
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	1a1a      	subs	r2, r3, r0
 8019c9e:	68bb      	ldr	r3, [r7, #8]
 8019ca0:	609a      	str	r2, [r3, #8]
 8019ca2:	68bb      	ldr	r3, [r7, #8]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	4602      	mov	r2, r0
 8019ca8:	441a      	add	r2, r3
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	601a      	str	r2, [r3, #0]
 8019cae:	462a      	mov	r2, r5
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	6839      	ldr	r1, [r7, #0]
 8019cb4:	4419      	add	r1, r3
 8019cb6:	6039      	str	r1, [r7, #0]
 8019cb8:	4613      	mov	r3, r2
 8019cba:	1aed      	subs	r5, r5, r3
 8019cbc:	68a3      	ldr	r3, [r4, #8]
 8019cbe:	1a9b      	subs	r3, r3, r2
 8019cc0:	60a3      	str	r3, [r4, #8]
 8019cc2:	68a3      	ldr	r3, [r4, #8]
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	f47f af65 	bne.w	8019b94 <__ssprint_r+0x2a>
 8019cca:	2300      	movs	r3, #0
 8019ccc:	60a3      	str	r3, [r4, #8]
 8019cce:	2300      	movs	r3, #0
 8019cd0:	6063      	str	r3, [r4, #4]
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	e00d      	b.n	8019cf2 <__ssprint_r+0x188>
 8019cd6:	68bb      	ldr	r3, [r7, #8]
 8019cd8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8019cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ce0:	b21a      	sxth	r2, r3
 8019ce2:	68bb      	ldr	r3, [r7, #8]
 8019ce4:	819a      	strh	r2, [r3, #12]
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	60a3      	str	r3, [r4, #8]
 8019cea:	2300      	movs	r3, #0
 8019cec:	6063      	str	r3, [r4, #4]
 8019cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3724      	adds	r7, #36	; 0x24
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019cfa <_user_strerror>:
 8019cfa:	b480      	push	{r7}
 8019cfc:	b085      	sub	sp, #20
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	60f8      	str	r0, [r7, #12]
 8019d02:	60b9      	str	r1, [r7, #8]
 8019d04:	607a      	str	r2, [r7, #4]
 8019d06:	2300      	movs	r3, #0
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3714      	adds	r7, #20
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bc80      	pop	{r7}
 8019d10:	4770      	bx	lr

08019d12 <__ascii_wctomb>:
 8019d12:	b480      	push	{r7}
 8019d14:	b087      	sub	sp, #28
 8019d16:	af00      	add	r7, sp, #0
 8019d18:	60f8      	str	r0, [r7, #12]
 8019d1a:	60b9      	str	r1, [r7, #8]
 8019d1c:	607a      	str	r2, [r7, #4]
 8019d1e:	603b      	str	r3, [r7, #0]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	617b      	str	r3, [r7, #20]
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d101      	bne.n	8019d2e <__ascii_wctomb+0x1c>
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	e00d      	b.n	8019d4a <__ascii_wctomb+0x38>
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	2bff      	cmp	r3, #255	; 0xff
 8019d32:	d905      	bls.n	8019d40 <__ascii_wctomb+0x2e>
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	228a      	movs	r2, #138	; 0x8a
 8019d38:	601a      	str	r2, [r3, #0]
 8019d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d3e:	e004      	b.n	8019d4a <__ascii_wctomb+0x38>
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	b2da      	uxtb	r2, r3
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	701a      	strb	r2, [r3, #0]
 8019d48:	2301      	movs	r3, #1
 8019d4a:	4618      	mov	r0, r3
 8019d4c:	371c      	adds	r7, #28
 8019d4e:	46bd      	mov	sp, r7
 8019d50:	bc80      	pop	{r7}
 8019d52:	4770      	bx	lr
