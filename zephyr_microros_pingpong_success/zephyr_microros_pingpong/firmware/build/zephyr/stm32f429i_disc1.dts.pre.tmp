/dts-v1/;
/ {
 #address-cells = <1>;
 #size-cells = <1>;
 chosen { };
 aliases { };
};
/ {
 soc {
  #address-cells = <1>;
  #size-cells = <1>;
  compatible = "simple-bus";
  interrupt-parent = <&nvic>;
  ranges;
  nvic: interrupt-controller@e000e100 {
   compatible = "arm,v7m-nvic";
   reg = <0xe000e100 0xc00>;
   interrupt-controller;
   #interrupt-cells = <2>;
  };
  systick: timer@e000e010 {
   compatible = "arm,armv7m-systick";
   reg = <0xe000e010 0x10>;
  };
 };
};
/ {
 chosen {
  zephyr,flash-controller = &flash;
 };
 cpus {
  #address-cells = <1>;
  #size-cells = <0>;
  cpu@0 {
   device_type = "cpu";
   compatible = "arm,cortex-m4f";
   reg = <0>;
  };
 };
 sram0: memory@20000000 {
  compatible = "mmio-sram";
 };
 soc {
  flash: flash-controller@40023c00 {
   compatible = "st,stm32-flash-controller", "st,stm32f4-flash-controller";
   label = "FLASH_CTRL";
   reg = <0x40023c00 0x400>;
   interrupts = <4 0>;
   #address-cells = <1>;
   #size-cells = <1>;
   flash0: flash@8000000 {
    compatible = "soc-nv-flash";
    label = "FLASH_STM32";
    write-block-size = <1>;
   };
  };
  rcc: rcc@40023800 {
   compatible = "st,stm32-rcc";
   #clock-cells = <2>;
   reg = <0x40023800 0x400>;
   label = "STM32_CLK_RCC";
  };
  pinctrl: pin-controller@40020000 {
   compatible = "st,stm32-pinctrl";
   #address-cells = <1>;
   #size-cells = <1>;
   reg = <0x40020000 0x2000>;
   gpioa: gpio@40020000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020000 0x400>;
    clocks = <&rcc 0 0x00000001>;
    label = "GPIOA";
   };
   gpiob: gpio@40020400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020400 0x400>;
    clocks = <&rcc 0 0x00000002>;
    label = "GPIOB";
   };
   gpioc: gpio@40020800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020800 0x400>;
    clocks = <&rcc 0 0x00000004>;
    label = "GPIOC";
   };
   gpiod: gpio@40020c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40020c00 0x400>;
    clocks = <&rcc 0 0x00000008>;
    label = "GPIOD";
   };
   gpioe: gpio@40021000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021000 0x400>;
    clocks = <&rcc 0 0x00000010>;
    label = "GPIOE";
   };
   gpioh: gpio@40021c00 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021c00 0x400>;
    clocks = <&rcc 0 0x00000080>;
    label = "GPIOH";
   };
  };
  iwdg: watchdog@40003000 {
   compatible = "st,stm32-watchdog";
   reg = <0x40003000 0x400>;
   label = "IWDG";
   status = "disabled";
  };
  wwdg: watchdog@40002c00 {
   compatible = "st,stm32-window-watchdog";
   reg = <0x40002C00 0x400>;
   clocks = <&rcc 2 0x00000800>;
   label = "WWDG";
   interrupts = <0 7>;
   status = "disabled";
  };
  usart1: serial@40011000 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40011000 0x400>;
   clocks = <&rcc 3 0x00000010>;
   interrupts = <37 0>;
   status = "disabled";
   label = "UART_1";
  };
  usart2: serial@40004400 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004400 0x400>;
   clocks = <&rcc 2 0x00020000>;
   interrupts = <38 0>;
   status = "disabled";
   label = "UART_2";
  };
  usart6: serial@40011400 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40011400 0x400>;
   clocks = <&rcc 3 0x00000020>;
   interrupts = <71 0>;
   status = "disabled";
   label = "UART_6";
  };
  i2c1: i2c@40005400 {
   compatible = "st,stm32-i2c-v1";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005400 0x400>;
   clocks = <&rcc 2 0x00200000>;
   interrupts = <31 0>, <32 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_1";
  };
  i2c2: i2c@40005800 {
   compatible = "st,stm32-i2c-v1";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005800 0x400>;
   clocks = <&rcc 2 0x00400000>;
   interrupts = <33 0>, <34 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_2";
  };
  i2c3: i2c@40005c00 {
   compatible = "st,stm32-i2c-v1";
   clock-frequency = <100000>;
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40005c00 0x400>;
   clocks = <&rcc 2 0x00800000>;
   interrupts = <72 0>, <73 0>;
   interrupt-names = "event", "error";
   status = "disabled";
   label= "I2C_3";
  };
  spi1: spi@40013000 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   clocks = <&rcc 3 0x00001000>;
   interrupts = <35 5>;
   status = "disabled";
   label = "SPI_1";
  };
  i2s1: i2s@40013000 {
   compatible = "st,stm32-i2s";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013000 0x400>;
   clocks = <&rcc 3 0x00001000>;
   interrupts = <35 5>;
   dmas = <&dma2 3 3 0x400 0x3
    &dma2 2 3 0x400 0x3>;
   dma-names = "tx", "rx";
   status = "disabled";
   label = "I2S_1";
  };
  usbotg_fs: usb@50000000 {
   compatible = "st,stm32-otgfs";
   reg = <0x50000000 0x40000>;
   interrupts = <67 0>;
   interrupt-names = "otgfs";
   num-bidir-endpoints = <4>;
   ram-size = <1280>;
   maximum-speed = "full-speed";
   phys = <&otgfs_phy>;
   clocks = <&rcc 1 0x00000080>;
   status = "disabled";
   label= "OTGFS";
  };
  timers1: timers@40010000 {
   compatible = "st,stm32-timers";
   reg = <0x40010000 0x400>;
   clocks = <&rcc 3 0x00000001>;
   interrupts = <24 0>, <25 0>, <26 0>, <27 0>;
   interrupt-names = "brk", "up", "trgcom", "cc";
   status = "disabled";
   label = "TIMERS_1";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_1";
    #pwm-cells = <3>;
   };
  };
  timers2: timers@40000000 {
   compatible = "st,stm32-timers";
   reg = <0x40000000 0x400>;
   clocks = <&rcc 2 0x00000001>;
   interrupts = <28 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_2";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_2";
    #pwm-cells = <3>;
   };
  };
  timers3: timers@40000400 {
   compatible = "st,stm32-timers";
   reg = <0x40000400 0x400>;
   clocks = <&rcc 2 0x00000002>;
   interrupts = <29 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_3";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_3";
    #pwm-cells = <3>;
   };
  };
  timers4: timers@40000800 {
   compatible = "st,stm32-timers";
   reg = <0x40000800 0x400>;
   clocks = <&rcc 2 0x00000004>;
   interrupts = <30 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_4";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_4";
    #pwm-cells = <3>;
   };
  };
  timers5: timers@40000c00 {
   compatible = "st,stm32-timers";
   reg = <0x40000c00 0x400>;
   clocks = <&rcc 2 0x00000008>;
   interrupts = <50 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_5";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <0>;
    label = "PWM_5";
    #pwm-cells = <3>;
   };
  };
  timers9: timers@40014000 {
   compatible = "st,stm32-timers";
   reg = <0x40014000 0x400>;
   clocks = <&rcc 3 0x00010000>;
   interrupts = <24 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_9";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_9";
    #pwm-cells = <3>;
   };
  };
  timers10: timers@40014400 {
   compatible = "st,stm32-timers";
   reg = <0x40014400 0x400>;
   clocks = <&rcc 3 0x00020000>;
   interrupts = <25 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_10";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_10";
    #pwm-cells = <3>;
   };
  };
  timers11: timers@40014800 {
   compatible = "st,stm32-timers";
   reg = <0x40014800 0x400>;
   clocks = <&rcc 3 0x00040000>;
   interrupts = <26 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_11";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_11";
    #pwm-cells = <3>;
   };
  };
  rtc: rtc@40002800 {
   compatible = "st,stm32-rtc";
   reg = <0x40002800 0x400>;
   interrupts = <41 0>;
   clocks = <&rcc 2 0x10000000>;
   prescaler = <32768>;
   status = "disabled";
   label = "RTC_0";
  };
  adc1: adc@40012000 {
   compatible = "st,stm32-adc";
   reg = <0x40012000 0x400>;
   clocks = <&rcc 3 0x00000100>;
   interrupts = <18 0>;
   status = "disabled";
   label = "ADC_1";
   #io-channel-cells = <1>;
  };
  dma1: dma@40026000 {
   compatible = "st,stm32-dma-v1";
   #dma-cells = <4>;
   reg = <0x40026000 0x400>;
   interrupts = <11 0 12 0 13 0 14 0 15 0 16 0 17 0 47 0>;
   clocks = <&rcc 0 0x200000>;
   status = "disabled";
   label = "DMA_1";
  };
  dma2: dma@40026400 {
   compatible = "st,stm32-dma-v1";
   #dma-cells = <4>;
   reg = <0x40026400 0x400>;
   interrupts = <56 0 57 0 58 0 59 0 60 0 68 0 69 0 70 0>;
   clocks = <&rcc 0 0x400000>;
   st,mem2mem;
   status = "disabled";
   label = "DMA_2";
  };
 };
 otgfs_phy: otgfs_phy {
  compatible = "usb-nop-xceiv";
  #phy-cells = <0>;
  label = "OTGFS_PHY";
 };
};
&nvic {
 arm,num-irq-priority-bits = <4>;
};
/ {
 soc {
  spi2: spi@40003800 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   clocks = <&rcc 2 0x00004000>;
   interrupts = <36 5>;
   status = "disabled";
   label = "SPI_2";
  };
  spi3: spi@40003c00 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003c00 0x400>;
   clocks = <&rcc 2 0x00008000>;
   interrupts = <51 5>;
   status = "disabled";
   label = "SPI_3";
  };
  spi4: spi@40013400 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013400 0x400>;
   clocks = <&rcc 3 0x00002000>;
   interrupts = <84 5>;
   status = "disabled";
   label = "SPI_4";
  };
  i2s2: i2s@40003800 {
   compatible = "st,stm32-i2s";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003800 0x400>;
   clocks = <&rcc 2 0x00004000>;
   interrupts = <36 5>;
   dmas = <&dma1 4 0 0x400 0x3
    &dma1 3 0 0x400 0x3>;
   dma-names = "tx", "rx";
   status = "disabled";
   label = "I2S_2";
  };
  i2s3: i2s@40003c00 {
   compatible = "st,stm32-i2s";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40003c00 0x400>;
   clocks = <&rcc 2 0x00008000>;
   interrupts = <51 5>;
   dmas = <&dma1 5 0 0x400 0x3
    &dma1 0 0 0x400 0x3>;
   dma-names = "tx", "rx";
   status = "disabled";
   label = "I2S_3";
  };
 };
};
/ {
 chosen {
  zephyr,entropy = &rng;
 };
 soc {
  pinctrl: pin-controller@40020000 {
   reg = <0x40020000 0x2400>;
   gpiof: gpio@40021400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021400 0x400>;
    clocks = <&rcc 0 0x00000020>;
    label = "GPIOF";
   };
   gpiog: gpio@40021800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40021800 0x400>;
    clocks = <&rcc 0 0x00000040>;
    label = "GPIOG";
   };
   gpioi: gpio@40022000 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40022000 0x400>;
    clocks = <&rcc 0 0x00000100>;
    label = "GPIOI";
   };
  };
  usart3: serial@40004800 {
   compatible = "st,stm32-usart", "st,stm32-uart";
   reg = <0x40004800 0x400>;
   clocks = <&rcc 2 0x00040000>;
   interrupts = <39 0>;
   status = "disabled";
   label = "UART_3";
  };
  uart4: serial@40004c00 {
   compatible ="st,stm32-uart";
   reg = <0x40004c00 0x400>;
   clocks = <&rcc 2 0x00080000>;
   interrupts = <52 0>;
   status = "disabled";
   label = "UART_4";
  };
  uart5: serial@40005000 {
   compatible = "st,stm32-uart";
   reg = <0x40005000 0x400>;
   clocks = <&rcc 2 0x00100000>;
   interrupts = <53 0>;
   status = "disabled";
   label = "UART_5";
  };
  timers6: timers@40001000 {
   compatible = "st,stm32-timers";
   reg = <0x40001000 0x400>;
   clocks = <&rcc 2 0x00000010>;
   interrupts = <54 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_6";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_6";
    #pwm-cells = <3>;
   };
  };
  timers7: timers@40001400 {
   compatible = "st,stm32-timers";
   reg = <0x40001400 0x400>;
   clocks = <&rcc 2 0x00000020>;
   interrupts = <55 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_7";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_7";
    #pwm-cells = <3>;
   };
  };
  timers8: timers@40010400 {
   compatible = "st,stm32-timers";
   reg = <0x40010400 0x400>;
   clocks = <&rcc 3 0x00000002>;
   interrupts = <43 0>, <44 0>, <45 0>, <46 0>;
   interrupt-names = "brk", "up", "trgcom", "cc";
   status = "disabled";
   label = "TIMERS_8";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_8";
    #pwm-cells = <3>;
   };
  };
  timers12: timers@40001800 {
   compatible = "st,stm32-timers";
   reg = <0x40001800 0x400>;
   clocks = <&rcc 2 0x00000040>;
   interrupts = <43 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_12";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_12";
    #pwm-cells = <3>;
   };
  };
  timers13: timers@40001c00 {
   compatible = "st,stm32-timers";
   reg = <0x40001c00 0x400>;
   clocks = <&rcc 2 0x00000080>;
   interrupts = <44 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_13";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_13";
    #pwm-cells = <3>;
   };
  };
  timers14: timers@40002000 {
   compatible = "st,stm32-timers";
   reg = <0x40002000 0x400>;
   clocks = <&rcc 2 0x00000100>;
   interrupts = <45 0>;
   interrupt-names = "global";
   status = "disabled";
   label = "TIMERS_14";
   pwm {
    compatible = "st,stm32-pwm";
    status = "disabled";
    st,prescaler = <10000>;
    label = "PWM_14";
    #pwm-cells = <3>;
   };
  };
  usbotg_hs: usb@40040000 {
   compatible = "st,stm32-otghs";
   reg = <0x40040000 0x40000>;
   interrupts = <77 0>, <74 0>, <75 0>;
   interrupt-names = "otghs", "ep1_out", "ep1_in";
   num-bidir-endpoints = <6>;
   ram-size = <4096>;
   maximum-speed = "full-speed";
   phys = <&otghs_fs_phy>;
   clocks = <&rcc 0 0x20000000>;
   status = "disabled";
   label= "OTGHS";
  };
  can1: can@40006400 {
   compatible = "st,stm32-can";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40006400 0x400>;
   interrupts = <19 0>, <20 0>, <21 0>, <22 0>;
   interrupt-names = "TX", "RX0", "RX1", "SCE";
   clocks = <&rcc 2 0x02000000>;
   status = "disabled";
   label = "CAN_1";
   bus-speed = <125000>;
   sjw = <1>;
   prop-seg = <0>;
   phase-seg1 = <5>;
   phase-seg2 = <6>;
  };
  can2: can@40006800 {
   compatible = "st,stm32-can";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40006800 0x400>;
   interrupts = <63 0>, <64 0>, <65 0>, <66 0>;
   interrupt-names = "TX", "RX0", "RX1", "SCE";
   clocks = <&rcc 2 0x06000000>;
   master-can-reg = <0x40006400>;
   status = "disabled";
   label = "CAN_2";
   bus-speed = <125000>;
   sjw = <1>;
   prop-seg = <0>;
   phase-seg1 = <5>;
   phase-seg2 = <6>;
  };
  rng: rng@50060800 {
   compatible = "st,stm32-rng";
   reg = <0x50060800 0x400>;
   interrupts = <80 0>;
   clocks = <&rcc 1 0x00000040>;
   status = "disabled";
   label = "RNG";
  };
 };
 otghs_fs_phy: otghs_fs_phy {
  compatible = "usb-nop-xceiv";
  #phy-cells = <0>;
  label = "OTGHS_FS_PHY";
 };
};
/ {
 soc {
  mac: ethernet@40028000 {
   compatible = "st,stm32-ethernet";
   reg = <0x40028000 0x8000>;
   label = "ETH_0";
   interrupts = <61 0>;
   clock-names = "stmmaceth", "mac-clk-tx",
          "mac-clk-rx", "mac-clk-ptp";
   clocks = <&rcc 0 0x02000000>,
     <&rcc 0 0x04000000>,
     <&rcc 0 0x08000000>,
     <&rcc 0 0x10000000>;
   status = "disabled";
  };
 };
};
/ {
 soc {
  pinctrl: pin-controller@40020000 {
   reg = <0x40020000 0x2C00>;
   gpioj: gpio@40022400 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40022400 0x400>;
    clocks = <&rcc 0 0x00000200>;
    label = "GPIOJ";
   };
   gpiok: gpio@40022800 {
    compatible = "st,stm32-gpio";
    gpio-controller;
    #gpio-cells = <2>;
    reg = <0x40022800 0x400>;
    clocks = <&rcc 0 0x00000400>;
    label = "GPIOK";
   };
  };
  uart7: serial@40007800 {
   compatible = "st,stm32-uart";
   reg = <0x40007800 0x400>;
   clocks = <&rcc 2 0x40000000>;
   interrupts = <82 0>;
   status = "disabled";
   label = "UART_7";
  };
  uart8: serial@40007c00 {
   compatible = "st,stm32-uart";
   reg = <0x40007c00 0x400>;
   clocks = <&rcc 2 0x80000000>;
   interrupts = <83 0>;
   status = "disabled";
   label = "UART_8";
  };
  spi4: spi@40013400 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40013400 0x400>;
   clocks = <&rcc 3 0x00002000>;
   interrupts = <84 5>;
   status = "disabled";
   label = "SPI_4";
  };
   spi5: spi@40015000 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40015000 0x400>;
   clocks = <&rcc 3 0x00100000>;
   interrupts = <85 5>;
   status = "disabled";
   label = "SPI_5";
  };
  spi6: spi@40015400 {
   compatible = "st,stm32-spi";
   #address-cells = <1>;
   #size-cells = <0>;
   reg = <0x40015400 0x400>;
   clocks = <&rcc 3 0x00200000>;
   interrupts = <86 5>;
   status = "disabled";
   label = "SPI_6";
  };
 };
};
/ {
 ccm0: memory@10000000 {
  compatible = "st,stm32-ccm";
  reg = <0x10000000 ((64) * 1024)>;
 };
 sram0: memory@20000000 {
  reg = <0x20000000 ((192) * 1024)>;
 };
 soc {
  flash-controller@40023c00 {
   flash0: flash@8000000 {
    reg = <0x08000000 ((2048) * 1024)>;
   };
  };
 };
};
/ {
 soc {
  pinctrl: pin-controller@40020000 {
   adc1_in0_pa0: adc1_in0_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc1_in1_pa1: adc1_in1_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc1_in2_pa2: adc1_in2_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc1_in3_pa3: adc1_in3_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc1_in4_pa4: adc1_in4_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc1_in5_pa5: adc1_in5_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc1_in6_pa6: adc1_in6_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x10))>;
   };
   adc1_in7_pa7: adc1_in7_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x10))>;
   };
   adc1_in8_pb0: adc1_in8_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc1_in9_pb1: adc1_in9_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc1_in10_pc0: adc1_in10_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc1_in11_pc1: adc1_in11_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc1_in12_pc2: adc1_in12_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc1_in13_pc3: adc1_in13_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc1_in14_pc4: adc1_in14_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc1_in15_pc5: adc1_in15_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc2_in0_pa0: adc2_in0_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc2_in1_pa1: adc2_in1_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc2_in2_pa2: adc2_in2_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc2_in3_pa3: adc2_in3_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc2_in4_pa4: adc2_in4_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc2_in5_pa5: adc2_in5_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc2_in6_pa6: adc2_in6_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x10))>;
   };
   adc2_in7_pa7: adc2_in7_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x10))>;
   };
   adc2_in8_pb0: adc2_in8_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc2_in9_pb1: adc2_in9_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc2_in10_pc0: adc2_in10_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc2_in11_pc1: adc2_in11_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc2_in12_pc2: adc2_in12_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc2_in13_pc3: adc2_in13_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc2_in14_pc4: adc2_in14_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc2_in15_pc5: adc2_in15_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc3_in0_pa0: adc3_in0_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc3_in1_pa1: adc3_in1_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc3_in2_pa2: adc3_in2_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc3_in3_pa3: adc3_in3_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc3_in10_pc0: adc3_in10_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0x10))>;
   };
   adc3_in11_pc1: adc3_in11_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0x10))>;
   };
   adc3_in12_pc2: adc3_in12_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x10))>;
   };
   adc3_in13_pc3: adc3_in13_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc3_in9_pf3: adc3_in9_pf3 {
    pinmux = <(((((('F') - 'A') * 0x10 + (3))) << 8) | (0x10))>;
   };
   adc3_in14_pf4: adc3_in14_pf4 {
    pinmux = <(((((('F') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   adc3_in15_pf5: adc3_in15_pf5 {
    pinmux = <(((((('F') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   adc3_in4_pf6: adc3_in4_pf6 {
    pinmux = <(((((('F') - 'A') * 0x10 + (6))) << 8) | (0x10))>;
   };
   adc3_in5_pf7: adc3_in5_pf7 {
    pinmux = <(((((('F') - 'A') * 0x10 + (7))) << 8) | (0x10))>;
   };
   adc3_in6_pf8: adc3_in6_pf8 {
    pinmux = <(((((('F') - 'A') * 0x10 + (8))) << 8) | (0x10))>;
   };
   adc3_in7_pf9: adc3_in7_pf9 {
    pinmux = <(((((('F') - 'A') * 0x10 + (9))) << 8) | (0x10))>;
   };
   adc3_in8_pf10: adc3_in8_pf10 {
    pinmux = <(((((('F') - 'A') * 0x10 + (10))) << 8) | (0x10))>;
   };
   can1_rx_pa11: can1_rx_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x9))>;
    bias-pull-up;
   };
   can1_rx_pb8: can1_rx_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x9))>;
    bias-pull-up;
   };
   can1_rx_pd0: can1_rx_pd0 {
    pinmux = <(((((('D') - 'A') * 0x10 + (0))) << 8) | (0x9))>;
    bias-pull-up;
   };
   can2_rx_pb5: can2_rx_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x9))>;
    bias-pull-up;
   };
   can2_rx_pb12: can2_rx_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x9))>;
    bias-pull-up;
   };
   can1_tx_pa12: can1_tx_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x9))>;
   };
   can1_tx_pb9: can1_tx_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x9))>;
   };
   can1_tx_pd1: can1_tx_pd1 {
    pinmux = <(((((('D') - 'A') * 0x10 + (1))) << 8) | (0x9))>;
   };
   can2_tx_pb6: can2_tx_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x9))>;
   };
   can2_tx_pb13: can2_tx_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x9))>;
   };
   dac_out1_pa4: dac_out1_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x10))>;
   };
   dac_out2_pa5: dac_out2_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x10))>;
   };
   eth_col_pa3: eth_col_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_crs_pa0: eth_crs_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_crs_dv_pa7: eth_crs_dv_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_mdc_pc1: eth_mdc_pc1 {
    pinmux = <(((((('C') - 'A') * 0x10 + (1))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_mdio_pa2: eth_mdio_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_pps_out_pb5: eth_pps_out_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_pps_out_pg8: eth_pps_out_pg8 {
    pinmux = <(((((('G') - 'A') * 0x10 + (8))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_ref_clk_pa1: eth_ref_clk_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rxd0_pc4: eth_rxd0_pc4 {
    pinmux = <(((((('C') - 'A') * 0x10 + (4))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rxd1_pc5: eth_rxd1_pc5 {
    pinmux = <(((((('C') - 'A') * 0x10 + (5))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rxd2_pb0: eth_rxd2_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rxd3_pb1: eth_rxd3_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rx_clk_pa1: eth_rx_clk_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rx_dv_pa7: eth_rx_dv_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_rx_er_pb10: eth_rx_er_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd0_pb12: eth_txd0_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd0_pg13: eth_txd0_pg13 {
    pinmux = <(((((('G') - 'A') * 0x10 + (13))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd1_pb13: eth_txd1_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd1_pg14: eth_txd1_pg14 {
    pinmux = <(((((('G') - 'A') * 0x10 + (14))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd2_pc2: eth_txd2_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd3_pb8: eth_txd3_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_txd3_pe2: eth_txd3_pe2 {
    pinmux = <(((((('E') - 'A') * 0x10 + (2))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_tx_clk_pc3: eth_tx_clk_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_tx_en_pb11: eth_tx_en_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   eth_tx_en_pg11: eth_tx_en_pg11 {
    pinmux = <(((((('G') - 'A') * 0x10 + (11))) << 8) | (0xb))>;
    slew-rate = "very-high-speed";
   };
   fmc_sdcke1_pb5: fmc_sdcke1_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdne1_pb6: fmc_sdne1_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_nl_pb7: fmc_nl_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdnwe_pc0: fmc_sdnwe_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdne0_pc2: fmc_sdne0_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdcke0_pc3: fmc_sdcke0_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d2_pd0: fmc_d2_pd0 {
    pinmux = <(((((('D') - 'A') * 0x10 + (0))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d3_pd1: fmc_d3_pd1 {
    pinmux = <(((((('D') - 'A') * 0x10 + (1))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_clk_pd3: fmc_clk_pd3 {
    pinmux = <(((((('D') - 'A') * 0x10 + (3))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_noe_pd4: fmc_noe_pd4 {
    pinmux = <(((((('D') - 'A') * 0x10 + (4))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_nwe_pd5: fmc_nwe_pd5 {
    pinmux = <(((((('D') - 'A') * 0x10 + (5))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_nwait_pd6: fmc_nwait_pd6 {
    pinmux = <(((((('D') - 'A') * 0x10 + (6))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_ne1_pd7: fmc_ne1_pd7 {
    pinmux = <(((((('D') - 'A') * 0x10 + (7))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d13_pd8: fmc_d13_pd8 {
    pinmux = <(((((('D') - 'A') * 0x10 + (8))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d14_pd9: fmc_d14_pd9 {
    pinmux = <(((((('D') - 'A') * 0x10 + (9))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d15_pd10: fmc_d15_pd10 {
    pinmux = <(((((('D') - 'A') * 0x10 + (10))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a16_pd11: fmc_a16_pd11 {
    pinmux = <(((((('D') - 'A') * 0x10 + (11))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a17_pd12: fmc_a17_pd12 {
    pinmux = <(((((('D') - 'A') * 0x10 + (12))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a18_pd13: fmc_a18_pd13 {
    pinmux = <(((((('D') - 'A') * 0x10 + (13))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d0_pd14: fmc_d0_pd14 {
    pinmux = <(((((('D') - 'A') * 0x10 + (14))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d1_pd15: fmc_d1_pd15 {
    pinmux = <(((((('D') - 'A') * 0x10 + (15))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_nbl0_pe0: fmc_nbl0_pe0 {
    pinmux = <(((((('E') - 'A') * 0x10 + (0))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_nbl1_pe1: fmc_nbl1_pe1 {
    pinmux = <(((((('E') - 'A') * 0x10 + (1))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a23_pe2: fmc_a23_pe2 {
    pinmux = <(((((('E') - 'A') * 0x10 + (2))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a19_pe3: fmc_a19_pe3 {
    pinmux = <(((((('E') - 'A') * 0x10 + (3))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a20_pe4: fmc_a20_pe4 {
    pinmux = <(((((('E') - 'A') * 0x10 + (4))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a21_pe5: fmc_a21_pe5 {
    pinmux = <(((((('E') - 'A') * 0x10 + (5))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a22_pe6: fmc_a22_pe6 {
    pinmux = <(((((('E') - 'A') * 0x10 + (6))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d4_pe7: fmc_d4_pe7 {
    pinmux = <(((((('E') - 'A') * 0x10 + (7))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d5_pe8: fmc_d5_pe8 {
    pinmux = <(((((('E') - 'A') * 0x10 + (8))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d6_pe9: fmc_d6_pe9 {
    pinmux = <(((((('E') - 'A') * 0x10 + (9))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d7_pe10: fmc_d7_pe10 {
    pinmux = <(((((('E') - 'A') * 0x10 + (10))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d8_pe11: fmc_d8_pe11 {
    pinmux = <(((((('E') - 'A') * 0x10 + (11))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d9_pe12: fmc_d9_pe12 {
    pinmux = <(((((('E') - 'A') * 0x10 + (12))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d10_pe13: fmc_d10_pe13 {
    pinmux = <(((((('E') - 'A') * 0x10 + (13))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d11_pe14: fmc_d11_pe14 {
    pinmux = <(((((('E') - 'A') * 0x10 + (14))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_d12_pe15: fmc_d12_pe15 {
    pinmux = <(((((('E') - 'A') * 0x10 + (15))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a0_pf0: fmc_a0_pf0 {
    pinmux = <(((((('F') - 'A') * 0x10 + (0))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a1_pf1: fmc_a1_pf1 {
    pinmux = <(((((('F') - 'A') * 0x10 + (1))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a2_pf2: fmc_a2_pf2 {
    pinmux = <(((((('F') - 'A') * 0x10 + (2))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a3_pf3: fmc_a3_pf3 {
    pinmux = <(((((('F') - 'A') * 0x10 + (3))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a4_pf4: fmc_a4_pf4 {
    pinmux = <(((((('F') - 'A') * 0x10 + (4))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a5_pf5: fmc_a5_pf5 {
    pinmux = <(((((('F') - 'A') * 0x10 + (5))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdnras_pf11: fmc_sdnras_pf11 {
    pinmux = <(((((('F') - 'A') * 0x10 + (11))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a6_pf12: fmc_a6_pf12 {
    pinmux = <(((((('F') - 'A') * 0x10 + (12))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a7_pf13: fmc_a7_pf13 {
    pinmux = <(((((('F') - 'A') * 0x10 + (13))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a8_pf14: fmc_a8_pf14 {
    pinmux = <(((((('F') - 'A') * 0x10 + (14))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a9_pf15: fmc_a9_pf15 {
    pinmux = <(((((('F') - 'A') * 0x10 + (15))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a10_pg0: fmc_a10_pg0 {
    pinmux = <(((((('G') - 'A') * 0x10 + (0))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a11_pg1: fmc_a11_pg1 {
    pinmux = <(((((('G') - 'A') * 0x10 + (1))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a12_pg2: fmc_a12_pg2 {
    pinmux = <(((((('G') - 'A') * 0x10 + (2))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a13_pg3: fmc_a13_pg3 {
    pinmux = <(((((('G') - 'A') * 0x10 + (3))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a14_pg4: fmc_a14_pg4 {
    pinmux = <(((((('G') - 'A') * 0x10 + (4))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a15_pg5: fmc_a15_pg5 {
    pinmux = <(((((('G') - 'A') * 0x10 + (5))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdclk_pg8: fmc_sdclk_pg8 {
    pinmux = <(((((('G') - 'A') * 0x10 + (8))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_ne2_pg9: fmc_ne2_pg9 {
    pinmux = <(((((('G') - 'A') * 0x10 + (9))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_ne3_pg10: fmc_ne3_pg10 {
    pinmux = <(((((('G') - 'A') * 0x10 + (10))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_ne4_pg12: fmc_ne4_pg12 {
    pinmux = <(((((('G') - 'A') * 0x10 + (12))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a24_pg13: fmc_a24_pg13 {
    pinmux = <(((((('G') - 'A') * 0x10 + (13))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_a25_pg14: fmc_a25_pg14 {
    pinmux = <(((((('G') - 'A') * 0x10 + (14))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   fmc_sdncas_pg15: fmc_sdncas_pg15 {
    pinmux = <(((((('G') - 'A') * 0x10 + (15))) << 8) | (0xc))>;
    bias-pull-up;
    slew-rate = "very-high-speed";
   };
   i2c1_scl_pb6: i2c1_scl_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_scl_pb8: i2c1_scl_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pb10: i2c2_scl_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_scl_pf1: i2c2_scl_pf1 {
    pinmux = <(((((('F') - 'A') * 0x10 + (1))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_scl_pa8: i2c3_scl_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb7: i2c1_sda_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c1_sda_pb9: i2c1_sda_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pb11: i2c2_sda_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c2_sda_pf0: i2c2_sda_pf0 {
    pinmux = <(((((('F') - 'A') * 0x10 + (0))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2c3_sda_pc9: i2c3_sda_pc9 {
    pinmux = <(((((('C') - 'A') * 0x10 + (9))) << 8) | (0x4))>;
    bias-pull-up;
    drive-open-drain;
   };
   i2s2_ck_pb10: i2s2_ck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pb13: i2s2_ck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s2_ck_pd3: i2s2_ck_pd3 {
    pinmux = <(((((('D') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   i2s3_ck_pb3: i2s3_ck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   i2s3_ck_pc10: i2s3_ck_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   i2s2_sd_pb15: i2s2_sd_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
   };
   i2s2_sd_pc3: i2s2_sd_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
   };
   i2s3_sd_pb5: i2s3_sd_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x6))>;
   };
   i2s3_sd_pc12: i2s3_sd_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x6))>;
   };
   i2s3_sd_pd6: i2s3_sd_pd6 {
    pinmux = <(((((('D') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
   };
   i2s2_ws_pb9: i2s2_ws_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
   };
   i2s2_ws_pb12: i2s2_ws_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
   };
   i2s3_ws_pa4: i2s3_ws_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
   };
   i2s3_ws_pa15: i2s3_ws_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x6))>;
   };
   spi1_miso_pa6: spi1_miso_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_miso_pb4: spi1_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_miso_pb14: spi2_miso_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_miso_pc2: spi2_miso_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi3_miso_pb4: spi3_miso_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi3_miso_pc11: spi3_miso_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi4_miso_pe5: spi4_miso_pe5 {
    pinmux = <(((((('E') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi4_miso_pe13: spi4_miso_pe13 {
    pinmux = <(((((('E') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi5_miso_pf8: spi5_miso_pf8 {
    pinmux = <(((((('F') - 'A') * 0x10 + (8))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi6_miso_pg12: spi6_miso_pg12 {
    pinmux = <(((((('G') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pa7: spi1_mosi_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_mosi_pb5: spi1_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pb15: spi2_mosi_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi2_mosi_pc3: spi2_mosi_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi3_mosi_pb5: spi3_mosi_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi3_mosi_pc12: spi3_mosi_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x6))>;
    bias-pull-down;
   };
   spi3_mosi_pd6: spi3_mosi_pd6 {
    pinmux = <(((((('D') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi4_mosi_pe6: spi4_mosi_pe6 {
    pinmux = <(((((('E') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi4_mosi_pe14: spi4_mosi_pe14 {
    pinmux = <(((((('E') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi5_mosi_pf9: spi5_mosi_pf9 {
    pinmux = <(((((('F') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi5_mosi_pf11: spi5_mosi_pf11 {
    pinmux = <(((((('F') - 'A') * 0x10 + (11))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi6_mosi_pg14: spi6_mosi_pg14 {
    pinmux = <(((((('G') - 'A') * 0x10 + (14))) << 8) | (0x5))>;
    bias-pull-down;
   };
   spi1_nss_pa4: spi1_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_nss_pa15: spi1_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pb9: spi2_nss_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi2_nss_pb12: spi2_nss_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi3_nss_pa4: spi3_nss_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0x6))>;
    bias-pull-up;
   };
   spi3_nss_pa15: spi3_nss_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x6))>;
    bias-pull-up;
   };
   spi4_nss_pe4: spi4_nss_pe4 {
    pinmux = <(((((('E') - 'A') * 0x10 + (4))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi4_nss_pe11: spi4_nss_pe11 {
    pinmux = <(((((('E') - 'A') * 0x10 + (11))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi5_nss_pf6: spi5_nss_pf6 {
    pinmux = <(((((('F') - 'A') * 0x10 + (6))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi6_nss_pg8: spi6_nss_pg8 {
    pinmux = <(((((('G') - 'A') * 0x10 + (8))) << 8) | (0x5))>;
    bias-pull-up;
   };
   spi1_sck_pa5: spi1_sck_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi1_sck_pb3: spi1_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb10: spi2_sck_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pb13: spi2_sck_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi2_sck_pd3: spi2_sck_pd3 {
    pinmux = <(((((('D') - 'A') * 0x10 + (3))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi3_sck_pb3: spi3_sck_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   spi3_sck_pc10: spi3_sck_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x6))>;
    slew-rate = "very-high-speed";
   };
   spi4_sck_pe2: spi4_sck_pe2 {
    pinmux = <(((((('E') - 'A') * 0x10 + (2))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi4_sck_pe12: spi4_sck_pe12 {
    pinmux = <(((((('E') - 'A') * 0x10 + (12))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi5_sck_pf7: spi5_sck_pf7 {
    pinmux = <(((((('F') - 'A') * 0x10 + (7))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   spi6_sck_pg13: spi6_sck_pg13 {
    pinmux = <(((((('G') - 'A') * 0x10 + (13))) << 8) | (0x5))>;
    slew-rate = "very-high-speed";
   };
   tim10_ch1_pb8: tim10_ch1_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x3))>;
   };
   tim10_ch1_pf6: tim10_ch1_pf6 {
    pinmux = <(((((('F') - 'A') * 0x10 + (6))) << 8) | (0x3))>;
   };
   tim1_ch1n_pa7: tim1_ch1n_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x1))>;
   };
   tim1_ch1_pa8: tim1_ch1_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0x1))>;
   };
   tim1_ch2_pa9: tim1_ch2_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
   };
   tim1_ch3_pa10: tim1_ch3_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim1_ch4_pa11: tim1_ch4_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim1_ch2n_pb0: tim1_ch2n_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
   };
   tim1_ch3n_pb1: tim1_ch3n_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
   };
   tim11_ch1_pb9: tim11_ch1_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x3))>;
   };
   tim1_ch1n_pb13: tim1_ch1n_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x1))>;
   };
   tim1_ch2n_pb14: tim1_ch2n_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x1))>;
   };
   tim1_ch3n_pb15: tim1_ch3n_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim1_ch1n_pe8: tim1_ch1n_pe8 {
    pinmux = <(((((('E') - 'A') * 0x10 + (8))) << 8) | (0x1))>;
   };
   tim1_ch1_pe9: tim1_ch1_pe9 {
    pinmux = <(((((('E') - 'A') * 0x10 + (9))) << 8) | (0x1))>;
   };
   tim1_ch2n_pe10: tim1_ch2n_pe10 {
    pinmux = <(((((('E') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim1_ch2_pe11: tim1_ch2_pe11 {
    pinmux = <(((((('E') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim1_ch3n_pe12: tim1_ch3n_pe12 {
    pinmux = <(((((('E') - 'A') * 0x10 + (12))) << 8) | (0x1))>;
   };
   tim1_ch3_pe13: tim1_ch3_pe13 {
    pinmux = <(((((('E') - 'A') * 0x10 + (13))) << 8) | (0x1))>;
   };
   tim1_ch4_pe14: tim1_ch4_pe14 {
    pinmux = <(((((('E') - 'A') * 0x10 + (14))) << 8) | (0x1))>;
   };
   tim11_ch1_pf7: tim11_ch1_pf7 {
    pinmux = <(((((('F') - 'A') * 0x10 + (7))) << 8) | (0x3))>;
   };
   tim2_ch1_pa0: tim2_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x1))>;
   };
   tim2_ch2_pa1: tim2_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x1))>;
   };
   tim2_ch3_pa2: tim2_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x1))>;
   };
   tim2_ch4_pa3: tim2_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch1_pa5: tim2_ch1_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x1))>;
   };
   tim2_ch1_pa15: tim2_ch1_pa15 {
    pinmux = <(((((('A') - 'A') * 0x10 + (15))) << 8) | (0x1))>;
   };
   tim2_ch2_pb3: tim2_ch2_pb3 {
    pinmux = <(((((('B') - 'A') * 0x10 + (3))) << 8) | (0x1))>;
   };
   tim2_ch3_pb10: tim2_ch3_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x1))>;
   };
   tim2_ch4_pb11: tim2_ch4_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x1))>;
   };
   tim12_ch1_pb14: tim12_ch1_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x9))>;
   };
   tim12_ch2_pb15: tim12_ch2_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x9))>;
   };
   tim13_ch1_pa6: tim13_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x9))>;
   };
   tim3_ch1_pa6: tim3_ch1_pa6 {
    pinmux = <(((((('A') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim3_ch2_pa7: tim3_ch2_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim3_ch3_pb0: tim3_ch3_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim3_ch4_pb1: tim3_ch4_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim3_ch1_pb4: tim3_ch1_pb4 {
    pinmux = <(((((('B') - 'A') * 0x10 + (4))) << 8) | (0x2))>;
   };
   tim3_ch2_pb5: tim3_ch2_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0x2))>;
   };
   tim3_ch1_pc6: tim3_ch1_pc6 {
    pinmux = <(((((('C') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim3_ch2_pc7: tim3_ch2_pc7 {
    pinmux = <(((((('C') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim3_ch3_pc8: tim3_ch3_pc8 {
    pinmux = <(((((('C') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim3_ch4_pc9: tim3_ch4_pc9 {
    pinmux = <(((((('C') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   tim13_ch1_pf8: tim13_ch1_pf8 {
    pinmux = <(((((('F') - 'A') * 0x10 + (8))) << 8) | (0x9))>;
   };
   tim14_ch1_pa7: tim14_ch1_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x9))>;
   };
   tim4_ch1_pb6: tim4_ch1_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x2))>;
   };
   tim4_ch2_pb7: tim4_ch2_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x2))>;
   };
   tim4_ch3_pb8: tim4_ch3_pb8 {
    pinmux = <(((((('B') - 'A') * 0x10 + (8))) << 8) | (0x2))>;
   };
   tim4_ch4_pb9: tim4_ch4_pb9 {
    pinmux = <(((((('B') - 'A') * 0x10 + (9))) << 8) | (0x2))>;
   };
   tim4_ch1_pd12: tim4_ch1_pd12 {
    pinmux = <(((((('D') - 'A') * 0x10 + (12))) << 8) | (0x2))>;
   };
   tim4_ch2_pd13: tim4_ch2_pd13 {
    pinmux = <(((((('D') - 'A') * 0x10 + (13))) << 8) | (0x2))>;
   };
   tim4_ch3_pd14: tim4_ch3_pd14 {
    pinmux = <(((((('D') - 'A') * 0x10 + (14))) << 8) | (0x2))>;
   };
   tim4_ch4_pd15: tim4_ch4_pd15 {
    pinmux = <(((((('D') - 'A') * 0x10 + (15))) << 8) | (0x2))>;
   };
   tim14_ch1_pf9: tim14_ch1_pf9 {
    pinmux = <(((((('F') - 'A') * 0x10 + (9))) << 8) | (0x9))>;
   };
   tim5_ch1_pa0: tim5_ch1_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x2))>;
   };
   tim5_ch2_pa1: tim5_ch2_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x2))>;
   };
   tim5_ch3_pa2: tim5_ch3_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x2))>;
   };
   tim5_ch4_pa3: tim5_ch4_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x2))>;
   };
   tim8_ch1n_pa5: tim8_ch1n_pa5 {
    pinmux = <(((((('A') - 'A') * 0x10 + (5))) << 8) | (0x3))>;
   };
   tim8_ch1n_pa7: tim8_ch1n_pa7 {
    pinmux = <(((((('A') - 'A') * 0x10 + (7))) << 8) | (0x3))>;
   };
   tim8_ch2n_pb0: tim8_ch2n_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0x3))>;
   };
   tim8_ch3n_pb1: tim8_ch3n_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0x3))>;
   };
   tim8_ch2n_pb14: tim8_ch2n_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x3))>;
   };
   tim8_ch3n_pb15: tim8_ch3n_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0x3))>;
   };
   tim8_ch1_pc6: tim8_ch1_pc6 {
    pinmux = <(((((('C') - 'A') * 0x10 + (6))) << 8) | (0x3))>;
   };
   tim8_ch2_pc7: tim8_ch2_pc7 {
    pinmux = <(((((('C') - 'A') * 0x10 + (7))) << 8) | (0x3))>;
   };
   tim8_ch3_pc8: tim8_ch3_pc8 {
    pinmux = <(((((('C') - 'A') * 0x10 + (8))) << 8) | (0x3))>;
   };
   tim8_ch4_pc9: tim8_ch4_pc9 {
    pinmux = <(((((('C') - 'A') * 0x10 + (9))) << 8) | (0x3))>;
   };
   tim9_ch1_pa2: tim9_ch1_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x3))>;
   };
   tim9_ch2_pa3: tim9_ch2_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x3))>;
   };
   tim9_ch1_pe5: tim9_ch1_pe5 {
    pinmux = <(((((('E') - 'A') * 0x10 + (5))) << 8) | (0x3))>;
   };
   tim9_ch2_pe6: tim9_ch2_pe6 {
    pinmux = <(((((('E') - 'A') * 0x10 + (6))) << 8) | (0x3))>;
   };
   usart1_cts_pa11: usart1_cts_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_cts_pa0: usart2_cts_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_cts_pd3: usart2_cts_pd3 {
    pinmux = <(((((('D') - 'A') * 0x10 + (3))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_cts_pb13: usart3_cts_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_cts_pd11: usart3_cts_pd11 {
    pinmux = <(((((('D') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart6_cts_pg13: usart6_cts_pg13 {
    pinmux = <(((((('G') - 'A') * 0x10 + (13))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart6_cts_pg15: usart6_cts_pg15 {
    pinmux = <(((((('G') - 'A') * 0x10 + (15))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rts_pa12: usart1_rts_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_rts_pa1: usart2_rts_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart2_rts_pd4: usart2_rts_pd4 {
    pinmux = <(((((('D') - 'A') * 0x10 + (4))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pb14: usart3_rts_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart3_rts_pd12: usart3_rts_pd12 {
    pinmux = <(((((('D') - 'A') * 0x10 + (12))) << 8) | (0x7))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart6_rts_pg8: usart6_rts_pg8 {
    pinmux = <(((((('G') - 'A') * 0x10 + (8))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart6_rts_pg12: usart6_rts_pg12 {
    pinmux = <(((((('G') - 'A') * 0x10 + (12))) << 8) | (0x8))>;
    bias-pull-up;
    drive-open-drain;
   };
   usart1_rx_pa10: usart1_rx_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
   };
   usart1_rx_pb7: usart1_rx_pb7 {
    pinmux = <(((((('B') - 'A') * 0x10 + (7))) << 8) | (0x7))>;
   };
   usart2_rx_pa3: usart2_rx_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0x7))>;
   };
   usart2_rx_pd6: usart2_rx_pd6 {
    pinmux = <(((((('D') - 'A') * 0x10 + (6))) << 8) | (0x7))>;
   };
   usart3_rx_pb11: usart3_rx_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
   };
   usart3_rx_pc11: usart3_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x7))>;
   };
   usart3_rx_pd9: usart3_rx_pd9 {
    pinmux = <(((((('D') - 'A') * 0x10 + (9))) << 8) | (0x7))>;
   };
   uart4_rx_pa1: uart4_rx_pa1 {
    pinmux = <(((((('A') - 'A') * 0x10 + (1))) << 8) | (0x8))>;
   };
   uart4_rx_pc11: uart4_rx_pc11 {
    pinmux = <(((((('C') - 'A') * 0x10 + (11))) << 8) | (0x8))>;
   };
   uart5_rx_pd2: uart5_rx_pd2 {
    pinmux = <(((((('D') - 'A') * 0x10 + (2))) << 8) | (0x8))>;
   };
   usart6_rx_pc7: usart6_rx_pc7 {
    pinmux = <(((((('C') - 'A') * 0x10 + (7))) << 8) | (0x8))>;
   };
   usart6_rx_pg9: usart6_rx_pg9 {
    pinmux = <(((((('G') - 'A') * 0x10 + (9))) << 8) | (0x8))>;
   };
   uart7_rx_pe7: uart7_rx_pe7 {
    pinmux = <(((((('E') - 'A') * 0x10 + (7))) << 8) | (0x8))>;
   };
   uart7_rx_pf6: uart7_rx_pf6 {
    pinmux = <(((((('F') - 'A') * 0x10 + (6))) << 8) | (0x8))>;
   };
   uart8_rx_pe0: uart8_rx_pe0 {
    pinmux = <(((((('E') - 'A') * 0x10 + (0))) << 8) | (0x8))>;
   };
   usart1_tx_pa9: usart1_tx_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart1_tx_pb6: usart1_tx_pb6 {
    pinmux = <(((((('B') - 'A') * 0x10 + (6))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart2_tx_pa2: usart2_tx_pa2 {
    pinmux = <(((((('A') - 'A') * 0x10 + (2))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart2_tx_pd5: usart2_tx_pd5 {
    pinmux = <(((((('D') - 'A') * 0x10 + (5))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart3_tx_pb10: usart3_tx_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart3_tx_pc10: usart3_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x7))>;
    bias-pull-up;
   };
   usart3_tx_pd8: usart3_tx_pd8 {
    pinmux = <(((((('D') - 'A') * 0x10 + (8))) << 8) | (0x7))>;
    bias-pull-up;
   };
   uart4_tx_pa0: uart4_tx_pa0 {
    pinmux = <(((((('A') - 'A') * 0x10 + (0))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart4_tx_pc10: uart4_tx_pc10 {
    pinmux = <(((((('C') - 'A') * 0x10 + (10))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart5_tx_pc12: uart5_tx_pc12 {
    pinmux = <(((((('C') - 'A') * 0x10 + (12))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usart6_tx_pc6: usart6_tx_pc6 {
    pinmux = <(((((('C') - 'A') * 0x10 + (6))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usart6_tx_pg14: usart6_tx_pg14 {
    pinmux = <(((((('G') - 'A') * 0x10 + (14))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart7_tx_pe8: uart7_tx_pe8 {
    pinmux = <(((((('E') - 'A') * 0x10 + (8))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart7_tx_pf7: uart7_tx_pf7 {
    pinmux = <(((((('F') - 'A') * 0x10 + (7))) << 8) | (0x8))>;
    bias-pull-up;
   };
   uart8_tx_pe1: uart8_tx_pe1 {
    pinmux = <(((((('E') - 'A') * 0x10 + (1))) << 8) | (0x8))>;
    bias-pull-up;
   };
   usb_otg_fs_sof_pa8: usb_otg_fs_sof_pa8 {
    pinmux = <(((((('A') - 'A') * 0x10 + (8))) << 8) | (0xa))>;
   };
   usb_otg_fs_vbus_pa9: usb_otg_fs_vbus_pa9 {
    pinmux = <(((((('A') - 'A') * 0x10 + (9))) << 8) | (0x10))>;
   };
   usb_otg_fs_id_pa10: usb_otg_fs_id_pa10 {
    pinmux = <(((((('A') - 'A') * 0x10 + (10))) << 8) | (0xa))>;
   };
   usb_otg_fs_dm_pa11: usb_otg_fs_dm_pa11 {
    pinmux = <(((((('A') - 'A') * 0x10 + (11))) << 8) | (0xa))>;
   };
   usb_otg_fs_dp_pa12: usb_otg_fs_dp_pa12 {
    pinmux = <(((((('A') - 'A') * 0x10 + (12))) << 8) | (0xa))>;
   };
   usb_otg_hs_sof_pa4: usb_otg_hs_sof_pa4 {
    pinmux = <(((((('A') - 'A') * 0x10 + (4))) << 8) | (0xc))>;
   };
   usb_otg_hs_id_pb12: usb_otg_hs_id_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0xc))>;
   };
   usb_otg_hs_vbus_pb13: usb_otg_hs_vbus_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0x10))>;
   };
   usb_otg_hs_dm_pb14: usb_otg_hs_dm_pb14 {
    pinmux = <(((((('B') - 'A') * 0x10 + (14))) << 8) | (0xc))>;
   };
   usb_otg_hs_dp_pb15: usb_otg_hs_dp_pb15 {
    pinmux = <(((((('B') - 'A') * 0x10 + (15))) << 8) | (0xc))>;
   };
   usb_otg_hs_ulpi_d0_pa3: usb_otg_hs_ulpi_d0_pa3 {
    pinmux = <(((((('A') - 'A') * 0x10 + (3))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d1_pb0: usb_otg_hs_ulpi_d1_pb0 {
    pinmux = <(((((('B') - 'A') * 0x10 + (0))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d2_pb1: usb_otg_hs_ulpi_d2_pb1 {
    pinmux = <(((((('B') - 'A') * 0x10 + (1))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d7_pb5: usb_otg_hs_ulpi_d7_pb5 {
    pinmux = <(((((('B') - 'A') * 0x10 + (5))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d3_pb10: usb_otg_hs_ulpi_d3_pb10 {
    pinmux = <(((((('B') - 'A') * 0x10 + (10))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d4_pb11: usb_otg_hs_ulpi_d4_pb11 {
    pinmux = <(((((('B') - 'A') * 0x10 + (11))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d5_pb12: usb_otg_hs_ulpi_d5_pb12 {
    pinmux = <(((((('B') - 'A') * 0x10 + (12))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_d6_pb13: usb_otg_hs_ulpi_d6_pb13 {
    pinmux = <(((((('B') - 'A') * 0x10 + (13))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_stp_pc0: usb_otg_hs_ulpi_stp_pc0 {
    pinmux = <(((((('C') - 'A') * 0x10 + (0))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_dir_pc2: usb_otg_hs_ulpi_dir_pc2 {
    pinmux = <(((((('C') - 'A') * 0x10 + (2))) << 8) | (0xa))>;
   };
   usb_otg_hs_ulpi_nxt_pc3: usb_otg_hs_ulpi_nxt_pc3 {
    pinmux = <(((((('C') - 'A') * 0x10 + (3))) << 8) | (0xa))>;
   };
  };
 };
};
/ {
 model = "STMicroelectronics STM32F429I_DISC1 board";
 compatible = "st,stm32f4discovery";
 chosen {
  zephyr,console = &usart1;
  zephyr,shell-uart = &usart1;
  zephyr,sram = &sram0;
  zephyr,flash = &flash0;
  zephyr,ccm = &ccm0;
 };
 leds {
  compatible = "gpio-leds";
  orange_led_3: led_3 {
   gpios = <&gpiog 13 (0 << 0)>;
   label = "User LD3";
  };
  green_led_4: led_4 {
   gpios = <&gpiog 14 (0 << 0)>;
   label = "User LD4";
  };
 };
 gpio_keys {
  compatible = "gpio-keys";
  user_button: button {
   label = "User";
   gpios = <&gpioa 0 (1 << 0)>;
  };
 };
 aliases {
  led0 = &green_led_4;
  sw0 = &user_button;
 };
};
&usart1 {
 pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
 current-speed = <115200>;
 status = "okay";
};
&usart2 {
 pinctrl-0 = <&usart2_tx_pa2 &usart2_rx_pa3>;
 current-speed = <115200>;
 status = "okay";
};
&rtc {
 status = "okay";
};
&i2c1 {
 pinctrl-0 = <&i2c1_scl_pb8 &i2c1_sda_pb9>;
 status = "okay";
 clock-frequency = <400000>;
};
&i2c2 {
 pinctrl-0 = <&i2c2_scl_pb10 &i2c2_sda_pb11>;
 status = "okay";
 clock-frequency = <400000>;
};
&i2c3 {
 pinctrl-0 = <&i2c3_scl_pa8 &i2c3_sda_pc9>;
 status = "okay";
 clock-frequency = <400000>;
};
&spi5 {
 pinctrl-0 = <&spi5_nss_pf6 &spi5_sck_pf7
       &spi5_miso_pf8 &spi5_mosi_pf9>;
 status = "okay";
 cs-gpios = <&gpioc 2 (1 << 0)>;
 ili9340@0 {
  compatible = "ilitek,ili9340";
  label = "DISPLAY";
  spi-max-frequency = <15151515>;
  reg = <0>;
  cmd-data-gpios = <&gpiod 13 (1 << 0)>;
 };
};
